var AdminJS = (function (React, reactRedux, reactRouterDom, styled, reactI18next, i18n, DesignSystem, reactRouter, axios, flat$1, redux, require$$4, Select, Select$1) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	function _interopNamespace(e) {
		if (e && e.__esModule) return e;
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () {
							return e[k];
						}
					});
				}
			});
		}
		n['default'] = e;
		return Object.freeze(n);
	}

	var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
	var reactRedux__default = /*#__PURE__*/_interopDefaultLegacy(reactRedux);
	var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
	var i18n__default = /*#__PURE__*/_interopDefaultLegacy(i18n);
	var DesignSystem__namespace = /*#__PURE__*/_interopNamespace(DesignSystem);
	var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
	var redux__default = /*#__PURE__*/_interopDefaultLegacy(redux);
	var require$$4__default = /*#__PURE__*/_interopDefaultLegacy(require$$4);
	var Select__default = /*#__PURE__*/_interopDefaultLegacy(Select);
	var Select__default$1 = /*#__PURE__*/_interopDefaultLegacy(Select$1);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var regenerator = runtime_1;

	let globalAny = {};

	try {
	  globalAny = window;
	} catch (error) {
	  if (error.message !== 'window is not defined') {
	    throw error;
	  }
	}
	/**
	 * Base Params for a any function
	 * @alias ActionParams
	 * @memberof ViewHelpers
	 */


	const runDate = new Date();
	/**
	 * Collection of helper methods available in the views
	 */

	class ViewHelpers {
	  constructor({
	    options
	  } = {}) {
	    let opts = ViewHelpers.getPaths(options);
	    opts = opts || {
	      rootPath: '/admin'
	    }; // when ViewHelpers are used on the frontend, paths are taken from global Redux State

	    this.options = opts;
	  }

	  static getPaths(options) {
	    var _globalAny$REDUX_STAT;

	    return options || ((_globalAny$REDUX_STAT = globalAny.REDUX_STATE) === null || _globalAny$REDUX_STAT === void 0 ? void 0 : _globalAny$REDUX_STAT.paths);
	  }
	  /**
	   * To each related path adds rootPath passed by the user, as well as a query string
	   * @private
	   * @param  {Array<string>} [paths]      list of parts of the url
	   * @return {string}       path
	   * @return {query}        [search=''] query string which can be fetch
	   *                                    from `location.search`
	   */


	  urlBuilder(paths = [], search = '') {
	    const separator = '/';
	    const replace = new RegExp(`${separator}{1,}`, 'g');
	    let {
	      rootPath
	    } = this.options;

	    if (!rootPath.startsWith(separator)) {
	      rootPath = `${separator}${rootPath}`;
	    }

	    const parts = [rootPath, ...paths];
	    return `${parts.join(separator).replace(replace, separator)}${search}`;
	  }
	  /**
	   * Returns login URL
	   * @return {string}
	   */


	  loginUrl() {
	    return this.options.loginPath;
	  }
	  /**
	   * Returns logout URL
	   * @return {string}
	   */


	  logoutUrl() {
	    return this.options.logoutPath;
	  }
	  /**
	   * Returns URL for the dashboard
	   * @return {string}
	   */


	  dashboardUrl() {
	    return this.options.rootPath;
	  }
	  /**
	   * Returns URL for given page name
	   * @param {string} pageName       page name which is a unique key specified in
	   *                                {@link AdminJSOptions}
	   * @return {string}
	   */


	  pageUrl(pageName) {
	    return this.urlBuilder(['pages', pageName]);
	  }
	  /**
	   * Returns url for a `edit` action in given Resource. Uses {@link recordActionUrl}
	   *
	   * @param {string} resourceId  id to the resource
	   * @param {string} recordId    id to the record
	   * @param {string} [search]        optional query string
	   */


	  editUrl(resourceId, recordId, search) {
	    return this.recordActionUrl({
	      resourceId,
	      recordId,
	      actionName: 'edit',
	      search
	    });
	  }
	  /**
	   * Returns url for a `show` action in given Resource. Uses {@link recordActionUrl}
	   *
	   * @param {string} resourceId  id to the resource
	   * @param {string} recordId    id to the record
	   * @param {string} [search]        optional query string
	   */


	  showUrl(resourceId, recordId, search) {
	    return this.recordActionUrl({
	      resourceId,
	      recordId,
	      actionName: 'show',
	      search
	    });
	  }
	  /**
	   * Returns url for a `delete` action in given Resource. Uses {@link recordActionUrl}
	   *
	   * @param {string} resourceId  id to the resource
	   * @param {string} recordId    id to the record
	   * @param {string} [search]        optional query string
	   */


	  deleteUrl(resourceId, recordId, search) {
	    return this.recordActionUrl({
	      resourceId,
	      recordId,
	      actionName: 'delete',
	      search
	    });
	  }
	  /**
	   * Returns url for a `new` action in given Resource. Uses {@link resourceActionUrl}
	   *
	   * @param {string} resourceId  id to the resource
	   * @param {string} [search]        optional query string
	   */


	  newUrl(resourceId, search) {
	    return this.resourceActionUrl({
	      resourceId,
	      actionName: 'new',
	      search
	    });
	  }
	  /**
	   * Returns url for a `list` action in given Resource. Uses {@link resourceActionUrl}
	   *
	   * @param {string} resourceId  id to the resource
	   * @param {string} [search]        optional query string
	   */


	  listUrl(resourceId, search) {
	    return this.resourceActionUrl({
	      resourceId,
	      actionName: 'list',
	      search
	    });
	  }
	  /**
	   * Returns url for a `bulkDelete` action in given Resource. Uses {@link bulkActionUrl}
	   *
	   * @param {string} resourceId  id to the resource
	   * @param {Array<string>} recordIds   separated by comma records
	   * @param {string} [search]        optional query string
	   */


	  bulkDeleteUrl(resourceId, recordIds, search) {
	    return this.bulkActionUrl({
	      resourceId,
	      recordIds,
	      actionName: 'bulkDelete',
	      search
	    });
	  }
	  /**
	   * Returns resourceAction url
	   *
	   * @param   {ResourceActionParams}  options
	   * @param   {string}  options.resourceId
	   * @param   {string}  options.actionName
	   * @param   {string}  [options.search]        optional query string
	   *
	   * @return  {string}
	   */


	  resourceActionUrl({
	    resourceId,
	    actionName,
	    search
	  }) {
	    return this.urlBuilder(['resources', resourceId, 'actions', actionName], search);
	  }

	  resourceUrl({
	    resourceId,
	    search
	  }) {
	    return this.urlBuilder(['resources', resourceId], search);
	  }
	  /**
	   * Returns recordAction url
	   *
	   * @param   {RecordActionParams}  options
	   * @param   {string}  options.resourceId
	   * @param   {string}  options.recordId
	   * @param   {string}  options.actionName
	   *
	   * @return  {string}
	   */


	  recordActionUrl({
	    resourceId,
	    recordId,
	    actionName,
	    search
	  }) {
	    return this.urlBuilder(['resources', resourceId, 'records', recordId, actionName], search);
	  }
	  /**
	   * Returns bulkAction url
	   *
	   * @param   {BulkActionParams}  options
	   * @param   {string}  options.resourceId
	   * @param   {Array<string>}  [options.recordIds]
	   * @param   {string}  options.actionName
	   *
	   * @return  {string}
	   */


	  bulkActionUrl({
	    resourceId,
	    recordIds,
	    actionName,
	    search
	  }) {
	    const url = this.urlBuilder(['resources', resourceId, 'bulk', actionName]);

	    if (recordIds && recordIds.length) {
	      const query = new URLSearchParams(search);
	      query.set('recordIds', recordIds.join(','));
	      return `${url}?${query.toString()}`;
	    }

	    return `${url}${search || ''}`;
	  }
	  /**
	   * Returns absolute path to a given asset.
	   * @private
	   *
	   * @param  {string} asset
	   * @return {string}
	   */


	  assetPath(asset) {
	    if (this.options.assetsCDN) {
	      const url = new URL(asset, this.options.assetsCDN).href; // adding timestamp to the href invalidates the CDN cache

	      return `${url}?date=${runDate.getTime()}`;
	    }

	    return this.urlBuilder(['frontend', 'assets', asset]);
	  }

	}

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	/**
	 * @private
	 *
	 * @classdesc
	 * Overrides one of the component form AdminJS core when user pass its name to
	 * {@link AdminJS.bundle} method.
	 *
	 * If case of being overridden, component receives additional prop: `OriginalComponent`
	 *
	 * @example
	 * AdminJS.bundle('./path/to/component', 'SidebarFooter')
	 */
	function allowOverride(OriginalComponent, name) {
	  // ssr
	  if (typeof window === 'undefined') {
	    return OriginalComponent;
	  }

	  const WrapperComponent = props => {
	    let globalAny = window;
	    globalAny = window;
	    let Component = OriginalComponent;

	    if (globalAny.AdminJS && globalAny.AdminJS.UserComponents && globalAny.AdminJS.UserComponents[name]) {
	      Component = globalAny.AdminJS.UserComponents[name];
	      return /*#__PURE__*/React__default['default'].createElement(Component, _extends_1({}, props, {
	        OriginalComponent: OriginalComponent
	      }));
	    }

	    return /*#__PURE__*/React__default['default'].createElement(Component, props);
	  };

	  return WrapperComponent;
	}

	const StyledLogo = styled__default['default'](reactRouterDom.Link).withConfig({
	  displayName: "sidebar-branding__StyledLogo",
	  componentId: "sc-13gs4e8-0"
	})(["text-align:center;display:flex;align-content:center;justify-content:center;flex-shrink:0;padding:", " ", " ", ";text-decoration:none;& > h1{text-decoration:none;font-weight:", ";font-size:", ";color:", ";font-size:", ";line-height:", ";}& > img{max-width:170px;}&:hover h1{color:", ";}"], DesignSystem.themeGet('space', 'lg'), DesignSystem.themeGet('space', 'xxl'), DesignSystem.themeGet('space', 'xxl'), DesignSystem.themeGet('fontWeights', 'bolder'), DesignSystem.themeGet('fontWeights', 'bolder'), DesignSystem.themeGet('colors', 'grey80'), DesignSystem.themeGet('fontSizes', 'xl'), DesignSystem.themeGet('lineHeights', 'xl'), DesignSystem.themeGet('colors', 'primary100'));
	const h = new ViewHelpers();

	const SidebarBranding = props => {
	  const {
	    branding
	  } = props;
	  const {
	    logo,
	    companyName
	  } = branding;
	  return /*#__PURE__*/React__default['default'].createElement(StyledLogo, {
	    className: DesignSystem.cssClass('Logo'),
	    to: h.dashboardUrl()
	  }, logo ? /*#__PURE__*/React__default['default'].createElement("img", {
	    src: logo,
	    alt: companyName
	  }) : /*#__PURE__*/React__default['default'].createElement("h1", null, companyName));
	};

	var SidebarBranding$1 = allowOverride(SidebarBranding, 'SidebarBranding');

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	var _arrayReduce = arrayReduce;

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	var _basePropertyOf = basePropertyOf;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 's'
	};

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = _basePropertyOf(deburredLetters);

	var _deburrLetter = deburrLetter;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = _freeGlobal || freeSelf || Function('return this')();

	var _root = root;

	/** Built-in value references. */
	var Symbol$1 = _root.Symbol;

	var _Symbol = Symbol$1;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	var isArray_1 = isArray;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
	}

	var isSymbol_1 = isSymbol;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

	/** Used to compose unicode capture groups. */
	var rsCombo = '[' + rsComboRange + ']';

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString_1(string);
	  return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
	}

	var deburr_1 = deburr;

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	var _asciiWords = asciiWords;

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	var _hasUnicodeWord = hasUnicodeWord;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange$1 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
	    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo$1 = '[' + rsComboRange$1 + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo$1 + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	  rsUpper + '+' + rsOptContrUpper,
	  rsOrdUpper,
	  rsOrdLower,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	var _unicodeWords = unicodeWords;

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString_1(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	var words_1 = words;

	/** Used to compose unicode capture groups. */
	var rsApos$1 = "['\u2019]";

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos$1, 'g');

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
	  };
	}

	var _createCompounder = createCompounder;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	var _baseSlice = baseSlice;

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : _baseSlice(array, start, end);
	}

	var _castSlice = castSlice;

	/** Used to compose unicode character classes. */
	var rsAstralRange$1 = '\\ud800-\\udfff',
	    rsComboMarksRange$2 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
	    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
	    rsVarRange$1 = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ$1 = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboRange$2 + rsVarRange$1 + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	var _hasUnicode = hasUnicode;

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	var _asciiToArray = asciiToArray;

	/** Used to compose unicode character classes. */
	var rsAstralRange$2 = '\\ud800-\\udfff',
	    rsComboMarksRange$3 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
	    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
	    rsVarRange$2 = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange$2 + ']',
	    rsCombo$2 = '[' + rsComboRange$3 + ']',
	    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
	    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
	    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ$2 = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod$1 = rsModifier$1 + '?',
	    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
	    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
	    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
	    rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	var _unicodeToArray = unicodeToArray;

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	  return _hasUnicode(string)
	    ? _unicodeToArray(string)
	    : _asciiToArray(string);
	}

	var _stringToArray = stringToArray;

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst(methodName) {
	  return function(string) {
	    string = toString_1(string);

	    var strSymbols = _hasUnicode(string)
	      ? _stringToArray(string)
	      : undefined;

	    var chr = strSymbols
	      ? strSymbols[0]
	      : string.charAt(0);

	    var trailing = strSymbols
	      ? _castSlice(strSymbols, 1).join('')
	      : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	var _createCaseFirst = createCaseFirst;

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst = _createCaseFirst('toUpperCase');

	var upperFirst_1 = upperFirst;

	/**
	 * Converts `string` to
	 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.1.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the start cased string.
	 * @example
	 *
	 * _.startCase('--foo-bar--');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('fooBar');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('__FOO_BAR__');
	 * // => 'FOO BAR'
	 */
	var startCase = _createCompounder(function(result, word, index) {
	  return result + (index ? ' ' : '') + upperFirst_1(word);
	});

	var startCase_1 = startCase;

	/**
	 * @memberof TranslateFunctions
	 * @alias TranslateFunction
	 */

	const formatName = name => name.split('.').join('&#46;');

	const translate = (i18n, key, name, resourceId, options) => {
	  const realOptions = (typeof resourceId === 'string' ? options : resourceId) || {};
	  const formattedName = formatName(name);
	  let keys = [`${key}.${formattedName}`];

	  if (resourceId) {
	    keys = [`resources.${resourceId}.${key}.${formattedName}`, ...keys];
	  }

	  if (i18n.exists(keys)) {
	    return i18n.t(keys, realOptions);
	  }

	  return realOptions.defaultValue ?? startCase_1(name);
	};

	const createFunctions = i18n => {
	  const translateAction = (actionName, resourceId, options) => translate(i18n, 'actions', actionName, resourceId, options);

	  const translateButton = (buttonLabel, resourceId, options) => translate(i18n, 'buttons', buttonLabel, resourceId, options);

	  const translateLabel = (label, resourceId, options) => translate(i18n, 'labels', label, resourceId, options);

	  const translateProperty = (propertyName, resourceId, options) => translate(i18n, 'properties', propertyName, resourceId, options);

	  const translateMessage = (messageName, resourceId, options) => translate(i18n, 'messages', messageName, resourceId, options);

	  return {
	    translateAction,
	    ta: translateAction,
	    translateButton,
	    tb: translateButton,
	    translateLabel,
	    tl: translateLabel,
	    translateProperty,
	    tp: translateProperty,
	    translateMessage,
	    tm: translateMessage,
	    t: i18n.t,
	    translate: i18n.t
	  };
	};

	/**
	 * Extends {@link TranslateFunctions}. Apart from that it also returns all the properties
	 * defined below.
	 *
	 * ```javascript
	 * import { useTranslation } from 'adminjs'
	 *
	 * const MyComponent = () => {
	 *   const { translateButton } = useTranslation()
	 *
	 *   return (
	 *     <Box>
	 *       <Button variant="primary" onClick={...}>{translateButton('save')}<Button>
	 *     </Box>
	 *   )
	 * }
	 * ```
	 *
	 * @memberof useTranslation
	 * @alias UseTranslationResponse
	 *
	 * @property {TranslateFunction} ... All functions defined in {@link TranslateFunctions}
	 */

	/**
	 * @classdesc
	 * Extends the useTranslation hook from react-i18next library.
	 *
	 * Returns all the {@link TranslateFunctions} + methods returned by the original
	 * useTranslation method from react-i18next like: `i18n` instance and `ready` flag.
	 *
	 * @class
	 * @subcategory Hooks
	 * @bundle
	 * @hideconstructor
	 * @returns {UseTranslationResponse}
	 */
	const useTranslation = () => {
	  // eslint-disable-next-line no-shadow
	  const {
	    i18n,
	    ...rest
	  } = reactI18next.useTranslation();
	  const translateFunctions = createFunctions(i18n);
	  return { ...rest,
	    i18n,
	    ...translateFunctions
	  };
	};

	const h$1 = new ViewHelpers();

	const SidebarPages = props => {
	  const {
	    pages
	  } = props;
	  const {
	    translateLabel
	  } = useTranslation();
	  const location = reactRouter.useLocation();
	  const history = reactRouter.useHistory();

	  if (!pages || !pages.length) {
	    return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null);
	  }

	  const isActive = page => !!location.pathname.match(`/pages/${page.name}`);

	  const elements = pages.map(page => ({
	    id: page.name,
	    label: page.name,
	    isSelected: isActive(page),
	    icon: page.icon,
	    href: h$1.pageUrl(page.name),
	    onClick: (event, element) => {
	      event.preventDefault();

	      if (element.href) {
	        history.push(element.href, {
	          previousPage: window.location.href
	        });
	      }
	    }
	  }));
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Navigation, {
	    label: translateLabel('pages'),
	    elements: elements
	  });
	};

	const SidebarFooter = () => /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	  mt: "lg"
	}, /*#__PURE__*/React__default['default'].createElement(DesignSystem.SoftwareBrothers, null));

	var SidebarFooter$1 = allowOverride(SidebarFooter, 'SidebarFooter');

	let globalAny$1 = {};

	try {
	  globalAny$1 = window;
	} catch (error) {
	  if (error.message !== 'window is not defined') {
	    throw error;
	  } else {
	    globalAny$1 = {
	      isOnServer: true
	    };
	  }
	}
	/**
	 * Type of an [axios request]{@link https://github.com/axios/axios/blob/master/index.d.ts#L43}
	 *
	 * @typedef {object} AxiosRequestConfig
	 * @alias AxiosRequestConfig
	 * @memberof ApiClient
	 * @see https://github.com/axios/axios/blob/master/index.d.ts#L43
	 */


	const checkResponse = response => {
	  if (globalAny$1.isOnServer) {
	    return;
	  }

	  const loginUrl = [globalAny$1.location.origin, globalAny$1.REDUX_STATE.paths.loginPath].join(''); // if response has redirect to loginUrl

	  if (response.request.responseURL && response.request.responseURL.match(loginUrl)) {
	    // eslint-disable-next-line no-undef
	    alert('Your session expired. You will be redirected to login screen');
	    globalAny$1.location.assign(loginUrl);
	  }
	};
	/**
	 * Extends {@link AxiosRequestConfig}
	 *
	 * @alias ActionAPIParams
	 * @memberof ApiClient
	 * @property {any}   ...    any property supported by {@link AxiosRequestConfig}
	 */


	/**
	 * Client which access the admin API.
	 * Use it to fetch data from auto generated AdminJS API.
	 *
	 * In the backend it uses [axios](https://github.com/axios/axios) client
	 * library.
	 *
	 * Usage:
	 * ```javascript
	 * import { ApiClient } from 'adminjs'
	 *
	 * const api = new ApiClient()
	 * // fetching all records
	 * api.resourceAction({ resourceId: 'Comments', actionName: 'list' }).then(results => {...})
	 * ```
	 * @see https://github.com/axios/axios
	 * @hideconstructor
	 */
	class ApiClient {
	  constructor() {
	    this.baseURL = ApiClient.getBaseUrl();
	    this.client = axios__default['default'].create({
	      baseURL: this.baseURL
	    });
	  }

	  static getBaseUrl() {
	    var _globalAny$REDUX_STAT;

	    if (globalAny$1.isOnServer) {
	      return '';
	    }

	    return [globalAny$1.location.origin, (_globalAny$REDUX_STAT = globalAny$1.REDUX_STATE) === null || _globalAny$REDUX_STAT === void 0 ? void 0 : _globalAny$REDUX_STAT.paths.rootPath].join('');
	  }
	  /**
	   * Search by query string for records in a given resource.
	   *
	   * @param   {Object}  options
	   * @param   {String}  options.resourceId  id of a {@link ResourceJSON}
	   * @param   {String}  options.query       query string
	   *
	   * @return  {Promise<SearchResponse>}
	   */


	  async searchRecords({
	    resourceId,
	    query
	  }) {
	    if (globalAny$1.isOnServer) {
	      return [];
	    }

	    const actionName = 'search';
	    const response = await this.resourceAction({
	      resourceId,
	      actionName,
	      query
	    });
	    checkResponse(response);
	    return response.data.records;
	  }
	  /**
	   * Invokes given resource {@link Action} on the backend.
	   *
	   * @param   {ResourceActionAPIParams}     options
	   * @return  {Promise<ActionResponse>}     response from an {@link Action}
	   */


	  async resourceAction(options) {
	    const {
	      resourceId,
	      actionName,
	      data,
	      query,
	      ...axiosParams
	    } = options;
	    let url = `/api/resources/${resourceId}/actions/${actionName}`;

	    if (query) {
	      const q = encodeURIComponent(query);
	      url = [url, q].join('/');
	    }

	    const response = await this.client.request({
	      url,
	      method: data ? 'POST' : 'GET',
	      ...axiosParams,
	      data
	    });
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes given record {@link Action} on the backend.
	   *
	   * @param   {RecordActionAPIParams} options
	   * @return  {Promise<RecordActionResponse>}            response from an {@link Action}
	   */


	  async recordAction(options) {
	    const {
	      resourceId,
	      recordId,
	      actionName,
	      data,
	      ...axiosParams
	    } = options;
	    const response = await this.client.request({
	      url: `/api/resources/${resourceId}/records/${recordId}/${actionName}`,
	      method: data ? 'POST' : 'GET',
	      ...axiosParams,
	      data
	    });
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes given bulk {@link Action} on the backend.
	   *
	   * @param   {BulkActionAPIParams} options
	   * @return  {Promise<BulkActionResponse>}            response from an {@link Action}
	   */


	  async bulkAction(options) {
	    const {
	      resourceId,
	      recordIds,
	      actionName,
	      data,
	      ...axiosParams
	    } = options;
	    const params = new URLSearchParams();
	    params.set('recordIds', (recordIds || []).join(','));
	    const response = await this.client.request({
	      url: `/api/resources/${resourceId}/bulk/${actionName}`,
	      method: data ? 'POST' : 'GET',
	      ...axiosParams,
	      data,
	      params
	    });
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes dashboard handler.
	   *
	   * @param   {AxiosRequestConfig}       options
	   * @return  {Promise<AxiosResponse<any>>} response from the handler function defined in
	   *                                     {@link AdminJSOptions#dashboard}
	   */


	  async getDashboard(options = {}) {
	    const response = await this.client.get('/api/dashboard', options);
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes handler function of given page and returns its response.
	   *
	   * @param   {GetPageAPIParams}                options
	   * @return  {Promise<AxiosResponse<any>>}     response from the handler of given page
	   *                                            defined in {@link AdminJSOptions#pages}
	   */


	  async getPage(options) {
	    const {
	      pageName,
	      ...axiosParams
	    } = options;
	    const response = await this.client.request({
	      url: `/api/pages/${pageName}`,
	      ...axiosParams
	    });
	    checkResponse(response);
	    return response;
	  }

	}

	const FORM_VALUE_NULL = '__FORM_VALUE_NULL__';
	const FORM_VALUE_EMPTY_OBJECT = '__FORM_VALUE_EMPTY_OBJECT__';
	const FORM_VALUE_EMPTY_ARRAY = '__FORM_VALUE_EMPTY_ARRAY__';

	const isObjectOrArray = value => typeof value === 'object' && value.constructor !== File && !(value instanceof Date);
	/**
	 * Changes RecordJSON that it can be send as a FormData to the backend.
	 *
	 * FormData is required because we are sending files via the wire. But it has limitations.
	 * Namely it can only transport files and strings. That is why we have to convert some
	 * standard types like NULL to constants so they can be property converted back by the backend.
	 * And thus properly handled.
	 *
	 * @private
	 * @param   {RecordJSON}  record
	 * @return  {FormData}
	 */


	function paramsToFormData(params) {
	  const formData = new FormData(); // Assume that params are flatted

	  Object.entries(params).forEach(([key, value]) => {
	    // {@link updateRecord} does not change empty objects "{}" - so in order to prevent having
	    // them changed to "[object Object]" we have to set them to empty strings.
	    if (value === null) {
	      return formData.set(key, FORM_VALUE_NULL);
	    } // File objects has to go through because they are handled by FormData


	    if (isObjectOrArray(value)) {
	      if (Array.isArray(value)) {
	        return formData.set(key, FORM_VALUE_EMPTY_ARRAY);
	      }

	      return formData.set(key, FORM_VALUE_EMPTY_OBJECT);
	    } // Convert Date fields to UTC timezone


	    if (value instanceof Date) {
	      return formData.set(key, value.toISOString());
	    } // Rest goes as a standard value


	    return formData.set(key, value);
	  });
	  return formData;
	}

	const ADD_NOTICE = 'ADD_NOTICE';
	const addNotice = (data = {
	  message: ''
	}) => ({
	  type: ADD_NOTICE,
	  data: {
	    message: data.message,
	    id: Math.random().toString(36).substr(2, 9),
	    type: data.type || 'success',
	    progress: 0
	  }
	});

	/**
	 * @classdesc
	 * Hook which allows you to add notice message to the app.
	 *
	 * ```javascript
	 * import { useNotice, Button } from 'adminjs'
	 *
	 * const myComponent = () => {
	 *   const sendNotice = useNotice()
	 *   render (
	 *     <Button onClick={() => sendNotice({ message: 'I am awesome' })}>I am awesome</Button>
	 *   )
	 * }
	 * ```
	 *
	 * @class
	 * @subcategory Hooks
	 * @bundle
	 * @hideconstructor
	 */
	const useNotice = () => {
	  const dispatch = reactRedux.useDispatch();
	  return notice => dispatch(addNotice(notice));
	};

	/**
	 * Handlers of all [Actions]{@link Action} of type `record` returns record.
	 * Depending on a place and response we have to merge what was returned
	 * to the actual state. It is done in following places:
	 * - {@link useRecord} hook
	 * - {@link RecordInList} component
	 * - {@link RecordAction} component
	 *
	 * @private
	 */
	const mergeRecordResponse = (record, response) => ({ // we start from the response because it can have different recordActions or bulkActions
	  ...(response.record || record),
	  // records has to be reset every time because so that user wont
	  // see old errors which are not relevant anymore
	  errors: response.record.errors,
	  populated: { ...record.populated,
	    ...response.record.populated
	  },
	  params: { ...record.params,
	    ...response.record.params
	  }
	});

	const DELIMITER = '.';

	// this is the regex used to find all existing properties starting with a key
	const propertyKeyRegex = (propertyPath, options) => {
	  const delimiter = new RegExp(`\\${DELIMITER}`, 'g');
	  const escapedDelimiter = `\\${DELIMITER}`; // but for `nested.1.property.0` it will produce `nested(\.|\.\d+\.)1(\.|\.\d+\.)property.0`
	  // and this is intentional because user can give an one index in property path for with deeply
	  // nested arrays

	  const escapedDelimiterOrIndex = `(${escapedDelimiter}|${escapedDelimiter}\\d+${escapedDelimiter})`;
	  const path = options !== null && options !== void 0 && options.includeAllSiblings ? propertyPath.replace(delimiter, escapedDelimiterOrIndex) : propertyPath.replace(delimiter, escapedDelimiter);
	  return new RegExp(`^${path}($|${escapedDelimiter})`, '');
	};

	/**
	 * @load ./select-params.doc.md
	 * @memberof module:flat
	 * @param {FlattenParams} params
	 * @param {string | Array<string>} properties
	 * @param {GetOptions} [options]
	 * @returns {FlattenParams}
	 */
	const selectParams = (params, properties, options) => {
	  const propertyArray = Array.isArray(properties) ? properties : [properties];
	  const selected = propertyArray.filter(propertyPath => !!propertyPath).reduce((globalMemo, propertyPath) => {
	    const regex = propertyKeyRegex(propertyPath, options);
	    const filtered = Object.keys(params) // filter all keys which starts with property path
	    .filter(key => key.match(regex)).reduce((memo, key) => {
	      memo[key] = params[key];
	      return memo;
	    }, {});
	    return { ...globalMemo,
	      ...filtered
	    };
	  }, {});
	  return selected;
	};

	/**
	 * @load ./filter-out-params.doc.md
	 * @memberof module:flat
	 * @param {FlattenParams} params
	 * @param {string | Array<string>} properties
	 * @returns {FlattenParams}
	 */
	const filterOutParams = (params, properties) => {
	  const propertyArray = Array.isArray(properties) ? properties : [properties];
	  return propertyArray.filter(propertyPath => !!propertyPath).reduce((globalFiltered, propertyPath) => {
	    const regex = propertyKeyRegex(propertyPath);
	    return Object.keys(globalFiltered).filter(key => !key.match(regex)).reduce((memo, key) => {
	      memo[key] = params[key];
	      return memo;
	    }, {});
	  }, params);
	};

	/**
	 * @memberof module:flat
	 * @alias PathToPartsOptions
	 */

	/**
	 * @load ./path-to-parts.doc.md
	 * @param   {string}              propertyPath
	 * @param   {PathToPartsOptions}  options
	 * @returns  {PathParts}
	 *
	 * @memberof module:flat
	 * @alias pathToParts
	 */
	const pathToParts = (propertyPath, options = {}) => {
	  let allParts = propertyPath.split('.');

	  if (options.skipArrayIndexes) {
	    // eslint-disable-next-line no-restricted-globals
	    allParts = allParts.filter(part => isNaN(+part));
	  }

	  return allParts.reduce((memo, part) => {
	    if (memo.length) {
	      return [...memo, [memo[memo.length - 1], part].join('.')];
	    }

	    return [part];
	  }, []);
	};

	const isObject = value => {
	  // Node environment
	  if (typeof File === 'undefined') {
	    return typeof value === 'object' && value !== null;
	  } // Window environment


	  return typeof value === 'object' && !(value instanceof File) && value !== null;
	};
	/**
	 * @load ./set.doc.md
	 * @memberof module:flat
	 * @param {FlattenParams} params
	 * @param {string} propertyPath
	 * @param {any} [value]       if not give function will only try to remove old keys
	 * @returns {FlattenParams}
	 */


	const set = (params = {}, propertyPath, value) => {
	  const regex = propertyKeyRegex(propertyPath); // remove all existing keys

	  const paramsCopy = Object.keys(params).filter(key => !key.match(regex)).reduce((memo, key) => {
	    memo[key] = params[key];
	    return memo;
	  }, {});

	  if (typeof value !== 'undefined') {
	    if (isObject(value) && !(value instanceof Date)) {
	      const flattened = flat$1.flatten(value);

	      if (Object.keys(flattened).length) {
	        Object.keys(flattened).forEach(key => {
	          paramsCopy[`${propertyPath}${DELIMITER}${key}`] = flattened[key];
	        });
	      } else if (Array.isArray(value)) {
	        paramsCopy[propertyPath] = [];
	      } else {
	        paramsCopy[propertyPath] = {};
	      }
	    } else {
	      paramsCopy[propertyPath] = value;
	    } // when user gave { "nested.value": "something" } and had "nested" set to `null`, then
	    // nested should be removed


	    const parts = pathToParts(propertyPath).slice(0, -1);

	    if (parts.length) {
	      return Object.keys(paramsCopy).filter(key => !parts.includes(key)).reduce((memo, key) => {
	        memo[key] = paramsCopy[key];
	        return memo;
	      }, {});
	    }
	  }

	  return paramsCopy;
	};

	const TEMP_HOLDING_KEY = 'TEMP_HOLDING_KEY';
	/**
	 * @load ./get.doc.md
	 * @memberof module:flat
	 * @param {FlattenParams}   params      flatten params from which property has to be taken
	 * @param {string}          [propertyPath]  name of the property
	 * @param {GetOptions}      options     options
	 * @returns {any}                       when property key exists directly it returns what is inside,
	 *                                      otherwise it tries to find any nested objects and returns
	 *                                      them
	 */

	const get = (params = {}, propertyPath, options) => {
	  if (!propertyPath) {
	    return flat$1.unflatten(params);
	  } // when object has this key - simply return it
	  // we cannot rely on typeof params[propertyPath !== 'undefined' because params can actually be
	  // undefined and in such case if would pass and function would return [undefined]


	  if (Object.keys(params).find(key => key === propertyPath)) {
	    return params[propertyPath];
	  }

	  const regex = propertyKeyRegex(propertyPath, options);
	  const selectedParams = selectParams(params, propertyPath, options);
	  const nestedProperties = Object.keys(selectedParams).reduce((memo, key, index) => {
	    let newKey = key.replace(regex, `${TEMP_HOLDING_KEY}${DELIMITER}`); // when user wants to take allSiblings we have to fix the indexes so nested items from
	    // different siblings don't overlap
	    //
	    // Example for key `nested.1.el`:
	    //  'nested.0.el.0.value': 'val0.0',
	    //  'nested.0.el.1.value': 'val0.1',
	    //  'nested.1.el.0.value': 'val1',
	    //  'nested.1.el.1.value': 'val2',
	    //
	    // has to be changed to:
	    //  'TEMP_HOLDING_KEY.0.value': 'val0.0',
	    //  'TEMP_HOLDING_KEY.1.value': 'val0.1',
	    //  'TEMP_HOLDING_KEY.2.value': 'val1',
	    //  'TEMP_HOLDING_KEY.3.value': 'val2',

	    if (options !== null && options !== void 0 && options.includeAllSiblings) {
	      newKey = newKey.replace(new RegExp(`${TEMP_HOLDING_KEY}\\${DELIMITER}(\\d*)`), `${TEMP_HOLDING_KEY}${DELIMITER}${index}`);
	    }

	    memo[newKey] = selectedParams[key];
	    return memo;
	  }, {});

	  if (Object.keys(nestedProperties).length) {
	    return flat$1.unflatten(nestedProperties)[TEMP_HOLDING_KEY];
	  }

	  return undefined;
	};

	/**
	 * Merges params together and returns flatten result
	 *
	 * @param {any} params
	 * @param {Array<any>} ...mergeParams
	 * @returns {FlattenParams}
	 * @memberof module:flat
	 */

	const merge = (params = {}, ...mergeParams) => {
	  const flattenParams = flat$1.flatten(params); // reverse because we merge from right

	  return mergeParams.reverse().reduce((globalMemo, mergeParam) => Object.keys(mergeParam).reduce((memo, key) => set(memo, key, mergeParam[key]), globalMemo), flattenParams);
	};

	/**
	 * @load ./remove-path.doc.md
	 * @memberof module:flat
	 * @param {FlattenParams} params
	 * @param {...string} properties
	 * @returns {FlattenParams}
	 */

	const removePath = (params, path) => {
	  // by default simply filter out elements from the object
	  let filtered = filterOutParams(params, path); // reverse means that we iterate from the closes parent

	  const parentPaths = pathToParts(path).reverse(); // but if one of the parent is an array

	  parentPaths.find((parentPath, parentIndex) => {
	    const parent = get(params, parentPath);

	    if (Array.isArray(parent)) {
	      // previous element is stringified index like 'property.1'
	      const previousPaths = parentPaths[parentIndex - 1].split(DELIMITER); // so this is the index: 1

	      const previousPathIndex = previousPaths[previousPaths.length - 1];
	      parent.splice(+previousPathIndex, 1);
	      filtered = set(params, parentPath, parent); // this works just for the firstly found array item, because in case of removing the last one
	      // it leaves `[]` as a value.

	      return true;
	    }

	    return false;
	  });
	  return filtered;
	};

	/**
	 * @module flat
	 * @name flat
	 * @new in version 3.3
	 * @load ./flat.doc.md
	 */
	const flat = {
	  /**
	   * Raw `flatten` function exported from original {@link https://www.npmjs.com/package/flat flat}
	   * package.
	   */
	  flatten: flat$1.flatten,

	  /**
	   * Raw `unflatten` function exported from original {@link https://www.npmjs.com/package/flat flat}
	   * package.
	   */
	  unflatten: flat$1.unflatten,
	  set,
	  get,
	  selectParams,
	  filterOutParams,
	  removePath,
	  DELIMITER,
	  pathToParts,
	  merge
	};

	/**
	 * HOF returning a function which takes a record and returns an updated record.
	 * This way we can pass this to setState in react, which takes old state
	 * (in our case previousRecord) as an argument.
	 *
	 * Function is used when to the {@link OnPropertyChange} callback, user passes
	 * key (property name) and the value (followed by an optional selectedRecord).
	 *
	 * The responsibility of the function is to:
	 * - clear old values under passed key: so when user passes property === `some.key`
	 *   function removes `some.key.1`, `some.key.2` etc
	 * - sets new value under the passed key for primitive types
	 * - in case of objects - it flattens them first and then sets all the resulted values
	 *   under the path provided in the property argument
	 * - it fills value in RecordJSON#populated when selectedRecord is given
	 * - finally it invalidates populated for given property
	 *
	 *
	 * @param {string}      property        property that must be updated, supports nesting
	 *                                      with dots
	 * @param {any}         value           value that must be set, undefined or null if
	 *                                      deleting, will be flattened
	 * @param {RecordJSON}  selectedRecord  if value is reference ID, this must be a record
	 *                                      it's referencing to
	 * @private
	 */
	const updateRecord = (property, value, selectedRecord) => previousRecord => {
	  let populatedModified = false;
	  const populatedCopy = { ...previousRecord.populated
	  };
	  const paramsCopy = flat.set(previousRecord.params, property, value);

	  if (property in populatedCopy) {
	    delete populatedCopy[property];
	    populatedModified = true;
	  }

	  if (selectedRecord) {
	    populatedCopy[property] = selectedRecord;
	    populatedModified = true;
	  }

	  return { ...previousRecord,
	    params: paramsCopy,
	    populated: populatedModified ? populatedCopy : previousRecord.populated
	  };
	};

	const isEntireRecordGiven = (propertyOrRecord, value) => !!(typeof value === 'undefined' // user can pass property and omit value. This makes sense when
	// third argument of the function (selectedRecord) is passed to onChange
	// callback
	&& !(typeof propertyOrRecord === 'string') // we assume that only params has to be given
	&& propertyOrRecord.params);

	const filterRecordParams = function (record, options = {}) {
	  if (options.includeParams && record) {
	    return { ...record,
	      params: flat.selectParams(record.params || {}, options.includeParams)
	    };
	  }

	  return record;
	};
	const isPropertyPermitted = (propertyName, options = {}) => {
	  const {
	    includeParams
	  } = options;

	  if (includeParams) {
	    const parts = flat.pathToParts(propertyName, {
	      skipArrayIndexes: true
	    });
	    return parts.some(part => includeParams.includes(part));
	  }

	  return true;
	};

	const api = new ApiClient();
	/**
	 * @load ./use-record.doc.md
	 * @subcategory Hooks
	 * @class
	 * @hideconstructor
	 * @bundle
	 * @param {RecordJSON} [initialRecord],
	 * @param {string} resourceId
	 * @param {UseRecordOptions} [options]
	 * @return {UseRecordResult}
	 */

	const useRecord = (initialRecord, resourceId, options) => {
	  // setting up state
	  const [loading, setLoading] = React.useState(false);
	  const [isSynced, setIsSynced] = React.useState(true);
	  const [progress, setProgress] = React.useState(0);
	  const filteredRecord = initialRecord ? filterRecordParams(initialRecord, options) : null;
	  const [record, setRecord] = React.useState({ ...filteredRecord,
	    params: (filteredRecord === null || filteredRecord === void 0 ? void 0 : filteredRecord.params) ?? {},
	    errors: (initialRecord === null || initialRecord === void 0 ? void 0 : initialRecord.errors) ?? {},
	    populated: (initialRecord === null || initialRecord === void 0 ? void 0 : initialRecord.populated) ?? {}
	  }); // it keeps the same format as useState function which can take either value or function

	  const setFilteredRecord = React.useCallback(value => {
	    const newRecord = value instanceof Function ? value(record) : value;
	    setRecord(filterRecordParams(newRecord, options));
	  }, [options, record]);
	  const onNotice = useNotice();
	  const handleChange = React.useCallback((propertyOrRecord, value, incomingRecord) => {
	    if (isEntireRecordGiven(propertyOrRecord, value)) {
	      setFilteredRecord(propertyOrRecord);
	    } else if (isPropertyPermitted(propertyOrRecord, options)) {
	      setRecord(updateRecord(propertyOrRecord, value, incomingRecord));
	    } else {
	      // eslint-disable-next-line no-console
	      console.warn([`You are trying to set property: "${propertyOrRecord}" which`, 'is not permitted. Take a look at `useRecord(..., { includeParams: [...]})`'].join('\n'));
	    }

	    setIsSynced(false);
	  }, [setRecord, options]);
	  const handleSubmit = React.useCallback((customParams = {}, submitOptions) => {
	    setLoading(true);
	    const mergedParams = flat.merge(record.params, customParams);
	    const formData = paramsToFormData(mergedParams);
	    const params = {
	      resourceId,
	      onUploadProgress: e => setProgress(Math.round(e.loaded * 100 / e.total)),
	      data: formData,
	      headers: {
	        'Content-Type': 'multipart/form-data'
	      }
	    };
	    const promise = record.id ? api.recordAction({ ...params,
	      actionName: 'edit',
	      recordId: record.id
	    }) : api.resourceAction({ ...params,
	      actionName: 'new'
	    });
	    promise.then(response => {
	      if (response.data.notice) {
	        onNotice(response.data.notice);
	      }

	      if ((submitOptions === null || submitOptions === void 0 ? void 0 : submitOptions.updateOnSave) !== false) {
	        setFilteredRecord(prev => mergeRecordResponse(prev, response.data));
	      }

	      setProgress(0);
	      setLoading(false);
	      setIsSynced(true);
	    }).catch(() => {
	      onNotice({
	        message: 'There was an error updating record, Check out console to see more information.',
	        type: 'error'
	      });
	      setProgress(0);
	      setLoading(false);
	    });
	    return promise;
	  }, [record, resourceId, setLoading, setProgress, setRecord]);
	  return {
	    record,
	    handleChange,
	    submit: handleSubmit,
	    loading,
	    progress,
	    setRecord: setFilteredRecord,
	    isSynced
	  };
	};

	const actionHasComponent = action => typeof action.component !== 'undefined' && action.component === false;

	const h$2 = new ViewHelpers();
	const actionHref = (action, params) => {
	  const actionName = action.name;

	  if (!action.component && !action.hasHandler) {
	    return null;
	  }

	  const hrefMap = {
	    record: () => h$2.recordActionUrl({ ...params,
	      actionName
	    }),
	    resource: () => h$2.resourceActionUrl({
	      resourceId: params.resourceId,
	      actionName
	    }),
	    bulk: () => h$2.bulkActionUrl({ ...params,
	      actionName
	    })
	  };

	  if (hrefMap[action.actionType]) {
	    return hrefMap[action.actionType]();
	  }

	  throw new Error('"actionType" should be either record, resource or bulk');
	};

	const api$1 = new ApiClient();
	function callActionApi(action, params, search) {
	  let promise;
	  const {
	    recordId,
	    recordIds,
	    resourceId
	  } = params;

	  switch (action.actionType) {
	    case 'record':
	      if (!recordId) {
	        throw new Error('You have to specify "recordId" for record action');
	      }

	      promise = api$1.recordAction({
	        resourceId,
	        actionName: action.name,
	        recordId,
	        search
	      });
	      break;

	    case 'resource':
	      promise = api$1.resourceAction({
	        resourceId,
	        actionName: action.name
	      });
	      break;

	    case 'bulk':
	      if (!recordIds) {
	        throw new Error('You have to specify "recordIds" for bulk action');
	      }

	      promise = api$1.bulkAction({
	        resourceId,
	        actionName: action.name,
	        recordIds,
	        search
	      });
	      break;

	    default:
	      throw new Error('"actionType" should be either record, resource or bulk');
	  }

	  return promise;
	}

	/* eslint-disable arrow-parens */
	const buildActionCallApiTrigger = options => {
	  const {
	    action,
	    params,
	    actionResponseHandler,
	    search
	  } = options;

	  const callApi = () => {
	    const promise = callActionApi(action, params, search);
	    promise.then(actionResponseHandler).catch(error => {
	      throw error;
	    });
	    return promise;
	  };

	  return callApi;
	};

	const buildActionTestId = action => `action-${action.name}`;

	/* eslint-disable no-restricted-globals */
	const buildActionClickHandler = options => {
	  const {
	    action,
	    params,
	    actionResponseHandler,
	    push
	  } = options;

	  const handleActionClick = event => {
	    event.preventDefault();
	    event.stopPropagation();
	    const href = actionHref(action, params);
	    const callApi = buildActionCallApiTrigger({
	      params,
	      action,
	      actionResponseHandler
	    });

	    if (action.guard && !confirm(action.guard)) {
	      return;
	    }

	    if (actionHasComponent(action)) {
	      callApi();
	    } else if (href) {
	      push(href, {
	        previousPage: window.location.href
	      });
	    }
	  };

	  return handleActionClick;
	};

	const REFRESH_KEY = 'refresh';
	const IGNORE_PARAMS_KEY = 'ignore_params';
	/**
	 * Adds refresh=true to the url, which in turn should cause list to reload.
	 *
	 * @param {string} url      url to which function should add `refresh`
	 * @param {string} [search] optional search query which should be updated,
	 *                          if not given function will use window.location.search
	 * @private
	 */

	const appendForceRefresh = (url, search) => {
	  const searchParamsIdx = url.lastIndexOf('?');
	  const urlSearchParams = searchParamsIdx !== -1 ? url.substring(searchParamsIdx + 1) : null;
	  const oldParams = new URLSearchParams(search ?? urlSearchParams ?? window.location.search ?? '');
	  const shouldIgnoreOldParams = new URLSearchParams(urlSearchParams || '').get(IGNORE_PARAMS_KEY) === 'true';
	  const newParams = shouldIgnoreOldParams ? new URLSearchParams('') : new URLSearchParams(oldParams.toString());
	  newParams.set(REFRESH_KEY, 'true');
	  const newUrl = searchParamsIdx !== -1 ? url.substring(0, searchParamsIdx) : url;
	  return `${newUrl}?${newParams.toString()}`;
	};
	const hasForceRefresh = search => {
	  const params = new URLSearchParams(search);
	  return !!params.get(REFRESH_KEY);
	};
	const removeForceRefresh = search => {
	  const params = new URLSearchParams(search);

	  if (params.get(REFRESH_KEY)) {
	    params.delete(REFRESH_KEY);
	  }

	  return params.toString();
	};

	/* eslint-disable @typescript-eslint/explicit-function-return-type */
	const useActionResponseHandler = onActionCall => {
	  const location = reactRouter.useLocation();
	  const history = reactRouter.useHistory();
	  const addNotice = useNotice();
	  return response => {
	    const {
	      data
	    } = response;

	    if (data.notice) {
	      addNotice(data.notice);
	    }

	    if (data.redirectUrl && location.pathname !== data.redirectUrl) {
	      const appended = appendForceRefresh(data.redirectUrl);
	      history.push(appended, {
	        previousPage: window.location.href
	      });
	    }

	    if (onActionCall) {
	      onActionCall(data);
	    }
	  };
	};

	/**
	 * @load ./use-action.doc.md
	 * @subcategory Hooks
	 *
	 * @param {ActionJSON}   action      action object
	 * @param {ActionParams} params
	 * @param {ActionCallCallback} onActionCall - callback triggered when action is performed
	 * @return {UseActionResult}
	 * @new In version 3.3
	 * @class
	 * @hideconstructor
	 */

	function useAction(action, params, onActionCall) {
	  const history = reactRouter.useHistory();
	  const actionResponseHandler = useActionResponseHandler(onActionCall);
	  const href = actionHref(action, params);
	  const callApi = buildActionCallApiTrigger({
	    action,
	    params,
	    actionResponseHandler
	  });
	  const handleClick = buildActionClickHandler({
	    action,
	    params,
	    actionResponseHandler,
	    push: history.push
	  });
	  return {
	    href,
	    callApi,
	    handleClick
	  };
	}

	const SESSION_INITIALIZE = 'SESSION_INITIALIZE';
	const setCurrentAdmin = (data = null) => ({
	  type: SESSION_INITIALIZE,
	  data
	});

	/**
	 * @classdesc
	 * Hook which allows you to get and set currentAdmin
	 *
	 * ### Usage
	 *
	 * ```javascript
	 * import { useCurrentAdmin } from 'adminjs'
	 *
	 * const myComponent = () => {
	 *   const [currentAdmin, setCurrentAdmin] = useCurrentAdmin()
	 *   // ...
	 * }
	 * ```
	 *
	 * @class
	 * @subcategory Hooks
	 * @bundle
	 * @returns {UseCurrentAdminResponse}
	 * @hideconstructor
	 */
	function useCurrentAdmin() {
	  const currentAdmin = reactRedux.useSelector(state => state.session);
	  const dispatch = reactRedux.useDispatch();
	  return [currentAdmin, admin => dispatch(setCurrentAdmin(admin))];
	}
	/**
	 * Result of the {@link useCurrentAdmin}.
	 * It is a tuple containing value and the setter
	 *
	 * @typedef {Array} UseCurrentAdminResponse
	 * @memberof useCurrentAdmin
	 * @alias UseCurrentAdminResponse
	 * @property {CurrentAdmin | null} [0]    current admin
	 * @property {React.Dispatch<React.SetStateAction<CurrentAdmin>>} [1]    value setter compatible
	 *                                                                       with react useState
	 */

	/* eslint-disable no-console */

	/**
	 * @load ./use-local-storage.doc.md
	 * @subcategory Hooks
	 * @class
	 * @see https://usehooks.com/useLocalStorage
	 *
	 * @param {string} key          key under which hook will store the data
	 * @param {T}      initialValue    value which will be stringified and stored
	 * @return {UseLocalStorageResult<T>}
	 * @new In version 3.3
	 * @bundle
	 * @type {Function}
	 */
	function useLocalStorage(key, initialValue) {
	  // State to store our value
	  // Pass initial state function to useState so logic is only executed once
	  const [storedValue, setStoredValue] = React.useState(() => {
	    try {
	      // Get from local storage by key
	      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue

	      return item ? JSON.parse(item) : initialValue;
	    } catch (error) {
	      // If error also return initialValue
	      console.log(error);
	      return initialValue;
	    }
	  }); // Return a wrapped version of useState's setter function that ...
	  // ... persists the new value to localStorage.

	  const setValue = value => {
	    try {
	      // Allow value to be a function so we have same API as useState
	      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state

	      setStoredValue(valueToStore); // Save to local storage

	      window.localStorage.setItem(key, JSON.stringify(valueToStore));
	    } catch (error) {
	      // A more advanced implementation would handle the error case
	      console.log(error);
	    }
	  };

	  return [storedValue, setValue];
	}

	const isSelected = (href, location) => {
	  const regExp = new RegExp(`${href}($|/)`);
	  return !!location.pathname.match(regExp);
	};

	function useNavigationResources(resources) {
	  const [openElements, setOpenElements] = useLocalStorage('sidebarElements', {});
	  const history = reactRouter.useHistory();
	  const location = reactRouter.useLocation();
	  const enrichResource = React.useMemo(() => (resource, icon) => ({
	    href: resource.href || undefined,
	    icon,
	    isSelected: isSelected(resource.href, location),
	    label: resource.name,
	    id: resource.id,
	    onClick: event => {
	      if (resource.href) {
	        event.preventDefault();
	        history.push(resource.href, {
	          previousPage: window.location.href
	        });
	      }
	    }
	  }), [location, history]); // grouping resources into parents

	  const map = resources // first filter out resources which are not visible
	  .filter(res => {
	    var _res$navigation;

	    return res.href && ((_res$navigation = res.navigation) === null || _res$navigation === void 0 ? void 0 : _res$navigation.show) !== false;
	  }).reduce((memo, resource) => {
	    var _resource$navigation, _resource$navigation3;

	    // in case resource has the same name as parent we namespace it wit "resource-""
	    const key = ((_resource$navigation = resource.navigation) === null || _resource$navigation === void 0 ? void 0 : _resource$navigation.name) || ['resource', resource.name].join('-');

	    if (!resource.navigation || resource.navigation.name === null) {
	      var _resource$navigation2;

	      memo[key] = enrichResource(resource, (_resource$navigation2 = resource.navigation) === null || _resource$navigation2 === void 0 ? void 0 : _resource$navigation2.icon);
	    } else if (memo[key] && memo[key].elements && (_resource$navigation3 = resource.navigation) !== null && _resource$navigation3 !== void 0 && _resource$navigation3.name) {
	      memo[key].elements.push(enrichResource(resource));
	    } else {
	      var _resource$navigation4, _resource$navigation5;

	      memo[key] = {
	        elements: [enrichResource(resource)],
	        label: (_resource$navigation4 = resource.navigation) === null || _resource$navigation4 === void 0 ? void 0 : _resource$navigation4.name,
	        icon: (_resource$navigation5 = resource.navigation) === null || _resource$navigation5 === void 0 ? void 0 : _resource$navigation5.icon,
	        onClick: () => setOpenElements({ ...openElements,
	          [key]: !openElements[key]
	        }),
	        isOpen: !!openElements[key]
	      };
	    }

	    return memo;
	  }, {});
	  return Object.values(map);
	}

	const api$2 = new ApiClient();
	/**
	 * @load ./use-records.doc.md
	 * @subcategory Hooks
	 * @class
	 * @hideconstructor
	 *
	 * @param {string} resourceId      id of a resource for which you want to fetch records
	 * @return {UseRecordsResult}
	 * @new In version 3.3
	 * @bundle
	 * @type {Function}
	 */

	function useRecords(resourceId) {
	  const [records, setRecords] = React.useState([]);
	  const [loading, setLoading] = React.useState(false);
	  const [perPage, setPerPage] = React.useState(10);
	  const [page, setPage] = React.useState(1);
	  const [total, setTotal] = React.useState(0);
	  const [direction, setDirection] = React.useState('asc');
	  const [sortBy, setSortBy] = React.useState();
	  const location = reactRouter.useLocation();
	  const history = reactRouter.useHistory();
	  const addNotice = useNotice();
	  const {
	    translateMessage
	  } = useTranslation();
	  const onNotice = useNotice();

	  const fetchData = () => {
	    setLoading(true);
	    const query = new URLSearchParams(location.search);
	    const promise = api$2.resourceAction({
	      actionName: 'list',
	      resourceId,
	      params: query
	    });
	    promise.then(response => {
	      const listActionResponse = response.data;

	      if (listActionResponse.notice) {
	        onNotice(listActionResponse.notice);
	      }

	      if (listActionResponse.redirectUrl) {
	        history.push(listActionResponse.redirectUrl, {
	          previousPage: window.location.href
	        });
	        return;
	      }

	      setRecords(listActionResponse.records);
	      setPage(listActionResponse.meta.page);
	      setPerPage(listActionResponse.meta.perPage);
	      setTotal(listActionResponse.meta.total);
	      setDirection(listActionResponse.meta.direction);
	      setSortBy(listActionResponse.meta.sortBy);
	      setLoading(false);
	    }).catch(() => {
	      addNotice({
	        message: translateMessage('errorFetchingRecords', resourceId),
	        type: 'error'
	      });
	    });
	    return promise;
	  };

	  React.useEffect(() => {
	    if (hasForceRefresh(location.search)) {
	      const locationState = location.state || {};

	      if (!locationState.previousPage) {
	        locationState.previousPage = window.location.href;
	      }

	      history.replace({
	        pathname: location.pathname,
	        state: locationState,
	        search: removeForceRefresh(location.search).toString()
	      });
	    } else {
	      fetchData();
	    }
	  }, [resourceId, location.search, location.state]);
	  return {
	    records,
	    loading,
	    page,
	    total,
	    direction,
	    sortBy,
	    perPage,
	    fetchData
	  };
	}

	/**
	 * @load ./use-selected-records.doc.md
	 * @subcategory Hooks
	 * @class
	 * @hideconstructor
	 * @param {Array<RecordJSON>} records     List of records on which you can perform `select` action
	 * @return {UseSelectedRecordsResult}
	 * @new In version 3.3
	 * @bundle
	 * @type {Function}
	 */
	function useSelectedRecords(records) {
	  const [selectedRecords, setSelectedRecords] = React.useState([]);

	  const handleSelect = record => {
	    const selectedIndex = selectedRecords.findIndex(selected => selected.id === record.id);

	    if (selectedIndex < 0) {
	      setSelectedRecords([...selectedRecords, record]);
	    } else {
	      const newSelectedRecords = [...selectedRecords];
	      newSelectedRecords.splice(selectedIndex, 1);
	      setSelectedRecords(newSelectedRecords);
	    }
	  };

	  const handleSelectAll = () => {
	    const missing = records.filter(record => !selectedRecords.find(selected => selected.id === record.id) && record.bulkActions.length);

	    if (missing.length) {
	      setSelectedRecords([...selectedRecords, ...missing]);
	    } else {
	      const newSelectedRecords = selectedRecords.filter(selected => !records.find(record => record.id === selected.id));
	      setSelectedRecords(newSelectedRecords);
	    }
	  };

	  return {
	    handleSelect,
	    handleSelectAll,
	    selectedRecords,
	    setSelectedRecords
	  };
	}

	/**
	 * @load ./use-resource.doc.md
	 * @subcategory Hooks
	 * @class
	 * @hideconstructor
	 * @new in version 3.3
	 * @bundle
	 * @param {string} resourceId    Id of a resource you want to get
	 */
	const useResource = resourceId => {
	  const resources = reactRedux.useSelector(state => state.resources);
	  const foundResource = resources.find(resource => resource.id === resourceId);
	  return foundResource;
	};

	var Hooks = /*#__PURE__*/Object.freeze({
		__proto__: null,
		useRecord: useRecord,
		isEntireRecordGiven: isEntireRecordGiven,
		FORM_VALUE_NULL: FORM_VALUE_NULL,
		FORM_VALUE_EMPTY_OBJECT: FORM_VALUE_EMPTY_OBJECT,
		FORM_VALUE_EMPTY_ARRAY: FORM_VALUE_EMPTY_ARRAY,
		paramsToFormData: paramsToFormData,
		updateRecord: updateRecord,
		useAction: useAction,
		useActionResponseHandler: useActionResponseHandler,
		useCurrentAdmin: useCurrentAdmin,
		useLocalStorage: useLocalStorage,
		useNavigationResources: useNavigationResources,
		useNotice: useNotice,
		useRecords: useRecords,
		useSelectedRecords: useSelectedRecords,
		useTranslation: useTranslation,
		useResource: useResource
	});

	/**
	 * @alias SidebarResourceSectionProps
	 * @memberof SidebarResourceSection
	 */

	/**
	 * Groups resources by sections and renders the list in {@link Sidebar}
	 *
	 * ### Usage
	 *
	 * ```
	 * import { SidebarResourceSection } from 'adminjs`
	 * ```
	 *
	 * @component
	 * @subcategory Application
	 * @name SidebarResourceSection
	 */
	const SidebarResourceSectionOriginal = ({
	  resources
	}) => {
	  const elements = useNavigationResources(resources);
	  const {
	    translateLabel
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Navigation, {
	    label: translateLabel('navigation'),
	    elements: elements
	  });
	}; // Rollup cannot handle type exports well - that is why we need to do this hack with
	// exporting default and named SidebarResourceSection


	const SidebarResourceSection = allowOverride(SidebarResourceSectionOriginal, 'SidebarResourceSection');

	const StyledSidebar = styled__default['default'](DesignSystem.Box).withConfig({
	  displayName: "sidebar__StyledSidebar",
	  componentId: "rspq5q-0"
	})(["transition:left 0.3s;top:0;bottom:0;flex-shrink:0;overflow-y:auto;&.hidden{left:-", ";}&.visible{left:0;}"], DesignSystem.themeGet('sizes', 'sidebarWidth'));
	StyledSidebar.defaultProps = {
	  position: ['absolute', 'absolute', 'absolute', 'absolute', 'inherit'],
	  width: 'sidebarWidth',
	  borderRight: 'default',
	  display: 'flex',
	  flexDirection: 'column',
	  zIndex: 50,
	  bg: 'white'
	};

	const SidebarOriginal = props => {
	  const {
	    isVisible
	  } = props;
	  const [branding, resources, pages] = reactRedux.useSelector(state => [state.branding, state.resources, state.pages]);
	  return /*#__PURE__*/React__default['default'].createElement(StyledSidebar, {
	    className: isVisible ? 'visible' : 'hidden'
	  }, /*#__PURE__*/React__default['default'].createElement(SidebarBranding$1, {
	    branding: branding
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexGrow: 1,
	    className: DesignSystem.cssClass('Resources')
	  }, /*#__PURE__*/React__default['default'].createElement(SidebarResourceSection, {
	    resources: resources
	  })), /*#__PURE__*/React__default['default'].createElement(SidebarPages, {
	    pages: pages
	  }), (branding === null || branding === void 0 ? void 0 : branding.softwareBrothers) && /*#__PURE__*/React__default['default'].createElement(SidebarFooter$1, null));
	};

	const Sidebar = allowOverride(SidebarOriginal, 'Sidebar');

	const LoggedIn = props => {
	  const {
	    session,
	    paths
	  } = props;
	  const {
	    translateButton
	  } = useTranslation();
	  const dropActions = [{
	    label: translateButton('logout'),
	    onClick: event => {
	      event.preventDefault();
	      window.location.href = paths.logoutPath;
	    },
	    icon: 'Logout'
	  }];
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexShrink: 0
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.CurrentUserNav, {
	    name: session.email,
	    title: session.title,
	    avatarUrl: session.avatarUrl,
	    dropActions: dropActions
	  }));
	};

	const OverridableLoggedIn = allowOverride(LoggedIn, 'LoggedIn');

	const VersionItem = styled__default['default'](DesignSystem.Text).withConfig({
	  displayName: "version__VersionItem",
	  componentId: "r49gcr-0"
	})(["padding:12px 24px 12px 0;"]);
	VersionItem.defaultProps = {
	  display: ['none', 'block'],
	  color: 'grey100'
	};
	const Version = props => {
	  const {
	    versions
	  } = props;
	  const {
	    admin,
	    app
	  } = versions;
	  const {
	    translateLabel
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flex: true,
	    flexGrow: 1,
	    py: "default",
	    px: "xxl",
	    className: DesignSystem.cssClass('Version')
	  }, admin && /*#__PURE__*/React__default['default'].createElement(VersionItem, null, translateLabel('adminVersion', {
	    version: admin
	  })), app && /*#__PURE__*/React__default['default'].createElement(VersionItem, null, translateLabel('appVersion', {
	    version: app
	  })));
	};

	const NavBar = styled__default['default'](DesignSystem.Box).withConfig({
	  displayName: "top-bar__NavBar",
	  componentId: "vpnnkx-0"
	})(["height:", ";border-bottom:", ";background:", ";display:flex;flex-direction:row;flex-shrink:0;"], ({
	  theme
	}) => theme.sizes.navbarHeight, DesignSystem.themeGet('borders', 'default'), ({
	  theme
	}) => theme.colors.white);
	NavBar.defaultProps = {
	  className: DesignSystem.cssClass('NavBar')
	};
	const TopBar = props => {
	  const {
	    toggleSidebar
	  } = props;
	  const [session, paths, versions] = reactRedux.useSelector(state => [state.session, state.paths, state.versions]);
	  return /*#__PURE__*/React__default['default'].createElement(NavBar, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    py: "lg",
	    px: ['default', 'lg'],
	    onClick: toggleSidebar,
	    display: ['block', 'block', 'block', 'block', 'none'],
	    style: {
	      cursor: 'pointer'
	    }
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Menu",
	    size: 32,
	    color: "grey100"
	  })), /*#__PURE__*/React__default['default'].createElement(Version, {
	    versions: versions
	  }), session && session.email ? /*#__PURE__*/React__default['default'].createElement(OverridableLoggedIn, {
	    session: session,
	    paths: paths
	  }) : '');
	};

	const DROP_NOTICE = 'DROP_NOTICE';
	const dropNotice = noticeId => ({
	  type: 'DROP_NOTICE',
	  data: {
	    noticeId
	  }
	});

	const SET_NOTICE_PROGRESS = 'SET_NOTICE_PROGRESS';
	const setNoticeProgress = data => ({
	  type: SET_NOTICE_PROGRESS,
	  data
	});

	const TIME_TO_DISAPPEAR = 3;
	class NoticeElement extends React__default['default'].Component {
	  constructor(props) {
	    super(props);
	    const {
	      notice
	    } = props;
	    this.timer = null;
	    this.state = {
	      progress: notice.progress || 0
	    };
	  }

	  componentDidMount() {
	    const {
	      drop,
	      notice,
	      notifyProgress
	    } = this.props;
	    this.timer = setInterval(() => {
	      this.setState(state => {
	        const progress = state.progress + 100 / TIME_TO_DISAPPEAR;
	        notifyProgress({
	          noticeId: notice.id,
	          progress
	        });
	        return {
	          progress
	        };
	      });
	    }, 1000);
	    setTimeout(() => {
	      if (this.timer) {
	        clearInterval(this.timer);
	      }

	      drop();
	    }, 1000 * (TIME_TO_DISAPPEAR + 1));
	  }

	  componentWillUnmount() {
	    if (this.timer) {
	      clearInterval(this.timer);
	    }
	  }

	  render() {
	    const {
	      notice,
	      drop
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	      style: {
	        minWidth: '480px'
	      },
	      message: notice.message,
	      variant: notice.type === 'success' ? 'success' : 'danger',
	      onCloseClick: drop
	    });
	  }

	}

	const NoticeBox = props => {
	  const {
	    drop,
	    notices,
	    notifyProgress
	  } = props;
	  const notice = notices.length ? notices[notices.length - 1] : null;

	  if (notice) {
	    return /*#__PURE__*/React__default['default'].createElement("div", {
	      "data-testid": "notice-wrapper"
	    }, /*#__PURE__*/React__default['default'].createElement(NoticeElement, {
	      key: notice.id,
	      notice: notice,
	      drop: () => drop(notice.id),
	      notifyProgress: notifyProgress
	    }));
	  }

	  return /*#__PURE__*/React__default['default'].createElement("div", null);
	};

	const mapStateToProps = state => ({
	  notices: state.notices
	});

	const mapDispatchToProps = dispatch => ({
	  drop: noticeId => dispatch(dropNotice(noticeId)),
	  notifyProgress: ({
	    noticeId,
	    progress
	  }) => dispatch(setNoticeProgress({
	    noticeId,
	    progress
	  }))
	});

	const ConnectedNoticeBox = reactRedux.connect(mapStateToProps, mapDispatchToProps)(NoticeBox);

	const pageHeaderHeight = 284;
	const pageHeaderPaddingY = 74;
	const pageHeaderPaddingX = 250;
	const DashboardHeader = () => {
	  const {
	    translateMessage
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    position: "relative",
	    overflow: "hidden"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    position: "absolute",
	    top: 50,
	    left: -10,
	    opacity: [0.2, 0.4, 1],
	    animate: true
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Illustration, {
	    variant: "Rocket"
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    position: "absolute",
	    top: -70,
	    right: -15,
	    opacity: [0.2, 0.4, 1],
	    animate: true
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Illustration, {
	    variant: "Moon"
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    bg: "grey100",
	    height: pageHeaderHeight,
	    py: pageHeaderPaddingY,
	    px: ['default', 'lg', pageHeaderPaddingX]
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    textAlign: "center",
	    color: "white"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.H2, null, translateMessage('welcomeOnBoard_title')), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    opacity: 0.8
	  }, translateMessage('welcomeOnBoard_subtitle')))));
	};

	const boxes = ({
	  translateMessage
	}) => [{
	  variant: 'Planet',
	  title: translateMessage('addingResources_title'),
	  subtitle: translateMessage('addingResources_subtitle'),
	  href: 'https://adminjs.co/tutorial-passing-resources.html'
	}, {
	  variant: 'DocumentCheck',
	  title: translateMessage('customizeResources_title'),
	  subtitle: translateMessage('customizeResources_subtitle'),
	  href: 'https://adminjs.co/tutorial-customizing-resources.html'
	}, {
	  variant: 'DocumentSearch',
	  title: translateMessage('customizeActions_title'),
	  subtitle: translateMessage('customizeActions_subtitle'),
	  href: 'https://adminjs.co/tutorial-actions.html'
	}, {
	  variant: 'FlagInCog',
	  title: translateMessage('writeOwnComponents_title'),
	  subtitle: translateMessage('writeOwnComponents_subtitle'),
	  href: 'https://adminjs.co/tutorial-writing-react-components.html'
	}, {
	  variant: 'Folders',
	  title: translateMessage('customDashboard_title'),
	  subtitle: translateMessage('customDashboard_subtitle'),
	  href: 'https://adminjs.co/tutorial-custom-dashboard.html'
	}, {
	  variant: 'Astronaut',
	  title: translateMessage('roleBasedAccess_title'),
	  subtitle: translateMessage('roleBasedAccess_subtitle'),
	  href: 'https://adminjs.co/tutorial-rbac.html'
	}];

	const Card = styled__default['default'](DesignSystem.Box).withConfig({
	  displayName: "default-dashboard__Card",
	  componentId: "sc-1be5kmo-0"
	})(["display:", ";color:", ";text-decoration:none;border:1px solid transparent;&:hover{border:1px solid ", ";box-shadow:", ";}"], ({
	  flex
	}) => flex ? 'flex' : 'block', ({
	  theme
	}) => theme.colors.grey100, ({
	  theme
	}) => theme.colors.primary100, ({
	  theme
	}) => theme.shadows.cardHover);
	Card.defaultProps = {
	  variant: 'white',
	  boxShadow: 'card'
	};
	const Dashboard = () => {
	  const {
	    translateMessage,
	    translateButton
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, null, /*#__PURE__*/React__default['default'].createElement(DashboardHeader, null), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    mt: ['xl', 'xl', '-100px'],
	    mb: "xl",
	    mx: [0, 0, 0, 'auto'],
	    px: ['default', 'lg', 'xxl', '0'],
	    position: "relative",
	    flex: true,
	    flexDirection: "row",
	    flexWrap: "wrap",
	    width: [1, 1, 1, 1024]
	  }, boxes({
	    translateMessage
	  }).map((box, index) =>
	  /*#__PURE__*/
	  // eslint-disable-next-line react/no-array-index-key
	  React__default['default'].createElement(DesignSystem.Box, {
	    key: index,
	    width: [1, 1 / 2, 1 / 2, 1 / 3],
	    p: "lg"
	  }, /*#__PURE__*/React__default['default'].createElement(Card, {
	    as: "a",
	    href: box.href
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    textAlign: "center"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Illustration, {
	    variant: box.variant,
	    width: 100,
	    height: 70
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.H5, {
	    mt: "lg"
	  }, box.title), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, box.subtitle))))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    width: [1, 1, 1 / 2],
	    p: "lg"
	  }, /*#__PURE__*/React__default['default'].createElement(Card, {
	    as: "a",
	    flex: true,
	    href: "https://join.slack.com/t/adminbro/shared_invite/zt-djsqxxpz-_YCS8UMtQ9Ade6DPuLR7Zw"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexShrink: 0
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Illustration, {
	    variant: "SlackLogo"
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    ml: "xl"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.H4, null, translateMessage('community_title')), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('community_subtitle'))))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    width: [1, 1, 1 / 2],
	    p: "lg"
	  }, /*#__PURE__*/React__default['default'].createElement(Card, {
	    as: "a",
	    flex: true,
	    href: "https://github.com/SoftwareBrothers/adminjs/issues"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexShrink: 0
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Illustration, {
	    variant: "GithubLogo"
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    ml: "xl"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.H4, null, translateMessage('foundBug_title')), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('foundBug_subtitle'))))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    variant: "white",
	    boxShadow: "card",
	    width: 1,
	    m: "lg"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    textAlign: "center"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Illustration, {
	    variant: "SoftwareBrothersLogo"
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.H4, null, translateMessage('needMoreSolutions_title')), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('needMoreSolutions_subtitle')), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    mt: "xxl"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    as: "a",
	    variant: "primary",
	    href: "https://softwarebrothers.co/services"
	  }, translateButton('contactUs')))))));
	};

	const ErrorMessage = ({
	  error
	}) => {
	  const {
	    translateMessage
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    m: "xxl",
	    variant: "danger",
	    message: "Javascript Error"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, error.toString()), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    mt: "default"
	  }, translateMessage('seeConsoleForMore')));
	};

	class ErrorBoundary extends React__default['default'].Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      error: null
	    };
	  }

	  componentDidCatch(error) {
	    this.setState({
	      error
	    });
	  }

	  render() {
	    const {
	      children
	    } = this.props;
	    const {
	      error
	    } = this.state;

	    if (error !== null) {
	      return /*#__PURE__*/React__default['default'].createElement(ErrorMessage, {
	        error: error
	      });
	    }

	    return children || null;
	  }

	}

	class Dashboard$1 extends React__default['default'].Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isClient: false
	    };
	  }

	  componentDidMount() {
	    this.setState({
	      isClient: true
	    });
	  }

	  render() {
	    const {
	      dashboard
	    } = this.props;
	    const {
	      isClient
	    } = this.state;
	    let Component;

	    if (dashboard && dashboard.component && isClient && AdminJS.UserComponents[dashboard.component]) {
	      Component = AdminJS.UserComponents[dashboard.component];
	    } else {
	      Component = Dashboard;
	    }

	    return /*#__PURE__*/React__default['default'].createElement(ErrorBoundary, null, /*#__PURE__*/React__default['default'].createElement(Component, null));
	  }

	}

	const mapStateToProps$1 = state => ({
	  dashboard: state.dashboard
	});

	var Dashboard$2 = reactRedux.connect(mapStateToProps$1)(Dashboard$1);

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var inheritsLoose = _inheritsLoose;

	var useMemoOne_cjs = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });



	function areInputsEqual(newInputs, lastInputs) {
	  if (newInputs.length !== lastInputs.length) {
	    return false;
	  }

	  for (var i = 0; i < newInputs.length; i++) {
	    if (newInputs[i] !== lastInputs[i]) {
	      return false;
	    }
	  }

	  return true;
	}

	function useMemoOne(getResult, inputs) {
	  var initial = React__default['default'].useState(function () {
	    return {
	      inputs: inputs,
	      result: getResult()
	    };
	  })[0];
	  var isFirstRun = React__default['default'].useRef(true);
	  var committed = React__default['default'].useRef(initial);
	  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
	  var cache = useCache ? committed.current : {
	    inputs: inputs,
	    result: getResult()
	  };
	  React__default['default'].useEffect(function () {
	    isFirstRun.current = false;
	    committed.current = cache;
	  }, [cache]);
	  return cache.result;
	}
	function useCallbackOne(callback, inputs) {
	  return useMemoOne(function () {
	    return callback;
	  }, inputs);
	}
	var useMemo = useMemoOne;
	var useCallback = useCallbackOne;

	exports.useCallback = useCallback;
	exports.useCallbackOne = useCallbackOne;
	exports.useMemo = useMemo;
	exports.useMemoOne = useMemoOne;
	});

	var tinyInvariant_cjs = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var prefix = 'Invariant failed';
	function invariant(condition, message) {
	    if (condition) {
	        return;
	    }
	    throw new Error(prefix + ": " + (message || ''));
	}
	exports.default = invariant;
	});

	var cssBoxModel_cjs = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var invariant = _interopDefault(tinyInvariant_cjs);

	var getRect = function getRect(_ref) {
	  var top = _ref.top,
	      right = _ref.right,
	      bottom = _ref.bottom,
	      left = _ref.left;
	  var width = right - left;
	  var height = bottom - top;
	  var rect = {
	    top: top,
	    right: right,
	    bottom: bottom,
	    left: left,
	    width: width,
	    height: height,
	    x: left,
	    y: top,
	    center: {
	      x: (right + left) / 2,
	      y: (bottom + top) / 2
	    }
	  };
	  return rect;
	};
	var expand = function expand(target, expandBy) {
	  return {
	    top: target.top - expandBy.top,
	    left: target.left - expandBy.left,
	    bottom: target.bottom + expandBy.bottom,
	    right: target.right + expandBy.right
	  };
	};
	var shrink = function shrink(target, shrinkBy) {
	  return {
	    top: target.top + shrinkBy.top,
	    left: target.left + shrinkBy.left,
	    bottom: target.bottom - shrinkBy.bottom,
	    right: target.right - shrinkBy.right
	  };
	};

	var shift = function shift(target, shiftBy) {
	  return {
	    top: target.top + shiftBy.y,
	    left: target.left + shiftBy.x,
	    bottom: target.bottom + shiftBy.y,
	    right: target.right + shiftBy.x
	  };
	};

	var noSpacing = {
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0
	};
	var createBox = function createBox(_ref2) {
	  var borderBox = _ref2.borderBox,
	      _ref2$margin = _ref2.margin,
	      margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin,
	      _ref2$border = _ref2.border,
	      border = _ref2$border === void 0 ? noSpacing : _ref2$border,
	      _ref2$padding = _ref2.padding,
	      padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
	  var marginBox = getRect(expand(borderBox, margin));
	  var paddingBox = getRect(shrink(borderBox, border));
	  var contentBox = getRect(shrink(paddingBox, padding));
	  return {
	    marginBox: marginBox,
	    borderBox: getRect(borderBox),
	    paddingBox: paddingBox,
	    contentBox: contentBox,
	    margin: margin,
	    border: border,
	    padding: padding
	  };
	};

	var parse = function parse(raw) {
	  var value = raw.slice(0, -2);
	  var suffix = raw.slice(-2);

	  if (suffix !== 'px') {
	    return 0;
	  }

	  var result = Number(value);
	  !!isNaN(result) ?  invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]")  : void 0;
	  return result;
	};

	var getWindowScroll = function getWindowScroll() {
	  return {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  };
	};

	var offset = function offset(original, change) {
	  var borderBox = original.borderBox,
	      border = original.border,
	      margin = original.margin,
	      padding = original.padding;
	  var shifted = shift(borderBox, change);
	  return createBox({
	    borderBox: shifted,
	    border: border,
	    margin: margin,
	    padding: padding
	  });
	};
	var withScroll = function withScroll(original, scroll) {
	  if (scroll === void 0) {
	    scroll = getWindowScroll();
	  }

	  return offset(original, scroll);
	};
	var calculateBox = function calculateBox(borderBox, styles) {
	  var margin = {
	    top: parse(styles.marginTop),
	    right: parse(styles.marginRight),
	    bottom: parse(styles.marginBottom),
	    left: parse(styles.marginLeft)
	  };
	  var padding = {
	    top: parse(styles.paddingTop),
	    right: parse(styles.paddingRight),
	    bottom: parse(styles.paddingBottom),
	    left: parse(styles.paddingLeft)
	  };
	  var border = {
	    top: parse(styles.borderTopWidth),
	    right: parse(styles.borderRightWidth),
	    bottom: parse(styles.borderBottomWidth),
	    left: parse(styles.borderLeftWidth)
	  };
	  return createBox({
	    borderBox: borderBox,
	    margin: margin,
	    padding: padding,
	    border: border
	  });
	};
	var getBox = function getBox(el) {
	  var borderBox = el.getBoundingClientRect();
	  var styles = window.getComputedStyle(el);
	  return calculateBox(borderBox, styles);
	};

	exports.calculateBox = calculateBox;
	exports.createBox = createBox;
	exports.expand = expand;
	exports.getBox = getBox;
	exports.getRect = getRect;
	exports.offset = offset;
	exports.shrink = shrink;
	exports.withScroll = withScroll;
	});

	function areInputsEqual(newInputs, lastInputs) {
	    if (newInputs.length !== lastInputs.length) {
	        return false;
	    }
	    for (var i = 0; i < newInputs.length; i++) {
	        if (newInputs[i] !== lastInputs[i]) {
	            return false;
	        }
	    }
	    return true;
	}

	function memoizeOne(resultFn, isEqual) {
	    if (isEqual === void 0) { isEqual = areInputsEqual; }
	    var lastThis;
	    var lastArgs = [];
	    var lastResult;
	    var calledOnce = false;
	    function memoized() {
	        var newArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            newArgs[_i] = arguments[_i];
	        }
	        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
	            return lastResult;
	        }
	        lastResult = resultFn.apply(this, newArgs);
	        calledOnce = true;
	        lastThis = this;
	        lastArgs = newArgs;
	        return lastResult;
	    }
	    return memoized;
	}

	var memoizeOne_cjs = memoizeOne;

	var rafSchd = function rafSchd(fn) {
	  var lastArgs = [];
	  var frameId = null;

	  var wrapperFn = function wrapperFn() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    lastArgs = args;

	    if (frameId) {
	      return;
	    }

	    frameId = requestAnimationFrame(function () {
	      frameId = null;
	      fn.apply(void 0, lastArgs);
	    });
	  };

	  wrapperFn.cancel = function () {
	    if (!frameId) {
	      return;
	    }

	    cancelAnimationFrame(frameId);
	    frameId = null;
	  };

	  return wrapperFn;
	};

	var rafSchd_cjs = rafSchd;

	var reactBeautifulDnd_cjs = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }


	var React__default$1 = _interopDefault(React__default['default']);
	var _inheritsLoose = _interopDefault(inheritsLoose);
	var _extends = _interopDefault(_extends_1);




	var memoizeOne = _interopDefault(memoizeOne_cjs);
	var rafSchd = _interopDefault(rafSchd_cjs);
	var ReactDOM = _interopDefault(require$$4__default['default']);
	var spacesAndTabs = /[ \t]{2,}/g;
	var lineStartWithSpaces = /^[ \t]*/gm;

	var clean = function clean(value) {
	  return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
	};

	var getDevMessage = function getDevMessage(message) {
	  return clean("\n  %creact-beautiful-dnd\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development only message. It will be removed in production builds.\n");
	};

	var getFormattedMessage = function getFormattedMessage(message) {
	  return [getDevMessage(message), 'color: #00C584; font-size: 1.2em; font-weight: bold;', 'line-height: 1.5', 'color: #723874;'];
	};
	var isDisabledFlag = '__react-beautiful-dnd-disable-dev-warnings';
	function log(type, message) {
	  var _console;

	  if (typeof window !== 'undefined' && window[isDisabledFlag]) {
	    return;
	  }

	  (_console = console)[type].apply(_console, getFormattedMessage(message));
	}
	var warning = log.bind(null, 'warn');
	var error = log.bind(null, 'error');

	function noop() {}

	function getOptions(shared, fromBinding) {
	  return _extends({}, shared, {}, fromBinding);
	}

	function bindEvents(el, bindings, sharedOptions) {
	  var unbindings = bindings.map(function (binding) {
	    var options = getOptions(sharedOptions, binding.options);
	    el.addEventListener(binding.eventName, binding.fn, options);
	    return function unbind() {
	      el.removeEventListener(binding.eventName, binding.fn, options);
	    };
	  });
	  return function unbindAll() {
	    unbindings.forEach(function (unbind) {
	      unbind();
	    });
	  };
	}
	var prefix = 'Invariant failed';
	function RbdInvariant(message) {
	  this.message = message;
	}

	RbdInvariant.prototype.toString = function toString() {
	  return this.message;
	};

	function invariant(condition, message) {
	  if (condition) {
	    return;
	  }

	  {
	    throw new RbdInvariant(prefix + ": " + (message || ''));
	  }
	}

	var ErrorBoundary = function (_React$Component) {
	  _inheritsLoose(ErrorBoundary, _React$Component);

	  function ErrorBoundary() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.callbacks = null;
	    _this.unbind = noop;

	    _this.onWindowError = function (event) {
	      var callbacks = _this.getCallbacks();

	      if (callbacks.isDragging()) {
	        callbacks.tryAbort();
	         warning("\n        An error was caught by our window 'error' event listener while a drag was occurring.\n        The active drag has been aborted.\n      ") ;
	      }

	      var err = event.error;

	      if (err instanceof RbdInvariant) {
	        event.preventDefault();

	        {
	          error(err.message);
	        }
	      }
	    };

	    _this.getCallbacks = function () {
	      if (!_this.callbacks) {
	        throw new Error('Unable to find AppCallbacks in <ErrorBoundary/>');
	      }

	      return _this.callbacks;
	    };

	    _this.setCallbacks = function (callbacks) {
	      _this.callbacks = callbacks;
	    };

	    return _this;
	  }

	  var _proto = ErrorBoundary.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.unbind = bindEvents(window, [{
	      eventName: 'error',
	      fn: this.onWindowError
	    }]);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.unbind();
	  };

	  _proto.componentDidCatch = function componentDidCatch(err) {
	    if (err instanceof RbdInvariant) {
	      {
	        error(err.message);
	      }

	      this.setState({});
	      return;
	    }

	    throw err;
	  };

	  _proto.render = function render() {
	    return this.props.children(this.setCallbacks);
	  };

	  return ErrorBoundary;
	}(React__default$1.Component);

	var dragHandleUsageInstructions = "\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n";

	var position = function position(index) {
	  return index + 1;
	};

	var onDragStart = function onDragStart(start) {
	  return "\n  You have lifted an item in position " + position(start.source.index) + "\n";
	};

	var withLocation = function withLocation(source, destination) {
	  var isInHomeList = source.droppableId === destination.droppableId;
	  var startPosition = position(source.index);
	  var endPosition = position(destination.index);

	  if (isInHomeList) {
	    return "\n      You have moved the item from position " + startPosition + "\n      to position " + endPosition + "\n    ";
	  }

	  return "\n    You have moved the item from position " + startPosition + "\n    in list " + source.droppableId + "\n    to list " + destination.droppableId + "\n    in position " + endPosition + "\n  ";
	};

	var withCombine = function withCombine(id, source, combine) {
	  var inHomeList = source.droppableId === combine.droppableId;

	  if (inHomeList) {
	    return "\n      The item " + id + "\n      has been combined with " + combine.draggableId;
	  }

	  return "\n      The item " + id + "\n      in list " + source.droppableId + "\n      has been combined with " + combine.draggableId + "\n      in list " + combine.droppableId + "\n    ";
	};

	var onDragUpdate = function onDragUpdate(update) {
	  var location = update.destination;

	  if (location) {
	    return withLocation(update.source, location);
	  }

	  var combine = update.combine;

	  if (combine) {
	    return withCombine(update.draggableId, update.source, combine);
	  }

	  return 'You are over an area that cannot be dropped on';
	};

	var returnedToStart = function returnedToStart(source) {
	  return "\n  The item has returned to its starting position\n  of " + position(source.index) + "\n";
	};

	var onDragEnd = function onDragEnd(result) {
	  if (result.reason === 'CANCEL') {
	    return "\n      Movement cancelled.\n      " + returnedToStart(result.source) + "\n    ";
	  }

	  var location = result.destination;
	  var combine = result.combine;

	  if (location) {
	    return "\n      You have dropped the item.\n      " + withLocation(result.source, location) + "\n    ";
	  }

	  if (combine) {
	    return "\n      You have dropped the item.\n      " + withCombine(result.draggableId, result.source, combine) + "\n    ";
	  }

	  return "\n    The item has been dropped while not over a drop area.\n    " + returnedToStart(result.source) + "\n  ";
	};

	var preset = {
	  dragHandleUsageInstructions: dragHandleUsageInstructions,
	  onDragStart: onDragStart,
	  onDragUpdate: onDragUpdate,
	  onDragEnd: onDragEnd
	};

	var origin = {
	  x: 0,
	  y: 0
	};
	var add = function add(point1, point2) {
	  return {
	    x: point1.x + point2.x,
	    y: point1.y + point2.y
	  };
	};
	var subtract = function subtract(point1, point2) {
	  return {
	    x: point1.x - point2.x,
	    y: point1.y - point2.y
	  };
	};
	var isEqual = function isEqual(point1, point2) {
	  return point1.x === point2.x && point1.y === point2.y;
	};
	var negate = function negate(point) {
	  return {
	    x: point.x !== 0 ? -point.x : 0,
	    y: point.y !== 0 ? -point.y : 0
	  };
	};
	var patch = function patch(line, value, otherValue) {
	  var _ref;

	  if (otherValue === void 0) {
	    otherValue = 0;
	  }

	  return _ref = {}, _ref[line] = value, _ref[line === 'x' ? 'y' : 'x'] = otherValue, _ref;
	};
	var distance = function distance(point1, point2) {
	  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
	};
	var closest = function closest(target, points) {
	  return Math.min.apply(Math, points.map(function (point) {
	    return distance(target, point);
	  }));
	};
	var apply = function apply(fn) {
	  return function (point) {
	    return {
	      x: fn(point.x),
	      y: fn(point.y)
	    };
	  };
	};

	var executeClip = (function (frame, subject) {
	  var result = cssBoxModel_cjs.getRect({
	    top: Math.max(subject.top, frame.top),
	    right: Math.min(subject.right, frame.right),
	    bottom: Math.min(subject.bottom, frame.bottom),
	    left: Math.max(subject.left, frame.left)
	  });

	  if (result.width <= 0 || result.height <= 0) {
	    return null;
	  }

	  return result;
	});

	var offsetByPosition = function offsetByPosition(spacing, point) {
	  return {
	    top: spacing.top + point.y,
	    left: spacing.left + point.x,
	    bottom: spacing.bottom + point.y,
	    right: spacing.right + point.x
	  };
	};
	var getCorners = function getCorners(spacing) {
	  return [{
	    x: spacing.left,
	    y: spacing.top
	  }, {
	    x: spacing.right,
	    y: spacing.top
	  }, {
	    x: spacing.left,
	    y: spacing.bottom
	  }, {
	    x: spacing.right,
	    y: spacing.bottom
	  }];
	};
	var noSpacing = {
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0
	};

	var scroll = function scroll(target, frame) {
	  if (!frame) {
	    return target;
	  }

	  return offsetByPosition(target, frame.scroll.diff.displacement);
	};

	var increase = function increase(target, axis, withPlaceholder) {
	  if (withPlaceholder && withPlaceholder.increasedBy) {
	    var _extends2;

	    return _extends({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));
	  }

	  return target;
	};

	var clip = function clip(target, frame) {
	  if (frame && frame.shouldClipSubject) {
	    return executeClip(frame.pageMarginBox, target);
	  }

	  return cssBoxModel_cjs.getRect(target);
	};

	var getSubject = (function (_ref) {
	  var page = _ref.page,
	      withPlaceholder = _ref.withPlaceholder,
	      axis = _ref.axis,
	      frame = _ref.frame;
	  var scrolled = scroll(page.marginBox, frame);
	  var increased = increase(scrolled, axis, withPlaceholder);
	  var clipped = clip(increased, frame);
	  return {
	    page: page,
	    withPlaceholder: withPlaceholder,
	    active: clipped
	  };
	});

	var scrollDroppable = (function (droppable, newScroll) {
	  !droppable.frame ?  invariant(false)  : void 0;
	  var scrollable = droppable.frame;
	  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
	  var scrollDisplacement = negate(scrollDiff);

	  var frame = _extends({}, scrollable, {
	    scroll: {
	      initial: scrollable.scroll.initial,
	      current: newScroll,
	      diff: {
	        value: scrollDiff,
	        displacement: scrollDisplacement
	      },
	      max: scrollable.scroll.max
	    }
	  });

	  var subject = getSubject({
	    page: droppable.subject.page,
	    withPlaceholder: droppable.subject.withPlaceholder,
	    axis: droppable.axis,
	    frame: frame
	  });

	  var result = _extends({}, droppable, {
	    frame: frame,
	    subject: subject
	  });

	  return result;
	});

	function isInteger(value) {
	  if (Number.isInteger) {
	    return Number.isInteger(value);
	  }

	  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
	}
	function values(map) {
	  if (Object.values) {
	    return Object.values(map);
	  }

	  return Object.keys(map).map(function (key) {
	    return map[key];
	  });
	}
	function findIndex(list, predicate) {
	  if (list.findIndex) {
	    return list.findIndex(predicate);
	  }

	  for (var i = 0; i < list.length; i++) {
	    if (predicate(list[i])) {
	      return i;
	    }
	  }

	  return -1;
	}
	function find(list, predicate) {
	  if (list.find) {
	    return list.find(predicate);
	  }

	  var index = findIndex(list, predicate);

	  if (index !== -1) {
	    return list[index];
	  }

	  return undefined;
	}
	function toArray(list) {
	  return Array.prototype.slice.call(list);
	}

	var toDroppableMap = memoizeOne(function (droppables) {
	  return droppables.reduce(function (previous, current) {
	    previous[current.descriptor.id] = current;
	    return previous;
	  }, {});
	});
	var toDraggableMap = memoizeOne(function (draggables) {
	  return draggables.reduce(function (previous, current) {
	    previous[current.descriptor.id] = current;
	    return previous;
	  }, {});
	});
	var toDroppableList = memoizeOne(function (droppables) {
	  return values(droppables);
	});
	var toDraggableList = memoizeOne(function (draggables) {
	  return values(draggables);
	});

	var getDraggablesInsideDroppable = memoizeOne(function (droppableId, draggables) {
	  var result = toDraggableList(draggables).filter(function (draggable) {
	    return droppableId === draggable.descriptor.droppableId;
	  }).sort(function (a, b) {
	    return a.descriptor.index - b.descriptor.index;
	  });
	  return result;
	});

	function tryGetDestination(impact) {
	  if (impact.at && impact.at.type === 'REORDER') {
	    return impact.at.destination;
	  }

	  return null;
	}
	function tryGetCombine(impact) {
	  if (impact.at && impact.at.type === 'COMBINE') {
	    return impact.at.combine;
	  }

	  return null;
	}

	var removeDraggableFromList = memoizeOne(function (remove, list) {
	  return list.filter(function (item) {
	    return item.descriptor.id !== remove.descriptor.id;
	  });
	});

	var moveToNextCombine = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      previousImpact = _ref.previousImpact;

	  if (!destination.isCombineEnabled) {
	    return null;
	  }

	  var location = tryGetDestination(previousImpact);

	  if (!location) {
	    return null;
	  }

	  function getImpact(target) {
	    var at = {
	      type: 'COMBINE',
	      combine: {
	        draggableId: target,
	        droppableId: destination.descriptor.id
	      }
	    };
	    return _extends({}, previousImpact, {
	      at: at
	    });
	  }

	  var all = previousImpact.displaced.all;
	  var closestId = all.length ? all[0] : null;

	  if (isMovingForward) {
	    return closestId ? getImpact(closestId) : null;
	  }

	  var withoutDraggable = removeDraggableFromList(draggable, insideDestination);

	  if (!closestId) {
	    if (!withoutDraggable.length) {
	      return null;
	    }

	    var last = withoutDraggable[withoutDraggable.length - 1];
	    return getImpact(last.descriptor.id);
	  }

	  var indexOfClosest = findIndex(withoutDraggable, function (d) {
	    return d.descriptor.id === closestId;
	  });
	  !(indexOfClosest !== -1) ?  invariant(false, 'Could not find displaced item in set')  : void 0;
	  var proposedIndex = indexOfClosest - 1;

	  if (proposedIndex < 0) {
	    return null;
	  }

	  var before = withoutDraggable[proposedIndex];
	  return getImpact(before.descriptor.id);
	});

	var isHomeOf = (function (draggable, destination) {
	  return draggable.descriptor.droppableId === destination.descriptor.id;
	});

	var noDisplacedBy = {
	  point: origin,
	  value: 0
	};
	var emptyGroups = {
	  invisible: {},
	  visible: {},
	  all: []
	};
	var noImpact = {
	  displaced: emptyGroups,
	  displacedBy: noDisplacedBy,
	  at: null
	};

	var isWithin = (function (lowerBound, upperBound) {
	  return function (value) {
	    return lowerBound <= value && value <= upperBound;
	  };
	});

	var isPartiallyVisibleThroughFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (subject) {
	    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);

	    if (isContained) {
	      return true;
	    }

	    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
	    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
	    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;

	    if (isPartiallyContained) {
	      return true;
	    }

	    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
	    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
	    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;

	    if (isTargetBiggerThanFrame) {
	      return true;
	    }

	    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
	    return isTargetBiggerOnOneAxis;
	  };
	});

	var isTotallyVisibleThroughFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (subject) {
	    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
	    return isContained;
	  };
	});

	var vertical = {
	  direction: 'vertical',
	  line: 'y',
	  crossAxisLine: 'x',
	  start: 'top',
	  end: 'bottom',
	  size: 'height',
	  crossAxisStart: 'left',
	  crossAxisEnd: 'right',
	  crossAxisSize: 'width'
	};
	var horizontal = {
	  direction: 'horizontal',
	  line: 'x',
	  crossAxisLine: 'y',
	  start: 'left',
	  end: 'right',
	  size: 'width',
	  crossAxisStart: 'top',
	  crossAxisEnd: 'bottom',
	  crossAxisSize: 'height'
	};

	var isTotallyVisibleThroughFrameOnAxis = (function (axis) {
	  return function (frame) {
	    var isWithinVertical = isWithin(frame.top, frame.bottom);
	    var isWithinHorizontal = isWithin(frame.left, frame.right);
	    return function (subject) {
	      if (axis === vertical) {
	        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
	      }

	      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
	    };
	  };
	});

	var getDroppableDisplaced = function getDroppableDisplaced(target, destination) {
	  var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
	  return offsetByPosition(target, displacement);
	};

	var isVisibleInDroppable = function isVisibleInDroppable(target, destination, isVisibleThroughFrameFn) {
	  if (!destination.subject.active) {
	    return false;
	  }

	  return isVisibleThroughFrameFn(destination.subject.active)(target);
	};

	var isVisibleInViewport = function isVisibleInViewport(target, viewport, isVisibleThroughFrameFn) {
	  return isVisibleThroughFrameFn(viewport)(target);
	};

	var isVisible = function isVisible(_ref) {
	  var toBeDisplaced = _ref.target,
	      destination = _ref.destination,
	      viewport = _ref.viewport,
	      withDroppableDisplacement = _ref.withDroppableDisplacement,
	      isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
	  var displacedTarget = withDroppableDisplacement ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
	  return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport, isVisibleThroughFrameFn);
	};

	var isPartiallyVisible = function isPartiallyVisible(args) {
	  return isVisible(_extends({}, args, {
	    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
	  }));
	};
	var isTotallyVisible = function isTotallyVisible(args) {
	  return isVisible(_extends({}, args, {
	    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
	  }));
	};
	var isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis(args) {
	  return isVisible(_extends({}, args, {
	    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
	  }));
	};

	var getShouldAnimate = function getShouldAnimate(id, last, forceShouldAnimate) {
	  if (typeof forceShouldAnimate === 'boolean') {
	    return forceShouldAnimate;
	  }

	  if (!last) {
	    return true;
	  }

	  var invisible = last.invisible,
	      visible = last.visible;

	  if (invisible[id]) {
	    return false;
	  }

	  var previous = visible[id];
	  return previous ? previous.shouldAnimate : true;
	};

	function getTarget(draggable, displacedBy) {
	  var marginBox = draggable.page.marginBox;
	  var expandBy = {
	    top: displacedBy.point.y,
	    right: 0,
	    bottom: 0,
	    left: displacedBy.point.x
	  };
	  return cssBoxModel_cjs.getRect(cssBoxModel_cjs.expand(marginBox, expandBy));
	}

	function getDisplacementGroups(_ref) {
	  var afterDragging = _ref.afterDragging,
	      destination = _ref.destination,
	      displacedBy = _ref.displacedBy,
	      viewport = _ref.viewport,
	      forceShouldAnimate = _ref.forceShouldAnimate,
	      last = _ref.last;
	  return afterDragging.reduce(function process(groups, draggable) {
	    var target = getTarget(draggable, displacedBy);
	    var id = draggable.descriptor.id;
	    groups.all.push(id);
	    var isVisible = isPartiallyVisible({
	      target: target,
	      destination: destination,
	      viewport: viewport,
	      withDroppableDisplacement: true
	    });

	    if (!isVisible) {
	      groups.invisible[draggable.descriptor.id] = true;
	      return groups;
	    }

	    var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
	    var displacement = {
	      draggableId: id,
	      shouldAnimate: shouldAnimate
	    };
	    groups.visible[id] = displacement;
	    return groups;
	  }, {
	    all: [],
	    visible: {},
	    invisible: {}
	  });
	}

	function getIndexOfLastItem(draggables, options) {
	  if (!draggables.length) {
	    return 0;
	  }

	  var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
	  return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
	}

	function goAtEnd(_ref) {
	  var insideDestination = _ref.insideDestination,
	      inHomeList = _ref.inHomeList,
	      displacedBy = _ref.displacedBy,
	      destination = _ref.destination;
	  var newIndex = getIndexOfLastItem(insideDestination, {
	    inHomeList: inHomeList
	  });
	  return {
	    displaced: emptyGroups,
	    displacedBy: displacedBy,
	    at: {
	      type: 'REORDER',
	      destination: {
	        droppableId: destination.descriptor.id,
	        index: newIndex
	      }
	    }
	  };
	}

	function calculateReorderImpact(_ref2) {
	  var draggable = _ref2.draggable,
	      insideDestination = _ref2.insideDestination,
	      destination = _ref2.destination,
	      viewport = _ref2.viewport,
	      displacedBy = _ref2.displacedBy,
	      last = _ref2.last,
	      index = _ref2.index,
	      forceShouldAnimate = _ref2.forceShouldAnimate;
	  var inHomeList = isHomeOf(draggable, destination);

	  if (index == null) {
	    return goAtEnd({
	      insideDestination: insideDestination,
	      inHomeList: inHomeList,
	      displacedBy: displacedBy,
	      destination: destination
	    });
	  }

	  var match = find(insideDestination, function (item) {
	    return item.descriptor.index === index;
	  });

	  if (!match) {
	    return goAtEnd({
	      insideDestination: insideDestination,
	      inHomeList: inHomeList,
	      displacedBy: displacedBy,
	      destination: destination
	    });
	  }

	  var withoutDragging = removeDraggableFromList(draggable, insideDestination);
	  var sliceFrom = insideDestination.indexOf(match);
	  var impacted = withoutDragging.slice(sliceFrom);
	  var displaced = getDisplacementGroups({
	    afterDragging: impacted,
	    destination: destination,
	    displacedBy: displacedBy,
	    last: last,
	    viewport: viewport.frame,
	    forceShouldAnimate: forceShouldAnimate
	  });
	  return {
	    displaced: displaced,
	    displacedBy: displacedBy,
	    at: {
	      type: 'REORDER',
	      destination: {
	        droppableId: destination.descriptor.id,
	        index: index
	      }
	    }
	  };
	}

	function didStartAfterCritical(draggableId, afterCritical) {
	  return Boolean(afterCritical.effected[draggableId]);
	}

	var fromCombine = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      destination = _ref.destination,
	      draggables = _ref.draggables,
	      combine = _ref.combine,
	      afterCritical = _ref.afterCritical;

	  if (!destination.isCombineEnabled) {
	    return null;
	  }

	  var combineId = combine.draggableId;
	  var combineWith = draggables[combineId];
	  var combineWithIndex = combineWith.descriptor.index;
	  var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);

	  if (didCombineWithStartAfterCritical) {
	    if (isMovingForward) {
	      return combineWithIndex;
	    }

	    return combineWithIndex - 1;
	  }

	  if (isMovingForward) {
	    return combineWithIndex + 1;
	  }

	  return combineWithIndex;
	});

	var fromReorder = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      isInHomeList = _ref.isInHomeList,
	      insideDestination = _ref.insideDestination,
	      location = _ref.location;

	  if (!insideDestination.length) {
	    return null;
	  }

	  var currentIndex = location.index;
	  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
	  var firstIndex = insideDestination[0].descriptor.index;
	  var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
	  var upperBound = isInHomeList ? lastIndex : lastIndex + 1;

	  if (proposedIndex < firstIndex) {
	    return null;
	  }

	  if (proposedIndex > upperBound) {
	    return null;
	  }

	  return proposedIndex;
	});

	var moveToNextIndex = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      isInHomeList = _ref.isInHomeList,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport,
	      afterCritical = _ref.afterCritical;
	  var wasAt = previousImpact.at;
	  !wasAt ?  invariant(false, 'Cannot move in direction without previous impact location')  : void 0;

	  if (wasAt.type === 'REORDER') {
	    var _newIndex = fromReorder({
	      isMovingForward: isMovingForward,
	      isInHomeList: isInHomeList,
	      location: wasAt.destination,
	      insideDestination: insideDestination
	    });

	    if (_newIndex == null) {
	      return null;
	    }

	    return calculateReorderImpact({
	      draggable: draggable,
	      insideDestination: insideDestination,
	      destination: destination,
	      viewport: viewport,
	      last: previousImpact.displaced,
	      displacedBy: previousImpact.displacedBy,
	      index: _newIndex
	    });
	  }

	  var newIndex = fromCombine({
	    isMovingForward: isMovingForward,
	    destination: destination,
	    displaced: previousImpact.displaced,
	    draggables: draggables,
	    combine: wasAt.combine,
	    afterCritical: afterCritical
	  });

	  if (newIndex == null) {
	    return null;
	  }

	  return calculateReorderImpact({
	    draggable: draggable,
	    insideDestination: insideDestination,
	    destination: destination,
	    viewport: viewport,
	    last: previousImpact.displaced,
	    displacedBy: previousImpact.displacedBy,
	    index: newIndex
	  });
	});

	var getCombinedItemDisplacement = (function (_ref) {
	  var displaced = _ref.displaced,
	      afterCritical = _ref.afterCritical,
	      combineWith = _ref.combineWith,
	      displacedBy = _ref.displacedBy;
	  var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);

	  if (didStartAfterCritical(combineWith, afterCritical)) {
	    return isDisplaced ? origin : negate(displacedBy.point);
	  }

	  return isDisplaced ? displacedBy.point : origin;
	});

	var whenCombining = (function (_ref) {
	  var afterCritical = _ref.afterCritical,
	      impact = _ref.impact,
	      draggables = _ref.draggables;
	  var combine = tryGetCombine(impact);
	  !combine ?  invariant(false)  : void 0;
	  var combineWith = combine.draggableId;
	  var center = draggables[combineWith].page.borderBox.center;
	  var displaceBy = getCombinedItemDisplacement({
	    displaced: impact.displaced,
	    afterCritical: afterCritical,
	    combineWith: combineWith,
	    displacedBy: impact.displacedBy
	  });
	  return add(center, displaceBy);
	});

	var distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter(axis, box) {
	  return box.margin[axis.start] + box.borderBox[axis.size] / 2;
	};

	var distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter(axis, box) {
	  return box.margin[axis.end] + box.borderBox[axis.size] / 2;
	};

	var getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter(axis, target, isMoving) {
	  return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
	};

	var goAfter = function goAfter(_ref) {
	  var axis = _ref.axis,
	      moveRelativeTo = _ref.moveRelativeTo,
	      isMoving = _ref.isMoving;
	  return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
	};
	var goBefore = function goBefore(_ref2) {
	  var axis = _ref2.axis,
	      moveRelativeTo = _ref2.moveRelativeTo,
	      isMoving = _ref2.isMoving;
	  return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
	};
	var goIntoStart = function goIntoStart(_ref3) {
	  var axis = _ref3.axis,
	      moveInto = _ref3.moveInto,
	      isMoving = _ref3.isMoving;
	  return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
	};

	var whenReordering = (function (_ref) {
	  var impact = _ref.impact,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      droppable = _ref.droppable,
	      afterCritical = _ref.afterCritical;
	  var insideDestination = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);
	  var draggablePage = draggable.page;
	  var axis = droppable.axis;

	  if (!insideDestination.length) {
	    return goIntoStart({
	      axis: axis,
	      moveInto: droppable.page,
	      isMoving: draggablePage
	    });
	  }

	  var displaced = impact.displaced,
	      displacedBy = impact.displacedBy;
	  var closestAfter = displaced.all[0];

	  if (closestAfter) {
	    var closest = draggables[closestAfter];

	    if (didStartAfterCritical(closestAfter, afterCritical)) {
	      return goBefore({
	        axis: axis,
	        moveRelativeTo: closest.page,
	        isMoving: draggablePage
	      });
	    }

	    var withDisplacement = cssBoxModel_cjs.offset(closest.page, displacedBy.point);
	    return goBefore({
	      axis: axis,
	      moveRelativeTo: withDisplacement,
	      isMoving: draggablePage
	    });
	  }

	  var last = insideDestination[insideDestination.length - 1];

	  if (last.descriptor.id === draggable.descriptor.id) {
	    return draggablePage.borderBox.center;
	  }

	  if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
	    var page = cssBoxModel_cjs.offset(last.page, negate(afterCritical.displacedBy.point));
	    return goAfter({
	      axis: axis,
	      moveRelativeTo: page,
	      isMoving: draggablePage
	    });
	  }

	  return goAfter({
	    axis: axis,
	    moveRelativeTo: last.page,
	    isMoving: draggablePage
	  });
	});

	var withDroppableDisplacement = (function (droppable, point) {
	  var frame = droppable.frame;

	  if (!frame) {
	    return point;
	  }

	  return add(point, frame.scroll.diff.displacement);
	});

	var getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement(_ref) {
	  var impact = _ref.impact,
	      draggable = _ref.draggable,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      afterCritical = _ref.afterCritical;
	  var original = draggable.page.borderBox.center;
	  var at = impact.at;

	  if (!droppable) {
	    return original;
	  }

	  if (!at) {
	    return original;
	  }

	  if (at.type === 'REORDER') {
	    return whenReordering({
	      impact: impact,
	      draggable: draggable,
	      draggables: draggables,
	      droppable: droppable,
	      afterCritical: afterCritical
	    });
	  }

	  return whenCombining({
	    impact: impact,
	    draggables: draggables,
	    afterCritical: afterCritical
	  });
	};

	var getPageBorderBoxCenterFromImpact = (function (args) {
	  var withoutDisplacement = getResultWithoutDroppableDisplacement(args);
	  var droppable = args.droppable;
	  var withDisplacement = droppable ? withDroppableDisplacement(droppable, withoutDisplacement) : withoutDisplacement;
	  return withDisplacement;
	});

	var scrollViewport = (function (viewport, newScroll) {
	  var diff = subtract(newScroll, viewport.scroll.initial);
	  var displacement = negate(diff);
	  var frame = cssBoxModel_cjs.getRect({
	    top: newScroll.y,
	    bottom: newScroll.y + viewport.frame.height,
	    left: newScroll.x,
	    right: newScroll.x + viewport.frame.width
	  });
	  var updated = {
	    frame: frame,
	    scroll: {
	      initial: viewport.scroll.initial,
	      max: viewport.scroll.max,
	      current: newScroll,
	      diff: {
	        value: diff,
	        displacement: displacement
	      }
	    }
	  };
	  return updated;
	});

	function getDraggables(ids, draggables) {
	  return ids.map(function (id) {
	    return draggables[id];
	  });
	}

	function tryGetVisible(id, groups) {
	  for (var i = 0; i < groups.length; i++) {
	    var displacement = groups[i].visible[id];

	    if (displacement) {
	      return displacement;
	    }
	  }

	  return null;
	}

	var speculativelyIncrease = (function (_ref) {
	  var impact = _ref.impact,
	      viewport = _ref.viewport,
	      destination = _ref.destination,
	      draggables = _ref.draggables,
	      maxScrollChange = _ref.maxScrollChange;
	  var scrolledViewport = scrollViewport(viewport, add(viewport.scroll.current, maxScrollChange));
	  var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
	  var last = impact.displaced;
	  var withViewportScroll = getDisplacementGroups({
	    afterDragging: getDraggables(last.all, draggables),
	    destination: destination,
	    displacedBy: impact.displacedBy,
	    viewport: scrolledViewport.frame,
	    last: last,
	    forceShouldAnimate: false
	  });
	  var withDroppableScroll = getDisplacementGroups({
	    afterDragging: getDraggables(last.all, draggables),
	    destination: scrolledDroppable,
	    displacedBy: impact.displacedBy,
	    viewport: viewport.frame,
	    last: last,
	    forceShouldAnimate: false
	  });
	  var invisible = {};
	  var visible = {};
	  var groups = [last, withViewportScroll, withDroppableScroll];
	  last.all.forEach(function (id) {
	    var displacement = tryGetVisible(id, groups);

	    if (displacement) {
	      visible[id] = displacement;
	      return;
	    }

	    invisible[id] = true;
	  });

	  var newImpact = _extends({}, impact, {
	    displaced: {
	      all: last.all,
	      invisible: invisible,
	      visible: visible
	    }
	  });

	  return newImpact;
	});

	var withViewportDisplacement = (function (viewport, point) {
	  return add(viewport.scroll.diff.displacement, point);
	});

	var getClientFromPageBorderBoxCenter = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      viewport = _ref.viewport;
	  var withoutPageScrollChange = withViewportDisplacement(viewport, pageBorderBoxCenter);
	  var offset = subtract(withoutPageScrollChange, draggable.page.borderBox.center);
	  return add(draggable.client.borderBox.center, offset);
	});

	var isTotallyVisibleInNewLocation = (function (_ref) {
	  var draggable = _ref.draggable,
	      destination = _ref.destination,
	      newPageBorderBoxCenter = _ref.newPageBorderBoxCenter,
	      viewport = _ref.viewport,
	      withDroppableDisplacement = _ref.withDroppableDisplacement,
	      _ref$onlyOnMainAxis = _ref.onlyOnMainAxis,
	      onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;
	  var changeNeeded = subtract(newPageBorderBoxCenter, draggable.page.borderBox.center);
	  var shifted = offsetByPosition(draggable.page.borderBox, changeNeeded);
	  var args = {
	    target: shifted,
	    destination: destination,
	    withDroppableDisplacement: withDroppableDisplacement,
	    viewport: viewport
	  };
	  return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
	});

	var moveToNextPlace = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      draggables = _ref.draggables,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport,
	      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      previousClientSelection = _ref.previousClientSelection,
	      afterCritical = _ref.afterCritical;

	  if (!destination.isEnabled) {
	    return null;
	  }

	  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
	  var isInHomeList = isHomeOf(draggable, destination);
	  var impact = moveToNextCombine({
	    isMovingForward: isMovingForward,
	    draggable: draggable,
	    destination: destination,
	    insideDestination: insideDestination,
	    previousImpact: previousImpact
	  }) || moveToNextIndex({
	    isMovingForward: isMovingForward,
	    isInHomeList: isInHomeList,
	    draggable: draggable,
	    draggables: draggables,
	    destination: destination,
	    insideDestination: insideDestination,
	    previousImpact: previousImpact,
	    viewport: viewport,
	    afterCritical: afterCritical
	  });

	  if (!impact) {
	    return null;
	  }

	  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
	    impact: impact,
	    draggable: draggable,
	    droppable: destination,
	    draggables: draggables,
	    afterCritical: afterCritical
	  });
	  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
	    draggable: draggable,
	    destination: destination,
	    newPageBorderBoxCenter: pageBorderBoxCenter,
	    viewport: viewport.frame,
	    withDroppableDisplacement: false,
	    onlyOnMainAxis: true
	  });

	  if (isVisibleInNewLocation) {
	    var clientSelection = getClientFromPageBorderBoxCenter({
	      pageBorderBoxCenter: pageBorderBoxCenter,
	      draggable: draggable,
	      viewport: viewport
	    });
	    return {
	      clientSelection: clientSelection,
	      impact: impact,
	      scrollJumpRequest: null
	    };
	  }

	  var distance = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
	  var cautious = speculativelyIncrease({
	    impact: impact,
	    viewport: viewport,
	    destination: destination,
	    draggables: draggables,
	    maxScrollChange: distance
	  });
	  return {
	    clientSelection: previousClientSelection,
	    impact: cautious,
	    scrollJumpRequest: distance
	  };
	});

	var getKnownActive = function getKnownActive(droppable) {
	  var rect = droppable.subject.active;
	  !rect ?  invariant(false, 'Cannot get clipped area from droppable')  : void 0;
	  return rect;
	};

	var getBestCrossAxisDroppable = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      source = _ref.source,
	      droppables = _ref.droppables,
	      viewport = _ref.viewport;
	  var active = source.subject.active;

	  if (!active) {
	    return null;
	  }

	  var axis = source.axis;
	  var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
	  var candidates = toDroppableList(droppables).filter(function (droppable) {
	    return droppable !== source;
	  }).filter(function (droppable) {
	    return droppable.isEnabled;
	  }).filter(function (droppable) {
	    return Boolean(droppable.subject.active);
	  }).filter(function (droppable) {
	    return isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable));
	  }).filter(function (droppable) {
	    var activeOfTarget = getKnownActive(droppable);

	    if (isMovingForward) {
	      return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
	    }

	    return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
	  }).filter(function (droppable) {
	    var activeOfTarget = getKnownActive(droppable);
	    var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
	    return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
	  }).sort(function (a, b) {
	    var first = getKnownActive(a)[axis.crossAxisStart];
	    var second = getKnownActive(b)[axis.crossAxisStart];

	    if (isMovingForward) {
	      return first - second;
	    }

	    return second - first;
	  }).filter(function (droppable, index, array) {
	    return getKnownActive(droppable)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];
	  });

	  if (!candidates.length) {
	    return null;
	  }

	  if (candidates.length === 1) {
	    return candidates[0];
	  }

	  var contains = candidates.filter(function (droppable) {
	    var isWithinDroppable = isWithin(getKnownActive(droppable)[axis.start], getKnownActive(droppable)[axis.end]);
	    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
	  });

	  if (contains.length === 1) {
	    return contains[0];
	  }

	  if (contains.length > 1) {
	    return contains.sort(function (a, b) {
	      return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];
	    })[0];
	  }

	  return candidates.sort(function (a, b) {
	    var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a)));
	    var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b)));

	    if (first !== second) {
	      return first - second;
	    }

	    return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];
	  })[0];
	});

	var getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter(draggable, afterCritical) {
	  var original = draggable.page.borderBox.center;
	  return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
	};
	var getCurrentPageBorderBox = function getCurrentPageBorderBox(draggable, afterCritical) {
	  var original = draggable.page.borderBox;
	  return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
	};

	var getClosestDraggable = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      viewport = _ref.viewport,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      afterCritical = _ref.afterCritical;
	  var sorted = insideDestination.filter(function (draggable) {
	    return isTotallyVisible({
	      target: getCurrentPageBorderBox(draggable, afterCritical),
	      destination: destination,
	      viewport: viewport.frame,
	      withDroppableDisplacement: true
	    });
	  }).sort(function (a, b) {
	    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));
	    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b, afterCritical)));

	    if (distanceToA < distanceToB) {
	      return -1;
	    }

	    if (distanceToB < distanceToA) {
	      return 1;
	    }

	    return a.descriptor.index - b.descriptor.index;
	  });
	  return sorted[0] || null;
	});

	var getDisplacedBy = memoizeOne(function getDisplacedBy(axis, displaceBy) {
	  var displacement = displaceBy[axis.line];
	  return {
	    value: displacement,
	    point: patch(axis.line, displacement)
	  };
	});

	var getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables) {
	  var axis = droppable.axis;

	  if (droppable.descriptor.mode === 'virtual') {
	    return patch(axis.line, placeholderSize[axis.line]);
	  }

	  var availableSpace = droppable.subject.page.contentBox[axis.size];
	  var insideDroppable = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);
	  var spaceUsed = insideDroppable.reduce(function (sum, dimension) {
	    return sum + dimension.client.marginBox[axis.size];
	  }, 0);
	  var requiredSpace = spaceUsed + placeholderSize[axis.line];
	  var needsToGrowBy = requiredSpace - availableSpace;

	  if (needsToGrowBy <= 0) {
	    return null;
	  }

	  return patch(axis.line, needsToGrowBy);
	};

	var withMaxScroll = function withMaxScroll(frame, max) {
	  return _extends({}, frame, {
	    scroll: _extends({}, frame.scroll, {
	      max: max
	    })
	  });
	};

	var addPlaceholder = function addPlaceholder(droppable, draggable, draggables) {
	  var frame = droppable.frame;
	  !!isHomeOf(draggable, droppable) ?  invariant(false, 'Should not add placeholder space to home list')  : void 0;
	  !!droppable.subject.withPlaceholder ?  invariant(false, 'Cannot add placeholder size to a subject when it already has one')  : void 0;
	  var placeholderSize = getDisplacedBy(droppable.axis, draggable.displaceBy).point;
	  var requiredGrowth = getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables);
	  var added = {
	    placeholderSize: placeholderSize,
	    increasedBy: requiredGrowth,
	    oldFrameMaxScroll: droppable.frame ? droppable.frame.scroll.max : null
	  };

	  if (!frame) {
	    var _subject = getSubject({
	      page: droppable.subject.page,
	      withPlaceholder: added,
	      axis: droppable.axis,
	      frame: droppable.frame
	    });

	    return _extends({}, droppable, {
	      subject: _subject
	    });
	  }

	  var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
	  var newFrame = withMaxScroll(frame, maxScroll);
	  var subject = getSubject({
	    page: droppable.subject.page,
	    withPlaceholder: added,
	    axis: droppable.axis,
	    frame: newFrame
	  });
	  return _extends({}, droppable, {
	    subject: subject,
	    frame: newFrame
	  });
	};
	var removePlaceholder = function removePlaceholder(droppable) {
	  var added = droppable.subject.withPlaceholder;
	  !added ?  invariant(false, 'Cannot remove placeholder form subject when there was none')  : void 0;
	  var frame = droppable.frame;

	  if (!frame) {
	    var _subject2 = getSubject({
	      page: droppable.subject.page,
	      axis: droppable.axis,
	      frame: null,
	      withPlaceholder: null
	    });

	    return _extends({}, droppable, {
	      subject: _subject2
	    });
	  }

	  var oldMaxScroll = added.oldFrameMaxScroll;
	  !oldMaxScroll ?  invariant(false, 'Expected droppable with frame to have old max frame scroll when removing placeholder')  : void 0;
	  var newFrame = withMaxScroll(frame, oldMaxScroll);
	  var subject = getSubject({
	    page: droppable.subject.page,
	    axis: droppable.axis,
	    frame: newFrame,
	    withPlaceholder: null
	  });
	  return _extends({}, droppable, {
	    subject: subject,
	    frame: newFrame
	  });
	};

	var moveToNewDroppable = (function (_ref) {
	  var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      moveRelativeTo = _ref.moveRelativeTo,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      destination = _ref.destination,
	      viewport = _ref.viewport,
	      afterCritical = _ref.afterCritical;

	  if (!moveRelativeTo) {
	    if (insideDestination.length) {
	      return null;
	    }

	    var proposed = {
	      displaced: emptyGroups,
	      displacedBy: noDisplacedBy,
	      at: {
	        type: 'REORDER',
	        destination: {
	          droppableId: destination.descriptor.id,
	          index: 0
	        }
	      }
	    };
	    var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
	      impact: proposed,
	      draggable: draggable,
	      droppable: destination,
	      draggables: draggables,
	      afterCritical: afterCritical
	    });
	    var withPlaceholder = isHomeOf(draggable, destination) ? destination : addPlaceholder(destination, draggable, draggables);
	    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
	      draggable: draggable,
	      destination: withPlaceholder,
	      newPageBorderBoxCenter: proposedPageBorderBoxCenter,
	      viewport: viewport.frame,
	      withDroppableDisplacement: false,
	      onlyOnMainAxis: true
	    });
	    return isVisibleInNewLocation ? proposed : null;
	  }

	  var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);

	  var proposedIndex = function () {
	    var relativeTo = moveRelativeTo.descriptor.index;

	    if (moveRelativeTo.descriptor.id === draggable.descriptor.id) {
	      return relativeTo;
	    }

	    if (isGoingBeforeTarget) {
	      return relativeTo;
	    }

	    return relativeTo + 1;
	  }();

	  var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
	  return calculateReorderImpact({
	    draggable: draggable,
	    insideDestination: insideDestination,
	    destination: destination,
	    viewport: viewport,
	    displacedBy: displacedBy,
	    last: emptyGroups,
	    index: proposedIndex
	  });
	});

	var moveCrossAxis = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      draggable = _ref.draggable,
	      isOver = _ref.isOver,
	      draggables = _ref.draggables,
	      droppables = _ref.droppables,
	      viewport = _ref.viewport,
	      afterCritical = _ref.afterCritical;
	  var destination = getBestCrossAxisDroppable({
	    isMovingForward: isMovingForward,
	    pageBorderBoxCenter: previousPageBorderBoxCenter,
	    source: isOver,
	    droppables: droppables,
	    viewport: viewport
	  });

	  if (!destination) {
	    return null;
	  }

	  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
	  var moveRelativeTo = getClosestDraggable({
	    pageBorderBoxCenter: previousPageBorderBoxCenter,
	    viewport: viewport,
	    destination: destination,
	    insideDestination: insideDestination,
	    afterCritical: afterCritical
	  });
	  var impact = moveToNewDroppable({
	    previousPageBorderBoxCenter: previousPageBorderBoxCenter,
	    destination: destination,
	    draggable: draggable,
	    draggables: draggables,
	    moveRelativeTo: moveRelativeTo,
	    insideDestination: insideDestination,
	    viewport: viewport,
	    afterCritical: afterCritical
	  });

	  if (!impact) {
	    return null;
	  }

	  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
	    impact: impact,
	    draggable: draggable,
	    droppable: destination,
	    draggables: draggables,
	    afterCritical: afterCritical
	  });
	  var clientSelection = getClientFromPageBorderBoxCenter({
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    draggable: draggable,
	    viewport: viewport
	  });
	  return {
	    clientSelection: clientSelection,
	    impact: impact,
	    scrollJumpRequest: null
	  };
	});

	var whatIsDraggedOver = (function (impact) {
	  var at = impact.at;

	  if (!at) {
	    return null;
	  }

	  if (at.type === 'REORDER') {
	    return at.destination.droppableId;
	  }

	  return at.combine.droppableId;
	});

	var getDroppableOver = function getDroppableOver(impact, droppables) {
	  var id = whatIsDraggedOver(impact);
	  return id ? droppables[id] : null;
	};

	var moveInDirection = (function (_ref) {
	  var state = _ref.state,
	      type = _ref.type;
	  var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);
	  var isMainAxisMovementAllowed = Boolean(isActuallyOver);
	  var home = state.dimensions.droppables[state.critical.droppable.id];
	  var isOver = isActuallyOver || home;
	  var direction = isOver.axis.direction;
	  var isMovingOnMainAxis = direction === 'vertical' && (type === 'MOVE_UP' || type === 'MOVE_DOWN') || direction === 'horizontal' && (type === 'MOVE_LEFT' || type === 'MOVE_RIGHT');

	  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
	    return null;
	  }

	  var isMovingForward = type === 'MOVE_DOWN' || type === 'MOVE_RIGHT';
	  var draggable = state.dimensions.draggables[state.critical.draggable.id];
	  var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
	  var _state$dimensions = state.dimensions,
	      draggables = _state$dimensions.draggables,
	      droppables = _state$dimensions.droppables;
	  return isMovingOnMainAxis ? moveToNextPlace({
	    isMovingForward: isMovingForward,
	    previousPageBorderBoxCenter: previousPageBorderBoxCenter,
	    draggable: draggable,
	    destination: isOver,
	    draggables: draggables,
	    viewport: state.viewport,
	    previousClientSelection: state.current.client.selection,
	    previousImpact: state.impact,
	    afterCritical: state.afterCritical
	  }) : moveCrossAxis({
	    isMovingForward: isMovingForward,
	    previousPageBorderBoxCenter: previousPageBorderBoxCenter,
	    draggable: draggable,
	    isOver: isOver,
	    draggables: draggables,
	    droppables: droppables,
	    viewport: state.viewport,
	    afterCritical: state.afterCritical
	  });
	});

	function isMovementAllowed(state) {
	  return state.phase === 'DRAGGING' || state.phase === 'COLLECTING';
	}

	function isPositionInFrame(frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function run(point) {
	    return isWithinVertical(point.y) && isWithinHorizontal(point.x);
	  };
	}

	function getHasOverlap(first, second) {
	  return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
	}

	function getFurthestAway(_ref) {
	  var pageBorderBox = _ref.pageBorderBox,
	      draggable = _ref.draggable,
	      candidates = _ref.candidates;
	  var startCenter = draggable.page.borderBox.center;
	  var sorted = candidates.map(function (candidate) {
	    var axis = candidate.axis;
	    var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
	    return {
	      id: candidate.descriptor.id,
	      distance: distance(startCenter, target)
	    };
	  }).sort(function (a, b) {
	    return b.distance - a.distance;
	  });
	  return sorted[0] ? sorted[0].id : null;
	}

	function getDroppableOver$1(_ref2) {
	  var pageBorderBox = _ref2.pageBorderBox,
	      draggable = _ref2.draggable,
	      droppables = _ref2.droppables;
	  var candidates = toDroppableList(droppables).filter(function (item) {
	    if (!item.isEnabled) {
	      return false;
	    }

	    var active = item.subject.active;

	    if (!active) {
	      return false;
	    }

	    if (!getHasOverlap(pageBorderBox, active)) {
	      return false;
	    }

	    if (isPositionInFrame(active)(pageBorderBox.center)) {
	      return true;
	    }

	    var axis = item.axis;
	    var childCenter = active.center[axis.crossAxisLine];
	    var crossAxisStart = pageBorderBox[axis.crossAxisStart];
	    var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
	    var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
	    var isStartContained = isContained(crossAxisStart);
	    var isEndContained = isContained(crossAxisEnd);

	    if (!isStartContained && !isEndContained) {
	      return true;
	    }

	    if (isStartContained) {
	      return crossAxisStart < childCenter;
	    }

	    return crossAxisEnd > childCenter;
	  });

	  if (!candidates.length) {
	    return null;
	  }

	  if (candidates.length === 1) {
	    return candidates[0].descriptor.id;
	  }

	  return getFurthestAway({
	    pageBorderBox: pageBorderBox,
	    draggable: draggable,
	    candidates: candidates
	  });
	}

	var offsetRectByPosition = function offsetRectByPosition(rect, point) {
	  return cssBoxModel_cjs.getRect(offsetByPosition(rect, point));
	};

	var withDroppableScroll = (function (droppable, area) {
	  var frame = droppable.frame;

	  if (!frame) {
	    return area;
	  }

	  return offsetRectByPosition(area, frame.scroll.diff.value);
	});

	function getIsDisplaced(_ref) {
	  var displaced = _ref.displaced,
	      id = _ref.id;
	  return Boolean(displaced.visible[id] || displaced.invisible[id]);
	}

	function atIndex(_ref) {
	  var draggable = _ref.draggable,
	      closest = _ref.closest,
	      inHomeList = _ref.inHomeList;

	  if (!closest) {
	    return null;
	  }

	  if (!inHomeList) {
	    return closest.descriptor.index;
	  }

	  if (closest.descriptor.index > draggable.descriptor.index) {
	    return closest.descriptor.index - 1;
	  }

	  return closest.descriptor.index;
	}

	var getReorderImpact = (function (_ref2) {
	  var targetRect = _ref2.pageBorderBoxWithDroppableScroll,
	      draggable = _ref2.draggable,
	      destination = _ref2.destination,
	      insideDestination = _ref2.insideDestination,
	      last = _ref2.last,
	      viewport = _ref2.viewport,
	      afterCritical = _ref2.afterCritical;
	  var axis = destination.axis;
	  var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
	  var displacement = displacedBy.value;
	  var targetStart = targetRect[axis.start];
	  var targetEnd = targetRect[axis.end];
	  var withoutDragging = removeDraggableFromList(draggable, insideDestination);
	  var closest = find(withoutDragging, function (child) {
	    var id = child.descriptor.id;
	    var childCenter = child.page.borderBox.center[axis.line];
	    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
	    var isDisplaced = getIsDisplaced({
	      displaced: last,
	      id: id
	    });

	    if (didStartAfterCritical$1) {
	      if (isDisplaced) {
	        return targetEnd <= childCenter;
	      }

	      return targetStart < childCenter - displacement;
	    }

	    if (isDisplaced) {
	      return targetEnd <= childCenter + displacement;
	    }

	    return targetStart < childCenter;
	  });
	  var newIndex = atIndex({
	    draggable: draggable,
	    closest: closest,
	    inHomeList: isHomeOf(draggable, destination)
	  });
	  return calculateReorderImpact({
	    draggable: draggable,
	    insideDestination: insideDestination,
	    destination: destination,
	    viewport: viewport,
	    last: last,
	    displacedBy: displacedBy,
	    index: newIndex
	  });
	});

	var combineThresholdDivisor = 4;
	var getCombineImpact = (function (_ref) {
	  var draggable = _ref.draggable,
	      targetRect = _ref.pageBorderBoxWithDroppableScroll,
	      previousImpact = _ref.previousImpact,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      afterCritical = _ref.afterCritical;

	  if (!destination.isCombineEnabled) {
	    return null;
	  }

	  var axis = destination.axis;
	  var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
	  var displacement = displacedBy.value;
	  var targetStart = targetRect[axis.start];
	  var targetEnd = targetRect[axis.end];
	  var withoutDragging = removeDraggableFromList(draggable, insideDestination);
	  var combineWith = find(withoutDragging, function (child) {
	    var id = child.descriptor.id;
	    var childRect = child.page.borderBox;
	    var childSize = childRect[axis.size];
	    var threshold = childSize / combineThresholdDivisor;
	    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
	    var isDisplaced = getIsDisplaced({
	      displaced: previousImpact.displaced,
	      id: id
	    });

	    if (didStartAfterCritical$1) {
	      if (isDisplaced) {
	        return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
	      }

	      return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
	    }

	    if (isDisplaced) {
	      return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
	    }

	    return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
	  });

	  if (!combineWith) {
	    return null;
	  }

	  var impact = {
	    displacedBy: displacedBy,
	    displaced: previousImpact.displaced,
	    at: {
	      type: 'COMBINE',
	      combine: {
	        draggableId: combineWith.descriptor.id,
	        droppableId: destination.descriptor.id
	      }
	    }
	  };
	  return impact;
	});

	var getDragImpact = (function (_ref) {
	  var pageOffset = _ref.pageOffset,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      droppables = _ref.droppables,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport,
	      afterCritical = _ref.afterCritical;
	  var pageBorderBox = offsetRectByPosition(draggable.page.borderBox, pageOffset);
	  var destinationId = getDroppableOver$1({
	    pageBorderBox: pageBorderBox,
	    draggable: draggable,
	    droppables: droppables
	  });

	  if (!destinationId) {
	    return noImpact;
	  }

	  var destination = droppables[destinationId];
	  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
	  var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
	  return getCombineImpact({
	    pageBorderBoxWithDroppableScroll: pageBorderBoxWithDroppableScroll,
	    draggable: draggable,
	    previousImpact: previousImpact,
	    destination: destination,
	    insideDestination: insideDestination,
	    afterCritical: afterCritical
	  }) || getReorderImpact({
	    pageBorderBoxWithDroppableScroll: pageBorderBoxWithDroppableScroll,
	    draggable: draggable,
	    destination: destination,
	    insideDestination: insideDestination,
	    last: previousImpact.displaced,
	    viewport: viewport,
	    afterCritical: afterCritical
	  });
	});

	var patchDroppableMap = (function (droppables, updated) {
	  var _extends2;

	  return _extends({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));
	});

	var clearUnusedPlaceholder = function clearUnusedPlaceholder(_ref) {
	  var previousImpact = _ref.previousImpact,
	      impact = _ref.impact,
	      droppables = _ref.droppables;
	  var last = whatIsDraggedOver(previousImpact);
	  var now = whatIsDraggedOver(impact);

	  if (!last) {
	    return droppables;
	  }

	  if (last === now) {
	    return droppables;
	  }

	  var lastDroppable = droppables[last];

	  if (!lastDroppable.subject.withPlaceholder) {
	    return droppables;
	  }

	  var updated = removePlaceholder(lastDroppable);
	  return patchDroppableMap(droppables, updated);
	};

	var recomputePlaceholders = (function (_ref2) {
	  var draggable = _ref2.draggable,
	      draggables = _ref2.draggables,
	      droppables = _ref2.droppables,
	      previousImpact = _ref2.previousImpact,
	      impact = _ref2.impact;
	  var cleaned = clearUnusedPlaceholder({
	    previousImpact: previousImpact,
	    impact: impact,
	    droppables: droppables
	  });
	  var isOver = whatIsDraggedOver(impact);

	  if (!isOver) {
	    return cleaned;
	  }

	  var droppable = droppables[isOver];

	  if (isHomeOf(draggable, droppable)) {
	    return cleaned;
	  }

	  if (droppable.subject.withPlaceholder) {
	    return cleaned;
	  }

	  var patched = addPlaceholder(droppable, draggable, draggables);
	  return patchDroppableMap(cleaned, patched);
	});

	var update = (function (_ref) {
	  var state = _ref.state,
	      forcedClientSelection = _ref.clientSelection,
	      forcedDimensions = _ref.dimensions,
	      forcedViewport = _ref.viewport,
	      forcedImpact = _ref.impact,
	      scrollJumpRequest = _ref.scrollJumpRequest;
	  var viewport = forcedViewport || state.viewport;
	  var dimensions = forcedDimensions || state.dimensions;
	  var clientSelection = forcedClientSelection || state.current.client.selection;
	  var offset = subtract(clientSelection, state.initial.client.selection);
	  var client = {
	    offset: offset,
	    selection: clientSelection,
	    borderBoxCenter: add(state.initial.client.borderBoxCenter, offset)
	  };
	  var page = {
	    selection: add(client.selection, viewport.scroll.current),
	    borderBoxCenter: add(client.borderBoxCenter, viewport.scroll.current),
	    offset: add(client.offset, viewport.scroll.diff.value)
	  };
	  var current = {
	    client: client,
	    page: page
	  };

	  if (state.phase === 'COLLECTING') {
	    return _extends({
	      phase: 'COLLECTING'
	    }, state, {
	      dimensions: dimensions,
	      viewport: viewport,
	      current: current
	    });
	  }

	  var draggable = dimensions.draggables[state.critical.draggable.id];
	  var newImpact = forcedImpact || getDragImpact({
	    pageOffset: page.offset,
	    draggable: draggable,
	    draggables: dimensions.draggables,
	    droppables: dimensions.droppables,
	    previousImpact: state.impact,
	    viewport: viewport,
	    afterCritical: state.afterCritical
	  });
	  var withUpdatedPlaceholders = recomputePlaceholders({
	    draggable: draggable,
	    impact: newImpact,
	    previousImpact: state.impact,
	    draggables: dimensions.draggables,
	    droppables: dimensions.droppables
	  });

	  var result = _extends({}, state, {
	    current: current,
	    dimensions: {
	      draggables: dimensions.draggables,
	      droppables: withUpdatedPlaceholders
	    },
	    impact: newImpact,
	    viewport: viewport,
	    scrollJumpRequest: scrollJumpRequest || null,
	    forceShouldAnimate: scrollJumpRequest ? false : null
	  });

	  return result;
	});

	function getDraggables$1(ids, draggables) {
	  return ids.map(function (id) {
	    return draggables[id];
	  });
	}

	var recompute = (function (_ref) {
	  var impact = _ref.impact,
	      viewport = _ref.viewport,
	      draggables = _ref.draggables,
	      destination = _ref.destination,
	      forceShouldAnimate = _ref.forceShouldAnimate;
	  var last = impact.displaced;
	  var afterDragging = getDraggables$1(last.all, draggables);
	  var displaced = getDisplacementGroups({
	    afterDragging: afterDragging,
	    destination: destination,
	    displacedBy: impact.displacedBy,
	    viewport: viewport.frame,
	    forceShouldAnimate: forceShouldAnimate,
	    last: last
	  });
	  return _extends({}, impact, {
	    displaced: displaced
	  });
	});

	var getClientBorderBoxCenter = (function (_ref) {
	  var impact = _ref.impact,
	      draggable = _ref.draggable,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport,
	      afterCritical = _ref.afterCritical;
	  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
	    impact: impact,
	    draggable: draggable,
	    draggables: draggables,
	    droppable: droppable,
	    afterCritical: afterCritical
	  });
	  return getClientFromPageBorderBoxCenter({
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    draggable: draggable,
	    viewport: viewport
	  });
	});

	var refreshSnap = (function (_ref) {
	  var state = _ref.state,
	      forcedDimensions = _ref.dimensions,
	      forcedViewport = _ref.viewport;
	  !(state.movementMode === 'SNAP') ?  invariant(false)  : void 0;
	  var needsVisibilityCheck = state.impact;
	  var viewport = forcedViewport || state.viewport;
	  var dimensions = forcedDimensions || state.dimensions;
	  var draggables = dimensions.draggables,
	      droppables = dimensions.droppables;
	  var draggable = draggables[state.critical.draggable.id];
	  var isOver = whatIsDraggedOver(needsVisibilityCheck);
	  !isOver ?  invariant(false, 'Must be over a destination in SNAP movement mode')  : void 0;
	  var destination = droppables[isOver];
	  var impact = recompute({
	    impact: needsVisibilityCheck,
	    viewport: viewport,
	    destination: destination,
	    draggables: draggables
	  });
	  var clientSelection = getClientBorderBoxCenter({
	    impact: impact,
	    draggable: draggable,
	    droppable: destination,
	    draggables: draggables,
	    viewport: viewport,
	    afterCritical: state.afterCritical
	  });
	  return update({
	    impact: impact,
	    clientSelection: clientSelection,
	    state: state,
	    dimensions: dimensions,
	    viewport: viewport
	  });
	});

	var getHomeLocation = (function (descriptor) {
	  return {
	    index: descriptor.index,
	    droppableId: descriptor.droppableId
	  };
	});

	var getLiftEffect = (function (_ref) {
	  var draggable = _ref.draggable,
	      home = _ref.home,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  var displacedBy = getDisplacedBy(home.axis, draggable.displaceBy);
	  var insideHome = getDraggablesInsideDroppable(home.descriptor.id, draggables);
	  var rawIndex = insideHome.indexOf(draggable);
	  !(rawIndex !== -1) ?  invariant(false, 'Expected draggable to be inside home list')  : void 0;
	  var afterDragging = insideHome.slice(rawIndex + 1);
	  var effected = afterDragging.reduce(function (previous, item) {
	    previous[item.descriptor.id] = true;
	    return previous;
	  }, {});
	  var afterCritical = {
	    inVirtualList: home.descriptor.mode === 'virtual',
	    displacedBy: displacedBy,
	    effected: effected
	  };
	  var displaced = getDisplacementGroups({
	    afterDragging: afterDragging,
	    destination: home,
	    displacedBy: displacedBy,
	    last: null,
	    viewport: viewport.frame,
	    forceShouldAnimate: false
	  });
	  var impact = {
	    displaced: displaced,
	    displacedBy: displacedBy,
	    at: {
	      type: 'REORDER',
	      destination: getHomeLocation(draggable.descriptor)
	    }
	  };
	  return {
	    impact: impact,
	    afterCritical: afterCritical
	  };
	});

	var patchDimensionMap = (function (dimensions, updated) {
	  return {
	    draggables: dimensions.draggables,
	    droppables: patchDroppableMap(dimensions.droppables, updated)
	  };
	});

	var offsetDraggable = (function (_ref) {
	  var draggable = _ref.draggable,
	      offset = _ref.offset,
	      initialWindowScroll = _ref.initialWindowScroll;
	  var client = cssBoxModel_cjs.offset(draggable.client, offset);
	  var page = cssBoxModel_cjs.withScroll(client, initialWindowScroll);

	  var moved = _extends({}, draggable, {
	    placeholder: _extends({}, draggable.placeholder, {
	      client: client
	    }),
	    client: client,
	    page: page
	  });

	  return moved;
	});

	var getFrame = (function (droppable) {
	  var frame = droppable.frame;
	  !frame ?  invariant(false, 'Expected Droppable to have a frame')  : void 0;
	  return frame;
	});

	var adjustAdditionsForScrollChanges = (function (_ref) {
	  var additions = _ref.additions,
	      updatedDroppables = _ref.updatedDroppables,
	      viewport = _ref.viewport;
	  var windowScrollChange = viewport.scroll.diff.value;
	  return additions.map(function (draggable) {
	    var droppableId = draggable.descriptor.droppableId;
	    var modified = updatedDroppables[droppableId];
	    var frame = getFrame(modified);
	    var droppableScrollChange = frame.scroll.diff.value;
	    var totalChange = add(windowScrollChange, droppableScrollChange);
	    var moved = offsetDraggable({
	      draggable: draggable,
	      offset: totalChange,
	      initialWindowScroll: viewport.scroll.initial
	    });
	    return moved;
	  });
	});

	var publishWhileDraggingInVirtual = (function (_ref) {
	  var state = _ref.state,
	      published = _ref.published;
	  var withScrollChange = published.modified.map(function (update) {
	    var existing = state.dimensions.droppables[update.droppableId];
	    var scrolled = scrollDroppable(existing, update.scroll);
	    return scrolled;
	  });

	  var droppables = _extends({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));

	  var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
	    additions: published.additions,
	    updatedDroppables: droppables,
	    viewport: state.viewport
	  }));

	  var draggables = _extends({}, state.dimensions.draggables, {}, updatedAdditions);

	  published.removals.forEach(function (id) {
	    delete draggables[id];
	  });
	  var dimensions = {
	    droppables: droppables,
	    draggables: draggables
	  };
	  var wasOverId = whatIsDraggedOver(state.impact);
	  var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
	  var draggable = dimensions.draggables[state.critical.draggable.id];
	  var home = dimensions.droppables[state.critical.droppable.id];

	  var _getLiftEffect = getLiftEffect({
	    draggable: draggable,
	    home: home,
	    draggables: draggables,
	    viewport: state.viewport
	  }),
	      onLiftImpact = _getLiftEffect.impact,
	      afterCritical = _getLiftEffect.afterCritical;

	  var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
	  var impact = getDragImpact({
	    pageOffset: state.current.page.offset,
	    draggable: dimensions.draggables[state.critical.draggable.id],
	    draggables: dimensions.draggables,
	    droppables: dimensions.droppables,
	    previousImpact: previousImpact,
	    viewport: state.viewport,
	    afterCritical: afterCritical
	  });

	  var draggingState = _extends({
	    phase: 'DRAGGING'
	  }, state, {
	    phase: 'DRAGGING',
	    impact: impact,
	    onLiftImpact: onLiftImpact,
	    dimensions: dimensions,
	    afterCritical: afterCritical,
	    forceShouldAnimate: false
	  });

	  if (state.phase === 'COLLECTING') {
	    return draggingState;
	  }

	  var dropPending = _extends({
	    phase: 'DROP_PENDING'
	  }, draggingState, {
	    phase: 'DROP_PENDING',
	    reason: state.reason,
	    isWaiting: false
	  });

	  return dropPending;
	});

	var isSnapping = function isSnapping(state) {
	  return state.movementMode === 'SNAP';
	};

	var postDroppableChange = function postDroppableChange(state, updated, isEnabledChanging) {
	  var dimensions = patchDimensionMap(state.dimensions, updated);

	  if (!isSnapping(state) || isEnabledChanging) {
	    return update({
	      state: state,
	      dimensions: dimensions
	    });
	  }

	  return refreshSnap({
	    state: state,
	    dimensions: dimensions
	  });
	};

	function removeScrollJumpRequest(state) {
	  if (state.isDragging && state.movementMode === 'SNAP') {
	    return _extends({
	      phase: 'DRAGGING'
	    }, state, {
	      scrollJumpRequest: null
	    });
	  }

	  return state;
	}

	var idle = {
	  phase: 'IDLE',
	  completed: null,
	  shouldFlush: false
	};
	var reducer = (function (state, action) {
	  if (state === void 0) {
	    state = idle;
	  }

	  if (action.type === 'FLUSH') {
	    return _extends({}, idle, {
	      shouldFlush: true
	    });
	  }

	  if (action.type === 'INITIAL_PUBLISH') {
	    !(state.phase === 'IDLE') ?  invariant(false, 'INITIAL_PUBLISH must come after a IDLE phase')  : void 0;
	    var _action$payload = action.payload,
	        critical = _action$payload.critical,
	        clientSelection = _action$payload.clientSelection,
	        viewport = _action$payload.viewport,
	        dimensions = _action$payload.dimensions,
	        movementMode = _action$payload.movementMode;
	    var draggable = dimensions.draggables[critical.draggable.id];
	    var home = dimensions.droppables[critical.droppable.id];
	    var client = {
	      selection: clientSelection,
	      borderBoxCenter: draggable.client.borderBox.center,
	      offset: origin
	    };
	    var initial = {
	      client: client,
	      page: {
	        selection: add(client.selection, viewport.scroll.initial),
	        borderBoxCenter: add(client.selection, viewport.scroll.initial),
	        offset: add(client.selection, viewport.scroll.diff.value)
	      }
	    };
	    var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function (item) {
	      return !item.isFixedOnPage;
	    });

	    var _getLiftEffect = getLiftEffect({
	      draggable: draggable,
	      home: home,
	      draggables: dimensions.draggables,
	      viewport: viewport
	    }),
	        impact = _getLiftEffect.impact,
	        afterCritical = _getLiftEffect.afterCritical;

	    var result = {
	      phase: 'DRAGGING',
	      isDragging: true,
	      critical: critical,
	      movementMode: movementMode,
	      dimensions: dimensions,
	      initial: initial,
	      current: initial,
	      isWindowScrollAllowed: isWindowScrollAllowed,
	      impact: impact,
	      afterCritical: afterCritical,
	      onLiftImpact: impact,
	      viewport: viewport,
	      scrollJumpRequest: null,
	      forceShouldAnimate: null
	    };
	    return result;
	  }

	  if (action.type === 'COLLECTION_STARTING') {
	    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !(state.phase === 'DRAGGING') ?  invariant(false, "Collection cannot start from phase " + state.phase)  : void 0;

	    var _result = _extends({
	      phase: 'COLLECTING'
	    }, state, {
	      phase: 'COLLECTING'
	    });

	    return _result;
	  }

	  if (action.type === 'PUBLISH_WHILE_DRAGGING') {
	    !(state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') ?  invariant(false, "Unexpected " + action.type + " received in phase " + state.phase)  : void 0;
	    return publishWhileDraggingInVirtual({
	      state: state,
	      published: action.payload
	    });
	  }

	  if (action.type === 'MOVE') {
	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !isMovementAllowed(state) ?  invariant(false, action.type + " not permitted in phase " + state.phase)  : void 0;
	    var _clientSelection = action.payload.client;

	    if (isEqual(_clientSelection, state.current.client.selection)) {
	      return state;
	    }

	    return update({
	      state: state,
	      clientSelection: _clientSelection,
	      impact: isSnapping(state) ? state.impact : null
	    });
	  }

	  if (action.type === 'UPDATE_DROPPABLE_SCROLL') {
	    if (state.phase === 'DROP_PENDING') {
	      return removeScrollJumpRequest(state);
	    }

	    if (state.phase === 'COLLECTING') {
	      return removeScrollJumpRequest(state);
	    }

	    !isMovementAllowed(state) ?  invariant(false, action.type + " not permitted in phase " + state.phase)  : void 0;
	    var _action$payload2 = action.payload,
	        id = _action$payload2.id,
	        newScroll = _action$payload2.newScroll;
	    var target = state.dimensions.droppables[id];

	    if (!target) {
	      return state;
	    }

	    var scrolled = scrollDroppable(target, newScroll);
	    return postDroppableChange(state, scrolled, false);
	  }

	  if (action.type === 'UPDATE_DROPPABLE_IS_ENABLED') {
	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !isMovementAllowed(state) ?  invariant(false, "Attempting to move in an unsupported phase " + state.phase)  : void 0;
	    var _action$payload3 = action.payload,
	        _id = _action$payload3.id,
	        isEnabled = _action$payload3.isEnabled;
	    var _target = state.dimensions.droppables[_id];
	    !_target ?  invariant(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state")  : void 0;
	    !(_target.isEnabled !== isEnabled) ?  invariant(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled))  : void 0;

	    var updated = _extends({}, _target, {
	      isEnabled: isEnabled
	    });

	    return postDroppableChange(state, updated, true);
	  }

	  if (action.type === 'UPDATE_DROPPABLE_IS_COMBINE_ENABLED') {
	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !isMovementAllowed(state) ?  invariant(false, "Attempting to move in an unsupported phase " + state.phase)  : void 0;
	    var _action$payload4 = action.payload,
	        _id2 = _action$payload4.id,
	        isCombineEnabled = _action$payload4.isCombineEnabled;
	    var _target2 = state.dimensions.droppables[_id2];
	    !_target2 ?  invariant(false, "Cannot find Droppable[id: " + _id2 + "] to toggle its isCombineEnabled state")  : void 0;
	    !(_target2.isCombineEnabled !== isCombineEnabled) ?  invariant(false, "Trying to set droppable isCombineEnabled to " + String(isCombineEnabled) + "\n      but it is already " + String(_target2.isCombineEnabled))  : void 0;

	    var _updated = _extends({}, _target2, {
	      isCombineEnabled: isCombineEnabled
	    });

	    return postDroppableChange(state, _updated, true);
	  }

	  if (action.type === 'MOVE_BY_WINDOW_SCROLL') {
	    if (state.phase === 'DROP_PENDING' || state.phase === 'DROP_ANIMATING') {
	      return state;
	    }

	    !isMovementAllowed(state) ?  invariant(false, "Cannot move by window in phase " + state.phase)  : void 0;
	    !state.isWindowScrollAllowed ?  invariant(false, 'Window scrolling is currently not supported for fixed lists')  : void 0;
	    var _newScroll = action.payload.newScroll;

	    if (isEqual(state.viewport.scroll.current, _newScroll)) {
	      return removeScrollJumpRequest(state);
	    }

	    var _viewport = scrollViewport(state.viewport, _newScroll);

	    if (isSnapping(state)) {
	      return refreshSnap({
	        state: state,
	        viewport: _viewport
	      });
	    }

	    return update({
	      state: state,
	      viewport: _viewport
	    });
	  }

	  if (action.type === 'UPDATE_VIEWPORT_MAX_SCROLL') {
	    if (!isMovementAllowed(state)) {
	      return state;
	    }

	    var maxScroll = action.payload.maxScroll;

	    if (isEqual(maxScroll, state.viewport.scroll.max)) {
	      return state;
	    }

	    var withMaxScroll = _extends({}, state.viewport, {
	      scroll: _extends({}, state.viewport.scroll, {
	        max: maxScroll
	      })
	    });

	    return _extends({
	      phase: 'DRAGGING'
	    }, state, {
	      viewport: withMaxScroll
	    });
	  }

	  if (action.type === 'MOVE_UP' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_RIGHT') {
	    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !(state.phase === 'DRAGGING') ?  invariant(false, action.type + " received while not in DRAGGING phase")  : void 0;

	    var _result2 = moveInDirection({
	      state: state,
	      type: action.type
	    });

	    if (!_result2) {
	      return state;
	    }

	    return update({
	      state: state,
	      impact: _result2.impact,
	      clientSelection: _result2.clientSelection,
	      scrollJumpRequest: _result2.scrollJumpRequest
	    });
	  }

	  if (action.type === 'DROP_PENDING') {
	    var reason = action.payload.reason;
	    !(state.phase === 'COLLECTING') ?  invariant(false, 'Can only move into the DROP_PENDING phase from the COLLECTING phase')  : void 0;

	    var newState = _extends({
	      phase: 'DROP_PENDING'
	    }, state, {
	      phase: 'DROP_PENDING',
	      isWaiting: true,
	      reason: reason
	    });

	    return newState;
	  }

	  if (action.type === 'DROP_ANIMATE') {
	    var _action$payload5 = action.payload,
	        completed = _action$payload5.completed,
	        dropDuration = _action$payload5.dropDuration,
	        newHomeClientOffset = _action$payload5.newHomeClientOffset;
	    !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ?  invariant(false, "Cannot animate drop from phase " + state.phase)  : void 0;
	    var _result3 = {
	      phase: 'DROP_ANIMATING',
	      completed: completed,
	      dropDuration: dropDuration,
	      newHomeClientOffset: newHomeClientOffset,
	      dimensions: state.dimensions
	    };
	    return _result3;
	  }

	  if (action.type === 'DROP_COMPLETE') {
	    var _completed = action.payload.completed;
	    return {
	      phase: 'IDLE',
	      completed: _completed,
	      shouldFlush: false
	    };
	  }

	  return state;
	});

	var beforeInitialCapture = function beforeInitialCapture(args) {
	  return {
	    type: 'BEFORE_INITIAL_CAPTURE',
	    payload: args
	  };
	};
	var lift = function lift(args) {
	  return {
	    type: 'LIFT',
	    payload: args
	  };
	};
	var initialPublish = function initialPublish(args) {
	  return {
	    type: 'INITIAL_PUBLISH',
	    payload: args
	  };
	};
	var publishWhileDragging = function publishWhileDragging(args) {
	  return {
	    type: 'PUBLISH_WHILE_DRAGGING',
	    payload: args
	  };
	};
	var collectionStarting = function collectionStarting() {
	  return {
	    type: 'COLLECTION_STARTING',
	    payload: null
	  };
	};
	var updateDroppableScroll = function updateDroppableScroll(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_SCROLL',
	    payload: args
	  };
	};
	var updateDroppableIsEnabled = function updateDroppableIsEnabled(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_IS_ENABLED',
	    payload: args
	  };
	};
	var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_IS_COMBINE_ENABLED',
	    payload: args
	  };
	};
	var move = function move(args) {
	  return {
	    type: 'MOVE',
	    payload: args
	  };
	};
	var moveByWindowScroll = function moveByWindowScroll(args) {
	  return {
	    type: 'MOVE_BY_WINDOW_SCROLL',
	    payload: args
	  };
	};
	var updateViewportMaxScroll = function updateViewportMaxScroll(args) {
	  return {
	    type: 'UPDATE_VIEWPORT_MAX_SCROLL',
	    payload: args
	  };
	};
	var moveUp = function moveUp() {
	  return {
	    type: 'MOVE_UP',
	    payload: null
	  };
	};
	var moveDown = function moveDown() {
	  return {
	    type: 'MOVE_DOWN',
	    payload: null
	  };
	};
	var moveRight = function moveRight() {
	  return {
	    type: 'MOVE_RIGHT',
	    payload: null
	  };
	};
	var moveLeft = function moveLeft() {
	  return {
	    type: 'MOVE_LEFT',
	    payload: null
	  };
	};
	var flush = function flush() {
	  return {
	    type: 'FLUSH',
	    payload: null
	  };
	};
	var animateDrop = function animateDrop(args) {
	  return {
	    type: 'DROP_ANIMATE',
	    payload: args
	  };
	};
	var completeDrop = function completeDrop(args) {
	  return {
	    type: 'DROP_COMPLETE',
	    payload: args
	  };
	};
	var drop = function drop(args) {
	  return {
	    type: 'DROP',
	    payload: args
	  };
	};
	var dropPending = function dropPending(args) {
	  return {
	    type: 'DROP_PENDING',
	    payload: args
	  };
	};
	var dropAnimationFinished = function dropAnimationFinished() {
	  return {
	    type: 'DROP_ANIMATION_FINISHED',
	    payload: null
	  };
	};

	function checkIndexes(insideDestination) {
	  if (insideDestination.length <= 1) {
	    return;
	  }

	  var indexes = insideDestination.map(function (d) {
	    return d.descriptor.index;
	  });
	  var errors = {};

	  for (var i = 1; i < indexes.length; i++) {
	    var current = indexes[i];
	    var previous = indexes[i - 1];

	    if (current !== previous + 1) {
	      errors[current] = true;
	    }
	  }

	  if (!Object.keys(errors).length) {
	    return;
	  }

	  var formatted = indexes.map(function (index) {
	    var hasError = Boolean(errors[index]);
	    return hasError ? "[\uD83D\uDD25" + index + "]" : "" + index;
	  }).join(', ');
	   warning("\n    Detected non-consecutive <Draggable /> indexes.\n\n    (This can cause unexpected bugs)\n\n    " + formatted + "\n  ") ;
	}

	function validateDimensions(critical, dimensions) {
	  {
	    var insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
	    checkIndexes(insideDestination);
	  }
	}

	var lift$1 = (function (marshal) {
	  return function (_ref) {
	    var getState = _ref.getState,
	        dispatch = _ref.dispatch;
	    return function (next) {
	      return function (action) {
	        if (action.type !== 'LIFT') {
	          next(action);
	          return;
	        }

	        var _action$payload = action.payload,
	            id = _action$payload.id,
	            clientSelection = _action$payload.clientSelection,
	            movementMode = _action$payload.movementMode;
	        var initial = getState();

	        if (initial.phase === 'DROP_ANIMATING') {
	          dispatch(completeDrop({
	            completed: initial.completed
	          }));
	        }

	        !(getState().phase === 'IDLE') ?  invariant(false, 'Unexpected phase to start a drag')  : void 0;
	        dispatch(flush());
	        dispatch(beforeInitialCapture({
	          draggableId: id,
	          movementMode: movementMode
	        }));
	        var scrollOptions = {
	          shouldPublishImmediately: movementMode === 'SNAP'
	        };
	        var request = {
	          draggableId: id,
	          scrollOptions: scrollOptions
	        };

	        var _marshal$startPublish = marshal.startPublishing(request),
	            critical = _marshal$startPublish.critical,
	            dimensions = _marshal$startPublish.dimensions,
	            viewport = _marshal$startPublish.viewport;

	        validateDimensions(critical, dimensions);
	        dispatch(initialPublish({
	          critical: critical,
	          dimensions: dimensions,
	          clientSelection: clientSelection,
	          movementMode: movementMode,
	          viewport: viewport
	        }));
	      };
	    };
	  };
	});

	var style = (function (marshal) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'INITIAL_PUBLISH') {
	          marshal.dragging();
	        }

	        if (action.type === 'DROP_ANIMATE') {
	          marshal.dropping(action.payload.completed.result.reason);
	        }

	        if (action.type === 'FLUSH' || action.type === 'DROP_COMPLETE') {
	          marshal.resting();
	        }

	        next(action);
	      };
	    };
	  };
	});

	var curves = {
	  outOfTheWay: 'cubic-bezier(0.2, 0, 0, 1)',
	  drop: 'cubic-bezier(.2,1,.1,1)'
	};
	var combine = {
	  opacity: {
	    drop: 0,
	    combining: 0.7
	  },
	  scale: {
	    drop: 0.75
	  }
	};
	var timings = {
	  outOfTheWay: 0.2,
	  minDropTime: 0.33,
	  maxDropTime: 0.55
	};
	var outOfTheWayTiming = timings.outOfTheWay + "s " + curves.outOfTheWay;
	var transitions = {
	  fluid: "opacity " + outOfTheWayTiming,
	  snap: "transform " + outOfTheWayTiming + ", opacity " + outOfTheWayTiming,
	  drop: function drop(duration) {
	    var timing = duration + "s " + curves.drop;
	    return "transform " + timing + ", opacity " + timing;
	  },
	  outOfTheWay: "transform " + outOfTheWayTiming,
	  placeholder: "height " + outOfTheWayTiming + ", width " + outOfTheWayTiming + ", margin " + outOfTheWayTiming
	};

	var moveTo = function moveTo(offset) {
	  return isEqual(offset, origin) ? null : "translate(" + offset.x + "px, " + offset.y + "px)";
	};

	var transforms = {
	  moveTo: moveTo,
	  drop: function drop(offset, isCombining) {
	    var translate = moveTo(offset);

	    if (!translate) {
	      return null;
	    }

	    if (!isCombining) {
	      return translate;
	    }

	    return translate + " scale(" + combine.scale.drop + ")";
	  }
	};

	var minDropTime = timings.minDropTime,
	    maxDropTime = timings.maxDropTime;
	var dropTimeRange = maxDropTime - minDropTime;
	var maxDropTimeAtDistance = 1500;
	var cancelDropModifier = 0.6;
	var getDropDuration = (function (_ref) {
	  var current = _ref.current,
	      destination = _ref.destination,
	      reason = _ref.reason;
	  var distance$1 = distance(current, destination);

	  if (distance$1 <= 0) {
	    return minDropTime;
	  }

	  if (distance$1 >= maxDropTimeAtDistance) {
	    return maxDropTime;
	  }

	  var percentage = distance$1 / maxDropTimeAtDistance;
	  var duration = minDropTime + dropTimeRange * percentage;
	  var withDuration = reason === 'CANCEL' ? duration * cancelDropModifier : duration;
	  return Number(withDuration.toFixed(2));
	});

	var getNewHomeClientOffset = (function (_ref) {
	  var impact = _ref.impact,
	      draggable = _ref.draggable,
	      dimensions = _ref.dimensions,
	      viewport = _ref.viewport,
	      afterCritical = _ref.afterCritical;
	  var draggables = dimensions.draggables,
	      droppables = dimensions.droppables;
	  var droppableId = whatIsDraggedOver(impact);
	  var destination = droppableId ? droppables[droppableId] : null;
	  var home = droppables[draggable.descriptor.droppableId];
	  var newClientCenter = getClientBorderBoxCenter({
	    impact: impact,
	    draggable: draggable,
	    draggables: draggables,
	    afterCritical: afterCritical,
	    droppable: destination || home,
	    viewport: viewport
	  });
	  var offset = subtract(newClientCenter, draggable.client.borderBox.center);
	  return offset;
	});

	var getDropImpact = (function (_ref) {
	  var draggables = _ref.draggables,
	      reason = _ref.reason,
	      lastImpact = _ref.lastImpact,
	      home = _ref.home,
	      viewport = _ref.viewport,
	      onLiftImpact = _ref.onLiftImpact;

	  if (!lastImpact.at || reason !== 'DROP') {
	    var recomputedHomeImpact = recompute({
	      draggables: draggables,
	      impact: onLiftImpact,
	      destination: home,
	      viewport: viewport,
	      forceShouldAnimate: true
	    });
	    return {
	      impact: recomputedHomeImpact,
	      didDropInsideDroppable: false
	    };
	  }

	  if (lastImpact.at.type === 'REORDER') {
	    return {
	      impact: lastImpact,
	      didDropInsideDroppable: true
	    };
	  }

	  var withoutMovement = _extends({}, lastImpact, {
	    displaced: emptyGroups
	  });

	  return {
	    impact: withoutMovement,
	    didDropInsideDroppable: true
	  };
	});

	var drop$1 = (function (_ref) {
	  var getState = _ref.getState,
	      dispatch = _ref.dispatch;
	  return function (next) {
	    return function (action) {
	      if (action.type !== 'DROP') {
	        next(action);
	        return;
	      }

	      var state = getState();
	      var reason = action.payload.reason;

	      if (state.phase === 'COLLECTING') {
	        dispatch(dropPending({
	          reason: reason
	        }));
	        return;
	      }

	      if (state.phase === 'IDLE') {
	        return;
	      }

	      var isWaitingForDrop = state.phase === 'DROP_PENDING' && state.isWaiting;
	      !!isWaitingForDrop ?  invariant(false, 'A DROP action occurred while DROP_PENDING and still waiting')  : void 0;
	      !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ?  invariant(false, "Cannot drop in phase: " + state.phase)  : void 0;
	      var critical = state.critical;
	      var dimensions = state.dimensions;
	      var draggable = dimensions.draggables[state.critical.draggable.id];

	      var _getDropImpact = getDropImpact({
	        reason: reason,
	        lastImpact: state.impact,
	        afterCritical: state.afterCritical,
	        onLiftImpact: state.onLiftImpact,
	        home: state.dimensions.droppables[state.critical.droppable.id],
	        viewport: state.viewport,
	        draggables: state.dimensions.draggables
	      }),
	          impact = _getDropImpact.impact,
	          didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;

	      var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
	      var combine = didDropInsideDroppable ? tryGetCombine(impact) : null;
	      var source = {
	        index: critical.draggable.index,
	        droppableId: critical.droppable.id
	      };
	      var result = {
	        draggableId: draggable.descriptor.id,
	        type: draggable.descriptor.type,
	        source: source,
	        reason: reason,
	        mode: state.movementMode,
	        destination: destination,
	        combine: combine
	      };
	      var newHomeClientOffset = getNewHomeClientOffset({
	        impact: impact,
	        draggable: draggable,
	        dimensions: dimensions,
	        viewport: state.viewport,
	        afterCritical: state.afterCritical
	      });
	      var completed = {
	        critical: state.critical,
	        afterCritical: state.afterCritical,
	        result: result,
	        impact: impact
	      };
	      var isAnimationRequired = !isEqual(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);

	      if (!isAnimationRequired) {
	        dispatch(completeDrop({
	          completed: completed
	        }));
	        return;
	      }

	      var dropDuration = getDropDuration({
	        current: state.current.client.offset,
	        destination: newHomeClientOffset,
	        reason: reason
	      });
	      var args = {
	        newHomeClientOffset: newHomeClientOffset,
	        dropDuration: dropDuration,
	        completed: completed
	      };
	      dispatch(animateDrop(args));
	    };
	  };
	});

	var getWindowScroll = (function () {
	  return {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  };
	});

	function getWindowScrollBinding(update) {
	  return {
	    eventName: 'scroll',
	    options: {
	      passive: true,
	      capture: false
	    },
	    fn: function fn(event) {
	      if (event.target !== window && event.target !== window.document) {
	        return;
	      }

	      update();
	    }
	  };
	}

	function getScrollListener(_ref) {
	  var onWindowScroll = _ref.onWindowScroll;

	  function updateScroll() {
	    onWindowScroll(getWindowScroll());
	  }

	  var scheduled = rafSchd(updateScroll);
	  var binding = getWindowScrollBinding(scheduled);
	  var unbind = noop;

	  function isActive() {
	    return unbind !== noop;
	  }

	  function start() {
	    !!isActive() ?  invariant(false, 'Cannot start scroll listener when already active')  : void 0;
	    unbind = bindEvents(window, [binding]);
	  }

	  function stop() {
	    !isActive() ?  invariant(false, 'Cannot stop scroll listener when not active')  : void 0;
	    scheduled.cancel();
	    unbind();
	    unbind = noop;
	  }

	  return {
	    start: start,
	    stop: stop,
	    isActive: isActive
	  };
	}

	var shouldEnd = function shouldEnd(action) {
	  return action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATE' || action.type === 'FLUSH';
	};

	var scrollListener = (function (store) {
	  var listener = getScrollListener({
	    onWindowScroll: function onWindowScroll(newScroll) {
	      store.dispatch(moveByWindowScroll({
	        newScroll: newScroll
	      }));
	    }
	  });
	  return function (next) {
	    return function (action) {
	      if (!listener.isActive() && action.type === 'INITIAL_PUBLISH') {
	        listener.start();
	      }

	      if (listener.isActive() && shouldEnd(action)) {
	        listener.stop();
	      }

	      next(action);
	    };
	  };
	});

	var getExpiringAnnounce = (function (announce) {
	  var wasCalled = false;
	  var isExpired = false;
	  var timeoutId = setTimeout(function () {
	    isExpired = true;
	  });

	  var result = function result(message) {
	    if (wasCalled) {
	       warning('Announcement already made. Not making a second announcement') ;
	      return;
	    }

	    if (isExpired) {
	       warning("\n        Announcements cannot be made asynchronously.\n        Default message has already been announced.\n      ") ;
	      return;
	    }

	    wasCalled = true;
	    announce(message);
	    clearTimeout(timeoutId);
	  };

	  result.wasCalled = function () {
	    return wasCalled;
	  };

	  return result;
	});

	var getAsyncMarshal = (function () {
	  var entries = [];

	  var execute = function execute(timerId) {
	    var index = findIndex(entries, function (item) {
	      return item.timerId === timerId;
	    });
	    !(index !== -1) ?  invariant(false, 'Could not find timer')  : void 0;

	    var _entries$splice = entries.splice(index, 1),
	        entry = _entries$splice[0];

	    entry.callback();
	  };

	  var add = function add(fn) {
	    var timerId = setTimeout(function () {
	      return execute(timerId);
	    });
	    var entry = {
	      timerId: timerId,
	      callback: fn
	    };
	    entries.push(entry);
	  };

	  var flush = function flush() {
	    if (!entries.length) {
	      return;
	    }

	    var shallow = [].concat(entries);
	    entries.length = 0;
	    shallow.forEach(function (entry) {
	      clearTimeout(entry.timerId);
	      entry.callback();
	    });
	  };

	  return {
	    add: add,
	    flush: flush
	  };
	});

	var areLocationsEqual = function areLocationsEqual(first, second) {
	  if (first == null && second == null) {
	    return true;
	  }

	  if (first == null || second == null) {
	    return false;
	  }

	  return first.droppableId === second.droppableId && first.index === second.index;
	};
	var isCombineEqual = function isCombineEqual(first, second) {
	  if (first == null && second == null) {
	    return true;
	  }

	  if (first == null || second == null) {
	    return false;
	  }

	  return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
	};
	var isCriticalEqual = function isCriticalEqual(first, second) {
	  if (first === second) {
	    return true;
	  }

	  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
	  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
	  return isDraggableEqual && isDroppableEqual;
	};

	var withTimings = function withTimings(key, fn) {
	  fn();
	};

	var getDragStart = function getDragStart(critical, mode) {
	  return {
	    draggableId: critical.draggable.id,
	    type: critical.droppable.type,
	    source: {
	      droppableId: critical.droppable.id,
	      index: critical.draggable.index
	    },
	    mode: mode
	  };
	};

	var execute = function execute(responder, data, announce, getDefaultMessage) {
	  if (!responder) {
	    announce(getDefaultMessage(data));
	    return;
	  }

	  var willExpire = getExpiringAnnounce(announce);
	  var provided = {
	    announce: willExpire
	  };
	  responder(data, provided);

	  if (!willExpire.wasCalled()) {
	    announce(getDefaultMessage(data));
	  }
	};

	var getPublisher = (function (getResponders, announce) {
	  var asyncMarshal = getAsyncMarshal();
	  var dragging = null;

	  var beforeCapture = function beforeCapture(draggableId, mode) {
	    !!dragging ?  invariant(false, 'Cannot fire onBeforeCapture as a drag start has already been published')  : void 0;
	    withTimings('onBeforeCapture', function () {
	      var fn = getResponders().onBeforeCapture;

	      if (fn) {
	        var before = {
	          draggableId: draggableId,
	          mode: mode
	        };
	        fn(before);
	      }
	    });
	  };

	  var beforeStart = function beforeStart(critical, mode) {
	    !!dragging ?  invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published')  : void 0;
	    withTimings('onBeforeDragStart', function () {
	      var fn = getResponders().onBeforeDragStart;

	      if (fn) {
	        fn(getDragStart(critical, mode));
	      }
	    });
	  };

	  var start = function start(critical, mode) {
	    !!dragging ?  invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published')  : void 0;
	    var data = getDragStart(critical, mode);
	    dragging = {
	      mode: mode,
	      lastCritical: critical,
	      lastLocation: data.source,
	      lastCombine: null
	    };
	    asyncMarshal.add(function () {
	      withTimings('onDragStart', function () {
	        return execute(getResponders().onDragStart, data, announce, preset.onDragStart);
	      });
	    });
	  };

	  var update = function update(critical, impact) {
	    var location = tryGetDestination(impact);
	    var combine = tryGetCombine(impact);
	    !dragging ?  invariant(false, 'Cannot fire onDragMove when onDragStart has not been called')  : void 0;
	    var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);

	    if (hasCriticalChanged) {
	      dragging.lastCritical = critical;
	    }

	    var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);

	    if (hasLocationChanged) {
	      dragging.lastLocation = location;
	    }

	    var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine);

	    if (hasGroupingChanged) {
	      dragging.lastCombine = combine;
	    }

	    if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
	      return;
	    }

	    var data = _extends({}, getDragStart(critical, dragging.mode), {
	      combine: combine,
	      destination: location
	    });

	    asyncMarshal.add(function () {
	      withTimings('onDragUpdate', function () {
	        return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);
	      });
	    });
	  };

	  var flush = function flush() {
	    !dragging ?  invariant(false, 'Can only flush responders while dragging')  : void 0;
	    asyncMarshal.flush();
	  };

	  var drop = function drop(result) {
	    !dragging ?  invariant(false, 'Cannot fire onDragEnd when there is no matching onDragStart')  : void 0;
	    dragging = null;
	    withTimings('onDragEnd', function () {
	      return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);
	    });
	  };

	  var abort = function abort() {
	    if (!dragging) {
	      return;
	    }

	    var result = _extends({}, getDragStart(dragging.lastCritical, dragging.mode), {
	      combine: null,
	      destination: null,
	      reason: 'CANCEL'
	    });

	    drop(result);
	  };

	  return {
	    beforeCapture: beforeCapture,
	    beforeStart: beforeStart,
	    start: start,
	    update: update,
	    flush: flush,
	    drop: drop,
	    abort: abort
	  };
	});

	var responders = (function (getResponders, announce) {
	  var publisher = getPublisher(getResponders, announce);
	  return function (store) {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'BEFORE_INITIAL_CAPTURE') {
	          publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
	          return;
	        }

	        if (action.type === 'INITIAL_PUBLISH') {
	          var critical = action.payload.critical;
	          publisher.beforeStart(critical, action.payload.movementMode);
	          next(action);
	          publisher.start(critical, action.payload.movementMode);
	          return;
	        }

	        if (action.type === 'DROP_COMPLETE') {
	          var result = action.payload.completed.result;
	          publisher.flush();
	          next(action);
	          publisher.drop(result);
	          return;
	        }

	        next(action);

	        if (action.type === 'FLUSH') {
	          publisher.abort();
	          return;
	        }

	        var state = store.getState();

	        if (state.phase === 'DRAGGING') {
	          publisher.update(state.critical, state.impact);
	        }
	      };
	    };
	  };
	});

	var dropAnimationFinish = (function (store) {
	  return function (next) {
	    return function (action) {
	      if (action.type !== 'DROP_ANIMATION_FINISHED') {
	        next(action);
	        return;
	      }

	      var state = store.getState();
	      !(state.phase === 'DROP_ANIMATING') ?  invariant(false, 'Cannot finish a drop animating when no drop is occurring')  : void 0;
	      store.dispatch(completeDrop({
	        completed: state.completed
	      }));
	    };
	  };
	});

	var dropAnimationFlushOnScroll = (function (store) {
	  var unbind = null;
	  var frameId = null;

	  function clear() {
	    if (frameId) {
	      cancelAnimationFrame(frameId);
	      frameId = null;
	    }

	    if (unbind) {
	      unbind();
	      unbind = null;
	    }
	  }

	  return function (next) {
	    return function (action) {
	      if (action.type === 'FLUSH' || action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATION_FINISHED') {
	        clear();
	      }

	      next(action);

	      if (action.type !== 'DROP_ANIMATE') {
	        return;
	      }

	      var binding = {
	        eventName: 'scroll',
	        options: {
	          capture: true,
	          passive: false,
	          once: true
	        },
	        fn: function flushDropAnimation() {
	          var state = store.getState();

	          if (state.phase === 'DROP_ANIMATING') {
	            store.dispatch(dropAnimationFinished());
	          }
	        }
	      };
	      frameId = requestAnimationFrame(function () {
	        frameId = null;
	        unbind = bindEvents(window, [binding]);
	      });
	    };
	  };
	});

	var dimensionMarshalStopper = (function (marshal) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'DROP_COMPLETE' || action.type === 'FLUSH' || action.type === 'DROP_ANIMATE') {
	          marshal.stopPublishing();
	        }

	        next(action);
	      };
	    };
	  };
	});

	var focus = (function (marshal) {
	  var isWatching = false;
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'INITIAL_PUBLISH') {
	          isWatching = true;
	          marshal.tryRecordFocus(action.payload.critical.draggable.id);
	          next(action);
	          marshal.tryRestoreFocusRecorded();
	          return;
	        }

	        next(action);

	        if (!isWatching) {
	          return;
	        }

	        if (action.type === 'FLUSH') {
	          isWatching = false;
	          marshal.tryRestoreFocusRecorded();
	          return;
	        }

	        if (action.type === 'DROP_COMPLETE') {
	          isWatching = false;
	          var result = action.payload.completed.result;

	          if (result.combine) {
	            marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
	          }

	          marshal.tryRestoreFocusRecorded();
	        }
	      };
	    };
	  };
	});

	var shouldStop = function shouldStop(action) {
	  return action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATE' || action.type === 'FLUSH';
	};

	var autoScroll = (function (autoScroller) {
	  return function (store) {
	    return function (next) {
	      return function (action) {
	        if (shouldStop(action)) {
	          autoScroller.stop();
	          next(action);
	          return;
	        }

	        if (action.type === 'INITIAL_PUBLISH') {
	          next(action);
	          var state = store.getState();
	          !(state.phase === 'DRAGGING') ?  invariant(false, 'Expected phase to be DRAGGING after INITIAL_PUBLISH')  : void 0;
	          autoScroller.start(state);
	          return;
	        }

	        next(action);
	        autoScroller.scroll(store.getState());
	      };
	    };
	  };
	});

	var pendingDrop = (function (store) {
	  return function (next) {
	    return function (action) {
	      next(action);

	      if (action.type !== 'PUBLISH_WHILE_DRAGGING') {
	        return;
	      }

	      var postActionState = store.getState();

	      if (postActionState.phase !== 'DROP_PENDING') {
	        return;
	      }

	      if (postActionState.isWaiting) {
	        return;
	      }

	      store.dispatch(drop({
	        reason: postActionState.reason
	      }));
	    };
	  };
	});

	var composeEnhancers =  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : redux__default['default'].compose;
	var createStore = (function (_ref) {
	  var dimensionMarshal = _ref.dimensionMarshal,
	      focusMarshal = _ref.focusMarshal,
	      styleMarshal = _ref.styleMarshal,
	      getResponders = _ref.getResponders,
	      announce = _ref.announce,
	      autoScroller = _ref.autoScroller;
	  return redux__default['default'].createStore(reducer, composeEnhancers(redux__default['default'].applyMiddleware(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
	});

	var clean$1 = function clean() {
	  return {
	    additions: {},
	    removals: {},
	    modified: {}
	  };
	};
	function createPublisher(_ref) {
	  var registry = _ref.registry,
	      callbacks = _ref.callbacks;
	  var staging = clean$1();
	  var frameId = null;

	  var collect = function collect() {
	    if (frameId) {
	      return;
	    }

	    callbacks.collectionStarting();
	    frameId = requestAnimationFrame(function () {
	      frameId = null;
	      var _staging = staging,
	          additions = _staging.additions,
	          removals = _staging.removals,
	          modified = _staging.modified;
	      var added = Object.keys(additions).map(function (id) {
	        return registry.draggable.getById(id).getDimension(origin);
	      }).sort(function (a, b) {
	        return a.descriptor.index - b.descriptor.index;
	      });
	      var updated = Object.keys(modified).map(function (id) {
	        var entry = registry.droppable.getById(id);
	        var scroll = entry.callbacks.getScrollWhileDragging();
	        return {
	          droppableId: id,
	          scroll: scroll
	        };
	      });
	      var result = {
	        additions: added,
	        removals: Object.keys(removals),
	        modified: updated
	      };
	      staging = clean$1();
	      callbacks.publish(result);
	    });
	  };

	  var add = function add(entry) {
	    var id = entry.descriptor.id;
	    staging.additions[id] = entry;
	    staging.modified[entry.descriptor.droppableId] = true;

	    if (staging.removals[id]) {
	      delete staging.removals[id];
	    }

	    collect();
	  };

	  var remove = function remove(entry) {
	    var descriptor = entry.descriptor;
	    staging.removals[descriptor.id] = true;
	    staging.modified[descriptor.droppableId] = true;

	    if (staging.additions[descriptor.id]) {
	      delete staging.additions[descriptor.id];
	    }

	    collect();
	  };

	  var stop = function stop() {
	    if (!frameId) {
	      return;
	    }

	    cancelAnimationFrame(frameId);
	    frameId = null;
	    staging = clean$1();
	  };

	  return {
	    add: add,
	    remove: remove,
	    stop: stop
	  };
	}

	var getMaxScroll = (function (_ref) {
	  var scrollHeight = _ref.scrollHeight,
	      scrollWidth = _ref.scrollWidth,
	      height = _ref.height,
	      width = _ref.width;
	  var maxScroll = subtract({
	    x: scrollWidth,
	    y: scrollHeight
	  }, {
	    x: width,
	    y: height
	  });
	  var adjustedMaxScroll = {
	    x: Math.max(0, maxScroll.x),
	    y: Math.max(0, maxScroll.y)
	  };
	  return adjustedMaxScroll;
	});

	var getDocumentElement = (function () {
	  var doc = document.documentElement;
	  !doc ?  invariant(false, 'Cannot find document.documentElement')  : void 0;
	  return doc;
	});

	var getMaxWindowScroll = (function () {
	  var doc = getDocumentElement();
	  var maxScroll = getMaxScroll({
	    scrollHeight: doc.scrollHeight,
	    scrollWidth: doc.scrollWidth,
	    width: doc.clientWidth,
	    height: doc.clientHeight
	  });
	  return maxScroll;
	});

	var getViewport = (function () {
	  var scroll = getWindowScroll();
	  var maxScroll = getMaxWindowScroll();
	  var top = scroll.y;
	  var left = scroll.x;
	  var doc = getDocumentElement();
	  var width = doc.clientWidth;
	  var height = doc.clientHeight;
	  var right = left + width;
	  var bottom = top + height;
	  var frame = cssBoxModel_cjs.getRect({
	    top: top,
	    left: left,
	    right: right,
	    bottom: bottom
	  });
	  var viewport = {
	    frame: frame,
	    scroll: {
	      initial: scroll,
	      current: scroll,
	      max: maxScroll,
	      diff: {
	        value: origin,
	        displacement: origin
	      }
	    }
	  };
	  return viewport;
	});

	var getInitialPublish = (function (_ref) {
	  var critical = _ref.critical,
	      scrollOptions = _ref.scrollOptions,
	      registry = _ref.registry;
	  var viewport = getViewport();
	  var windowScroll = viewport.scroll.current;
	  var home = critical.droppable;
	  var droppables = registry.droppable.getAllByType(home.type).map(function (entry) {
	    return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
	  });
	  var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function (entry) {
	    return entry.getDimension(windowScroll);
	  });
	  var dimensions = {
	    draggables: toDraggableMap(draggables),
	    droppables: toDroppableMap(droppables)
	  };
	  var result = {
	    dimensions: dimensions,
	    critical: critical,
	    viewport: viewport
	  };
	  return result;
	});

	function shouldPublishUpdate(registry, dragging, entry) {
	  if (entry.descriptor.id === dragging.id) {
	    return false;
	  }

	  if (entry.descriptor.type !== dragging.type) {
	    return false;
	  }

	  var home = registry.droppable.getById(entry.descriptor.droppableId);

	  if (home.descriptor.mode !== 'virtual') {
	     warning("\n      You are attempting to add or remove a Draggable [id: " + entry.descriptor.id + "]\n      while a drag is occurring. This is only supported for virtual lists.\n\n      See https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/virtual-lists.md\n    ") ;
	    return false;
	  }

	  return true;
	}

	var createDimensionMarshal = (function (registry, callbacks) {
	  var collection = null;
	  var publisher = createPublisher({
	    callbacks: {
	      publish: callbacks.publishWhileDragging,
	      collectionStarting: callbacks.collectionStarting
	    },
	    registry: registry
	  });

	  var updateDroppableIsEnabled = function updateDroppableIsEnabled(id, isEnabled) {
	    !registry.droppable.exists(id) ?  invariant(false, "Cannot update is enabled flag of Droppable " + id + " as it is not registered")  : void 0;

	    if (!collection) {
	      return;
	    }

	    callbacks.updateDroppableIsEnabled({
	      id: id,
	      isEnabled: isEnabled
	    });
	  };

	  var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled(id, isCombineEnabled) {
	    if (!collection) {
	      return;
	    }

	    !registry.droppable.exists(id) ?  invariant(false, "Cannot update isCombineEnabled flag of Droppable " + id + " as it is not registered")  : void 0;
	    callbacks.updateDroppableIsCombineEnabled({
	      id: id,
	      isCombineEnabled: isCombineEnabled
	    });
	  };

	  var updateDroppableScroll = function updateDroppableScroll(id, newScroll) {
	    if (!collection) {
	      return;
	    }

	    !registry.droppable.exists(id) ?  invariant(false, "Cannot update the scroll on Droppable " + id + " as it is not registered")  : void 0;
	    callbacks.updateDroppableScroll({
	      id: id,
	      newScroll: newScroll
	    });
	  };

	  var scrollDroppable = function scrollDroppable(id, change) {
	    if (!collection) {
	      return;
	    }

	    registry.droppable.getById(id).callbacks.scroll(change);
	  };

	  var stopPublishing = function stopPublishing() {
	    if (!collection) {
	      return;
	    }

	    publisher.stop();
	    var home = collection.critical.droppable;
	    registry.droppable.getAllByType(home.type).forEach(function (entry) {
	      return entry.callbacks.dragStopped();
	    });
	    collection.unsubscribe();
	    collection = null;
	  };

	  var subscriber = function subscriber(event) {
	    !collection ?  invariant(false, 'Should only be subscribed when a collection is occurring')  : void 0;
	    var dragging = collection.critical.draggable;

	    if (event.type === 'ADDITION') {
	      if (shouldPublishUpdate(registry, dragging, event.value)) {
	        publisher.add(event.value);
	      }
	    }

	    if (event.type === 'REMOVAL') {
	      if (shouldPublishUpdate(registry, dragging, event.value)) {
	        publisher.remove(event.value);
	      }
	    }
	  };

	  var startPublishing = function startPublishing(request) {
	    !!collection ?  invariant(false, 'Cannot start capturing critical dimensions as there is already a collection')  : void 0;
	    var entry = registry.draggable.getById(request.draggableId);
	    var home = registry.droppable.getById(entry.descriptor.droppableId);
	    var critical = {
	      draggable: entry.descriptor,
	      droppable: home.descriptor
	    };
	    var unsubscribe = registry.subscribe(subscriber);
	    collection = {
	      critical: critical,
	      unsubscribe: unsubscribe
	    };
	    return getInitialPublish({
	      critical: critical,
	      registry: registry,
	      scrollOptions: request.scrollOptions
	    });
	  };

	  var marshal = {
	    updateDroppableIsEnabled: updateDroppableIsEnabled,
	    updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled,
	    scrollDroppable: scrollDroppable,
	    updateDroppableScroll: updateDroppableScroll,
	    startPublishing: startPublishing,
	    stopPublishing: stopPublishing
	  };
	  return marshal;
	});

	var canStartDrag = (function (state, id) {
	  if (state.phase === 'IDLE') {
	    return true;
	  }

	  if (state.phase !== 'DROP_ANIMATING') {
	    return false;
	  }

	  if (state.completed.result.draggableId === id) {
	    return false;
	  }

	  return state.completed.result.reason === 'DROP';
	});

	var scrollWindow = (function (change) {
	  window.scrollBy(change.x, change.y);
	});

	var getScrollableDroppables = memoizeOne(function (droppables) {
	  return toDroppableList(droppables).filter(function (droppable) {
	    if (!droppable.isEnabled) {
	      return false;
	    }

	    if (!droppable.frame) {
	      return false;
	    }

	    return true;
	  });
	});

	var getScrollableDroppableOver = function getScrollableDroppableOver(target, droppables) {
	  var maybe = find(getScrollableDroppables(droppables), function (droppable) {
	    !droppable.frame ?  invariant(false, 'Invalid result')  : void 0;
	    return isPositionInFrame(droppable.frame.pageMarginBox)(target);
	  });
	  return maybe;
	};

	var getBestScrollableDroppable = (function (_ref) {
	  var center = _ref.center,
	      destination = _ref.destination,
	      droppables = _ref.droppables;

	  if (destination) {
	    var _dimension = droppables[destination];

	    if (!_dimension.frame) {
	      return null;
	    }

	    return _dimension;
	  }

	  var dimension = getScrollableDroppableOver(center, droppables);
	  return dimension;
	});

	var config = {
	  startFromPercentage: 0.25,
	  maxScrollAtPercentage: 0.05,
	  maxPixelScroll: 28,
	  ease: function ease(percentage) {
	    return Math.pow(percentage, 2);
	  },
	  durationDampening: {
	    stopDampeningAt: 1200,
	    accelerateAt: 360
	  }
	};

	var getDistanceThresholds = (function (container, axis) {
	  var startScrollingFrom = container[axis.size] * config.startFromPercentage;
	  var maxScrollValueAt = container[axis.size] * config.maxScrollAtPercentage;
	  var thresholds = {
	    startScrollingFrom: startScrollingFrom,
	    maxScrollValueAt: maxScrollValueAt
	  };
	  return thresholds;
	});

	var getPercentage = (function (_ref) {
	  var startOfRange = _ref.startOfRange,
	      endOfRange = _ref.endOfRange,
	      current = _ref.current;
	  var range = endOfRange - startOfRange;

	  if (range === 0) {
	     warning("\n      Detected distance range of 0 in the fluid auto scroller\n      This is unexpected and would cause a divide by 0 issue.\n      Not allowing an auto scroll\n    ") ;
	    return 0;
	  }

	  var currentInRange = current - startOfRange;
	  var percentage = currentInRange / range;
	  return percentage;
	});

	var minScroll = 1;

	var getValueFromDistance = (function (distanceToEdge, thresholds) {
	  if (distanceToEdge > thresholds.startScrollingFrom) {
	    return 0;
	  }

	  if (distanceToEdge <= thresholds.maxScrollValueAt) {
	    return config.maxPixelScroll;
	  }

	  if (distanceToEdge === thresholds.startScrollingFrom) {
	    return minScroll;
	  }

	  var percentageFromMaxScrollValueAt = getPercentage({
	    startOfRange: thresholds.maxScrollValueAt,
	    endOfRange: thresholds.startScrollingFrom,
	    current: distanceToEdge
	  });
	  var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
	  var scroll = config.maxPixelScroll * config.ease(percentageFromStartScrollingFrom);
	  return Math.ceil(scroll);
	});

	var accelerateAt = config.durationDampening.accelerateAt;
	var stopAt = config.durationDampening.stopDampeningAt;
	var dampenValueByTime = (function (proposedScroll, dragStartTime) {
	  var startOfRange = dragStartTime;
	  var endOfRange = stopAt;
	  var now = Date.now();
	  var runTime = now - startOfRange;

	  if (runTime >= stopAt) {
	    return proposedScroll;
	  }

	  if (runTime < accelerateAt) {
	    return minScroll;
	  }

	  var betweenAccelerateAtAndStopAtPercentage = getPercentage({
	    startOfRange: accelerateAt,
	    endOfRange: endOfRange,
	    current: runTime
	  });
	  var scroll = proposedScroll * config.ease(betweenAccelerateAtAndStopAtPercentage);
	  return Math.ceil(scroll);
	});

	var getValue = (function (_ref) {
	  var distanceToEdge = _ref.distanceToEdge,
	      thresholds = _ref.thresholds,
	      dragStartTime = _ref.dragStartTime,
	      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
	  var scroll = getValueFromDistance(distanceToEdge, thresholds);

	  if (scroll === 0) {
	    return 0;
	  }

	  if (!shouldUseTimeDampening) {
	    return scroll;
	  }

	  return Math.max(dampenValueByTime(scroll, dragStartTime), minScroll);
	});

	var getScrollOnAxis = (function (_ref) {
	  var container = _ref.container,
	      distanceToEdges = _ref.distanceToEdges,
	      dragStartTime = _ref.dragStartTime,
	      axis = _ref.axis,
	      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
	  var thresholds = getDistanceThresholds(container, axis);
	  var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];

	  if (isCloserToEnd) {
	    return getValue({
	      distanceToEdge: distanceToEdges[axis.end],
	      thresholds: thresholds,
	      dragStartTime: dragStartTime,
	      shouldUseTimeDampening: shouldUseTimeDampening
	    });
	  }

	  return -1 * getValue({
	    distanceToEdge: distanceToEdges[axis.start],
	    thresholds: thresholds,
	    dragStartTime: dragStartTime,
	    shouldUseTimeDampening: shouldUseTimeDampening
	  });
	});

	var adjustForSizeLimits = (function (_ref) {
	  var container = _ref.container,
	      subject = _ref.subject,
	      proposedScroll = _ref.proposedScroll;
	  var isTooBigVertically = subject.height > container.height;
	  var isTooBigHorizontally = subject.width > container.width;

	  if (!isTooBigHorizontally && !isTooBigVertically) {
	    return proposedScroll;
	  }

	  if (isTooBigHorizontally && isTooBigVertically) {
	    return null;
	  }

	  return {
	    x: isTooBigHorizontally ? 0 : proposedScroll.x,
	    y: isTooBigVertically ? 0 : proposedScroll.y
	  };
	});

	var clean$2 = apply(function (value) {
	  return value === 0 ? 0 : value;
	});
	var getScroll = (function (_ref) {
	  var dragStartTime = _ref.dragStartTime,
	      container = _ref.container,
	      subject = _ref.subject,
	      center = _ref.center,
	      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
	  var distanceToEdges = {
	    top: center.y - container.top,
	    right: container.right - center.x,
	    bottom: container.bottom - center.y,
	    left: center.x - container.left
	  };
	  var y = getScrollOnAxis({
	    container: container,
	    distanceToEdges: distanceToEdges,
	    dragStartTime: dragStartTime,
	    axis: vertical,
	    shouldUseTimeDampening: shouldUseTimeDampening
	  });
	  var x = getScrollOnAxis({
	    container: container,
	    distanceToEdges: distanceToEdges,
	    dragStartTime: dragStartTime,
	    axis: horizontal,
	    shouldUseTimeDampening: shouldUseTimeDampening
	  });
	  var required = clean$2({
	    x: x,
	    y: y
	  });

	  if (isEqual(required, origin)) {
	    return null;
	  }

	  var limited = adjustForSizeLimits({
	    container: container,
	    subject: subject,
	    proposedScroll: required
	  });

	  if (!limited) {
	    return null;
	  }

	  return isEqual(limited, origin) ? null : limited;
	});

	var smallestSigned = apply(function (value) {
	  if (value === 0) {
	    return 0;
	  }

	  return value > 0 ? 1 : -1;
	});
	var getOverlap = function () {
	  var getRemainder = function getRemainder(target, max) {
	    if (target < 0) {
	      return target;
	    }

	    if (target > max) {
	      return target - max;
	    }

	    return 0;
	  };

	  return function (_ref) {
	    var current = _ref.current,
	        max = _ref.max,
	        change = _ref.change;
	    var targetScroll = add(current, change);
	    var overlap = {
	      x: getRemainder(targetScroll.x, max.x),
	      y: getRemainder(targetScroll.y, max.y)
	    };

	    if (isEqual(overlap, origin)) {
	      return null;
	    }

	    return overlap;
	  };
	}();
	var canPartiallyScroll = function canPartiallyScroll(_ref2) {
	  var rawMax = _ref2.max,
	      current = _ref2.current,
	      change = _ref2.change;
	  var max = {
	    x: Math.max(current.x, rawMax.x),
	    y: Math.max(current.y, rawMax.y)
	  };
	  var smallestChange = smallestSigned(change);
	  var overlap = getOverlap({
	    max: max,
	    current: current,
	    change: smallestChange
	  });

	  if (!overlap) {
	    return true;
	  }

	  if (smallestChange.x !== 0 && overlap.x === 0) {
	    return true;
	  }

	  if (smallestChange.y !== 0 && overlap.y === 0) {
	    return true;
	  }

	  return false;
	};
	var canScrollWindow = function canScrollWindow(viewport, change) {
	  return canPartiallyScroll({
	    current: viewport.scroll.current,
	    max: viewport.scroll.max,
	    change: change
	  });
	};
	var getWindowOverlap = function getWindowOverlap(viewport, change) {
	  if (!canScrollWindow(viewport, change)) {
	    return null;
	  }

	  var max = viewport.scroll.max;
	  var current = viewport.scroll.current;
	  return getOverlap({
	    current: current,
	    max: max,
	    change: change
	  });
	};
	var canScrollDroppable = function canScrollDroppable(droppable, change) {
	  var frame = droppable.frame;

	  if (!frame) {
	    return false;
	  }

	  return canPartiallyScroll({
	    current: frame.scroll.current,
	    max: frame.scroll.max,
	    change: change
	  });
	};
	var getDroppableOverlap = function getDroppableOverlap(droppable, change) {
	  var frame = droppable.frame;

	  if (!frame) {
	    return null;
	  }

	  if (!canScrollDroppable(droppable, change)) {
	    return null;
	  }

	  return getOverlap({
	    current: frame.scroll.current,
	    max: frame.scroll.max,
	    change: change
	  });
	};

	var getWindowScrollChange = (function (_ref) {
	  var viewport = _ref.viewport,
	      subject = _ref.subject,
	      center = _ref.center,
	      dragStartTime = _ref.dragStartTime,
	      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
	  var scroll = getScroll({
	    dragStartTime: dragStartTime,
	    container: viewport.frame,
	    subject: subject,
	    center: center,
	    shouldUseTimeDampening: shouldUseTimeDampening
	  });
	  return scroll && canScrollWindow(viewport, scroll) ? scroll : null;
	});

	var getDroppableScrollChange = (function (_ref) {
	  var droppable = _ref.droppable,
	      subject = _ref.subject,
	      center = _ref.center,
	      dragStartTime = _ref.dragStartTime,
	      shouldUseTimeDampening = _ref.shouldUseTimeDampening;
	  var frame = droppable.frame;

	  if (!frame) {
	    return null;
	  }

	  var scroll = getScroll({
	    dragStartTime: dragStartTime,
	    container: frame.pageMarginBox,
	    subject: subject,
	    center: center,
	    shouldUseTimeDampening: shouldUseTimeDampening
	  });
	  return scroll && canScrollDroppable(droppable, scroll) ? scroll : null;
	});

	var scroll$1 = (function (_ref) {
	  var state = _ref.state,
	      dragStartTime = _ref.dragStartTime,
	      shouldUseTimeDampening = _ref.shouldUseTimeDampening,
	      scrollWindow = _ref.scrollWindow,
	      scrollDroppable = _ref.scrollDroppable;
	  var center = state.current.page.borderBoxCenter;
	  var draggable = state.dimensions.draggables[state.critical.draggable.id];
	  var subject = draggable.page.marginBox;

	  if (state.isWindowScrollAllowed) {
	    var viewport = state.viewport;

	    var _change = getWindowScrollChange({
	      dragStartTime: dragStartTime,
	      viewport: viewport,
	      subject: subject,
	      center: center,
	      shouldUseTimeDampening: shouldUseTimeDampening
	    });

	    if (_change) {
	      scrollWindow(_change);
	      return;
	    }
	  }

	  var droppable = getBestScrollableDroppable({
	    center: center,
	    destination: whatIsDraggedOver(state.impact),
	    droppables: state.dimensions.droppables
	  });

	  if (!droppable) {
	    return;
	  }

	  var change = getDroppableScrollChange({
	    dragStartTime: dragStartTime,
	    droppable: droppable,
	    subject: subject,
	    center: center,
	    shouldUseTimeDampening: shouldUseTimeDampening
	  });

	  if (change) {
	    scrollDroppable(droppable.descriptor.id, change);
	  }
	});

	var createFluidScroller = (function (_ref) {
	  var scrollWindow = _ref.scrollWindow,
	      scrollDroppable = _ref.scrollDroppable;
	  var scheduleWindowScroll = rafSchd(scrollWindow);
	  var scheduleDroppableScroll = rafSchd(scrollDroppable);
	  var dragging = null;

	  var tryScroll = function tryScroll(state) {
	    !dragging ?  invariant(false, 'Cannot fluid scroll if not dragging')  : void 0;
	    var _dragging = dragging,
	        shouldUseTimeDampening = _dragging.shouldUseTimeDampening,
	        dragStartTime = _dragging.dragStartTime;
	    scroll$1({
	      state: state,
	      scrollWindow: scheduleWindowScroll,
	      scrollDroppable: scheduleDroppableScroll,
	      dragStartTime: dragStartTime,
	      shouldUseTimeDampening: shouldUseTimeDampening
	    });
	  };

	  var start$1 = function start$1(state) {
	    !!dragging ?  invariant(false, 'Cannot start auto scrolling when already started')  : void 0;
	    var dragStartTime = Date.now();
	    var wasScrollNeeded = false;

	    var fakeScrollCallback = function fakeScrollCallback() {
	      wasScrollNeeded = true;
	    };

	    scroll$1({
	      state: state,
	      dragStartTime: 0,
	      shouldUseTimeDampening: false,
	      scrollWindow: fakeScrollCallback,
	      scrollDroppable: fakeScrollCallback
	    });
	    dragging = {
	      dragStartTime: dragStartTime,
	      shouldUseTimeDampening: wasScrollNeeded
	    };

	    if (wasScrollNeeded) {
	      tryScroll(state);
	    }
	  };

	  var stop = function stop() {
	    if (!dragging) {
	      return;
	    }

	    scheduleWindowScroll.cancel();
	    scheduleDroppableScroll.cancel();
	    dragging = null;
	  };

	  return {
	    start: start$1,
	    stop: stop,
	    scroll: tryScroll
	  };
	});

	var createJumpScroller = (function (_ref) {
	  var move = _ref.move,
	      scrollDroppable = _ref.scrollDroppable,
	      scrollWindow = _ref.scrollWindow;

	  var moveByOffset = function moveByOffset(state, offset) {
	    var client = add(state.current.client.selection, offset);
	    move({
	      client: client
	    });
	  };

	  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan(droppable, change) {
	    if (!canScrollDroppable(droppable, change)) {
	      return change;
	    }

	    var overlap = getDroppableOverlap(droppable, change);

	    if (!overlap) {
	      scrollDroppable(droppable.descriptor.id, change);
	      return null;
	    }

	    var whatTheDroppableCanScroll = subtract(change, overlap);
	    scrollDroppable(droppable.descriptor.id, whatTheDroppableCanScroll);
	    var remainder = subtract(change, whatTheDroppableCanScroll);
	    return remainder;
	  };

	  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan(isWindowScrollAllowed, viewport, change) {
	    if (!isWindowScrollAllowed) {
	      return change;
	    }

	    if (!canScrollWindow(viewport, change)) {
	      return change;
	    }

	    var overlap = getWindowOverlap(viewport, change);

	    if (!overlap) {
	      scrollWindow(change);
	      return null;
	    }

	    var whatTheWindowCanScroll = subtract(change, overlap);
	    scrollWindow(whatTheWindowCanScroll);
	    var remainder = subtract(change, whatTheWindowCanScroll);
	    return remainder;
	  };

	  var jumpScroller = function jumpScroller(state) {
	    var request = state.scrollJumpRequest;

	    if (!request) {
	      return;
	    }

	    var destination = whatIsDraggedOver(state.impact);
	    !destination ?  invariant(false, 'Cannot perform a jump scroll when there is no destination')  : void 0;
	    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);

	    if (!droppableRemainder) {
	      return;
	    }

	    var viewport = state.viewport;
	    var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport, droppableRemainder);

	    if (!windowRemainder) {
	      return;
	    }

	    moveByOffset(state, windowRemainder);
	  };

	  return jumpScroller;
	});

	var createAutoScroller = (function (_ref) {
	  var scrollDroppable = _ref.scrollDroppable,
	      scrollWindow = _ref.scrollWindow,
	      move = _ref.move;
	  var fluidScroller = createFluidScroller({
	    scrollWindow: scrollWindow,
	    scrollDroppable: scrollDroppable
	  });
	  var jumpScroll = createJumpScroller({
	    move: move,
	    scrollWindow: scrollWindow,
	    scrollDroppable: scrollDroppable
	  });

	  var scroll = function scroll(state) {
	    if (state.phase !== 'DRAGGING') {
	      return;
	    }

	    if (state.movementMode === 'FLUID') {
	      fluidScroller.scroll(state);
	      return;
	    }

	    if (!state.scrollJumpRequest) {
	      return;
	    }

	    jumpScroll(state);
	  };

	  var scroller = {
	    scroll: scroll,
	    start: fluidScroller.start,
	    stop: fluidScroller.stop
	  };
	  return scroller;
	});

	var prefix$1 = 'data-rbd';
	var dragHandle = function () {
	  var base = prefix$1 + "-drag-handle";
	  return {
	    base: base,
	    draggableId: base + "-draggable-id",
	    contextId: base + "-context-id"
	  };
	}();
	var draggable = function () {
	  var base = prefix$1 + "-draggable";
	  return {
	    base: base,
	    contextId: base + "-context-id",
	    id: base + "-id"
	  };
	}();
	var droppable = function () {
	  var base = prefix$1 + "-droppable";
	  return {
	    base: base,
	    contextId: base + "-context-id",
	    id: base + "-id"
	  };
	}();
	var scrollContainer = {
	  contextId: prefix$1 + "-scroll-container-context-id"
	};

	var makeGetSelector = function makeGetSelector(context) {
	  return function (attribute) {
	    return "[" + attribute + "=\"" + context + "\"]";
	  };
	};

	var getStyles = function getStyles(rules, property) {
	  return rules.map(function (rule) {
	    var value = rule.styles[property];

	    if (!value) {
	      return '';
	    }

	    return rule.selector + " { " + value + " }";
	  }).join(' ');
	};

	var noPointerEvents = 'pointer-events: none;';
	var getStyles$1 = (function (contextId) {
	  var getSelector = makeGetSelector(contextId);

	  var dragHandle$1 = function () {
	    var grabCursor = "\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";
	    return {
	      selector: getSelector(dragHandle.contextId),
	      styles: {
	        always: "\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",
	        resting: grabCursor,
	        dragging: noPointerEvents,
	        dropAnimating: grabCursor
	      }
	    };
	  }();

	  var draggable$1 = function () {
	    var transition = "\n      transition: " + transitions.outOfTheWay + ";\n    ";
	    return {
	      selector: getSelector(draggable.contextId),
	      styles: {
	        dragging: transition,
	        dropAnimating: transition,
	        userCancel: transition
	      }
	    };
	  }();

	  var droppable$1 = {
	    selector: getSelector(droppable.contextId),
	    styles: {
	      always: "overflow-anchor: none;"
	    }
	  };
	  var body = {
	    selector: 'body',
	    styles: {
	      dragging: "\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "
	    }
	  };
	  var rules = [draggable$1, dragHandle$1, droppable$1, body];
	  return {
	    always: getStyles(rules, 'always'),
	    resting: getStyles(rules, 'resting'),
	    dragging: getStyles(rules, 'dragging'),
	    dropAnimating: getStyles(rules, 'dropAnimating'),
	    userCancel: getStyles(rules, 'userCancel')
	  };
	});

	var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React__default['default'].useLayoutEffect : React__default['default'].useEffect;

	var getHead = function getHead() {
	  var head = document.querySelector('head');
	  !head ?  invariant(false, 'Cannot find the head to append a style to')  : void 0;
	  return head;
	};

	var createStyleEl = function createStyleEl(nonce) {
	  var el = document.createElement('style');

	  if (nonce) {
	    el.setAttribute('nonce', nonce);
	  }

	  el.type = 'text/css';
	  return el;
	};

	function useStyleMarshal(contextId, nonce) {
	  var styles = useMemoOne_cjs.useMemo(function () {
	    return getStyles$1(contextId);
	  }, [contextId]);
	  var alwaysRef = React__default['default'].useRef(null);
	  var dynamicRef = React__default['default'].useRef(null);
	  var setDynamicStyle = useMemoOne_cjs.useCallback(memoizeOne(function (proposed) {
	    var el = dynamicRef.current;
	    !el ?  invariant(false, 'Cannot set dynamic style element if it is not set')  : void 0;
	    el.textContent = proposed;
	  }), []);
	  var setAlwaysStyle = useMemoOne_cjs.useCallback(function (proposed) {
	    var el = alwaysRef.current;
	    !el ?  invariant(false, 'Cannot set dynamic style element if it is not set')  : void 0;
	    el.textContent = proposed;
	  }, []);
	  useIsomorphicLayoutEffect(function () {
	    !(!alwaysRef.current && !dynamicRef.current) ?  invariant(false, 'style elements already mounted')  : void 0;
	    var always = createStyleEl(nonce);
	    var dynamic = createStyleEl(nonce);
	    alwaysRef.current = always;
	    dynamicRef.current = dynamic;
	    always.setAttribute(prefix$1 + "-always", contextId);
	    dynamic.setAttribute(prefix$1 + "-dynamic", contextId);
	    getHead().appendChild(always);
	    getHead().appendChild(dynamic);
	    setAlwaysStyle(styles.always);
	    setDynamicStyle(styles.resting);
	    return function () {
	      var remove = function remove(ref) {
	        var current = ref.current;
	        !current ?  invariant(false, 'Cannot unmount ref as it is not set')  : void 0;
	        getHead().removeChild(current);
	        ref.current = null;
	      };

	      remove(alwaysRef);
	      remove(dynamicRef);
	    };
	  }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
	  var dragging = useMemoOne_cjs.useCallback(function () {
	    return setDynamicStyle(styles.dragging);
	  }, [setDynamicStyle, styles.dragging]);
	  var dropping = useMemoOne_cjs.useCallback(function (reason) {
	    if (reason === 'DROP') {
	      setDynamicStyle(styles.dropAnimating);
	      return;
	    }

	    setDynamicStyle(styles.userCancel);
	  }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
	  var resting = useMemoOne_cjs.useCallback(function () {
	    if (!dynamicRef.current) {
	      return;
	    }

	    setDynamicStyle(styles.resting);
	  }, [setDynamicStyle, styles.resting]);
	  var marshal = useMemoOne_cjs.useMemo(function () {
	    return {
	      dragging: dragging,
	      dropping: dropping,
	      resting: resting
	    };
	  }, [dragging, dropping, resting]);
	  return marshal;
	}

	var getWindowFromEl = (function (el) {
	  return el && el.ownerDocument ? el.ownerDocument.defaultView : window;
	});

	function isHtmlElement(el) {
	  return el instanceof getWindowFromEl(el).HTMLElement;
	}

	function findDragHandle(contextId, draggableId) {
	  var selector = "[" + dragHandle.contextId + "=\"" + contextId + "\"]";
	  var possible = toArray(document.querySelectorAll(selector));

	  if (!possible.length) {
	     warning("Unable to find any drag handles in the context \"" + contextId + "\"") ;
	    return null;
	  }

	  var handle = find(possible, function (el) {
	    return el.getAttribute(dragHandle.draggableId) === draggableId;
	  });

	  if (!handle) {
	     warning("Unable to find drag handle with id \"" + draggableId + "\" as no handle with a matching id was found") ;
	    return null;
	  }

	  if (!isHtmlElement(handle)) {
	     warning('drag handle needs to be a HTMLElement') ;
	    return null;
	  }

	  return handle;
	}

	function useFocusMarshal(contextId) {
	  var entriesRef = React__default['default'].useRef({});
	  var recordRef = React__default['default'].useRef(null);
	  var restoreFocusFrameRef = React__default['default'].useRef(null);
	  var isMountedRef = React__default['default'].useRef(false);
	  var register = useMemoOne_cjs.useCallback(function register(id, focus) {
	    var entry = {
	      id: id,
	      focus: focus
	    };
	    entriesRef.current[id] = entry;
	    return function unregister() {
	      var entries = entriesRef.current;
	      var current = entries[id];

	      if (current !== entry) {
	        delete entries[id];
	      }
	    };
	  }, []);
	  var tryGiveFocus = useMemoOne_cjs.useCallback(function tryGiveFocus(tryGiveFocusTo) {
	    var handle = findDragHandle(contextId, tryGiveFocusTo);

	    if (handle && handle !== document.activeElement) {
	      handle.focus();
	    }
	  }, [contextId]);
	  var tryShiftRecord = useMemoOne_cjs.useCallback(function tryShiftRecord(previous, redirectTo) {
	    if (recordRef.current === previous) {
	      recordRef.current = redirectTo;
	    }
	  }, []);
	  var tryRestoreFocusRecorded = useMemoOne_cjs.useCallback(function tryRestoreFocusRecorded() {
	    if (restoreFocusFrameRef.current) {
	      return;
	    }

	    if (!isMountedRef.current) {
	      return;
	    }

	    restoreFocusFrameRef.current = requestAnimationFrame(function () {
	      restoreFocusFrameRef.current = null;
	      var record = recordRef.current;

	      if (record) {
	        tryGiveFocus(record);
	      }
	    });
	  }, [tryGiveFocus]);
	  var tryRecordFocus = useMemoOne_cjs.useCallback(function tryRecordFocus(id) {
	    recordRef.current = null;
	    var focused = document.activeElement;

	    if (!focused) {
	      return;
	    }

	    if (focused.getAttribute(dragHandle.draggableId) !== id) {
	      return;
	    }

	    recordRef.current = id;
	  }, []);
	  useIsomorphicLayoutEffect(function () {
	    isMountedRef.current = true;
	    return function clearFrameOnUnmount() {
	      isMountedRef.current = false;
	      var frameId = restoreFocusFrameRef.current;

	      if (frameId) {
	        cancelAnimationFrame(frameId);
	      }
	    };
	  }, []);
	  var marshal = useMemoOne_cjs.useMemo(function () {
	    return {
	      register: register,
	      tryRecordFocus: tryRecordFocus,
	      tryRestoreFocusRecorded: tryRestoreFocusRecorded,
	      tryShiftRecord: tryShiftRecord
	    };
	  }, [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
	  return marshal;
	}

	function createRegistry() {
	  var entries = {
	    draggables: {},
	    droppables: {}
	  };
	  var subscribers = [];

	  function subscribe(cb) {
	    subscribers.push(cb);
	    return function unsubscribe() {
	      var index = subscribers.indexOf(cb);

	      if (index === -1) {
	        return;
	      }

	      subscribers.splice(index, 1);
	    };
	  }

	  function notify(event) {
	    if (subscribers.length) {
	      subscribers.forEach(function (cb) {
	        return cb(event);
	      });
	    }
	  }

	  function findDraggableById(id) {
	    return entries.draggables[id] || null;
	  }

	  function getDraggableById(id) {
	    var entry = findDraggableById(id);
	    !entry ?  invariant(false, "Cannot find draggable entry with id [" + id + "]")  : void 0;
	    return entry;
	  }

	  var draggableAPI = {
	    register: function register(entry) {
	      entries.draggables[entry.descriptor.id] = entry;
	      notify({
	        type: 'ADDITION',
	        value: entry
	      });
	    },
	    update: function update(entry, last) {
	      var current = entries.draggables[last.descriptor.id];

	      if (!current) {
	        return;
	      }

	      if (current.uniqueId !== entry.uniqueId) {
	        return;
	      }

	      delete entries.draggables[last.descriptor.id];
	      entries.draggables[entry.descriptor.id] = entry;
	    },
	    unregister: function unregister(entry) {
	      var draggableId = entry.descriptor.id;
	      var current = findDraggableById(draggableId);

	      if (!current) {
	        return;
	      }

	      if (entry.uniqueId !== current.uniqueId) {
	        return;
	      }

	      delete entries.draggables[draggableId];
	      notify({
	        type: 'REMOVAL',
	        value: entry
	      });
	    },
	    getById: getDraggableById,
	    findById: findDraggableById,
	    exists: function exists(id) {
	      return Boolean(findDraggableById(id));
	    },
	    getAllByType: function getAllByType(type) {
	      return values(entries.draggables).filter(function (entry) {
	        return entry.descriptor.type === type;
	      });
	    }
	  };

	  function findDroppableById(id) {
	    return entries.droppables[id] || null;
	  }

	  function getDroppableById(id) {
	    var entry = findDroppableById(id);
	    !entry ?  invariant(false, "Cannot find droppable entry with id [" + id + "]")  : void 0;
	    return entry;
	  }

	  var droppableAPI = {
	    register: function register(entry) {
	      entries.droppables[entry.descriptor.id] = entry;
	    },
	    unregister: function unregister(entry) {
	      var current = findDroppableById(entry.descriptor.id);

	      if (!current) {
	        return;
	      }

	      if (entry.uniqueId !== current.uniqueId) {
	        return;
	      }

	      delete entries.droppables[entry.descriptor.id];
	    },
	    getById: getDroppableById,
	    findById: findDroppableById,
	    exists: function exists(id) {
	      return Boolean(findDroppableById(id));
	    },
	    getAllByType: function getAllByType(type) {
	      return values(entries.droppables).filter(function (entry) {
	        return entry.descriptor.type === type;
	      });
	    }
	  };

	  function clean() {
	    entries.draggables = {};
	    entries.droppables = {};
	    subscribers.length = 0;
	  }

	  return {
	    draggable: draggableAPI,
	    droppable: droppableAPI,
	    subscribe: subscribe,
	    clean: clean
	  };
	}

	function useRegistry() {
	  var registry = useMemoOne_cjs.useMemo(createRegistry, []);
	  React__default['default'].useEffect(function () {
	    return function unmount() {
	      requestAnimationFrame(registry.clean);
	    };
	  }, [registry]);
	  return registry;
	}

	var StoreContext = React__default$1.createContext(null);

	var getBodyElement = (function () {
	  var body = document.body;
	  !body ?  invariant(false, 'Cannot find document.body')  : void 0;
	  return body;
	});

	var visuallyHidden = {
	  position: 'absolute',
	  width: '1px',
	  height: '1px',
	  margin: '-1px',
	  border: '0',
	  padding: '0',
	  overflow: 'hidden',
	  clip: 'rect(0 0 0 0)',
	  'clip-path': 'inset(100%)'
	};

	var getId = function getId(contextId) {
	  return "rbd-announcement-" + contextId;
	};
	function useAnnouncer(contextId) {
	  var id = useMemoOne_cjs.useMemo(function () {
	    return getId(contextId);
	  }, [contextId]);
	  var ref = React__default['default'].useRef(null);
	  React__default['default'].useEffect(function setup() {
	    var el = document.createElement('div');
	    ref.current = el;
	    el.id = id;
	    el.setAttribute('aria-live', 'assertive');
	    el.setAttribute('aria-atomic', 'true');

	    _extends(el.style, visuallyHidden);

	    getBodyElement().appendChild(el);
	    return function cleanup() {
	      setTimeout(function remove() {
	        var body = getBodyElement();

	        if (body.contains(el)) {
	          body.removeChild(el);
	        }

	        if (el === ref.current) {
	          ref.current = null;
	        }
	      });
	    };
	  }, [id]);
	  var announce = useMemoOne_cjs.useCallback(function (message) {
	    var el = ref.current;

	    if (el) {
	      el.textContent = message;
	      return;
	    }

	     warning("\n      A screen reader message was trying to be announced but it was unable to do so.\n      This can occur if you unmount your <DragDropContext /> in your onDragEnd.\n      Consider calling provided.announce() before the unmount so that the instruction will\n      not be lost for users relying on a screen reader.\n\n      Message not passed to screen reader:\n\n      \"" + message + "\"\n    ") ;
	  }, []);
	  return announce;
	}

	var count = 0;
	var defaults = {
	  separator: '::'
	};
	function reset() {
	  count = 0;
	}
	function useUniqueId(prefix, options) {
	  if (options === void 0) {
	    options = defaults;
	  }

	  return useMemoOne_cjs.useMemo(function () {
	    return "" + prefix + options.separator + count++;
	  }, [options.separator, prefix]);
	}

	function getElementId(_ref) {
	  var contextId = _ref.contextId,
	      uniqueId = _ref.uniqueId;
	  return "rbd-hidden-text-" + contextId + "-" + uniqueId;
	}
	function useHiddenTextElement(_ref2) {
	  var contextId = _ref2.contextId,
	      text = _ref2.text;
	  var uniqueId = useUniqueId('hidden-text', {
	    separator: '-'
	  });
	  var id = useMemoOne_cjs.useMemo(function () {
	    return getElementId({
	      contextId: contextId,
	      uniqueId: uniqueId
	    });
	  }, [uniqueId, contextId]);
	  React__default['default'].useEffect(function mount() {
	    var el = document.createElement('div');
	    el.id = id;
	    el.textContent = text;
	    el.style.display = 'none';
	    getBodyElement().appendChild(el);
	    return function unmount() {
	      var body = getBodyElement();

	      if (body.contains(el)) {
	        body.removeChild(el);
	      }
	    };
	  }, [id, text]);
	  return id;
	}

	var AppContext = React__default$1.createContext(null);

	var peerDependencies = {
		react: "^16.8.5",
		"react-dom": "^16.8.5"
	};

	var semver = /(\d+)\.(\d+)\.(\d+)/;

	var getVersion = function getVersion(value) {
	  var result = semver.exec(value);
	  !(result != null) ?  invariant(false, "Unable to parse React version " + value)  : void 0;
	  var major = Number(result[1]);
	  var minor = Number(result[2]);
	  var patch = Number(result[3]);
	  return {
	    major: major,
	    minor: minor,
	    patch: patch,
	    raw: value
	  };
	};

	var isSatisfied = function isSatisfied(expected, actual) {
	  if (actual.major > expected.major) {
	    return true;
	  }

	  if (actual.major < expected.major) {
	    return false;
	  }

	  if (actual.minor > expected.minor) {
	    return true;
	  }

	  if (actual.minor < expected.minor) {
	    return false;
	  }

	  return actual.patch >= expected.patch;
	};

	var checkReactVersion = (function (peerDepValue, actualValue) {
	  var peerDep = getVersion(peerDepValue);
	  var actual = getVersion(actualValue);

	  if (isSatisfied(peerDep, actual)) {
	    return;
	  }

	   warning("\n    React version: [" + actual.raw + "]\n    does not satisfy expected peer dependency version: [" + peerDep.raw + "]\n\n    This can result in run time bugs, and even fatal crashes\n  ") ;
	});

	var suffix = "\n  We expect a html5 doctype: <!doctype html>\n  This is to ensure consistent browser layout and measurement\n\n  More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/doctype.md\n";
	var checkDoctype = (function (doc) {
	  var doctype = doc.doctype;

	  if (!doctype) {
	     warning("\n      No <!doctype html> found.\n\n      " + suffix + "\n    ") ;
	    return;
	  }

	  if (doctype.name.toLowerCase() !== 'html') {
	     warning("\n      Unexpected <!doctype> found: (" + doctype.name + ")\n\n      " + suffix + "\n    ") ;
	  }

	  if (doctype.publicId !== '') {
	     warning("\n      Unexpected <!doctype> publicId found: (" + doctype.publicId + ")\n      A html5 doctype does not have a publicId\n\n      " + suffix + "\n    ") ;
	  }
	});

	function useDev(useHook) {
	  {
	    useHook();
	  }
	}

	function useDevSetupWarning(fn, inputs) {
	  useDev(function () {
	    React__default['default'].useEffect(function () {
	      try {
	        fn();
	      } catch (e) {
	        error("\n          A setup problem was encountered.\n\n          > " + e.message + "\n        ");
	      }
	    }, inputs);
	  });
	}

	function useStartupValidation() {
	  useDevSetupWarning(function () {
	    checkReactVersion(peerDependencies.react, React__default$1.version);
	    checkDoctype(document);
	  }, []);
	}

	function usePrevious(current) {
	  var ref = React__default['default'].useRef(current);
	  React__default['default'].useEffect(function () {
	    ref.current = current;
	  });
	  return ref;
	}

	function create() {
	  var lock = null;

	  function isClaimed() {
	    return Boolean(lock);
	  }

	  function isActive(value) {
	    return value === lock;
	  }

	  function claim(abandon) {
	    !!lock ?  invariant(false, 'Cannot claim lock as it is already claimed')  : void 0;
	    var newLock = {
	      abandon: abandon
	    };
	    lock = newLock;
	    return newLock;
	  }

	  function release() {
	    !lock ?  invariant(false, 'Cannot release lock when there is no lock')  : void 0;
	    lock = null;
	  }

	  function tryAbandon() {
	    if (lock) {
	      lock.abandon();
	      release();
	    }
	  }

	  return {
	    isClaimed: isClaimed,
	    isActive: isActive,
	    claim: claim,
	    release: release,
	    tryAbandon: tryAbandon
	  };
	}

	var tab = 9;
	var enter = 13;
	var escape = 27;
	var space = 32;
	var pageUp = 33;
	var pageDown = 34;
	var end = 35;
	var home = 36;
	var arrowLeft = 37;
	var arrowUp = 38;
	var arrowRight = 39;
	var arrowDown = 40;

	var _preventedKeys;
	var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
	var preventStandardKeyEvents = (function (event) {
	  if (preventedKeys[event.keyCode]) {
	    event.preventDefault();
	  }
	});

	var supportedEventName = function () {
	  var base = 'visibilitychange';

	  if (typeof document === 'undefined') {
	    return base;
	  }

	  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
	  var supported = find(candidates, function (eventName) {
	    return "on" + eventName in document;
	  });
	  return supported || base;
	}();

	var primaryButton = 0;
	var sloppyClickThreshold = 5;

	function isSloppyClickThresholdExceeded(original, current) {
	  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
	}

	var idle$1 = {
	  type: 'IDLE'
	};

	function getCaptureBindings(_ref) {
	  var cancel = _ref.cancel,
	      completed = _ref.completed,
	      getPhase = _ref.getPhase,
	      setPhase = _ref.setPhase;
	  return [{
	    eventName: 'mousemove',
	    fn: function fn(event) {
	      var button = event.button,
	          clientX = event.clientX,
	          clientY = event.clientY;

	      if (button !== primaryButton) {
	        return;
	      }

	      var point = {
	        x: clientX,
	        y: clientY
	      };
	      var phase = getPhase();

	      if (phase.type === 'DRAGGING') {
	        event.preventDefault();
	        phase.actions.move(point);
	        return;
	      }

	      !(phase.type === 'PENDING') ?  invariant(false, 'Cannot be IDLE')  : void 0;
	      var pending = phase.point;

	      if (!isSloppyClickThresholdExceeded(pending, point)) {
	        return;
	      }

	      event.preventDefault();
	      var actions = phase.actions.fluidLift(point);
	      setPhase({
	        type: 'DRAGGING',
	        actions: actions
	      });
	    }
	  }, {
	    eventName: 'mouseup',
	    fn: function fn(event) {
	      var phase = getPhase();

	      if (phase.type !== 'DRAGGING') {
	        cancel();
	        return;
	      }

	      event.preventDefault();
	      phase.actions.drop({
	        shouldBlockNextClick: true
	      });
	      completed();
	    }
	  }, {
	    eventName: 'mousedown',
	    fn: function fn(event) {
	      if (getPhase().type === 'DRAGGING') {
	        event.preventDefault();
	      }

	      cancel();
	    }
	  }, {
	    eventName: 'keydown',
	    fn: function fn(event) {
	      var phase = getPhase();

	      if (phase.type === 'PENDING') {
	        cancel();
	        return;
	      }

	      if (event.keyCode === escape) {
	        event.preventDefault();
	        cancel();
	        return;
	      }

	      preventStandardKeyEvents(event);
	    }
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      passive: true,
	      capture: false
	    },
	    fn: function fn() {
	      if (getPhase().type === 'PENDING') {
	        cancel();
	      }
	    }
	  }, {
	    eventName: 'webkitmouseforcedown',
	    fn: function fn(event) {
	      var phase = getPhase();
	      !(phase.type !== 'IDLE') ?  invariant(false, 'Unexpected phase')  : void 0;

	      if (phase.actions.shouldRespectForcePress()) {
	        cancel();
	        return;
	      }

	      event.preventDefault();
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	}

	function useMouseSensor(api) {
	  var phaseRef = React__default['default'].useRef(idle$1);
	  var unbindEventsRef = React__default['default'].useRef(noop);
	  var startCaptureBinding = useMemoOne_cjs.useMemo(function () {
	    return {
	      eventName: 'mousedown',
	      fn: function onMouseDown(event) {
	        if (event.defaultPrevented) {
	          return;
	        }

	        if (event.button !== primaryButton) {
	          return;
	        }

	        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
	          return;
	        }

	        var draggableId = api.findClosestDraggableId(event);

	        if (!draggableId) {
	          return;
	        }

	        var actions = api.tryGetLock(draggableId, stop, {
	          sourceEvent: event
	        });

	        if (!actions) {
	          return;
	        }

	        event.preventDefault();
	        var point = {
	          x: event.clientX,
	          y: event.clientY
	        };
	        unbindEventsRef.current();
	        startPendingDrag(actions, point);
	      }
	    };
	  }, [api]);
	  var preventForcePressBinding = useMemoOne_cjs.useMemo(function () {
	    return {
	      eventName: 'webkitmouseforcewillbegin',
	      fn: function fn(event) {
	        if (event.defaultPrevented) {
	          return;
	        }

	        var id = api.findClosestDraggableId(event);

	        if (!id) {
	          return;
	        }

	        var options = api.findOptionsForDraggable(id);

	        if (!options) {
	          return;
	        }

	        if (options.shouldRespectForcePress) {
	          return;
	        }

	        if (!api.canGetLock(id)) {
	          return;
	        }

	        event.preventDefault();
	      }
	    };
	  }, [api]);
	  var listenForCapture = useMemoOne_cjs.useCallback(function listenForCapture() {
	    var options = {
	      passive: false,
	      capture: true
	    };
	    unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
	  }, [preventForcePressBinding, startCaptureBinding]);
	  var stop = useMemoOne_cjs.useCallback(function () {
	    var current = phaseRef.current;

	    if (current.type === 'IDLE') {
	      return;
	    }

	    phaseRef.current = idle$1;
	    unbindEventsRef.current();
	    listenForCapture();
	  }, [listenForCapture]);
	  var cancel = useMemoOne_cjs.useCallback(function () {
	    var phase = phaseRef.current;
	    stop();

	    if (phase.type === 'DRAGGING') {
	      phase.actions.cancel({
	        shouldBlockNextClick: true
	      });
	    }

	    if (phase.type === 'PENDING') {
	      phase.actions.abort();
	    }
	  }, [stop]);
	  var bindCapturingEvents = useMemoOne_cjs.useCallback(function bindCapturingEvents() {
	    var options = {
	      capture: true,
	      passive: false
	    };
	    var bindings = getCaptureBindings({
	      cancel: cancel,
	      completed: stop,
	      getPhase: function getPhase() {
	        return phaseRef.current;
	      },
	      setPhase: function setPhase(phase) {
	        phaseRef.current = phase;
	      }
	    });
	    unbindEventsRef.current = bindEvents(window, bindings, options);
	  }, [cancel, stop]);
	  var startPendingDrag = useMemoOne_cjs.useCallback(function startPendingDrag(actions, point) {
	    !(phaseRef.current.type === 'IDLE') ?  invariant(false, 'Expected to move from IDLE to PENDING drag')  : void 0;
	    phaseRef.current = {
	      type: 'PENDING',
	      point: point,
	      actions: actions
	    };
	    bindCapturingEvents();
	  }, [bindCapturingEvents]);
	  useIsomorphicLayoutEffect(function mount() {
	    listenForCapture();
	    return function unmount() {
	      unbindEventsRef.current();
	    };
	  }, [listenForCapture]);
	}

	var _scrollJumpKeys;

	function noop$1() {}

	var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);

	function getDraggingBindings(actions, stop) {
	  function cancel() {
	    stop();
	    actions.cancel();
	  }

	  function drop() {
	    stop();
	    actions.drop();
	  }

	  return [{
	    eventName: 'keydown',
	    fn: function fn(event) {
	      if (event.keyCode === escape) {
	        event.preventDefault();
	        cancel();
	        return;
	      }

	      if (event.keyCode === space) {
	        event.preventDefault();
	        drop();
	        return;
	      }

	      if (event.keyCode === arrowDown) {
	        event.preventDefault();
	        actions.moveDown();
	        return;
	      }

	      if (event.keyCode === arrowUp) {
	        event.preventDefault();
	        actions.moveUp();
	        return;
	      }

	      if (event.keyCode === arrowRight) {
	        event.preventDefault();
	        actions.moveRight();
	        return;
	      }

	      if (event.keyCode === arrowLeft) {
	        event.preventDefault();
	        actions.moveLeft();
	        return;
	      }

	      if (scrollJumpKeys[event.keyCode]) {
	        event.preventDefault();
	        return;
	      }

	      preventStandardKeyEvents(event);
	    }
	  }, {
	    eventName: 'mousedown',
	    fn: cancel
	  }, {
	    eventName: 'mouseup',
	    fn: cancel
	  }, {
	    eventName: 'click',
	    fn: cancel
	  }, {
	    eventName: 'touchstart',
	    fn: cancel
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'wheel',
	    fn: cancel,
	    options: {
	      passive: true
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	}

	function useKeyboardSensor(api) {
	  var unbindEventsRef = React__default['default'].useRef(noop$1);
	  var startCaptureBinding = useMemoOne_cjs.useMemo(function () {
	    return {
	      eventName: 'keydown',
	      fn: function onKeyDown(event) {
	        if (event.defaultPrevented) {
	          return;
	        }

	        if (event.keyCode !== space) {
	          return;
	        }

	        var draggableId = api.findClosestDraggableId(event);

	        if (!draggableId) {
	          return;
	        }

	        var preDrag = api.tryGetLock(draggableId, stop, {
	          sourceEvent: event
	        });

	        if (!preDrag) {
	          return;
	        }

	        event.preventDefault();
	        var isCapturing = true;
	        var actions = preDrag.snapLift();
	        unbindEventsRef.current();

	        function stop() {
	          !isCapturing ?  invariant(false, 'Cannot stop capturing a keyboard drag when not capturing')  : void 0;
	          isCapturing = false;
	          unbindEventsRef.current();
	          listenForCapture();
	        }

	        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
	          capture: true,
	          passive: false
	        });
	      }
	    };
	  }, [api]);
	  var listenForCapture = useMemoOne_cjs.useCallback(function tryStartCapture() {
	    var options = {
	      passive: false,
	      capture: true
	    };
	    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
	  }, [startCaptureBinding]);
	  useIsomorphicLayoutEffect(function mount() {
	    listenForCapture();
	    return function unmount() {
	      unbindEventsRef.current();
	    };
	  }, [listenForCapture]);
	}

	var idle$2 = {
	  type: 'IDLE'
	};
	var timeForLongPress = 120;
	var forcePressThreshold = 0.15;

	function getWindowBindings(_ref) {
	  var cancel = _ref.cancel,
	      getPhase = _ref.getPhase;
	  return [{
	    eventName: 'orientationchange',
	    fn: cancel
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'contextmenu',
	    fn: function fn(event) {
	      event.preventDefault();
	    }
	  }, {
	    eventName: 'keydown',
	    fn: function fn(event) {
	      if (getPhase().type !== 'DRAGGING') {
	        cancel();
	        return;
	      }

	      if (event.keyCode === escape) {
	        event.preventDefault();
	      }

	      cancel();
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	}

	function getHandleBindings(_ref2) {
	  var cancel = _ref2.cancel,
	      completed = _ref2.completed,
	      getPhase = _ref2.getPhase;
	  return [{
	    eventName: 'touchmove',
	    options: {
	      capture: false
	    },
	    fn: function fn(event) {
	      var phase = getPhase();

	      if (phase.type !== 'DRAGGING') {
	        cancel();
	        return;
	      }

	      phase.hasMoved = true;
	      var _event$touches$ = event.touches[0],
	          clientX = _event$touches$.clientX,
	          clientY = _event$touches$.clientY;
	      var point = {
	        x: clientX,
	        y: clientY
	      };
	      event.preventDefault();
	      phase.actions.move(point);
	    }
	  }, {
	    eventName: 'touchend',
	    fn: function fn(event) {
	      var phase = getPhase();

	      if (phase.type !== 'DRAGGING') {
	        cancel();
	        return;
	      }

	      event.preventDefault();
	      phase.actions.drop({
	        shouldBlockNextClick: true
	      });
	      completed();
	    }
	  }, {
	    eventName: 'touchcancel',
	    fn: function fn(event) {
	      if (getPhase().type !== 'DRAGGING') {
	        cancel();
	        return;
	      }

	      event.preventDefault();
	      cancel();
	    }
	  }, {
	    eventName: 'touchforcechange',
	    fn: function fn(event) {
	      var phase = getPhase();
	      !(phase.type !== 'IDLE') ?  invariant(false)  : void 0;
	      var touch = event.touches[0];

	      if (!touch) {
	        return;
	      }

	      var isForcePress = touch.force >= forcePressThreshold;

	      if (!isForcePress) {
	        return;
	      }

	      var shouldRespect = phase.actions.shouldRespectForcePress();

	      if (phase.type === 'PENDING') {
	        if (shouldRespect) {
	          cancel();
	        }

	        return;
	      }

	      if (shouldRespect) {
	        if (phase.hasMoved) {
	          event.preventDefault();
	          return;
	        }

	        cancel();
	        return;
	      }

	      event.preventDefault();
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];
	}

	function useMouseSensor$1(api) {
	  var phaseRef = React__default['default'].useRef(idle$2);
	  var unbindEventsRef = React__default['default'].useRef(noop);
	  var getPhase = useMemoOne_cjs.useCallback(function getPhase() {
	    return phaseRef.current;
	  }, []);
	  var setPhase = useMemoOne_cjs.useCallback(function setPhase(phase) {
	    phaseRef.current = phase;
	  }, []);
	  var startCaptureBinding = useMemoOne_cjs.useMemo(function () {
	    return {
	      eventName: 'touchstart',
	      fn: function onTouchStart(event) {
	        if (event.defaultPrevented) {
	          return;
	        }

	        var draggableId = api.findClosestDraggableId(event);

	        if (!draggableId) {
	          return;
	        }

	        var actions = api.tryGetLock(draggableId, stop, {
	          sourceEvent: event
	        });

	        if (!actions) {
	          return;
	        }

	        var touch = event.touches[0];
	        var clientX = touch.clientX,
	            clientY = touch.clientY;
	        var point = {
	          x: clientX,
	          y: clientY
	        };
	        unbindEventsRef.current();
	        startPendingDrag(actions, point);
	      }
	    };
	  }, [api]);
	  var listenForCapture = useMemoOne_cjs.useCallback(function listenForCapture() {
	    var options = {
	      capture: true,
	      passive: false
	    };
	    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
	  }, [startCaptureBinding]);
	  var stop = useMemoOne_cjs.useCallback(function () {
	    var current = phaseRef.current;

	    if (current.type === 'IDLE') {
	      return;
	    }

	    if (current.type === 'PENDING') {
	      clearTimeout(current.longPressTimerId);
	    }

	    setPhase(idle$2);
	    unbindEventsRef.current();
	    listenForCapture();
	  }, [listenForCapture, setPhase]);
	  var cancel = useMemoOne_cjs.useCallback(function () {
	    var phase = phaseRef.current;
	    stop();

	    if (phase.type === 'DRAGGING') {
	      phase.actions.cancel({
	        shouldBlockNextClick: true
	      });
	    }

	    if (phase.type === 'PENDING') {
	      phase.actions.abort();
	    }
	  }, [stop]);
	  var bindCapturingEvents = useMemoOne_cjs.useCallback(function bindCapturingEvents() {
	    var options = {
	      capture: true,
	      passive: false
	    };
	    var args = {
	      cancel: cancel,
	      completed: stop,
	      getPhase: getPhase
	    };
	    var unbindTarget = bindEvents(window, getHandleBindings(args), options);
	    var unbindWindow = bindEvents(window, getWindowBindings(args), options);

	    unbindEventsRef.current = function unbindAll() {
	      unbindTarget();
	      unbindWindow();
	    };
	  }, [cancel, getPhase, stop]);
	  var startDragging = useMemoOne_cjs.useCallback(function startDragging() {
	    var phase = getPhase();
	    !(phase.type === 'PENDING') ?  invariant(false, "Cannot start dragging from phase " + phase.type)  : void 0;
	    var actions = phase.actions.fluidLift(phase.point);
	    setPhase({
	      type: 'DRAGGING',
	      actions: actions,
	      hasMoved: false
	    });
	  }, [getPhase, setPhase]);
	  var startPendingDrag = useMemoOne_cjs.useCallback(function startPendingDrag(actions, point) {
	    !(getPhase().type === 'IDLE') ?  invariant(false, 'Expected to move from IDLE to PENDING drag')  : void 0;
	    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
	    setPhase({
	      type: 'PENDING',
	      point: point,
	      actions: actions,
	      longPressTimerId: longPressTimerId
	    });
	    bindCapturingEvents();
	  }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
	  useIsomorphicLayoutEffect(function mount() {
	    listenForCapture();
	    return function unmount() {
	      unbindEventsRef.current();
	      var phase = getPhase();

	      if (phase.type === 'PENDING') {
	        clearTimeout(phase.longPressTimerId);
	        setPhase(idle$2);
	      }
	    };
	  }, [getPhase, listenForCapture, setPhase]);
	  useIsomorphicLayoutEffect(function webkitHack() {
	    var unbind = bindEvents(window, [{
	      eventName: 'touchmove',
	      fn: function fn() {},
	      options: {
	        capture: false,
	        passive: false
	      }
	    }]);
	    return unbind;
	  }, []);
	}

	function useValidateSensorHooks(sensorHooks) {
	  useDev(function () {
	    var previousRef = usePrevious(sensorHooks);
	    useDevSetupWarning(function () {
	      !(previousRef.current.length === sensorHooks.length) ? "development" !== "production" ? invariant(false, 'Cannot change the amount of sensor hooks after mounting') : invariant(false) : void 0;
	    });
	  });
	}

	var interactiveTagNames = {
	  input: true,
	  button: true,
	  textarea: true,
	  select: true,
	  option: true,
	  optgroup: true,
	  video: true,
	  audio: true
	};

	function isAnInteractiveElement(parent, current) {
	  if (current == null) {
	    return false;
	  }

	  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);

	  if (hasAnInteractiveTag) {
	    return true;
	  }

	  var attribute = current.getAttribute('contenteditable');

	  if (attribute === 'true' || attribute === '') {
	    return true;
	  }

	  if (current === parent) {
	    return false;
	  }

	  return isAnInteractiveElement(parent, current.parentElement);
	}

	function isEventInInteractiveElement(draggable, event) {
	  var target = event.target;

	  if (!isHtmlElement(target)) {
	    return false;
	  }

	  return isAnInteractiveElement(draggable, target);
	}

	var getBorderBoxCenterPosition = (function (el) {
	  return cssBoxModel_cjs.getRect(el.getBoundingClientRect()).center;
	});

	function isElement(el) {
	  return el instanceof getWindowFromEl(el).Element;
	}

	var supportedMatchesName = function () {
	  var base = 'matches';

	  if (typeof document === 'undefined') {
	    return base;
	  }

	  var candidates = [base, 'msMatchesSelector', 'webkitMatchesSelector'];
	  var value = find(candidates, function (name) {
	    return name in Element.prototype;
	  });
	  return value || base;
	}();

	function closestPonyfill(el, selector) {
	  if (el == null) {
	    return null;
	  }

	  if (el[supportedMatchesName](selector)) {
	    return el;
	  }

	  return closestPonyfill(el.parentElement, selector);
	}

	function closest$1(el, selector) {
	  if (el.closest) {
	    return el.closest(selector);
	  }

	  return closestPonyfill(el, selector);
	}

	function getSelector(contextId) {
	  return "[" + dragHandle.contextId + "=\"" + contextId + "\"]";
	}

	function findClosestDragHandleFromEvent(contextId, event) {
	  var target = event.target;

	  if (!isElement(target)) {
	     warning('event.target must be a Element') ;
	    return null;
	  }

	  var selector = getSelector(contextId);
	  var handle = closest$1(target, selector);

	  if (!handle) {
	    return null;
	  }

	  if (!isHtmlElement(handle)) {
	     warning('drag handle must be a HTMLElement') ;
	    return null;
	  }

	  return handle;
	}

	function tryGetClosestDraggableIdFromEvent(contextId, event) {
	  var handle = findClosestDragHandleFromEvent(contextId, event);

	  if (!handle) {
	    return null;
	  }

	  return handle.getAttribute(dragHandle.draggableId);
	}

	function findDraggable(contextId, draggableId) {
	  var selector = "[" + draggable.contextId + "=\"" + contextId + "\"]";
	  var possible = toArray(document.querySelectorAll(selector));
	  var draggable$1 = find(possible, function (el) {
	    return el.getAttribute(draggable.id) === draggableId;
	  });

	  if (!draggable$1) {
	    return null;
	  }

	  if (!isHtmlElement(draggable$1)) {
	     warning('Draggable element is not a HTMLElement') ;
	    return null;
	  }

	  return draggable$1;
	}

	function preventDefault(event) {
	  event.preventDefault();
	}

	function _isActive(_ref) {
	  var expected = _ref.expected,
	      phase = _ref.phase,
	      isLockActive = _ref.isLockActive,
	      shouldWarn = _ref.shouldWarn;

	  if (!isLockActive()) {
	    if (shouldWarn) {
	       warning("\n        Cannot perform action.\n        The sensor no longer has an action lock.\n\n        Tips:\n\n        - Throw away your action handlers when forceStop() is called\n        - Check actions.isActive() if you really need to\n      ") ;
	    }

	    return false;
	  }

	  if (expected !== phase) {
	    if (shouldWarn) {
	       warning("\n        Cannot perform action.\n        The actions you used belong to an outdated phase\n\n        Current phase: " + expected + "\n        You called an action from outdated phase: " + phase + "\n\n        Tips:\n\n        - Do not use preDragActions actions after calling preDragActions.lift()\n      ") ;
	    }

	    return false;
	  }

	  return true;
	}

	function canStart(_ref2) {
	  var lockAPI = _ref2.lockAPI,
	      store = _ref2.store,
	      registry = _ref2.registry,
	      draggableId = _ref2.draggableId;

	  if (lockAPI.isClaimed()) {
	    return false;
	  }

	  var entry = registry.draggable.findById(draggableId);

	  if (!entry) {
	     warning("Unable to find draggable with id: " + draggableId) ;
	    return false;
	  }

	  if (!entry.options.isEnabled) {
	    return false;
	  }

	  if (!canStartDrag(store.getState(), draggableId)) {
	    return false;
	  }

	  return true;
	}

	function tryStart(_ref3) {
	  var lockAPI = _ref3.lockAPI,
	      contextId = _ref3.contextId,
	      store = _ref3.store,
	      registry = _ref3.registry,
	      draggableId = _ref3.draggableId,
	      forceSensorStop = _ref3.forceSensorStop,
	      sourceEvent = _ref3.sourceEvent;
	  var shouldStart = canStart({
	    lockAPI: lockAPI,
	    store: store,
	    registry: registry,
	    draggableId: draggableId
	  });

	  if (!shouldStart) {
	    return null;
	  }

	  var entry = registry.draggable.getById(draggableId);
	  var el = findDraggable(contextId, entry.descriptor.id);

	  if (!el) {
	     warning("Unable to find draggable element with id: " + draggableId) ;
	    return null;
	  }

	  if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
	    return null;
	  }

	  var lock = lockAPI.claim(forceSensorStop || noop);
	  var phase = 'PRE_DRAG';

	  function getShouldRespectForcePress() {
	    return entry.options.shouldRespectForcePress;
	  }

	  function isLockActive() {
	    return lockAPI.isActive(lock);
	  }

	  function tryDispatch(expected, getAction) {
	    if (_isActive({
	      expected: expected,
	      phase: phase,
	      isLockActive: isLockActive,
	      shouldWarn: true
	    })) {
	      store.dispatch(getAction());
	    }
	  }

	  var tryDispatchWhenDragging = tryDispatch.bind(null, 'DRAGGING');

	  function lift$1(args) {
	    function completed() {
	      lockAPI.release();
	      phase = 'COMPLETED';
	    }

	    if (phase !== 'PRE_DRAG') {
	      completed();
	      !(phase === 'PRE_DRAG') ?  invariant(false, "Cannot lift in phase " + phase)  : void 0;
	    }

	    store.dispatch(lift(args.liftActionArgs));
	    phase = 'DRAGGING';

	    function finish(reason, options) {
	      if (options === void 0) {
	        options = {
	          shouldBlockNextClick: false
	        };
	      }

	      args.cleanup();

	      if (options.shouldBlockNextClick) {
	        var unbind = bindEvents(window, [{
	          eventName: 'click',
	          fn: preventDefault,
	          options: {
	            once: true,
	            passive: false,
	            capture: true
	          }
	        }]);
	        setTimeout(unbind);
	      }

	      completed();
	      store.dispatch(drop({
	        reason: reason
	      }));
	    }

	    return _extends({
	      isActive: function isActive() {
	        return _isActive({
	          expected: 'DRAGGING',
	          phase: phase,
	          isLockActive: isLockActive,
	          shouldWarn: false
	        });
	      },
	      shouldRespectForcePress: getShouldRespectForcePress,
	      drop: function drop(options) {
	        return finish('DROP', options);
	      },
	      cancel: function cancel(options) {
	        return finish('CANCEL', options);
	      }
	    }, args.actions);
	  }

	  function fluidLift(clientSelection) {
	    var move$1 = rafSchd(function (client) {
	      tryDispatchWhenDragging(function () {
	        return move({
	          client: client
	        });
	      });
	    });
	    var api = lift$1({
	      liftActionArgs: {
	        id: draggableId,
	        clientSelection: clientSelection,
	        movementMode: 'FLUID'
	      },
	      cleanup: function cleanup() {
	        return move$1.cancel();
	      },
	      actions: {
	        move: move$1
	      }
	    });
	    return _extends({}, api, {
	      move: move$1
	    });
	  }

	  function snapLift() {
	    var actions = {
	      moveUp: function moveUp$1() {
	        return tryDispatchWhenDragging(moveUp);
	      },
	      moveRight: function moveRight$1() {
	        return tryDispatchWhenDragging(moveRight);
	      },
	      moveDown: function moveDown$1() {
	        return tryDispatchWhenDragging(moveDown);
	      },
	      moveLeft: function moveLeft$1() {
	        return tryDispatchWhenDragging(moveLeft);
	      }
	    };
	    return lift$1({
	      liftActionArgs: {
	        id: draggableId,
	        clientSelection: getBorderBoxCenterPosition(el),
	        movementMode: 'SNAP'
	      },
	      cleanup: noop,
	      actions: actions
	    });
	  }

	  function abortPreDrag() {
	    var shouldRelease = _isActive({
	      expected: 'PRE_DRAG',
	      phase: phase,
	      isLockActive: isLockActive,
	      shouldWarn: true
	    });

	    if (shouldRelease) {
	      lockAPI.release();
	    }
	  }

	  var preDrag = {
	    isActive: function isActive() {
	      return _isActive({
	        expected: 'PRE_DRAG',
	        phase: phase,
	        isLockActive: isLockActive,
	        shouldWarn: false
	      });
	    },
	    shouldRespectForcePress: getShouldRespectForcePress,
	    fluidLift: fluidLift,
	    snapLift: snapLift,
	    abort: abortPreDrag
	  };
	  return preDrag;
	}

	var defaultSensors = [useMouseSensor, useKeyboardSensor, useMouseSensor$1];
	function useSensorMarshal(_ref4) {
	  var contextId = _ref4.contextId,
	      store = _ref4.store,
	      registry = _ref4.registry,
	      customSensors = _ref4.customSensors,
	      enableDefaultSensors = _ref4.enableDefaultSensors;
	  var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);
	  var lockAPI = React__default['default'].useState(function () {
	    return create();
	  })[0];
	  var tryAbandonLock = useMemoOne_cjs.useCallback(function tryAbandonLock(previous, current) {
	    if (previous.isDragging && !current.isDragging) {
	      lockAPI.tryAbandon();
	    }
	  }, [lockAPI]);
	  useIsomorphicLayoutEffect(function listenToStore() {
	    var previous = store.getState();
	    var unsubscribe = store.subscribe(function () {
	      var current = store.getState();
	      tryAbandonLock(previous, current);
	      previous = current;
	    });
	    return unsubscribe;
	  }, [lockAPI, store, tryAbandonLock]);
	  useIsomorphicLayoutEffect(function () {
	    return lockAPI.tryAbandon;
	  }, [lockAPI.tryAbandon]);
	  var canGetLock = useMemoOne_cjs.useCallback(function (draggableId) {
	    return canStart({
	      lockAPI: lockAPI,
	      registry: registry,
	      store: store,
	      draggableId: draggableId
	    });
	  }, [lockAPI, registry, store]);
	  var tryGetLock = useMemoOne_cjs.useCallback(function (draggableId, forceStop, options) {
	    return tryStart({
	      lockAPI: lockAPI,
	      registry: registry,
	      contextId: contextId,
	      store: store,
	      draggableId: draggableId,
	      forceSensorStop: forceStop,
	      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
	    });
	  }, [contextId, lockAPI, registry, store]);
	  var findClosestDraggableId = useMemoOne_cjs.useCallback(function (event) {
	    return tryGetClosestDraggableIdFromEvent(contextId, event);
	  }, [contextId]);
	  var findOptionsForDraggable = useMemoOne_cjs.useCallback(function (id) {
	    var entry = registry.draggable.findById(id);
	    return entry ? entry.options : null;
	  }, [registry.draggable]);
	  var tryReleaseLock = useMemoOne_cjs.useCallback(function tryReleaseLock() {
	    if (!lockAPI.isClaimed()) {
	      return;
	    }

	    lockAPI.tryAbandon();

	    if (store.getState().phase !== 'IDLE') {
	      store.dispatch(flush());
	    }
	  }, [lockAPI, store]);
	  var isLockClaimed = useMemoOne_cjs.useCallback(lockAPI.isClaimed, [lockAPI]);
	  var api = useMemoOne_cjs.useMemo(function () {
	    return {
	      canGetLock: canGetLock,
	      tryGetLock: tryGetLock,
	      findClosestDraggableId: findClosestDraggableId,
	      findOptionsForDraggable: findOptionsForDraggable,
	      tryReleaseLock: tryReleaseLock,
	      isLockClaimed: isLockClaimed
	    };
	  }, [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);
	  useValidateSensorHooks(useSensors);

	  for (var i = 0; i < useSensors.length; i++) {
	    useSensors[i](api);
	  }
	}

	var createResponders = function createResponders(props) {
	  return {
	    onBeforeCapture: props.onBeforeCapture,
	    onBeforeDragStart: props.onBeforeDragStart,
	    onDragStart: props.onDragStart,
	    onDragEnd: props.onDragEnd,
	    onDragUpdate: props.onDragUpdate
	  };
	};

	function getStore(lazyRef) {
	  !lazyRef.current ?  invariant(false, 'Could not find store from lazy ref')  : void 0;
	  return lazyRef.current;
	}

	function App(props) {
	  var contextId = props.contextId,
	      setCallbacks = props.setCallbacks,
	      sensors = props.sensors,
	      nonce = props.nonce,
	      dragHandleUsageInstructions = props.dragHandleUsageInstructions;
	  var lazyStoreRef = React__default['default'].useRef(null);
	  useStartupValidation();
	  var lastPropsRef = usePrevious(props);
	  var getResponders = useMemoOne_cjs.useCallback(function () {
	    return createResponders(lastPropsRef.current);
	  }, [lastPropsRef]);
	  var announce = useAnnouncer(contextId);
	  var dragHandleUsageInstructionsId = useHiddenTextElement({
	    contextId: contextId,
	    text: dragHandleUsageInstructions
	  });
	  var styleMarshal = useStyleMarshal(contextId, nonce);
	  var lazyDispatch = useMemoOne_cjs.useCallback(function (action) {
	    getStore(lazyStoreRef).dispatch(action);
	  }, []);
	  var marshalCallbacks = useMemoOne_cjs.useMemo(function () {
	    return redux__default['default'].bindActionCreators({
	      publishWhileDragging: publishWhileDragging,
	      updateDroppableScroll: updateDroppableScroll,
	      updateDroppableIsEnabled: updateDroppableIsEnabled,
	      updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled,
	      collectionStarting: collectionStarting
	    }, lazyDispatch);
	  }, [lazyDispatch]);
	  var registry = useRegistry();
	  var dimensionMarshal = useMemoOne_cjs.useMemo(function () {
	    return createDimensionMarshal(registry, marshalCallbacks);
	  }, [registry, marshalCallbacks]);
	  var autoScroller = useMemoOne_cjs.useMemo(function () {
	    return createAutoScroller(_extends({
	      scrollWindow: scrollWindow,
	      scrollDroppable: dimensionMarshal.scrollDroppable
	    }, redux__default['default'].bindActionCreators({
	      move: move
	    }, lazyDispatch)));
	  }, [dimensionMarshal.scrollDroppable, lazyDispatch]);
	  var focusMarshal = useFocusMarshal(contextId);
	  var store = useMemoOne_cjs.useMemo(function () {
	    return createStore({
	      announce: announce,
	      autoScroller: autoScroller,
	      dimensionMarshal: dimensionMarshal,
	      focusMarshal: focusMarshal,
	      getResponders: getResponders,
	      styleMarshal: styleMarshal
	    });
	  }, [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);

	  {
	    if (lazyStoreRef.current && lazyStoreRef.current !== store) {
	       warning('unexpected store change') ;
	    }
	  }

	  lazyStoreRef.current = store;
	  var tryResetStore = useMemoOne_cjs.useCallback(function () {
	    var current = getStore(lazyStoreRef);
	    var state = current.getState();

	    if (state.phase !== 'IDLE') {
	      current.dispatch(flush());
	    }
	  }, []);
	  var isDragging = useMemoOne_cjs.useCallback(function () {
	    var state = getStore(lazyStoreRef).getState();
	    return state.isDragging || state.phase === 'DROP_ANIMATING';
	  }, []);
	  var appCallbacks = useMemoOne_cjs.useMemo(function () {
	    return {
	      isDragging: isDragging,
	      tryAbort: tryResetStore
	    };
	  }, [isDragging, tryResetStore]);
	  setCallbacks(appCallbacks);
	  var getCanLift = useMemoOne_cjs.useCallback(function (id) {
	    return canStartDrag(getStore(lazyStoreRef).getState(), id);
	  }, []);
	  var getIsMovementAllowed = useMemoOne_cjs.useCallback(function () {
	    return isMovementAllowed(getStore(lazyStoreRef).getState());
	  }, []);
	  var appContext = useMemoOne_cjs.useMemo(function () {
	    return {
	      marshal: dimensionMarshal,
	      focus: focusMarshal,
	      contextId: contextId,
	      canLift: getCanLift,
	      isMovementAllowed: getIsMovementAllowed,
	      dragHandleUsageInstructionsId: dragHandleUsageInstructionsId,
	      registry: registry
	    };
	  }, [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
	  useSensorMarshal({
	    contextId: contextId,
	    store: store,
	    registry: registry,
	    customSensors: sensors,
	    enableDefaultSensors: props.enableDefaultSensors !== false
	  });
	  React__default['default'].useEffect(function () {
	    return tryResetStore;
	  }, [tryResetStore]);
	  return React__default$1.createElement(AppContext.Provider, {
	    value: appContext
	  }, React__default$1.createElement(reactRedux__default['default'].Provider, {
	    context: StoreContext,
	    store: store
	  }, props.children));
	}

	var count$1 = 0;
	function reset$1() {
	  count$1 = 0;
	}
	function useInstanceCount() {
	  return useMemoOne_cjs.useMemo(function () {
	    return "" + count$1++;
	  }, []);
	}

	function resetServerContext() {
	  reset$1();
	  reset();
	}
	function DragDropContext(props) {
	  var contextId = useInstanceCount();
	  var dragHandleUsageInstructions = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
	  return React__default$1.createElement(ErrorBoundary, null, function (setCallbacks) {
	    return React__default$1.createElement(App, {
	      nonce: props.nonce,
	      contextId: contextId,
	      setCallbacks: setCallbacks,
	      dragHandleUsageInstructions: dragHandleUsageInstructions,
	      enableDefaultSensors: props.enableDefaultSensors,
	      sensors: props.sensors,
	      onBeforeCapture: props.onBeforeCapture,
	      onBeforeDragStart: props.onBeforeDragStart,
	      onDragStart: props.onDragStart,
	      onDragUpdate: props.onDragUpdate,
	      onDragEnd: props.onDragEnd
	    }, props.children);
	  });
	}

	var isEqual$1 = function isEqual(base) {
	  return function (value) {
	    return base === value;
	  };
	};

	var isScroll = isEqual$1('scroll');
	var isAuto = isEqual$1('auto');
	var isVisible$1 = isEqual$1('visible');

	var isEither = function isEither(overflow, fn) {
	  return fn(overflow.overflowX) || fn(overflow.overflowY);
	};

	var isBoth = function isBoth(overflow, fn) {
	  return fn(overflow.overflowX) && fn(overflow.overflowY);
	};

	var isElementScrollable = function isElementScrollable(el) {
	  var style = window.getComputedStyle(el);
	  var overflow = {
	    overflowX: style.overflowX,
	    overflowY: style.overflowY
	  };
	  return isEither(overflow, isScroll) || isEither(overflow, isAuto);
	};

	var isBodyScrollable = function isBodyScrollable() {

	  var body = getBodyElement();
	  var html = document.documentElement;
	  !html ?  invariant(false)  : void 0;

	  if (!isElementScrollable(body)) {
	    return false;
	  }

	  var htmlStyle = window.getComputedStyle(html);
	  var htmlOverflow = {
	    overflowX: htmlStyle.overflowX,
	    overflowY: htmlStyle.overflowY
	  };

	  if (isBoth(htmlOverflow, isVisible$1)) {
	    return false;
	  }

	   warning("\n    We have detected that your <body> element might be a scroll container.\n    We have found no reliable way of detecting whether the <body> element is a scroll container.\n    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)\n\n    Because we cannot determine if the <body> is a scroll container, and generally it is not one,\n    we will be treating the <body> as *not* a scroll container\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/how-we-detect-scroll-containers.md\n  ") ;
	  return false;
	};

	var getClosestScrollable = function getClosestScrollable(el) {
	  if (el == null) {
	    return null;
	  }

	  if (el === document.body) {
	    return isBodyScrollable() ? el : null;
	  }

	  if (el === document.documentElement) {
	    return null;
	  }

	  if (!isElementScrollable(el)) {
	    return getClosestScrollable(el.parentElement);
	  }

	  return el;
	};

	var checkForNestedScrollContainers = (function (scrollable) {
	  if (!scrollable) {
	    return;
	  }

	  var anotherScrollParent = getClosestScrollable(scrollable.parentElement);

	  if (!anotherScrollParent) {
	    return;
	  }

	   warning("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ") ;
	});

	var getScroll$1 = (function (el) {
	  return {
	    x: el.scrollLeft,
	    y: el.scrollTop
	  };
	});

	var getIsFixed = function getIsFixed(el) {
	  if (!el) {
	    return false;
	  }

	  var style = window.getComputedStyle(el);

	  if (style.position === 'fixed') {
	    return true;
	  }

	  return getIsFixed(el.parentElement);
	};

	var getEnv = (function (start) {
	  var closestScrollable = getClosestScrollable(start);
	  var isFixedOnPage = getIsFixed(start);
	  return {
	    closestScrollable: closestScrollable,
	    isFixedOnPage: isFixedOnPage
	  };
	});

	var getDroppableDimension = (function (_ref) {
	  var descriptor = _ref.descriptor,
	      isEnabled = _ref.isEnabled,
	      isCombineEnabled = _ref.isCombineEnabled,
	      isFixedOnPage = _ref.isFixedOnPage,
	      direction = _ref.direction,
	      client = _ref.client,
	      page = _ref.page,
	      closest = _ref.closest;

	  var frame = function () {
	    if (!closest) {
	      return null;
	    }

	    var scrollSize = closest.scrollSize,
	        frameClient = closest.client;
	    var maxScroll = getMaxScroll({
	      scrollHeight: scrollSize.scrollHeight,
	      scrollWidth: scrollSize.scrollWidth,
	      height: frameClient.paddingBox.height,
	      width: frameClient.paddingBox.width
	    });
	    return {
	      pageMarginBox: closest.page.marginBox,
	      frameClient: frameClient,
	      scrollSize: scrollSize,
	      shouldClipSubject: closest.shouldClipSubject,
	      scroll: {
	        initial: closest.scroll,
	        current: closest.scroll,
	        max: maxScroll,
	        diff: {
	          value: origin,
	          displacement: origin
	        }
	      }
	    };
	  }();

	  var axis = direction === 'vertical' ? vertical : horizontal;
	  var subject = getSubject({
	    page: page,
	    withPlaceholder: null,
	    axis: axis,
	    frame: frame
	  });
	  var dimension = {
	    descriptor: descriptor,
	    isCombineEnabled: isCombineEnabled,
	    isFixedOnPage: isFixedOnPage,
	    axis: axis,
	    isEnabled: isEnabled,
	    client: client,
	    page: page,
	    frame: frame,
	    subject: subject
	  };
	  return dimension;
	});

	var getClient = function getClient(targetRef, closestScrollable) {
	  var base = cssBoxModel_cjs.getBox(targetRef);

	  if (!closestScrollable) {
	    return base;
	  }

	  if (targetRef !== closestScrollable) {
	    return base;
	  }

	  var top = base.paddingBox.top - closestScrollable.scrollTop;
	  var left = base.paddingBox.left - closestScrollable.scrollLeft;
	  var bottom = top + closestScrollable.scrollHeight;
	  var right = left + closestScrollable.scrollWidth;
	  var paddingBox = {
	    top: top,
	    right: right,
	    bottom: bottom,
	    left: left
	  };
	  var borderBox = cssBoxModel_cjs.expand(paddingBox, base.border);
	  var client = cssBoxModel_cjs.createBox({
	    borderBox: borderBox,
	    margin: base.margin,
	    border: base.border,
	    padding: base.padding
	  });
	  return client;
	};

	var getDimension = (function (_ref) {
	  var ref = _ref.ref,
	      descriptor = _ref.descriptor,
	      env = _ref.env,
	      windowScroll = _ref.windowScroll,
	      direction = _ref.direction,
	      isDropDisabled = _ref.isDropDisabled,
	      isCombineEnabled = _ref.isCombineEnabled,
	      shouldClipSubject = _ref.shouldClipSubject;
	  var closestScrollable = env.closestScrollable;
	  var client = getClient(ref, closestScrollable);
	  var page = cssBoxModel_cjs.withScroll(client, windowScroll);

	  var closest = function () {
	    if (!closestScrollable) {
	      return null;
	    }

	    var frameClient = cssBoxModel_cjs.getBox(closestScrollable);
	    var scrollSize = {
	      scrollHeight: closestScrollable.scrollHeight,
	      scrollWidth: closestScrollable.scrollWidth
	    };
	    return {
	      client: frameClient,
	      page: cssBoxModel_cjs.withScroll(frameClient, windowScroll),
	      scroll: getScroll$1(closestScrollable),
	      scrollSize: scrollSize,
	      shouldClipSubject: shouldClipSubject
	    };
	  }();

	  var dimension = getDroppableDimension({
	    descriptor: descriptor,
	    isEnabled: !isDropDisabled,
	    isCombineEnabled: isCombineEnabled,
	    isFixedOnPage: env.isFixedOnPage,
	    direction: direction,
	    client: client,
	    page: page,
	    closest: closest
	  });
	  return dimension;
	});

	var immediate = {
	  passive: false
	};
	var delayed = {
	  passive: true
	};
	var getListenerOptions = (function (options) {
	  return options.shouldPublishImmediately ? immediate : delayed;
	});

	function useRequiredContext(Context) {
	  var result = React__default['default'].useContext(Context);
	  !result ?  invariant(false, 'Could not find required context')  : void 0;
	  return result;
	}

	var getClosestScrollableFromDrag = function getClosestScrollableFromDrag(dragging) {
	  return dragging && dragging.env.closestScrollable || null;
	};

	function useDroppablePublisher(args) {
	  var whileDraggingRef = React__default['default'].useRef(null);
	  var appContext = useRequiredContext(AppContext);
	  var uniqueId = useUniqueId('droppable');
	  var registry = appContext.registry,
	      marshal = appContext.marshal;
	  var previousRef = usePrevious(args);
	  var descriptor = useMemoOne_cjs.useMemo(function () {
	    return {
	      id: args.droppableId,
	      type: args.type,
	      mode: args.mode
	    };
	  }, [args.droppableId, args.mode, args.type]);
	  var publishedDescriptorRef = React__default['default'].useRef(descriptor);
	  var memoizedUpdateScroll = useMemoOne_cjs.useMemo(function () {
	    return memoizeOne(function (x, y) {
	      !whileDraggingRef.current ?  invariant(false, 'Can only update scroll when dragging')  : void 0;
	      var scroll = {
	        x: x,
	        y: y
	      };
	      marshal.updateDroppableScroll(descriptor.id, scroll);
	    });
	  }, [descriptor.id, marshal]);
	  var getClosestScroll = useMemoOne_cjs.useCallback(function () {
	    var dragging = whileDraggingRef.current;

	    if (!dragging || !dragging.env.closestScrollable) {
	      return origin;
	    }

	    return getScroll$1(dragging.env.closestScrollable);
	  }, []);
	  var updateScroll = useMemoOne_cjs.useCallback(function () {
	    var scroll = getClosestScroll();
	    memoizedUpdateScroll(scroll.x, scroll.y);
	  }, [getClosestScroll, memoizedUpdateScroll]);
	  var scheduleScrollUpdate = useMemoOne_cjs.useMemo(function () {
	    return rafSchd(updateScroll);
	  }, [updateScroll]);
	  var onClosestScroll = useMemoOne_cjs.useCallback(function () {
	    var dragging = whileDraggingRef.current;
	    var closest = getClosestScrollableFromDrag(dragging);
	    !(dragging && closest) ?  invariant(false, 'Could not find scroll options while scrolling')  : void 0;
	    var options = dragging.scrollOptions;

	    if (options.shouldPublishImmediately) {
	      updateScroll();
	      return;
	    }

	    scheduleScrollUpdate();
	  }, [scheduleScrollUpdate, updateScroll]);
	  var getDimensionAndWatchScroll = useMemoOne_cjs.useCallback(function (windowScroll, options) {
	    !!whileDraggingRef.current ?  invariant(false, 'Cannot collect a droppable while a drag is occurring')  : void 0;
	    var previous = previousRef.current;
	    var ref = previous.getDroppableRef();
	    !ref ?  invariant(false, 'Cannot collect without a droppable ref')  : void 0;
	    var env = getEnv(ref);
	    var dragging = {
	      ref: ref,
	      descriptor: descriptor,
	      env: env,
	      scrollOptions: options
	    };
	    whileDraggingRef.current = dragging;
	    var dimension = getDimension({
	      ref: ref,
	      descriptor: descriptor,
	      env: env,
	      windowScroll: windowScroll,
	      direction: previous.direction,
	      isDropDisabled: previous.isDropDisabled,
	      isCombineEnabled: previous.isCombineEnabled,
	      shouldClipSubject: !previous.ignoreContainerClipping
	    });
	    var scrollable = env.closestScrollable;

	    if (scrollable) {
	      scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
	      scrollable.addEventListener('scroll', onClosestScroll, getListenerOptions(dragging.scrollOptions));

	      {
	        checkForNestedScrollContainers(scrollable);
	      }
	    }

	    return dimension;
	  }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
	  var getScrollWhileDragging = useMemoOne_cjs.useCallback(function () {
	    var dragging = whileDraggingRef.current;
	    var closest = getClosestScrollableFromDrag(dragging);
	    !(dragging && closest) ?  invariant(false, 'Can only recollect Droppable client for Droppables that have a scroll container')  : void 0;
	    return getScroll$1(closest);
	  }, []);
	  var dragStopped = useMemoOne_cjs.useCallback(function () {
	    var dragging = whileDraggingRef.current;
	    !dragging ?  invariant(false, 'Cannot stop drag when no active drag')  : void 0;
	    var closest = getClosestScrollableFromDrag(dragging);
	    whileDraggingRef.current = null;

	    if (!closest) {
	      return;
	    }

	    scheduleScrollUpdate.cancel();
	    closest.removeAttribute(scrollContainer.contextId);
	    closest.removeEventListener('scroll', onClosestScroll, getListenerOptions(dragging.scrollOptions));
	  }, [onClosestScroll, scheduleScrollUpdate]);
	  var scroll = useMemoOne_cjs.useCallback(function (change) {
	    var dragging = whileDraggingRef.current;
	    !dragging ?  invariant(false, 'Cannot scroll when there is no drag')  : void 0;
	    var closest = getClosestScrollableFromDrag(dragging);
	    !closest ?  invariant(false, 'Cannot scroll a droppable with no closest scrollable')  : void 0;
	    closest.scrollTop += change.y;
	    closest.scrollLeft += change.x;
	  }, []);
	  var callbacks = useMemoOne_cjs.useMemo(function () {
	    return {
	      getDimensionAndWatchScroll: getDimensionAndWatchScroll,
	      getScrollWhileDragging: getScrollWhileDragging,
	      dragStopped: dragStopped,
	      scroll: scroll
	    };
	  }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll]);
	  var entry = useMemoOne_cjs.useMemo(function () {
	    return {
	      uniqueId: uniqueId,
	      descriptor: descriptor,
	      callbacks: callbacks
	    };
	  }, [callbacks, descriptor, uniqueId]);
	  useIsomorphicLayoutEffect(function () {
	    publishedDescriptorRef.current = entry.descriptor;
	    registry.droppable.register(entry);
	    return function () {
	      if (whileDraggingRef.current) {
	         warning('Unsupported: changing the droppableId or type of a Droppable during a drag') ;
	        dragStopped();
	      }

	      registry.droppable.unregister(entry);
	    };
	  }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
	  useIsomorphicLayoutEffect(function () {
	    if (!whileDraggingRef.current) {
	      return;
	    }

	    marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
	  }, [args.isDropDisabled, marshal]);
	  useIsomorphicLayoutEffect(function () {
	    if (!whileDraggingRef.current) {
	      return;
	    }

	    marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
	  }, [args.isCombineEnabled, marshal]);
	}

	function noop$2() {}

	var empty = {
	  width: 0,
	  height: 0,
	  margin: noSpacing
	};

	var getSize = function getSize(_ref) {
	  var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount,
	      placeholder = _ref.placeholder,
	      animate = _ref.animate;

	  if (isAnimatingOpenOnMount) {
	    return empty;
	  }

	  if (animate === 'close') {
	    return empty;
	  }

	  return {
	    height: placeholder.client.borderBox.height,
	    width: placeholder.client.borderBox.width,
	    margin: placeholder.client.margin
	  };
	};

	var getStyle = function getStyle(_ref2) {
	  var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount,
	      placeholder = _ref2.placeholder,
	      animate = _ref2.animate;
	  var size = getSize({
	    isAnimatingOpenOnMount: isAnimatingOpenOnMount,
	    placeholder: placeholder,
	    animate: animate
	  });
	  return {
	    display: placeholder.display,
	    boxSizing: 'border-box',
	    width: size.width,
	    height: size.height,
	    marginTop: size.margin.top,
	    marginRight: size.margin.right,
	    marginBottom: size.margin.bottom,
	    marginLeft: size.margin.left,
	    flexShrink: '0',
	    flexGrow: '0',
	    pointerEvents: 'none',
	    transition: animate !== 'none' ? transitions.placeholder : null
	  };
	};

	function Placeholder(props) {
	  var animateOpenTimerRef = React__default['default'].useRef(null);
	  var tryClearAnimateOpenTimer = useMemoOne_cjs.useCallback(function () {
	    if (!animateOpenTimerRef.current) {
	      return;
	    }

	    clearTimeout(animateOpenTimerRef.current);
	    animateOpenTimerRef.current = null;
	  }, []);
	  var animate = props.animate,
	      onTransitionEnd = props.onTransitionEnd,
	      onClose = props.onClose,
	      contextId = props.contextId;

	  var _useState = React__default['default'].useState(props.animate === 'open'),
	      isAnimatingOpenOnMount = _useState[0],
	      setIsAnimatingOpenOnMount = _useState[1];

	  React__default['default'].useEffect(function () {
	    if (!isAnimatingOpenOnMount) {
	      return noop$2;
	    }

	    if (animate !== 'open') {
	      tryClearAnimateOpenTimer();
	      setIsAnimatingOpenOnMount(false);
	      return noop$2;
	    }

	    if (animateOpenTimerRef.current) {
	      return noop$2;
	    }

	    animateOpenTimerRef.current = setTimeout(function () {
	      animateOpenTimerRef.current = null;
	      setIsAnimatingOpenOnMount(false);
	    });
	    return tryClearAnimateOpenTimer;
	  }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
	  var onSizeChangeEnd = useMemoOne_cjs.useCallback(function (event) {
	    if (event.propertyName !== 'height') {
	      return;
	    }

	    onTransitionEnd();

	    if (animate === 'close') {
	      onClose();
	    }
	  }, [animate, onClose, onTransitionEnd]);
	  var style = getStyle({
	    isAnimatingOpenOnMount: isAnimatingOpenOnMount,
	    animate: props.animate,
	    placeholder: props.placeholder
	  });
	  return React__default$1.createElement(props.placeholder.tagName, {
	    style: style,
	    'data-rbd-placeholder-context-id': contextId,
	    onTransitionEnd: onSizeChangeEnd,
	    ref: props.innerRef
	  });
	}

	var Placeholder$1 = React__default$1.memo(Placeholder);

	var DroppableContext = React__default$1.createContext(null);

	function checkIsValidInnerRef(el) {
	  !(el && isHtmlElement(el)) ?  invariant(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ")  : void 0;
	}

	function isBoolean(value) {
	  return typeof value === 'boolean';
	}

	function runChecks(args, checks) {
	  checks.forEach(function (check) {
	    return check(args);
	  });
	}

	var shared = [function required(_ref) {
	  var props = _ref.props;
	  !props.droppableId ?  invariant(false, 'A Droppable requires a droppableId prop')  : void 0;
	  !(typeof props.droppableId === 'string') ?  invariant(false, "A Droppable requires a [string] droppableId. Provided: [" + typeof props.droppableId + "]")  : void 0;
	}, function _boolean(_ref2) {
	  var props = _ref2.props;
	  !isBoolean(props.isDropDisabled) ?  invariant(false, 'isDropDisabled must be a boolean')  : void 0;
	  !isBoolean(props.isCombineEnabled) ?  invariant(false, 'isCombineEnabled must be a boolean')  : void 0;
	  !isBoolean(props.ignoreContainerClipping) ?  invariant(false, 'ignoreContainerClipping must be a boolean')  : void 0;
	}, function ref(_ref3) {
	  var getDroppableRef = _ref3.getDroppableRef;
	  checkIsValidInnerRef(getDroppableRef());
	}];
	var standard = [function placeholder(_ref4) {
	  var props = _ref4.props,
	      getPlaceholderRef = _ref4.getPlaceholderRef;

	  if (!props.placeholder) {
	    return;
	  }

	  var ref = getPlaceholderRef();

	  if (ref) {
	    return;
	  }

	   warning("\n      Droppable setup issue [droppableId: \"" + props.droppableId + "\"]:\n      DroppableProvided > placeholder could not be found.\n\n      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.\n      More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n    ") ;
	}];
	var virtual = [function hasClone(_ref5) {
	  var props = _ref5.props;
	  !props.renderClone ?  invariant(false, 'Must provide a clone render function (renderClone) for virtual lists')  : void 0;
	}, function hasNoPlaceholder(_ref6) {
	  var getPlaceholderRef = _ref6.getPlaceholderRef;
	  !!getPlaceholderRef() ?  invariant(false, 'Expected virtual list to not have a placeholder')  : void 0;
	}];
	function useValidation(args) {
	  useDevSetupWarning(function () {
	    runChecks(args, shared);

	    if (args.props.mode === 'standard') {
	      runChecks(args, standard);
	    }

	    if (args.props.mode === 'virtual') {
	      runChecks(args, virtual);
	    }
	  });
	}

	var AnimateInOut = function (_React$PureComponent) {
	  _inheritsLoose(AnimateInOut, _React$PureComponent);

	  function AnimateInOut() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
	    _this.state = {
	      isVisible: Boolean(_this.props.on),
	      data: _this.props.on,
	      animate: _this.props.shouldAnimate && _this.props.on ? 'open' : 'none'
	    };

	    _this.onClose = function () {
	      if (_this.state.animate !== 'close') {
	        return;
	      }

	      _this.setState({
	        isVisible: false
	      });
	    };

	    return _this;
	  }

	  AnimateInOut.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
	    if (!props.shouldAnimate) {
	      return {
	        isVisible: Boolean(props.on),
	        data: props.on,
	        animate: 'none'
	      };
	    }

	    if (props.on) {
	      return {
	        isVisible: true,
	        data: props.on,
	        animate: 'open'
	      };
	    }

	    if (state.isVisible) {
	      return {
	        isVisible: true,
	        data: state.data,
	        animate: 'close'
	      };
	    }

	    return {
	      isVisible: false,
	      animate: 'close',
	      data: null
	    };
	  };

	  var _proto = AnimateInOut.prototype;

	  _proto.render = function render() {
	    if (!this.state.isVisible) {
	      return null;
	    }

	    var provided = {
	      onClose: this.onClose,
	      data: this.state.data,
	      animate: this.state.animate
	    };
	    return this.props.children(provided);
	  };

	  return AnimateInOut;
	}(React__default$1.PureComponent);

	var zIndexOptions = {
	  dragging: 5000,
	  dropAnimating: 4500
	};

	var getDraggingTransition = function getDraggingTransition(shouldAnimateDragMovement, dropping) {
	  if (dropping) {
	    return transitions.drop(dropping.duration);
	  }

	  if (shouldAnimateDragMovement) {
	    return transitions.snap;
	  }

	  return transitions.fluid;
	};

	var getDraggingOpacity = function getDraggingOpacity(isCombining, isDropAnimating) {
	  if (!isCombining) {
	    return null;
	  }

	  return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
	};

	var getShouldDraggingAnimate = function getShouldDraggingAnimate(dragging) {
	  if (dragging.forceShouldAnimate != null) {
	    return dragging.forceShouldAnimate;
	  }

	  return dragging.mode === 'SNAP';
	};

	function getDraggingStyle(dragging) {
	  var dimension = dragging.dimension;
	  var box = dimension.client;
	  var offset = dragging.offset,
	      combineWith = dragging.combineWith,
	      dropping = dragging.dropping;
	  var isCombining = Boolean(combineWith);
	  var shouldAnimate = getShouldDraggingAnimate(dragging);
	  var isDropAnimating = Boolean(dropping);
	  var transform = isDropAnimating ? transforms.drop(offset, isCombining) : transforms.moveTo(offset);
	  var style = {
	    position: 'fixed',
	    top: box.marginBox.top,
	    left: box.marginBox.left,
	    boxSizing: 'border-box',
	    width: box.borderBox.width,
	    height: box.borderBox.height,
	    transition: getDraggingTransition(shouldAnimate, dropping),
	    transform: transform,
	    opacity: getDraggingOpacity(isCombining, isDropAnimating),
	    zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
	    pointerEvents: 'none'
	  };
	  return style;
	}

	function getSecondaryStyle(secondary) {
	  return {
	    transform: transforms.moveTo(secondary.offset),
	    transition: secondary.shouldAnimateDisplacement ? null : 'none'
	  };
	}

	function getStyle$1(mapped) {
	  return mapped.type === 'DRAGGING' ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
	}

	function getDimension$1(descriptor, el, windowScroll) {
	  if (windowScroll === void 0) {
	    windowScroll = origin;
	  }

	  var computedStyles = window.getComputedStyle(el);
	  var borderBox = el.getBoundingClientRect();
	  var client = cssBoxModel_cjs.calculateBox(borderBox, computedStyles);
	  var page = cssBoxModel_cjs.withScroll(client, windowScroll);
	  var placeholder = {
	    client: client,
	    tagName: el.tagName.toLowerCase(),
	    display: computedStyles.display
	  };
	  var displaceBy = {
	    x: client.marginBox.width,
	    y: client.marginBox.height
	  };
	  var dimension = {
	    descriptor: descriptor,
	    placeholder: placeholder,
	    displaceBy: displaceBy,
	    client: client,
	    page: page
	  };
	  return dimension;
	}

	function useDraggablePublisher(args) {
	  var uniqueId = useUniqueId('draggable');
	  var descriptor = args.descriptor,
	      registry = args.registry,
	      getDraggableRef = args.getDraggableRef,
	      canDragInteractiveElements = args.canDragInteractiveElements,
	      shouldRespectForcePress = args.shouldRespectForcePress,
	      isEnabled = args.isEnabled;
	  var options = useMemoOne_cjs.useMemo(function () {
	    return {
	      canDragInteractiveElements: canDragInteractiveElements,
	      shouldRespectForcePress: shouldRespectForcePress,
	      isEnabled: isEnabled
	    };
	  }, [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
	  var getDimension = useMemoOne_cjs.useCallback(function (windowScroll) {
	    var el = getDraggableRef();
	    !el ?  invariant(false, 'Cannot get dimension when no ref is set')  : void 0;
	    return getDimension$1(descriptor, el, windowScroll);
	  }, [descriptor, getDraggableRef]);
	  var entry = useMemoOne_cjs.useMemo(function () {
	    return {
	      uniqueId: uniqueId,
	      descriptor: descriptor,
	      options: options,
	      getDimension: getDimension
	    };
	  }, [descriptor, getDimension, options, uniqueId]);
	  var publishedRef = React__default['default'].useRef(entry);
	  var isFirstPublishRef = React__default['default'].useRef(true);
	  useIsomorphicLayoutEffect(function () {
	    registry.draggable.register(publishedRef.current);
	    return function () {
	      return registry.draggable.unregister(publishedRef.current);
	    };
	  }, [registry.draggable]);
	  useIsomorphicLayoutEffect(function () {
	    if (isFirstPublishRef.current) {
	      isFirstPublishRef.current = false;
	      return;
	    }

	    var last = publishedRef.current;
	    publishedRef.current = entry;
	    registry.draggable.update(entry, last);
	  }, [entry, registry.draggable]);
	}

	function useValidation$1(props, contextId, getRef) {
	  useDevSetupWarning(function () {
	    function prefix(id) {
	      return "Draggable[id: " + id + "]: ";
	    }

	    var id = props.draggableId;
	    !id ? "development" !== "production" ? invariant(false, 'Draggable requires a draggableId') : invariant(false) : void 0;
	    !(typeof id === 'string') ? "development" !== "production" ? invariant(false, "Draggable requires a [string] draggableId.\n      Provided: [type: " + typeof id + "] (value: " + id + ")") : invariant(false) : void 0;
	    !isInteger(props.index) ? "development" !== "production" ? invariant(false, prefix(id) + " requires an integer index prop") : invariant(false) : void 0;

	    if (props.mapped.type === 'DRAGGING') {
	      return;
	    }

	    checkIsValidInnerRef(getRef());

	    if (props.isEnabled) {
	      !findDragHandle(contextId, id) ? "development" !== "production" ? invariant(false, prefix(id) + " Unable to find drag handle") : invariant(false) : void 0;
	    }
	  });
	}
	function useClonePropValidation(isClone) {
	  useDev(function () {
	    var initialRef = React__default['default'].useRef(isClone);
	    useDevSetupWarning(function () {
	      !(isClone === initialRef.current) ? "development" !== "production" ? invariant(false, 'Draggable isClone prop value changed during component life') : invariant(false) : void 0;
	    }, [isClone]);
	  });
	}

	function preventHtml5Dnd(event) {
	  event.preventDefault();
	}

	function Draggable(props) {
	  var ref = React__default['default'].useRef(null);
	  var setRef = useMemoOne_cjs.useCallback(function (el) {
	    ref.current = el;
	  }, []);
	  var getRef = useMemoOne_cjs.useCallback(function () {
	    return ref.current;
	  }, []);

	  var _useRequiredContext = useRequiredContext(AppContext),
	      contextId = _useRequiredContext.contextId,
	      dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId,
	      registry = _useRequiredContext.registry;

	  var _useRequiredContext2 = useRequiredContext(DroppableContext),
	      type = _useRequiredContext2.type,
	      droppableId = _useRequiredContext2.droppableId;

	  var descriptor = useMemoOne_cjs.useMemo(function () {
	    return {
	      id: props.draggableId,
	      index: props.index,
	      type: type,
	      droppableId: droppableId
	    };
	  }, [props.draggableId, props.index, type, droppableId]);
	  var children = props.children,
	      draggableId = props.draggableId,
	      isEnabled = props.isEnabled,
	      shouldRespectForcePress = props.shouldRespectForcePress,
	      canDragInteractiveElements = props.canDragInteractiveElements,
	      isClone = props.isClone,
	      mapped = props.mapped,
	      dropAnimationFinishedAction = props.dropAnimationFinished;
	  useValidation$1(props, contextId, getRef);
	  useClonePropValidation(isClone);

	  if (!isClone) {
	    var forPublisher = useMemoOne_cjs.useMemo(function () {
	      return {
	        descriptor: descriptor,
	        registry: registry,
	        getDraggableRef: getRef,
	        canDragInteractiveElements: canDragInteractiveElements,
	        shouldRespectForcePress: shouldRespectForcePress,
	        isEnabled: isEnabled
	      };
	    }, [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
	    useDraggablePublisher(forPublisher);
	  }

	  var dragHandleProps = useMemoOne_cjs.useMemo(function () {
	    return isEnabled ? {
	      tabIndex: 0,
	      role: 'button',
	      'aria-describedby': dragHandleUsageInstructionsId,
	      'data-rbd-drag-handle-draggable-id': draggableId,
	      'data-rbd-drag-handle-context-id': contextId,
	      draggable: false,
	      onDragStart: preventHtml5Dnd
	    } : null;
	  }, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
	  var onMoveEnd = useMemoOne_cjs.useCallback(function (event) {
	    if (mapped.type !== 'DRAGGING') {
	      return;
	    }

	    if (!mapped.dropping) {
	      return;
	    }

	    if (event.propertyName !== 'transform') {
	      return;
	    }

	    dropAnimationFinishedAction();
	  }, [dropAnimationFinishedAction, mapped]);
	  var provided = useMemoOne_cjs.useMemo(function () {
	    var style = getStyle$1(mapped);
	    var onTransitionEnd = mapped.type === 'DRAGGING' && mapped.dropping ? onMoveEnd : null;
	    var result = {
	      innerRef: setRef,
	      draggableProps: {
	        'data-rbd-draggable-context-id': contextId,
	        'data-rbd-draggable-id': draggableId,
	        style: style,
	        onTransitionEnd: onTransitionEnd
	      },
	      dragHandleProps: dragHandleProps
	    };
	    return result;
	  }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef]);
	  var rubric = useMemoOne_cjs.useMemo(function () {
	    return {
	      draggableId: descriptor.id,
	      type: descriptor.type,
	      source: {
	        index: descriptor.index,
	        droppableId: descriptor.droppableId
	      }
	    };
	  }, [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
	  return children(provided, mapped.snapshot, rubric);
	}

	var isStrictEqual = (function (a, b) {
	  return a === b;
	});

	var whatIsDraggedOverFromResult = (function (result) {
	  var combine = result.combine,
	      destination = result.destination;

	  if (destination) {
	    return destination.droppableId;
	  }

	  if (combine) {
	    return combine.droppableId;
	  }

	  return null;
	});

	var getCombineWithFromResult = function getCombineWithFromResult(result) {
	  return result.combine ? result.combine.draggableId : null;
	};

	var getCombineWithFromImpact = function getCombineWithFromImpact(impact) {
	  return impact.at && impact.at.type === 'COMBINE' ? impact.at.combine.draggableId : null;
	};

	function getDraggableSelector() {
	  var memoizedOffset = memoizeOne(function (x, y) {
	    return {
	      x: x,
	      y: y
	    };
	  });
	  var getMemoizedSnapshot = memoizeOne(function (mode, isClone, draggingOver, combineWith, dropping) {
	    return {
	      isDragging: true,
	      isClone: isClone,
	      isDropAnimating: Boolean(dropping),
	      dropAnimation: dropping,
	      mode: mode,
	      draggingOver: draggingOver,
	      combineWith: combineWith,
	      combineTargetFor: null
	    };
	  });
	  var getMemoizedProps = memoizeOne(function (offset, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {
	    return {
	      mapped: {
	        type: 'DRAGGING',
	        dropping: null,
	        draggingOver: draggingOver,
	        combineWith: combineWith,
	        mode: mode,
	        offset: offset,
	        dimension: dimension,
	        forceShouldAnimate: forceShouldAnimate,
	        snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
	      }
	    };
	  });

	  var selector = function selector(state, ownProps) {
	    if (state.isDragging) {
	      if (state.critical.draggable.id !== ownProps.draggableId) {
	        return null;
	      }

	      var offset = state.current.client.offset;
	      var dimension = state.dimensions.draggables[ownProps.draggableId];
	      var draggingOver = whatIsDraggedOver(state.impact);
	      var combineWith = getCombineWithFromImpact(state.impact);
	      var forceShouldAnimate = state.forceShouldAnimate;
	      return getMemoizedProps(memoizedOffset(offset.x, offset.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
	    }

	    if (state.phase === 'DROP_ANIMATING') {
	      var completed = state.completed;

	      if (completed.result.draggableId !== ownProps.draggableId) {
	        return null;
	      }

	      var isClone = ownProps.isClone;
	      var _dimension = state.dimensions.draggables[ownProps.draggableId];
	      var result = completed.result;
	      var mode = result.mode;

	      var _draggingOver = whatIsDraggedOverFromResult(result);

	      var _combineWith = getCombineWithFromResult(result);

	      var duration = state.dropDuration;
	      var dropping = {
	        duration: duration,
	        curve: curves.drop,
	        moveTo: state.newHomeClientOffset,
	        opacity: _combineWith ? combine.opacity.drop : null,
	        scale: _combineWith ? combine.scale.drop : null
	      };
	      return {
	        mapped: {
	          type: 'DRAGGING',
	          offset: state.newHomeClientOffset,
	          dimension: _dimension,
	          dropping: dropping,
	          draggingOver: _draggingOver,
	          combineWith: _combineWith,
	          mode: mode,
	          forceShouldAnimate: null,
	          snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)
	        }
	      };
	    }

	    return null;
	  };

	  return selector;
	}

	function getSecondarySnapshot(combineTargetFor) {
	  return {
	    isDragging: false,
	    isDropAnimating: false,
	    isClone: false,
	    dropAnimation: null,
	    mode: null,
	    draggingOver: null,
	    combineTargetFor: combineTargetFor,
	    combineWith: null
	  };
	}

	var atRest = {
	  mapped: {
	    type: 'SECONDARY',
	    offset: origin,
	    combineTargetFor: null,
	    shouldAnimateDisplacement: true,
	    snapshot: getSecondarySnapshot(null)
	  }
	};

	function getSecondarySelector() {
	  var memoizedOffset = memoizeOne(function (x, y) {
	    return {
	      x: x,
	      y: y
	    };
	  });
	  var getMemoizedSnapshot = memoizeOne(getSecondarySnapshot);
	  var getMemoizedProps = memoizeOne(function (offset, combineTargetFor, shouldAnimateDisplacement) {
	    if (combineTargetFor === void 0) {
	      combineTargetFor = null;
	    }

	    return {
	      mapped: {
	        type: 'SECONDARY',
	        offset: offset,
	        combineTargetFor: combineTargetFor,
	        shouldAnimateDisplacement: shouldAnimateDisplacement,
	        snapshot: getMemoizedSnapshot(combineTargetFor)
	      }
	    };
	  });

	  var getFallback = function getFallback(combineTargetFor) {
	    return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
	  };

	  var getProps = function getProps(ownId, draggingId, impact, afterCritical) {
	    var visualDisplacement = impact.displaced.visible[ownId];
	    var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
	    var combine = tryGetCombine(impact);
	    var combineTargetFor = combine && combine.draggableId === ownId ? draggingId : null;

	    if (!visualDisplacement) {
	      if (!isAfterCriticalInVirtualList) {
	        return getFallback(combineTargetFor);
	      }

	      if (impact.displaced.invisible[ownId]) {
	        return null;
	      }

	      var change = negate(afterCritical.displacedBy.point);

	      var _offset = memoizedOffset(change.x, change.y);

	      return getMemoizedProps(_offset, combineTargetFor, true);
	    }

	    if (isAfterCriticalInVirtualList) {
	      return getFallback(combineTargetFor);
	    }

	    var displaceBy = impact.displacedBy.point;
	    var offset = memoizedOffset(displaceBy.x, displaceBy.y);
	    return getMemoizedProps(offset, combineTargetFor, visualDisplacement.shouldAnimate);
	  };

	  var selector = function selector(state, ownProps) {
	    if (state.isDragging) {
	      if (state.critical.draggable.id === ownProps.draggableId) {
	        return null;
	      }

	      return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
	    }

	    if (state.phase === 'DROP_ANIMATING') {
	      var completed = state.completed;

	      if (completed.result.draggableId === ownProps.draggableId) {
	        return null;
	      }

	      return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
	    }

	    return null;
	  };

	  return selector;
	}

	var makeMapStateToProps = function makeMapStateToProps() {
	  var draggingSelector = getDraggableSelector();
	  var secondarySelector = getSecondarySelector();

	  var selector = function selector(state, ownProps) {
	    return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
	  };

	  return selector;
	};
	var mapDispatchToProps = {
	  dropAnimationFinished: dropAnimationFinished
	};
	var ConnectedDraggable = reactRedux__default['default'].connect(makeMapStateToProps, mapDispatchToProps, null, {
	  context: StoreContext,
	  pure: true,
	  areStatePropsEqual: isStrictEqual
	})(Draggable);

	function PrivateDraggable(props) {
	  var droppableContext = useRequiredContext(DroppableContext);
	  var isUsingCloneFor = droppableContext.isUsingCloneFor;

	  if (isUsingCloneFor === props.draggableId && !props.isClone) {
	    return null;
	  }

	  return React__default$1.createElement(ConnectedDraggable, props);
	}
	function PublicDraggable(props) {
	  var isEnabled = typeof props.isDragDisabled === 'boolean' ? !props.isDragDisabled : true;
	  var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
	  var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
	  return React__default$1.createElement(PrivateDraggable, _extends({}, props, {
	    isClone: false,
	    isEnabled: isEnabled,
	    canDragInteractiveElements: canDragInteractiveElements,
	    shouldRespectForcePress: shouldRespectForcePress
	  }));
	}

	function Droppable(props) {
	  var appContext = React__default['default'].useContext(AppContext);
	  !appContext ?  invariant(false, 'Could not find app context')  : void 0;
	  var contextId = appContext.contextId,
	      isMovementAllowed = appContext.isMovementAllowed;
	  var droppableRef = React__default['default'].useRef(null);
	  var placeholderRef = React__default['default'].useRef(null);
	  var children = props.children,
	      droppableId = props.droppableId,
	      type = props.type,
	      mode = props.mode,
	      direction = props.direction,
	      ignoreContainerClipping = props.ignoreContainerClipping,
	      isDropDisabled = props.isDropDisabled,
	      isCombineEnabled = props.isCombineEnabled,
	      snapshot = props.snapshot,
	      useClone = props.useClone,
	      updateViewportMaxScroll = props.updateViewportMaxScroll,
	      getContainerForClone = props.getContainerForClone;
	  var getDroppableRef = useMemoOne_cjs.useCallback(function () {
	    return droppableRef.current;
	  }, []);
	  var setDroppableRef = useMemoOne_cjs.useCallback(function (value) {
	    droppableRef.current = value;
	  }, []);
	  var getPlaceholderRef = useMemoOne_cjs.useCallback(function () {
	    return placeholderRef.current;
	  }, []);
	  var setPlaceholderRef = useMemoOne_cjs.useCallback(function (value) {
	    placeholderRef.current = value;
	  }, []);
	  useValidation({
	    props: props,
	    getDroppableRef: getDroppableRef,
	    getPlaceholderRef: getPlaceholderRef
	  });
	  var onPlaceholderTransitionEnd = useMemoOne_cjs.useCallback(function () {
	    if (isMovementAllowed()) {
	      updateViewportMaxScroll({
	        maxScroll: getMaxWindowScroll()
	      });
	    }
	  }, [isMovementAllowed, updateViewportMaxScroll]);
	  useDroppablePublisher({
	    droppableId: droppableId,
	    type: type,
	    mode: mode,
	    direction: direction,
	    isDropDisabled: isDropDisabled,
	    isCombineEnabled: isCombineEnabled,
	    ignoreContainerClipping: ignoreContainerClipping,
	    getDroppableRef: getDroppableRef
	  });
	  var placeholder = React__default$1.createElement(AnimateInOut, {
	    on: props.placeholder,
	    shouldAnimate: props.shouldAnimatePlaceholder
	  }, function (_ref) {
	    var onClose = _ref.onClose,
	        data = _ref.data,
	        animate = _ref.animate;
	    return React__default$1.createElement(Placeholder$1, {
	      placeholder: data,
	      onClose: onClose,
	      innerRef: setPlaceholderRef,
	      animate: animate,
	      contextId: contextId,
	      onTransitionEnd: onPlaceholderTransitionEnd
	    });
	  });
	  var provided = useMemoOne_cjs.useMemo(function () {
	    return {
	      innerRef: setDroppableRef,
	      placeholder: placeholder,
	      droppableProps: {
	        'data-rbd-droppable-id': droppableId,
	        'data-rbd-droppable-context-id': contextId
	      }
	    };
	  }, [contextId, droppableId, placeholder, setDroppableRef]);
	  var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
	  var droppableContext = useMemoOne_cjs.useMemo(function () {
	    return {
	      droppableId: droppableId,
	      type: type,
	      isUsingCloneFor: isUsingCloneFor
	    };
	  }, [droppableId, isUsingCloneFor, type]);

	  function getClone() {
	    if (!useClone) {
	      return null;
	    }

	    var dragging = useClone.dragging,
	        render = useClone.render;
	    var node = React__default$1.createElement(PrivateDraggable, {
	      draggableId: dragging.draggableId,
	      index: dragging.source.index,
	      isClone: true,
	      isEnabled: true,
	      shouldRespectForcePress: false,
	      canDragInteractiveElements: true
	    }, function (draggableProvided, draggableSnapshot) {
	      return render(draggableProvided, draggableSnapshot, dragging);
	    });
	    return ReactDOM.createPortal(node, getContainerForClone());
	  }

	  return React__default$1.createElement(DroppableContext.Provider, {
	    value: droppableContext
	  }, children(provided, snapshot), getClone());
	}

	var isMatchingType = function isMatchingType(type, critical) {
	  return type === critical.droppable.type;
	};

	var getDraggable = function getDraggable(critical, dimensions) {
	  return dimensions.draggables[critical.draggable.id];
	};

	var makeMapStateToProps$1 = function makeMapStateToProps() {
	  var idleWithAnimation = {
	    placeholder: null,
	    shouldAnimatePlaceholder: true,
	    snapshot: {
	      isDraggingOver: false,
	      draggingOverWith: null,
	      draggingFromThisWith: null,
	      isUsingPlaceholder: false
	    },
	    useClone: null
	  };

	  var idleWithoutAnimation = _extends({}, idleWithAnimation, {
	    shouldAnimatePlaceholder: false
	  });

	  var getDraggableRubric = memoizeOne(function (descriptor) {
	    return {
	      draggableId: descriptor.id,
	      type: descriptor.type,
	      source: {
	        index: descriptor.index,
	        droppableId: descriptor.droppableId
	      }
	    };
	  });
	  var getMapProps = memoizeOne(function (id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {
	    var draggableId = dragging.descriptor.id;
	    var isHome = dragging.descriptor.droppableId === id;

	    if (isHome) {
	      var useClone = renderClone ? {
	        render: renderClone,
	        dragging: getDraggableRubric(dragging.descriptor)
	      } : null;
	      var _snapshot = {
	        isDraggingOver: isDraggingOverForConsumer,
	        draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
	        draggingFromThisWith: draggableId,
	        isUsingPlaceholder: true
	      };
	      return {
	        placeholder: dragging.placeholder,
	        shouldAnimatePlaceholder: false,
	        snapshot: _snapshot,
	        useClone: useClone
	      };
	    }

	    if (!isEnabled) {
	      return idleWithoutAnimation;
	    }

	    if (!isDraggingOverForImpact) {
	      return idleWithAnimation;
	    }

	    var snapshot = {
	      isDraggingOver: isDraggingOverForConsumer,
	      draggingOverWith: draggableId,
	      draggingFromThisWith: null,
	      isUsingPlaceholder: true
	    };
	    return {
	      placeholder: dragging.placeholder,
	      shouldAnimatePlaceholder: true,
	      snapshot: snapshot,
	      useClone: null
	    };
	  });

	  var selector = function selector(state, ownProps) {
	    var id = ownProps.droppableId;
	    var type = ownProps.type;
	    var isEnabled = !ownProps.isDropDisabled;
	    var renderClone = ownProps.renderClone;

	    if (state.isDragging) {
	      var critical = state.critical;

	      if (!isMatchingType(type, critical)) {
	        return idleWithoutAnimation;
	      }

	      var dragging = getDraggable(critical, state.dimensions);
	      var isDraggingOver = whatIsDraggedOver(state.impact) === id;
	      return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
	    }

	    if (state.phase === 'DROP_ANIMATING') {
	      var completed = state.completed;

	      if (!isMatchingType(type, completed.critical)) {
	        return idleWithoutAnimation;
	      }

	      var _dragging = getDraggable(completed.critical, state.dimensions);

	      return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);
	    }

	    if (state.phase === 'IDLE' && state.completed && !state.shouldFlush) {
	      var _completed = state.completed;

	      if (!isMatchingType(type, _completed.critical)) {
	        return idleWithoutAnimation;
	      }

	      var wasOver = whatIsDraggedOver(_completed.impact) === id;
	      var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === 'COMBINE');
	      var isHome = _completed.critical.droppable.id === id;

	      if (wasOver) {
	        return wasCombining ? idleWithAnimation : idleWithoutAnimation;
	      }

	      if (isHome) {
	        return idleWithAnimation;
	      }

	      return idleWithoutAnimation;
	    }

	    return idleWithoutAnimation;
	  };

	  return selector;
	};
	var mapDispatchToProps$1 = {
	  updateViewportMaxScroll: updateViewportMaxScroll
	};

	function getBody() {
	  !document.body ?  invariant(false, 'document.body is not ready')  : void 0;
	  return document.body;
	}

	var defaultProps = {
	  mode: 'standard',
	  type: 'DEFAULT',
	  direction: 'vertical',
	  isDropDisabled: false,
	  isCombineEnabled: false,
	  ignoreContainerClipping: false,
	  renderClone: null,
	  getContainerForClone: getBody
	};
	var ConnectedDroppable = reactRedux__default['default'].connect(makeMapStateToProps$1, mapDispatchToProps$1, null, {
	  context: StoreContext,
	  pure: true,
	  areStatePropsEqual: isStrictEqual
	})(Droppable);
	ConnectedDroppable.defaultProps = defaultProps;

	exports.DragDropContext = DragDropContext;
	exports.Draggable = PublicDraggable;
	exports.Droppable = ConnectedDroppable;
	exports.resetServerContext = resetServerContext;
	});

	const AddNewItemButton = props => {
	  const {
	    resource,
	    property
	  } = props;
	  const {
	    translateProperty,
	    translateButton
	  } = useTranslation();
	  const label = translateProperty(`${property.path}.addNewItem`, resource.id, {
	    defaultValue: translateButton('addNewItem', resource.id)
	  });
	  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Add"
	  }), label);
	};

	const PropertyDescription = props => {
	  const {
	    property
	  } = props;

	  if (!property.description) {
	    return null;
	  }

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    mx: "sm",
	    display: "inline-flex"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Tooltip, {
	    direction: "top",
	    title: property.description,
	    size: "lg"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Help",
	    color: "info"
	  }))));
	};

	const PropertyLabel = props => {
	  const {
	    property,
	    props: labelProps
	  } = props;

	  if (property.hideLabel) {
	    return null;
	  }

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, _extends_1({
	    htmlFor: property.path,
	    required: property.isRequired
	  }, labelProps), property.label, property.description && /*#__PURE__*/React__default['default'].createElement(PropertyDescription, {
	    property: property
	  }));
	};

	/**
	 * Converts property: PropertyJSON from an array to a sub-property for an actual item in the array
	 * It change path that it has index inside along with the label. Futhermore flat isArray is removed
	 * ,because it was already handled, so that itemRenderer can render property as a regular one
	 *
	 * @param {PropertyJSON}  arrayProperty property with path set to an root Array type property,
	 * @param {Number}        index         index under which sub-property should be placed
	 * @private
	 * @hide
	 */
	const convertToSubProperty = (arrayProperty, index) => ({ ...arrayProperty,
	  path: [arrayProperty.path, index].join(DELIMITER),
	  label: `[${index + 1}]`,
	  isArray: false,
	  isDraggable: false
	});

	/**
	 * Removes selected array item from given record. It performs following tasks:
	 * 1. removes array item from the array
	 * 2. reorders keys in new array item
	 * 3. if property has populated fields it also reorders them
	 * it uses {@link flat } module and its removePath method
	 *
	 * @param {RecordJSON} record
	 * @param {string}     subPropertyPath            which has to be removed. It has to be flattened
	 *                                                in notation, and ending with array index
	 * @private
	 * @hide
	 */
	const removeSubProperty = (record, subPropertyPath) => {
	  // by default populated is flatten just to the path level - object itself is not flatten. That is
	  // why we have to retrieve the original state. That is why we have to replace record.populated to
	  // from { 'some.nested.1.key': RecordJSON } to { 'some.nested.1.key': 'some.nested.1.key' },
	  // then remove keys, and refill back some.nested.1.key to the value from the original populated
	  // object.
	  const populatedKeyMap = Object.keys(record.populated).reduce((memo, propertyKey) => ({ ...memo,
	    [propertyKey]: propertyKey
	  }), {});
	  const newPopulatedKeyMap = flat.removePath(populatedKeyMap, subPropertyPath);
	  const newPopulated = Object.entries(newPopulatedKeyMap).reduce((memo, [newPropertyKey, oldPropertyKey]) => ({ ...memo,
	    [newPropertyKey]: oldPropertyKey && record.populated[oldPropertyKey === null || oldPropertyKey === void 0 ? void 0 : oldPropertyKey.toString()]
	  }), {});
	  return { ...record,
	    params: flat.removePath(record.params, subPropertyPath),
	    populated: newPopulated
	  };
	};

	const ItemRenderer = props => {
	  const {
	    ItemComponent,
	    property,
	    onDelete,
	    index,
	    record,
	    isDraggable
	  } = props;
	  const uniqueDraggableId = window.btoa(unescape(encodeURIComponent(`${JSON.stringify(flat.get(record.params, property.path))}-${property.path}`)));
	  return /*#__PURE__*/React__default['default'].createElement(reactBeautifulDnd_cjs.Draggable, {
	    draggableId: uniqueDraggableId,
	    index: index,
	    key: uniqueDraggableId,
	    isDragDisabled: !isDraggable
	  }, provided => /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, _extends_1({
	    ref: provided.innerRef
	  }, provided.draggableProps, provided.dragHandleProps, {
	    backgroundColor: "white",
	    flex: true,
	    flexDirection: "row",
	    alignItems: "center",
	    "data-testid": property.path
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexGrow: 1
	  }, /*#__PURE__*/React__default['default'].createElement(ItemComponent, props)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexShrink: 0,
	    ml: "lg"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    rounded: true,
	    ml: "default",
	    "data-testid": "delete-item",
	    type: "button",
	    size: "icon",
	    onClick: event => onDelete(event, property),
	    variant: "danger"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "TrashCan"
	  })))));
	};

	const InputsInSection = props => {
	  const {
	    property,
	    record,
	    resource,
	    onChange
	  } = props;
	  const items = flat.get(record.params, property.path) || [];
	  const addNew = React.useCallback(event => {
	    const newItems = [...items, property.subProperties.length ? {} : ''];
	    onChange(property.path, newItems);
	    event.preventDefault();
	    return false;
	  }, [record, onChange, property]);
	  const removeItem = React.useCallback((event, subProperty) => {
	    const newRecord = removeSubProperty(record, subProperty.path);
	    onChange(newRecord);
	    event.preventDefault();
	    return false;
	  }, [record, onChange, property]);
	  const handleOnDragEnd = React.useCallback(result => {
	    const {
	      source,
	      destination
	    } = result;
	    if (!source || !destination || destination.index === source.index) return;
	    const itemsCopy = Array.from(items);
	    const [sourceItem] = itemsCopy.splice(source.index, 1);
	    itemsCopy.splice(destination.index, 0, sourceItem);
	    onChange(property.path, itemsCopy);
	  }, [record, onChange, property]);
	  return /*#__PURE__*/React__default['default'].createElement(reactBeautifulDnd_cjs.DragDropContext, {
	    onDragEnd: handleOnDragEnd
	  }, /*#__PURE__*/React__default['default'].createElement(reactBeautifulDnd_cjs.Droppable, {
	    droppableId: property.path
	  }, provided => /*#__PURE__*/React__default['default'].createElement(DesignSystem.Section, _extends_1({
	    ref: provided.innerRef
	  }, provided.droppableProps, {
	    mt: "xl",
	    className: property.path
	  }), items.map((item, i) => {
	    const itemProperty = convertToSubProperty(props.property, i);
	    return /*#__PURE__*/React__default['default'].createElement(ItemRenderer, _extends_1({}, props, {
	      property: itemProperty,
	      isDraggable: property.isDraggable,
	      key: itemProperty.path,
	      onDelete: removeItem,
	      index: i
	    }));
	  }), provided.placeholder, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    onClick: addNew,
	    type: "button",
	    rounded: true
	  }, /*#__PURE__*/React__default['default'].createElement(AddNewItemButton, {
	    resource: resource,
	    property: property
	  })))));
	};

	const Edit = props => {
	  const {
	    property,
	    record,
	    testId
	  } = props;
	  const error = record.errors && record.errors[property.propertyPath];
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: !!error,
	    "data-testid": testId
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(InputsInSection, props), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	const List = props => {
	  const {
	    property,
	    record
	  } = props;
	  const values = flat.get(record.params, property.path) || [];
	  const {
	    translateProperty
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement("span", null, `${translateProperty('length')}: ${values.length}`);
	};

	class Show extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      ItemComponent
	    } = this.props;
	    const items = flat.get(record.params, property.path) || [];
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Section, null, (items || []).map((item, i) => {
	      const itemProperty = convertToSubProperty(property, i);
	      return /*#__PURE__*/React__default['default'].createElement(ItemComponent, _extends_1({}, this.props, {
	        key: itemProperty.path,
	        property: itemProperty
	      }));
	    })));
	  }

	}

	// import Show from './show'

	var ArrayType = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show,
		edit: Edit,
		list: List
	});

	function convertToSubProperty$1(property, subProperty) {
	  const [subPropertyPath] = subProperty.name.split(DELIMITER).slice(-1);
	  return { ...subProperty,
	    path: [property.path, subPropertyPath].join(DELIMITER)
	  };
	}

	const Edit$1 = props => {
	  const {
	    property,
	    record,
	    ItemComponent
	  } = props;
	  const error = record.errors && record.errors[property.path];
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: !!error
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Section, property.props, property.subProperties.filter(subProperty => !subProperty.isId).map(subProperty => {
	    const subPropertyWithPath = convertToSubProperty$1(property, subProperty);
	    return /*#__PURE__*/React__default['default'].createElement(ItemComponent, _extends_1({}, props, {
	      key: subPropertyWithPath.path,
	      property: subPropertyWithPath
	    }));
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	const Show$1 = props => {
	  const {
	    property,
	    ItemComponent
	  } = props;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	    label: property.label
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Section, null, property.subProperties.filter(subProperty => !subProperty.isId).map(subProperty => {
	    const subPropertyWithPath = convertToSubProperty$1(property, subProperty);
	    return /*#__PURE__*/React__default['default'].createElement(ItemComponent, _extends_1({}, props, {
	      key: subPropertyWithPath.path,
	      property: subPropertyWithPath
	    }));
	  })));
	};

	// TODO: define ItemComponent interface
	class List$1 extends React__default['default'].PureComponent {
	  renderItems() {
	    const {
	      property,
	      ItemComponent
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, property.subProperties.filter(subProperty => !subProperty.isId).map(subProperty => {
	      const subPropertyWithPath = convertToSubProperty$1(property, subProperty);
	      return /*#__PURE__*/React__default['default'].createElement("div", {
	        key: subPropertyWithPath.path
	      }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, {
	        inline: true
	      }, `${subProperty.label}: `), /*#__PURE__*/React__default['default'].createElement(ItemComponent, _extends_1({}, this.props, {
	        property: subPropertyWithPath
	      })));
	    }));
	  }

	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');

	    if (resource.titleProperty.propertyPath === property.propertyPath && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Link, {
	        to: href
	      }, this.renderItems());
	    }

	    return this.renderItems();
	  }

	}

	// import Show from './show'

	var MixedType = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show$1,
		edit: Edit$1,
		list: List$1
	});

	const DefaultPropertyValue = props => {
	  const {
	    property,
	    record
	  } = props;
	  const rawValue = record === null || record === void 0 ? void 0 : record.params[property.path];

	  if (typeof rawValue === 'undefined') {
	    return null;
	  }

	  if (property.availableValues) {
	    const option = property.availableValues.find(opt => opt.value === rawValue);

	    if (!option) {
	      return rawValue;
	    }

	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Badge, null, (option === null || option === void 0 ? void 0 : option.label) || rawValue);
	  }

	  return rawValue;
	};

	class Show$2 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, /*#__PURE__*/React__default['default'].createElement(DefaultPropertyValue, this.props));
	  }

	}

	/* eslint-disable import/prefer-default-export */

	/**
	 * Function used in React memo to compare if previous property value and next
	 * property value are the same.
	 *
	 * @private
	 */
	const recordPropertyIsEqual = (prevProps, nextProps) => {
	  const prevValue = prevProps.record.params[prevProps.property.path];
	  const nextValue = nextProps.record.params[nextProps.property.path];
	  const prevError = prevProps.record.errors[prevProps.property.path];
	  const nextError = nextProps.record.errors[nextProps.property.path];
	  return prevValue === nextValue && prevError === nextError;
	};

	const Edit$2 = props => {
	  var _record$errors;

	  const {
	    property,
	    record
	  } = props;
	  const error = (_record$errors = record.errors) === null || _record$errors === void 0 ? void 0 : _record$errors[property.path];
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: Boolean(error)
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), property.availableValues ? /*#__PURE__*/React__default['default'].createElement(SelectEdit, props) : /*#__PURE__*/React__default['default'].createElement(TextEdit, props), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	const SelectEdit = props => {
	  var _record$params;

	  const {
	    theme,
	    record,
	    property,
	    onChange
	  } = props;

	  if (!property.availableValues) {
	    return null;
	  }

	  const propValue = ((_record$params = record.params) === null || _record$params === void 0 ? void 0 : _record$params[property.path]) ?? '';
	  const styles = DesignSystem.selectStyles(theme);
	  const selected = property.availableValues.find(av => av.value === propValue);
	  return /*#__PURE__*/React__default['default'].createElement(Select__default['default'], _extends_1({
	    isClearable: true,
	    styles: styles,
	    value: selected,
	    required: property.isRequired,
	    options: property.availableValues,
	    onChange: s => onChange(property.path, (s === null || s === void 0 ? void 0 : s.value) ?? ''),
	    isDisabled: property.isDisabled
	  }, property.props));
	};

	const TextEdit = props => {
	  var _record$params2;

	  const {
	    property,
	    record,
	    onChange
	  } = props;
	  const propValue = ((_record$params2 = record.params) === null || _record$params2 === void 0 ? void 0 : _record$params2[property.path]) ?? '';
	  const [value, setValue] = React.useState(propValue);
	  React.useEffect(() => {
	    if (value !== propValue) {
	      setValue(propValue);
	    }
	  }, [propValue]);
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Input, _extends_1({
	    id: property.path,
	    name: property.path,
	    required: property.isRequired,
	    onChange: e => setValue(e.target.value),
	    onBlur: () => onChange(property.path, value) // handle clicking ENTER
	    ,
	    onKeyDown: e => e.keyCode === 13 && onChange(property.path, value),
	    value: value,
	    disabled: property.isDisabled
	  }, property.props));
	};

	var edit = styled.withTheme( /*#__PURE__*/React.memo(Edit$2, recordPropertyIsEqual));

	class Filter extends React__default['default'].PureComponent {
	  constructor(props) {
	    super(props);
	    this.handleInputChange = this.handleInputChange.bind(this);
	    this.handleSelectChange = this.handleSelectChange.bind(this);
	  }

	  handleInputChange(event) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.path, event.target.value);
	  }

	  handleSelectChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    const value = selected ? selected.value : '';
	    onChange(property.path, value);
	  }

	  renderInput() {
	    const {
	      property,
	      filter,
	      theme
	    } = this.props;
	    const filterKey = `filter-${property.path}`;
	    const value = filter[property.path] || '';

	    if (property.availableValues) {
	      const selected = property.availableValues.find(av => av.value === value);
	      return /*#__PURE__*/React__default['default'].createElement(Select__default['default'], {
	        value: typeof selected === 'undefined' ? '' : selected,
	        isClearable: true,
	        options: property.availableValues,
	        styles: DesignSystem.filterStyles(theme),
	        onChange: this.handleSelectChange
	      });
	    }

	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Input, {
	      name: filterKey,
	      onChange: this.handleInputChange,
	      value: value
	    });
	  }

	  render() {
	    const {
	      property
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	      variant: "filter"
	    }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, null, property.label), this.renderInput());
	  }

	}

	var filter = styled.withTheme(Filter);

	class List$2 extends React__default['default'].PureComponent {
	  render() {
	    return /*#__PURE__*/React__default['default'].createElement(DefaultPropertyValue, this.props);
	  }

	}

	var defaultType = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show$2,
		edit: edit,
		filter: filter,
		list: List$2
	});

	const parseValue = value => !(!value || value === 'false');

	const Edit$3 = props => {
	  const {
	    property,
	    onChange,
	    record
	  } = props;
	  const value = parseValue(record.params && record.params[property.path]);
	  const error = record.errors && record.errors[property.path];

	  const handleChange = () => {
	    if (!property.isDisabled) {
	      onChange(property.path, !value);
	    }
	  };

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: !!error
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.CheckBox, _extends_1({
	    id: property.path,
	    name: property.path,
	    onChange: handleChange,
	    checked: value,
	    disabled: property.isDisabled
	  }, property.props)), /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property,
	    props: {
	      inline: true
	    }
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	var edit$1 = /*#__PURE__*/React.memo(Edit$3, recordPropertyIsEqual);

	var mapValue = (value => {
	  if (typeof value === 'undefined') {
	    return '';
	  }

	  return value ? 'Yes' : 'No';
	});

	const BooleanPropertyValue = props => {
	  const {
	    record,
	    property,
	    resource
	  } = props;
	  const {
	    translateProperty
	  } = useTranslation();
	  const rawValue = record === null || record === void 0 ? void 0 : record.params[property.path];

	  if (typeof rawValue === 'undefined' || rawValue === '') {
	    return null;
	  }

	  const base = mapValue(rawValue);
	  const translation = translateProperty(`${property.path}.${rawValue}`, resource.id, {
	    defaultValue: base
	  });
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Badge, {
	    outline: true,
	    size: "sm"
	  }, translation);
	};

	class Show$3 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, /*#__PURE__*/React__default['default'].createElement(BooleanPropertyValue, this.props));
	  }

	}

	class List$3 extends React__default['default'].PureComponent {
	  render() {
	    return /*#__PURE__*/React__default['default'].createElement(BooleanPropertyValue, this.props);
	  }

	}

	class Filter$1 extends React__default['default'].PureComponent {
	  constructor(props) {
	    super(props);
	    this.handleChange = this.handleChange.bind(this);
	  }

	  handleChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    const value = selected ? selected.value : '';
	    onChange(property.path, value);
	  }

	  render() {
	    const {
	      property,
	      filter = {},
	      theme
	    } = this.props;
	    const value = typeof filter[property.path] === 'undefined' ? '' : filter[property.path];
	    const options = [{
	      value: true,
	      label: mapValue(true)
	    }, {
	      value: false,
	      label: mapValue(false)
	    }];
	    const selected = options.find(o => o.value === value);
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, null, property.label), /*#__PURE__*/React__default['default'].createElement(Select__default['default'], {
	      value: typeof selected === 'undefined' ? '' : selected,
	      isClearable: true,
	      options: options,
	      styles: DesignSystem.filterStyles(theme),
	      onChange: this.handleChange
	    }));
	  }

	}

	var filter$1 = styled.withTheme(Filter$1);

	var boolean = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: edit$1,
		show: Show$3,
		list: List$3,
		filter: filter$1
	});

	const Edit$4 = props => {
	  const {
	    property,
	    onChange,
	    record
	  } = props;
	  const value = record.params && record.params[property.path] || '';
	  const error = record.errors && record.errors[property.path];
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: !!error
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DatePicker, _extends_1({
	    value: value,
	    disabled: property.isDisabled,
	    onChange: date => onChange(property.path, date),
	    propertyType: property.type
	  }, property.props)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	var edit$2 = /*#__PURE__*/React.memo(Edit$4, recordPropertyIsEqual);

	var mapValue$1 = ((value, propertyType) => {
	  if (!value) {
	    return '';
	  }

	  const date = new Date(value);

	  if (date) {
	    return DesignSystem.formatDateProperty(date, propertyType);
	  }

	  return '';
	});

	class Show$4 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = mapValue$1(record.params[property.path], property.type);
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, value);
	  }

	}

	class List$4 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = mapValue$1(record.params[property.path], property.type);
	    return /*#__PURE__*/React__default['default'].createElement("span", null, value);
	  }

	}

	const PARAM_SEPARATOR = '~~';

	/**
	 * Filter object wrapping up selected filters.
	 * @private
	 */
	class Filter$2 {
	  /**
	   * Changes raw nested filters to form Object<path, value>.
	   *
	   * @example
	   * const filters = {
	   *  nested: {field: 'ala'},
	   *  'dataField~~from': '2019-08-14'
	   * }
	   *
	   * const normalized = Filter.normalizeFilters(filters)
	   * // {
	   * //   'nested.filter': 'ala',
	   * //   'dataField': {from: '2019-08-14'}
	   * // }
	   *
	   *
	   * @param   {Object}  filters
	   *
	   * @return  {Object}
	   */
	  static normalizeKeys(filters) {
	    return flat$1.unflatten(flat$1.flatten(filters), {
	      delimiter: PARAM_SEPARATOR
	    });
	  }
	  /**
	   * @param   {Object<String,Object | String>}  filters   selected filters
	   * @param   {BaseResource}                    resource    resource which is filtered
	   */


	  constructor(filters = {}, resource) {
	    this.resource = resource;
	    const normalized = Filter$2.normalizeKeys(filters);
	    this.filters = Object.keys(normalized).reduce((memo, path) => {
	      memo[path] = {
	        path,
	        property: this.resource.property(path),
	        value: normalized[path]
	      };
	      return memo;
	    }, {});
	  }
	  /**
	   * Returns filter for a given property key
	   *
	   * @param {String} key      property key
	   * @returns {Filter.Property | undefined}
	   */


	  get(key) {
	    return this.filters[key];
	  }
	  /**
	   * Populates all filtered properties which refers to other resources
	   */


	  async populate() {
	    const keys = Object.keys(this.filters);

	    for (let index = 0; index < keys.length; index += 1) {
	      var _this$resource$decora;

	      const key = keys[index];
	      const referenceResource = (_this$resource$decora = this.resource.decorate().getPropertyByKey(key)) === null || _this$resource$decora === void 0 ? void 0 : _this$resource$decora.reference();

	      if (referenceResource) {
	        this.filters[key].populated = await referenceResource.findOne(this.filters[key].value);
	      }
	    }

	    return this;
	  }

	  reduce(callback, initial) {
	    return Object.values(this.filters).reduce(callback, initial || {});
	  }

	  isVisible() {
	    return !!Object.keys(this.filters).length;
	  }

	}

	var BackendFilter = /*#__PURE__*/Object.freeze({
		__proto__: null,
		PARAM_SEPARATOR: PARAM_SEPARATOR,
		Filter: Filter$2,
		'default': Filter$2
	});

	const {
	  PARAM_SEPARATOR: PARAM_SEPARATOR$1
	} = BackendFilter;

	const Filter$3 = props => {
	  const {
	    property,
	    filter,
	    onChange
	  } = props;
	  const {
	    translateProperty
	  } = useTranslation();
	  const fromKey = `${property.path}${PARAM_SEPARATOR$1}from`;
	  const toKey = `${property.path}${PARAM_SEPARATOR$1}to`;
	  const fromValue = filter[fromKey];
	  const toValue = filter[toKey];
	  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    variant: "filter"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, null, property.label), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, null, `- ${translateProperty('from')}: `), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DatePicker, {
	    value: fromValue,
	    onChange: date => onChange(fromKey, date),
	    propertyType: property.type
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, {
	    mt: "default"
	  }, `- ${translateProperty('to')}: `), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DatePicker, {
	    value: toValue,
	    onChange: data => onChange(toKey, data),
	    propertyType: property.type
	  })));
	};

	var datetime = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: edit$2,
		show: Show$4,
		list: List$4,
		filter: Filter$3
	});

	const Edit$5 = props => {
	  var _record$params;

	  const {
	    property,
	    record,
	    onChange
	  } = props;
	  const value = ((_record$params = record.params) === null || _record$params === void 0 ? void 0 : _record$params[property.path]) ?? '';
	  const error = record.errors && record.errors[property.path];
	  const {
	    props: propertyProps
	  } = property;
	  const {
	    quill = {},
	    ...customProps
	  } = propertyProps || {};
	  quill.theme = quill.theme || 'snow';
	  quill.modules = {
	    toolbar: DesignSystem.DefaultQuillToolbarOptions,
	    ...(quill.modules || {})
	  };
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: Boolean(error)
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.RichText, _extends_1({}, customProps, {
	    value: value,
	    onChange: content => onChange(property.path, content),
	    quill: quill
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error === null || error === void 0 ? void 0 : error.message));
	};

	var edit$3 = /*#__PURE__*/React.memo(Edit$5, recordPropertyIsEqual);

	class Show$5 extends React__default['default'].PureComponent {
	  constructor(props) {
	    super(props);
	    this.contentRef = /*#__PURE__*/React__default['default'].createRef();
	  }

	  componentDidMount() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params[property.path];
	    this.contentRef.current.innerHTML = value;
	  }

	  render() {
	    const {
	      property
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	      variant: "grey",
	      border: "default"
	    }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	      ref: this.contentRef
	    })));
	  }

	}

	const List$5 = props => {
	  const {
	    property,
	    record
	  } = props;
	  const original = record.params[property.path] || '';
	  const value = original.substring(0, 15) + (original.length > 15 ? '...' : '');
	  return /*#__PURE__*/React__default['default'].createElement("span", null, value);
	};

	var richtext = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: edit$3,
		show: Show$5,
		list: List$5
	});

	const Edit$6 = props => {
	  const {
	    onChange,
	    property,
	    record,
	    theme
	  } = props;
	  const {
	    reference: resourceId
	  } = property;

	  if (!resourceId) {
	    throw new Error(`Cannot reference resource in property '${property.path}'`);
	  }

	  const handleChange = selected => {
	    if (selected) {
	      onChange(property.path, selected.value, selected.record);
	    } else {
	      onChange(property.path, null);
	    }
	  };

	  const loadOptions = async inputValue => {
	    const api = new ApiClient();
	    const optionRecords = await api.searchRecords({
	      resourceId,
	      query: inputValue
	    });
	    return optionRecords.map(optionRecord => ({
	      value: optionRecord.id,
	      label: optionRecord.title,
	      record: optionRecord
	    }));
	  };

	  const error = record === null || record === void 0 ? void 0 : record.errors[property.path];
	  const selectedId = record === null || record === void 0 ? void 0 : record.params[property.path];
	  const [loadedRecord, setLoadedRecord] = React.useState();
	  const [loadingRecord, setLoadingRecord] = React.useState(0);
	  const selectedValue = (record === null || record === void 0 ? void 0 : record.populated[property.path]) ?? loadedRecord;
	  const selectedOption = selectedId && selectedValue ? {
	    value: selectedValue.id,
	    label: selectedValue.title
	  } : {
	    value: '',
	    label: ''
	  };
	  const styles = DesignSystem.selectStyles(theme);
	  React.useEffect(() => {
	    if (!selectedValue && selectedId) {
	      setLoadingRecord(c => c + 1);
	      const api = new ApiClient();
	      api.recordAction({
	        actionName: 'show',
	        resourceId,
	        recordId: selectedId
	      }).then(({
	        data
	      }) => {
	        setLoadedRecord(data.record);
	      }).finally(() => {
	        setLoadingRecord(c => c - 1);
	      });
	    }
	  }, [selectedValue, selectedId, resourceId]);
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: Boolean(error)
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(Select__default$1['default'], _extends_1({
	    cacheOptions: true,
	    value: selectedOption,
	    styles: styles,
	    defaultOptions: true,
	    loadOptions: loadOptions,
	    onChange: handleChange,
	    isClearable: true,
	    isDisabled: property.isDisabled,
	    isLoading: loadingRecord
	  }, property.props)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error === null || error === void 0 ? void 0 : error.message));
	};

	var edit$4 = styled.withTheme(Edit$6);

	const StyledLink = styled__default['default'](reactRouterDom.Link).withConfig({
	  displayName: "reference-value__StyledLink",
	  componentId: "sc-1ujousf-0"
	})(["", ";padding-left:", ";padding-right:", ";"], DesignSystem.ButtonCSS, ({
	  theme
	}) => theme.space.xs, ({
	  theme
	}) => theme.space.xs);

	const ReferenceValue = props => {
	  const {
	    property,
	    record
	  } = props;
	  const h = new ViewHelpers();
	  const refId = record.params[property.path];
	  const populated = record.populated[property.path];
	  const value = populated && populated.title || refId;

	  if (!property.reference) {
	    throw new Error(`property: "${property.path}" does not have a reference`);
	  }

	  if (populated && populated.recordActions.find(a => a.name === 'show')) {
	    const href = h.recordActionUrl({
	      resourceId: property.reference,
	      recordId: refId,
	      actionName: 'show'
	    });
	    return /*#__PURE__*/React__default['default'].createElement(StyledLink, {
	      variant: "text",
	      to: href
	    }, value);
	  }

	  return /*#__PURE__*/React__default['default'].createElement("span", null, value);
	};

	class Show$6 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, /*#__PURE__*/React__default['default'].createElement(ReferenceValue, {
	      property: property,
	      record: record
	    }));
	  }

	}

	class List$6 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    return /*#__PURE__*/React__default['default'].createElement(ReferenceValue, {
	      property: property,
	      record: record
	    });
	  }

	}

	class Filter$4 extends React__default['default'].PureComponent {
	  constructor(props) {
	    super(props);
	    this.api = new ApiClient();
	    this.options = [];
	    this.loadOptions = this.loadOptions.bind(this);
	    this.handleChange = this.handleChange.bind(this);
	  }

	  handleChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.path, selected ? selected.value : '');
	  }

	  async loadOptions(inputValue) {
	    const {
	      property
	    } = this.props;
	    const records = await this.api.searchRecords({
	      resourceId: property.reference,
	      query: inputValue
	    });
	    this.options = records.map(r => ({
	      value: r.id,
	      label: r.title
	    }));
	    return this.options;
	  }

	  render() {
	    const {
	      property,
	      filter,
	      theme
	    } = this.props;
	    const value = typeof filter[property.path] === 'undefined' ? '' : filter[property.path];
	    const selected = (this.options || []).find(o => o.value === value);
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Label, null, property.label), /*#__PURE__*/React__default['default'].createElement(Select__default$1['default'], {
	      value: typeof selected === 'undefined' ? '' : selected,
	      isClearable: true,
	      cacheOptions: true,
	      styles: DesignSystem.filterStyles(theme),
	      loadOptions: this.loadOptions,
	      onChange: this.handleChange,
	      defaultOptions: true
	    }));
	  }

	}

	var filter$2 = styled.withTheme(Filter$4);

	var reference = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: edit$4,
		show: Show$6,
		list: List$6,
		filter: filter$2
	});

	class Show$7 extends React__default['default'].PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params[property.path] || '';
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.ValueGroup, {
	      label: property.label
	    }, value.split(/(?:\r\n|\r|\n)/g).map((line, i) =>
	    /*#__PURE__*/
	    // eslint-disable-next-line react/no-array-index-key
	    React__default['default'].createElement(React__default['default'].Fragment, {
	      key: i
	    }, line, /*#__PURE__*/React__default['default'].createElement("br", null))));
	  }

	}

	const Edit$7 = props => {
	  var _record$params, _record$errors;

	  const {
	    onChange,
	    property,
	    record
	  } = props;
	  const propValue = ((_record$params = record.params) === null || _record$params === void 0 ? void 0 : _record$params[property.path]) ?? '';
	  const [value, setValue] = React.useState(propValue);
	  const error = (_record$errors = record.errors) === null || _record$errors === void 0 ? void 0 : _record$errors[property.path];
	  React.useEffect(() => {
	    if (value !== propValue) {
	      setValue(propValue);
	    }
	  }, [propValue]);
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: Boolean(error)
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Input, _extends_1({
	    as: "textarea",
	    rows: (value.match(/\n/g) || []).length + 1,
	    id: property.path,
	    name: property.path,
	    onChange: e => setValue(e.target.value),
	    onBlur: () => onChange(property.path, value),
	    value: value,
	    disabled: property.isDisabled
	  }, property.props)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	var edit$5 = /*#__PURE__*/React.memo(Edit$7, recordPropertyIsEqual);

	var textarea = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show$7,
		edit: edit$5
	});

	const Edit$8 = props => {
	  const {
	    property,
	    record,
	    onChange
	  } = props;
	  const propValue = record.params[property.path];
	  const [value, setValue] = React.useState(propValue);
	  const error = record.errors && record.errors[property.path];
	  const [isInput, setIsInput] = React.useState(false);
	  React.useEffect(() => {
	    if (value !== propValue) {
	      setValue(propValue);
	    }
	  }, [propValue]);
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormGroup, {
	    error: !!error
	  }, /*#__PURE__*/React__default['default'].createElement(PropertyLabel, {
	    property: property
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.InputGroup, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Input, _extends_1({
	    type: isInput ? 'input' : 'password',
	    className: "input",
	    id: property.path,
	    name: property.path,
	    onChange: event => setValue(event.target.value),
	    onBlur: () => onChange(property.path, value),
	    onKeyDown: e => e.keyCode === 13 && onChange(property.path, value),
	    value: value ?? '',
	    disabled: property.isDisabled
	  }, property.props)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: isInput ? 'primary' : 'text',
	    type: "button",
	    size: "icon",
	    onClick: () => setIsInput(!isInput)
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "View"
	  }))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.FormMessage, null, error && error.message));
	};

	var edit$6 = /*#__PURE__*/React.memo(Edit$8, recordPropertyIsEqual);

	/* eslint-disable import/prefer-default-export */

	var password = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: edit$6
	});

	let globalAny$2 = {};

	try {
	  globalAny$2 = window;
	} catch (error) {
	  if (error.message !== 'window is not defined') {
	    throw error;
	  }
	}

	const types = {
	  textarea,
	  boolean,
	  datetime,
	  reference,
	  password,
	  date: datetime,
	  richtext,
	  string: defaultType,
	  number: defaultType,
	  float: defaultType,
	  mixed: null
	};
	/**
	 * @load ./base-property-component.doc.md
	 * @component
	 * @name BasePropertyComponent
	 * @subcategory Application
	 * @class
	 * @hideconstructor
	 */

	const BasePropertyComponent = props => {
	  const {
	    property: baseProperty,
	    resource,
	    record,
	    filter,
	    where,
	    onChange
	  } = props;
	  const property = React.useMemo(() => ({ ...baseProperty,
	    // we fill the path if it is not there. That is why all the actual Component Renderers are
	    // called with the path set to this root path. Next mixed and array components adds to this
	    // path either index (for array) or subProperty name.
	    path: baseProperty.path || baseProperty.propertyPath
	  }), [baseProperty]);
	  const testId = `property-${where}-${property.path}`;
	  let Component = types[property.type] && types[property.type][where] || defaultType[where];

	  if (property.components && property.components[where]) {
	    const component = property.components[where];

	    if (!component) {
	      throw new Error(`there is no "${property.path}.components.${where}"`);
	    }

	    Component = globalAny$2.AdminJS.UserComponents[component];
	    return /*#__PURE__*/React__default['default'].createElement(ErrorBoundary, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	      "data-testid": testId
	    }, /*#__PURE__*/React__default['default'].createElement(Component, {
	      property: property,
	      resource: resource,
	      record: record,
	      filter: filter,
	      onChange: onChange,
	      where: where
	    })));
	  }

	  const Array = ArrayType[where];
	  const Mixed = MixedType[where];

	  if (baseProperty.isArray) {
	    if (!Array) {
	      return /*#__PURE__*/React__default['default'].createElement("div", null);
	    }

	    return /*#__PURE__*/React__default['default'].createElement(Array, _extends_1({}, props, {
	      property: property,
	      ItemComponent: BasePropertyComponent,
	      testId: testId
	    }));
	  }

	  if (baseProperty.type === 'mixed') {
	    if (!Mixed) {
	      return /*#__PURE__*/React__default['default'].createElement("div", null);
	    }

	    return /*#__PURE__*/React__default['default'].createElement(Mixed, _extends_1({}, props, {
	      property: property,
	      ItemComponent: BasePropertyComponent,
	      testId: testId
	    }));
	  }

	  return /*#__PURE__*/React__default['default'].createElement(ErrorBoundary, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    "data-testid": testId
	  }, /*#__PURE__*/React__default['default'].createElement(Component, {
	    property: property,
	    resource: resource,
	    record: record,
	    filter: filter,
	    onChange: onChange,
	    where: where
	  })));
	};

	function camelizePropertyType(type) {
	  return {
	    Edit: type.edit,
	    Show: type.show,
	    List: type.list,
	    Filter: type.filter
	  };
	}

	const BasePropertyComponentExtended = Object.assign(BasePropertyComponent, {
	  DefaultType: camelizePropertyType(defaultType),
	  Boolean: camelizePropertyType(boolean),
	  DateTime: camelizePropertyType(datetime),
	  RichText: camelizePropertyType(richtext),
	  Reference: camelizePropertyType(reference),
	  TextArea: camelizePropertyType(textarea),
	  Password: camelizePropertyType(password)
	});

	const BreadcrumbLink = styled__default['default'](reactRouterDom.Link).withConfig({
	  displayName: "breadcrumbs__BreadcrumbLink",
	  componentId: "tbb6y0-0"
	})(["color:", ";font-family:", ";line-height:", ";font-size:", ";text-decoration:none;&:hover{color:", ";}&:after{content:'/';padding:0 ", ";}&:last-child{&:after{content:'';}}"], ({
	  theme
	}) => theme.colors.grey40, ({
	  theme
	}) => theme.font, ({
	  theme
	}) => theme.lineHeights.default, ({
	  theme
	}) => theme.fontSizes.default, ({
	  theme
	}) => theme.colors.primary100, ({
	  theme
	}) => theme.space.default);
	/**
	 * @memberof Breadcrumbs
	 */

	/**
	 * @component
	 * @private
	 */
	const Breadcrumbs = props => {
	  const {
	    resource,
	    record,
	    actionName
	  } = props;
	  const action = resource.actions.find(a => a.name === actionName);
	  const h = new ViewHelpers();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexGrow: 1,
	    className: DesignSystem.cssClass('Breadcrumbs')
	  }, /*#__PURE__*/React__default['default'].createElement(BreadcrumbLink, {
	    to: h.dashboardUrl()
	  }, "Dashboard"), /*#__PURE__*/React__default['default'].createElement(BreadcrumbLink, {
	    to: resource.href ? resource.href : '/',
	    className: record ? 'is-active' : ''
	  }, resource.name), action && action.name !== 'list' && /*#__PURE__*/React__default['default'].createElement(BreadcrumbLink, {
	    to: "#"
	  }, action.label));
	};

	const actionsToButtonGroup = options => {
	  const {
	    actions,
	    params,
	    handleClick
	  } = options;
	  const buttons = actions.map(action => {
	    const href = actionHref(action, params);
	    return {
	      icon: action.icon,
	      label: action.label,
	      variant: action.variant,
	      source: action,
	      href: href || undefined,
	      // when href is not defined - handle click should also be not defined
	      // This prevents from "cursor: pointer;"
	      onClick: href ? handleClick : undefined,
	      'data-testid': buildActionTestId(action),
	      buttons: []
	    };
	  }); // nesting buttons

	  const buttonsMap = buttons.reduce((memo, button) => {
	    const action = button.source;

	    if (action.parent) {
	      const parent = memo[action.parent] || buttons.find(btn => btn.source.name === action.parent) || {
	        label: action.parent
	      };
	      parent.buttons = parent.buttons || [];
	      parent.buttons.push(button);
	      return { ...memo,
	        [action.parent]: parent
	      };
	    }

	    return { ...memo,
	      [button.source.name]: button
	    };
	  }, {});
	  return Object.values(buttonsMap);
	};

	const StyledLink$1 = styled__default['default'](({
	  rounded,
	  ...rest
	}) => /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Link, rest)).withConfig({
	  displayName: "styled-back-button__StyledLink",
	  componentId: "pn0p1u-0"
	})(["", ""], DesignSystem.ButtonCSS);
	const h$3 = new ViewHelpers();
	const StyledBackButton = props => {
	  const {
	    resourceId,
	    showInDrawer
	  } = props;
	  const location = reactRouterDom.useLocation();
	  const cssCloseIcon = showInDrawer ? 'ChevronRight' : 'ChevronLeft';
	  const {
	    previousPage
	  } = location.state || {};
	  const previousPageUrl = previousPage ? new URL(previousPage) : null;
	  const backButtonUrl = previousPageUrl ? previousPageUrl.pathname + previousPageUrl.search : h$3.resourceUrl({
	    resourceId,
	    search: window.location.search
	  });
	  return /*#__PURE__*/React__default['default'].createElement(StyledLink$1, {
	    size: "icon",
	    to: backButtonUrl,
	    rounded: true,
	    mr: "lg",
	    type: "button"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: cssCloseIcon
	  }));
	};

	/* eslint-disable jsx-a11y/anchor-is-valid */
	/**
	 * Header of an action. It renders Action name with buttons for all the actions.
	 *
	 * ### Usage
	 *
	 * ```
	 * import { ActionHeader } from 'adminjs'
	 * ```
	 *
	 * @component
	 * @subcategory Application
	 */

	const ActionHeader = props => {
	  const {
	    resource,
	    toggleFilter,
	    actionPerformed,
	    record,
	    action,
	    tag,
	    omitActions
	  } = props;
	  const {
	    translateButton
	  } = useTranslation();
	  const history = reactRouter.useHistory();
	  const actionResponseHandler = useActionResponseHandler(actionPerformed);

	  if (action.hideActionHeader) {
	    return null;
	  }

	  const resourceId = resource.id;
	  const params = {
	    resourceId,
	    recordId: record === null || record === void 0 ? void 0 : record.id
	  };

	  const handleActionClick = (event, sourceAction) => buildActionClickHandler({
	    action: sourceAction,
	    params,
	    actionResponseHandler,
	    push: history.push
	  })(event);

	  const actionButtons = actionsToButtonGroup({
	    actions: record ? record.recordActions.filter(ra => !action || action.name !== ra.name) // only new action should be seen in regular "Big" actions place
	    : resource.resourceActions.filter(ra => ra.name === 'new' && (!action || action.name !== ra.name)),
	    params,
	    handleClick: handleActionClick
	  });

	  if (toggleFilter) {
	    actionButtons.push({
	      label: translateButton('filter', resource.id),
	      onClick: toggleFilter,
	      icon: 'SettingsAdjust'
	    });
	  } // list and new actions are special and are are always


	  const customResourceButtons = actionsToButtonGroup({
	    actions: resource.resourceActions.filter(ra => !['list', 'new'].includes(ra.name)),
	    params: {
	      resourceId
	    },
	    handleClick: handleActionClick
	  });
	  const title = action ? action.label : resource.name;
	  const isList = action && action.name === 'list';
	  const listAction = resource.resourceActions.find(ra => ra.name === 'list'); // styled which differs if action header is in the drawer or not

	  const cssIsRootFlex = !action.showInDrawer;
	  const cssHeaderMT = action.showInDrawer ? '' : 'lg';
	  const cssActionsMB = action.showInDrawer ? 'xl' : 'default';
	  const CssHComponent = action.showInDrawer ? DesignSystem.H3 : DesignSystem.H2;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    className: DesignSystem.cssClass('ActionHeader')
	  }, action.showInDrawer ? '' : /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flex: true,
	    flexDirection: "row",
	    px: ['default', 0]
	  }, /*#__PURE__*/React__default['default'].createElement(Breadcrumbs, {
	    resource: resource,
	    actionName: action.name,
	    record: record
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexShrink: 0
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.ButtonGroup, {
	    size: "sm",
	    rounded: true,
	    buttons: customResourceButtons
	  }))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    display: ['block', cssIsRootFlex ? 'flex' : 'block']
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    mt: cssHeaderMT,
	    flexGrow: 1,
	    px: ['default', 0]
	  }, /*#__PURE__*/React__default['default'].createElement(CssHComponent, {
	    mb: "lg"
	  }, !isList && listAction ? /*#__PURE__*/React__default['default'].createElement(StyledBackButton, {
	    resourceId: resourceId,
	    showInDrawer: action.showInDrawer
	  }) : '', title, tag ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Badge, {
	    variant: "primary",
	    ml: "default"
	  }, tag) : '')), omitActions ? '' : /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    mt: "xl",
	    mb: cssActionsMB,
	    flexShrink: 0
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.ButtonGroup, {
	    buttons: actionButtons
	  }))));
	};

	const LayoutElementRenderer = props => {
	  const {
	    layoutElement,
	    resource,
	    where,
	    record,
	    onChange
	  } = props;
	  const {
	    props: layoutProps,
	    properties: propertyNames,
	    layoutElements: innerLayoutElements,
	    component
	  } = layoutElement;
	  const {
	    children,
	    ...other
	  } = layoutProps;
	  const properties = propertyNames.map(name => resource.properties[name]);
	  const Component = DesignSystem__namespace[component];

	  if (!Component) {
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	      size: "sm",
	      message: "Javascript Error",
	      variant: "danger",
	      py: "xl"
	    }, "There is no component by the name of", /*#__PURE__*/React__default['default'].createElement(DesignSystem.Badge, {
	      size: "sm",
	      variant: "danger",
	      mx: "default"
	    }, component), "in @adminjs/design-system. Change", /*#__PURE__*/React__default['default'].createElement(DesignSystem.Badge, {
	      size: "sm",
	      variant: "danger",
	      mx: "default"
	    }, `@${component}`), "to available component like @Header");
	  }

	  return /*#__PURE__*/React__default['default'].createElement(Component, other, properties.map(property => /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flexGrow: 1,
	    key: property.propertyPath
	  }, /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    key: property.propertyPath,
	    where: where,
	    property: property,
	    resource: resource,
	    record: record,
	    onChange: onChange
	  }))), innerLayoutElements.map((innerLayoutElement, i) => /*#__PURE__*/React__default['default'].createElement(LayoutElementRenderer, _extends_1({}, props, {
	    // eslint-disable-next-line react/no-array-index-key
	    key: i,
	    layoutElement: innerLayoutElement
	  }))), children);
	};

	const New = props => {
	  const {
	    record: initialRecord,
	    resource,
	    action
	  } = props;
	  const {
	    record,
	    handleChange,
	    submit: handleSubmit,
	    loading,
	    setRecord
	  } = useRecord(initialRecord, resource.id);
	  const {
	    translateButton
	  } = useTranslation();
	  const history = reactRouter.useHistory();
	  React.useEffect(() => {
	    if (initialRecord) {
	      setRecord(initialRecord);
	    }
	  }, [initialRecord]);

	  const submit = event => {
	    event.preventDefault();
	    handleSubmit().then(response => {
	      if (response.data.redirectUrl) {
	        history.push(appendForceRefresh(response.data.redirectUrl), {
	          previousPage: window.location.href
	        });
	      } // if record has id === has been created


	      if (response.data.record.id && !Object.keys(response.data.record.errors).length) {
	        handleChange({
	          params: {},
	          populated: {},
	          errors: {}
	        });
	      }
	    });
	    return false;
	  };

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    as: "form",
	    onSubmit: submit,
	    flex: true,
	    flexGrow: 1,
	    flexDirection: "column"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerContent, null, action !== null && action !== void 0 && action.showInDrawer ? /*#__PURE__*/React__default['default'].createElement(ActionHeader, props) : null, action.layout ? action.layout.map((layoutElement, i) => /*#__PURE__*/React__default['default'].createElement(LayoutElementRenderer // eslint-disable-next-line react/no-array-index-key
	  , _extends_1({
	    key: i,
	    layoutElement: layoutElement
	  }, props, {
	    where: "edit",
	    onChange: handleChange,
	    record: record
	  }))) : resource.editProperties.map(property => /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    key: property.propertyPath,
	    where: "edit",
	    onChange: handleChange,
	    property: property,
	    resource: resource,
	    record: record
	  }))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerFooter, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: "primary",
	    size: "lg",
	    type: "submit",
	    "data-testid": "button-save",
	    disabled: loading
	  }, loading ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Fade",
	    spin: true
	  }) : null, translateButton('save', resource.id))));
	};

	const Edit$9 = props => {
	  const {
	    record: initialRecord,
	    resource,
	    action
	  } = props;
	  const {
	    record,
	    handleChange,
	    submit: handleSubmit,
	    loading,
	    setRecord
	  } = useRecord(initialRecord, resource.id);
	  const {
	    translateButton
	  } = useTranslation();
	  const history = reactRouter.useHistory();
	  React.useEffect(() => {
	    if (initialRecord) {
	      setRecord(initialRecord);
	    }
	  }, [initialRecord]);

	  const submit = event => {
	    event.preventDefault();
	    handleSubmit().then(response => {
	      if (response.data.redirectUrl) {
	        history.push(appendForceRefresh(response.data.redirectUrl), {
	          previousPage: window.location.href
	        });
	      }
	    });
	    return false;
	  };

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    as: "form",
	    onSubmit: submit,
	    flex: true,
	    flexGrow: 1,
	    flexDirection: "column"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerContent, null, action !== null && action !== void 0 && action.showInDrawer ? /*#__PURE__*/React__default['default'].createElement(ActionHeader, props) : null, action.layout ? action.layout.map((layoutElement, i) => /*#__PURE__*/React__default['default'].createElement(LayoutElementRenderer // eslint-disable-next-line react/no-array-index-key
	  , _extends_1({
	    key: i,
	    layoutElement: layoutElement
	  }, props, {
	    where: "edit",
	    onChange: handleChange,
	    record: record
	  }))) : resource.editProperties.map(property => /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    key: property.propertyPath,
	    where: "edit",
	    onChange: handleChange,
	    property: property,
	    resource: resource,
	    record: record
	  }))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerFooter, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: "primary",
	    size: "lg",
	    type: "submit",
	    "data-testid": "button-save",
	    disabled: loading
	  }, loading ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Fade",
	    spin: true
	  }) : null, translateButton('save', resource.id))));
	};

	/**
	 * @name ShowAction
	 * @category Actions
	 * @description Shows a given record.
	 * @component
	 * @private
	 */

	const Show$8 = props => {
	  const {
	    resource,
	    record,
	    action
	  } = props;
	  const properties = resource.showProperties;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerContent, null, action !== null && action !== void 0 && action.showInDrawer ? /*#__PURE__*/React__default['default'].createElement(ActionHeader, props) : null, action.layout ? action.layout.map((layoutElement, i) => /*#__PURE__*/React__default['default'].createElement(LayoutElementRenderer // eslint-disable-next-line react/no-array-index-key
	  , _extends_1({
	    key: i,
	    layoutElement: layoutElement
	  }, props, {
	    where: "show"
	  }))) : properties.map(property => /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    key: property.propertyPath,
	    where: "show",
	    property: property,
	    resource: resource,
	    record: record
	  })));
	};

	const display = isTitle => [isTitle ? 'table-cell' : 'none', isTitle ? 'table-cell' : 'none', 'table-cell', 'table-cell'];

	const RecordInList = props => {
	  const {
	    resource,
	    record: recordFromProps,
	    actionPerformed,
	    isLoading,
	    onSelect,
	    isSelected
	  } = props;
	  const [record, setRecord] = React.useState(recordFromProps);
	  const history = reactRouterDom.useHistory();
	  const handleActionCallback = React.useCallback(actionResponse => {
	    if (actionResponse.record && !actionResponse.redirectUrl) {
	      setRecord(mergeRecordResponse(record, actionResponse));
	    } else if (actionPerformed) {
	      actionPerformed(actionResponse);
	    }
	  }, [actionPerformed, record]);
	  const actionResponseHandler = useActionResponseHandler(handleActionCallback);
	  React.useEffect(() => {
	    setRecord(recordFromProps);
	  }, [recordFromProps]);
	  const {
	    recordActions
	  } = record;
	  const show = record.recordActions.find(({
	    name
	  }) => name === 'show');
	  const edit = record.recordActions.find(({
	    name
	  }) => name === 'edit');
	  const action = show || edit;

	  const handleClick = event => {
	    const targetTagName = event.target.tagName.toLowerCase();

	    if (action && targetTagName !== 'a' && targetTagName !== 'button' && targetTagName !== 'svg') {
	      buildActionClickHandler({
	        action,
	        params: {
	          resourceId: resource.id,
	          recordId: record.id
	        },
	        actionResponseHandler,
	        push: history.push
	      })(event);
	    }
	  };

	  const actionParams = {
	    resourceId: resource.id,
	    recordId: record.id
	  };

	  const handleActionClick = (event, sourceAction) => buildActionClickHandler({
	    action: sourceAction,
	    params: actionParams,
	    actionResponseHandler,
	    push: history.push
	  })(event);

	  const buttons = [{
	    icon: 'OverflowMenuHorizontal',
	    variant: 'light',
	    label: undefined,
	    'data-testid': 'actions-dropdown',
	    buttons: actionsToButtonGroup({
	      actions: recordActions,
	      params: actionParams,
	      handleClick: handleActionClick
	    })
	  }];
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableRow, {
	    onClick: handleClick,
	    "data-id": record.id
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, {
	    className: isSelected ? 'selected' : 'not-selected'
	  }, onSelect && record.bulkActions.length ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.CheckBox, {
	    onChange: () => onSelect(record),
	    checked: isSelected
	  }) : null), resource.listProperties.map(property => /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, {
	    style: {
	      cursor: 'pointer'
	    },
	    key: property.propertyPath,
	    "data-property-name": property.propertyPath,
	    display: display(property.isTitle)
	  }, isLoading ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Placeholder, {
	    style: {
	      height: 14
	    }
	  }) : /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    key: property.propertyPath,
	    where: "list",
	    property: property,
	    resource: resource,
	    record: record
	  }))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, {
	    key: "options"
	  }, recordActions.length ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.ButtonGroup, {
	    buttons: buttons
	  }) : ''));
	};

	class SortLink extends React__default['default'].PureComponent {
	  constructor(props) {
	    super(props);
	    this.isActive = this.isActive.bind(this);
	  }

	  isActive() {
	    const {
	      sortBy,
	      property
	    } = this.props;
	    return sortBy === property.propertyPath;
	  }

	  render() {
	    const {
	      property,
	      location,
	      direction
	    } = this.props;
	    const query = new URLSearchParams(location.search);
	    const oppositeDirection = this.isActive() && direction === 'asc' ? 'desc' : 'asc';
	    const sortedByIcon = `Caret${direction === 'asc' ? 'Up' : 'Down'}`;
	    query.set('direction', oppositeDirection);
	    query.set('sortBy', property.propertyPath);
	    return /*#__PURE__*/React__default['default'].createElement(reactRouterDom.NavLink, {
	      to: {
	        search: query.toString()
	      },
	      className: DesignSystem.cssClass('SortLink')
	    }, property.label, this.isActive() ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	      icon: sortedByIcon,
	      color: "primary100",
	      ml: "default"
	    }) : '');
	  }

	}

	var SortLink$1 = reactRouterDom.withRouter(SortLink);

	const PropertyHeader = props => {
	  const {
	    property,
	    titleProperty,
	    display
	  } = props;
	  const isMain = property.propertyPath === titleProperty.propertyPath;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, {
	    className: isMain ? 'main' : undefined,
	    display: display
	  }, property.isSortable ? /*#__PURE__*/React__default['default'].createElement(SortLink$1, props) : property.label);
	};

	/**
	 * @memberof RecordsTableHeader
	 * @alias RecordsTableHeaderProps
	 */

	/**
	 * Prints `thead` section for table with records.
	 *
	 * ```
	 * import { RecordsTableHeader } from 'adminjs'
	 * ```
	 *
	 * @component
	 * @subcategory Application
	 * @example <caption>List with 2 properties</caption>
	 * const properties = [{
	 *   label: 'First Name',
	 *   name: 'firstName',
	 *   isSortable: true,
	 * }, {
	 *   label: 'Last Name',
	 *   name: 'lastName',
	 * }]
	 * return (
	 * <Box py="xl">
	 *   <Table>
	 *    <RecordsTableHeader
	 *      properties={properties}
	 *      titleProperty={properties[0]}
	 *      sortBy={'firstName'}
	 *      direction={'asc'}
	 *    />
	 *    <TableBody>
	 *      <TableRow>
	 *        <TableCell>John</TableCell>
	 *        <TableCell>Doe</TableCell>
	 *        <TableCell></TableCell>
	 *      </TableRow>
	 *      <TableRow>
	 *        <TableCell>Max</TableCell>
	 *        <TableCell>Kodaly</TableCell>
	 *        <TableCell></TableCell>
	 *      </TableRow>
	 *    </TableBody>
	 *   </Table>
	 * </Box>
	 * )
	 */
	const RecordsTableHeader = props => {
	  const {
	    titleProperty,
	    properties,
	    sortBy,
	    direction,
	    onSelectAll,
	    selectedAll
	  } = props;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableHead, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableRow, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, null, onSelectAll ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.CheckBox, {
	    style: {
	      marginLeft: 5
	    },
	    onChange: () => onSelectAll(),
	    checked: selectedAll
	  }) : null), properties.map(property => /*#__PURE__*/React__default['default'].createElement(PropertyHeader, {
	    display: display(property.isTitle),
	    key: property.propertyPath,
	    titleProperty: titleProperty,
	    property: property,
	    sortBy: sortBy,
	    direction: direction
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, {
	    key: "actions",
	    style: {
	      width: 80
	    }
	  })));
	};

	/* eslint-disable no-undef */
	/**
	 * @alias ActionButtonProps
	 * @memberof ActionButton
	 */

	/**
	 * Renders Button which redirects to given action
	 *
	 * ### Usage
	 *
	 * ```
	 * import { ActionButton } from 'adminjs'
	 * ```
	 *
	 * @component
	 * @subcategory Application
	 */
	const ActionButton = props => {
	  const {
	    children,
	    action,
	    actionPerformed,
	    resourceId,
	    recordId,
	    recordIds
	  } = props;
	  const {
	    href,
	    handleClick
	  } = useAction(action, {
	    resourceId,
	    recordId,
	    recordIds
	  }, actionPerformed);

	  if (!action) {
	    return null;
	  }

	  const firstChild = React__default['default'].Children.toArray(children)[0];

	  if (!firstChild || typeof firstChild === 'string' || typeof firstChild === 'number' || typeof firstChild === 'boolean') {
	    throw new Error('ActionButton has to have one child');
	  }

	  const WrappedElement = /*#__PURE__*/React__default['default'].cloneElement(firstChild, {
	    onClick: handleClick,
	    'data-testid': buildActionTestId(action),
	    href
	  });
	  return WrappedElement;
	}; // TODO - remove this hack

	const NoRecordsOriginal = props => {
	  const {
	    resource
	  } = props;
	  const {
	    translateButton,
	    translateMessage
	  } = useTranslation();
	  const canCreate = resource.resourceActions.find(a => a.name === 'new');
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.InfoBox, {
	    title: translateMessage('noRecords', resource.id)
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    mb: "xxl"
	  }, translateMessage('noRecordsInResource', resource.id)), canCreate ? /*#__PURE__*/React__default['default'].createElement(ActionButton, {
	    action: canCreate,
	    resourceId: resource.id
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: "primary"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Add"
	  }), translateButton('createFirstRecord', resource.id))) : '');
	}; // This hack prevents rollup from throwing an error


	const NoRecords = allowOverride(NoRecordsOriginal, 'NoRecords');

	const getBulkActionsFromRecords = records => {
	  const actions = Object.values(records.reduce((memo, record) => ({ ...memo,
	    ...record.bulkActions.reduce((actionsMemo, action) => ({ ...actionsMemo,
	      [action.name]: action
	    }), {})
	  }), {}));
	  return actions;
	};

	const SelectedRecords = props => {
	  const {
	    resource,
	    selectedRecords
	  } = props;
	  const {
	    translateLabel
	  } = useTranslation();
	  const history = reactRouter.useHistory();
	  const actionResponseHandler = useActionResponseHandler();

	  if (!selectedRecords || !selectedRecords.length) {
	    return null;
	  }

	  const params = {
	    resourceId: resource.id,
	    recordIds: selectedRecords.map(records => records.id)
	  };

	  const handleActionClick = (event, sourceAction) => buildActionClickHandler({
	    action: sourceAction,
	    params,
	    actionResponseHandler,
	    push: history.push
	  })(event);

	  const bulkButtons = actionsToButtonGroup({
	    actions: getBulkActionsFromRecords(selectedRecords),
	    params,
	    handleClick: handleActionClick
	  });
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCaption, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flex: true,
	    py: "sm",
	    alignItems: "center"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Title, {
	    mr: "lg"
	  }, translateLabel('selectedRecords', resource.id, {
	    selected: selectedRecords.length
	  })), /*#__PURE__*/React__default['default'].createElement(DesignSystem.ButtonGroup, {
	    size: "sm",
	    rounded: true,
	    buttons: bulkButtons
	  })));
	};

	/**
	 * @classdesc
	 * Renders an entire records table. To fill the data you might need:
	 *
	 * - {@link useRecords} and
	 * - {@link useSelectedRecords} hooks
	 *
	 * so make sure to see at the documentation pages for both of them
	 *
	 * @component
	 * @class
	 * @hideconstructor
	 * @subcategory Application
	 * @new in version 3.3
	 */
	const RecordsTable = props => {
	  const {
	    resource,
	    records,
	    actionPerformed,
	    sortBy,
	    direction,
	    isLoading,
	    onSelect,
	    selectedRecords,
	    onSelectAll
	  } = props;

	  if (!records.length) {
	    if (isLoading) {
	      return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Loader, null);
	    }

	    return /*#__PURE__*/React__default['default'].createElement(NoRecords, {
	      resource: resource
	    });
	  }

	  const selectedAll = selectedRecords && !!records.find(record => selectedRecords.find(selected => selected.id === record.id));
	  const recordsHaveBulkAction = !!records.find(record => record.bulkActions.length);
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Table, null, /*#__PURE__*/React__default['default'].createElement(SelectedRecords, {
	    resource: resource,
	    selectedRecords: selectedRecords
	  }), /*#__PURE__*/React__default['default'].createElement(RecordsTableHeader, {
	    properties: resource.listProperties,
	    titleProperty: resource.titleProperty,
	    direction: direction,
	    sortBy: sortBy,
	    onSelectAll: recordsHaveBulkAction ? onSelectAll : undefined,
	    selectedAll: selectedAll
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableBody, null, records.map(record => /*#__PURE__*/React__default['default'].createElement(RecordInList, {
	    record: record,
	    resource: resource,
	    key: record.id,
	    actionPerformed: actionPerformed,
	    isLoading: isLoading,
	    onSelect: onSelect,
	    isSelected: selectedRecords && !!selectedRecords.find(selected => selected.id === record.id)
	  }))));
	};

	const List$7 = ({
	  resource,
	  setTag
	}) => {
	  const {
	    records,
	    loading,
	    direction,
	    sortBy,
	    page,
	    total,
	    fetchData,
	    perPage
	  } = useRecords(resource.id);
	  const {
	    selectedRecords,
	    handleSelect,
	    handleSelectAll,
	    setSelectedRecords
	  } = useSelectedRecords(records);
	  const location = reactRouter.useLocation();
	  const history = reactRouter.useHistory();
	  React.useEffect(() => {
	    if (setTag) {
	      setTag(total.toString());
	    }
	  }, [total]);
	  React.useEffect(() => {
	    setSelectedRecords([]);
	  }, [resource.id]);
	  React.useEffect(() => {
	    const search = new URLSearchParams(location.search);

	    if (search.get(REFRESH_KEY)) {
	      setSelectedRecords([]);
	    }
	  }, [location.search]);

	  const handleActionPerformed = () => fetchData();

	  const handlePaginationChange = pageNumber => {
	    const search = new URLSearchParams(location.search);
	    search.set('page', pageNumber.toString());
	    history.push({
	      search: search.toString(),
	      state: {
	        previousPage: window.location.href
	      }
	    });
	  };

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    variant: "white"
	  }, /*#__PURE__*/React__default['default'].createElement(RecordsTable, {
	    resource: resource,
	    records: records,
	    actionPerformed: handleActionPerformed,
	    onSelect: handleSelect,
	    onSelectAll: handleSelectAll,
	    selectedRecords: selectedRecords,
	    direction: direction,
	    sortBy: sortBy,
	    isLoading: loading
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, {
	    mt: "xl",
	    textAlign: "center"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Pagination, {
	    page: page,
	    perPage: perPage,
	    total: total,
	    onChange: handlePaginationChange
	  })));
	};

	/* eslint-disable @typescript-eslint/explicit-function-return-type */
	/**
	 * NoticeMessage which can be presented as a "Toast" message.
	 * @alias NoticeMessage
	 * @memberof withNotice
	 */

	const mapDispatchToProps$1 = dispatch => ({
	  addNotice: notice => dispatch(addNotice(notice))
	});
	/**
	 * Higher Order Component which allows you to post notice messages from your components
	 *
	 * It gives you the additional prop: `addNotice(noticeMessage)` taking {@link NoticeMessage}.
	 *
	 * ```javascript
	 * import { withNotice } from 'adminjs/core'
	 *
	 * const MY_MESSAGE = {
	 *   message: 'I am toast message',
	 *   type: 'success',
	 * }
	 * const MyCustomComponent = ({ addNotice }) => {
	 *   return (
	 *     <a onClick={() => addNotice(MY_MESSAGE)}>Click Me</a>
	 *   )
	 * }
	 * export default withNotice(MyCustomComponent)
	 * ```
	 *
	 * @component
	 * @subcategory HOC
	 */


	const withNotice = Component => reactRedux.connect(null, mapDispatchToProps$1)(Component);

	/**
	 * @name ShowAction
	 * @category Actions
	 * @description Shows a given record.
	 * @component
	 * @private
	 */

	const BulkDelete = props => {
	  const {
	    resource,
	    records,
	    action,
	    addNotice,
	    history
	  } = props;
	  const [loading, setLoading] = React.useState(false);
	  const {
	    translateMessage,
	    translateButton
	  } = useTranslation();

	  if (!records) {
	    return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('pickSomeFirstToRemove', resource.id));
	  }

	  const handleClick = () => {
	    const api = new ApiClient();
	    setLoading(true);
	    const recordIds = records.map(r => r.id);
	    api.bulkAction({
	      resourceId: resource.id,
	      actionName: action.name,
	      recordIds,
	      method: 'post'
	    }).then(response => {
	      setLoading(false);

	      if (response.data.notice) {
	        addNotice(response.data.notice);
	      }

	      if (response.data.redirectUrl) {
	        const search = new URLSearchParams(window.location.search); // bulk function have recordIds in the URL so it has to be stripped before redirect

	        search.delete('recordIds');
	        history.push(appendForceRefresh(response.data.redirectUrl, search.toString()), {
	          previousPage: window.location.href
	        });
	      }
	    }).catch(error => {
	      setLoading(false);
	      addNotice({
	        message: translateMessage('bulkDeleteError', resource.id),
	        type: 'error'
	      });
	      throw error;
	    });
	  };

	  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerContent, null, action !== null && action !== void 0 && action.showInDrawer ? /*#__PURE__*/React__default['default'].createElement(ActionHeader, _extends_1({
	    omitActions: true
	  }, props)) : null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    mb: "xxl",
	    variant: "danger",
	    message: translateMessage('theseRecordsWillBeRemoved', resource.id, {
	      count: records.length
	    })
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Table, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableBody, null, records.map(record => /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableRow, {
	    key: record.id
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.TableCell, null, /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    where: "list",
	    property: resource.titleProperty,
	    resource: resource,
	    record: record
	  }))))))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerFooter, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: "primary",
	    size: "lg",
	    onClick: handleClick,
	    disabled: loading
	  }, loading ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "Fade",
	    spin: true
	  }) : null, translateButton('confirmRemovalMany', resource.id, {
	    count: records.length
	  }))));
	};

	const FormattedBulkDelete = withNotice(reactRouter.withRouter(BulkDelete));

	const actions = {
	  new: New,
	  edit: Edit$9,
	  show: Show$8,
	  list: List$7,
	  bulkDelete: FormattedBulkDelete
	};

	const DOCS = 'https://adminjs.co';
	const DEFAULT_PATHS = {
	  rootPath: '/admin',
	  logoutPath: '/admin/logout',
	  loginPath: '/admin/login',
	};

	/**
	 * Component which renders all the default and custom actions for both the Resource and the Record.
	 *
	 * It passes all props down to the actual Action component.
	 *
	 * Example of creating your own actions:
	 * ```
	 * // AdminJS options
	 * const AdminJSOptions = {
	 *   resources: [
	 *      resource,
	 *      options: {
	 *        actions: {
	 *           myNewAction: {
	 *             label: 'amazing action',
	 *             icon: 'Add',
	 *             inVisible: (resource, record) => record.param('email') !== '',
	 *             actionType: 'record',
	 *             component: AdminJS.bundle('./my-new-action'),
	 *             handler: (request, response, data) => {
	 *               return {
	 *                  ...
	 *               }
	 *             }
	 *           }
	 *        }
	 *      }
	 *   ]
	 * }
	 * ```
	 *
	 * ```
	 * // ./my-new-action.jsx
	 * import { Box } from 'adminjs'
	 *
	 * const MyNewAction = (props) => {
	 *   const { resource, action, record } = props
	 *   // do something with the props and render action
	 *   return (
	 *     <Box>Some Action Content</Box>
	 *   )
	 * }
	 * ```
	 *
	 * @component
	 * @name BaseActionComponent
	 * @subcategory Application
	 */
	const BaseActionComponent = props => {
	  const {
	    resource,
	    action,
	    record,
	    records,
	    setTag
	  } = props;
	  const documentationLink = [DOCS, 'BaseAction.html'].join('/');
	  const {
	    translateMessage
	  } = useTranslation();
	  let Action = actions[action.name];

	  if (action.component) {
	    Action = AdminJS.UserComponents[action.component];
	  }

	  if (Action) {
	    return /*#__PURE__*/React__default['default'].createElement(ErrorBoundary, null, /*#__PURE__*/React__default['default'].createElement(Action, {
	      action: action,
	      resource: resource,
	      record: record,
	      records: records,
	      setTag: setTag
	    }));
	  }

	  return Action || /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    variant: "danger"
	  }, translateMessage('noActionComponent'), /*#__PURE__*/React__default['default'].createElement(reactI18next.Trans, {
	    key: "messages.buttons.seeTheDocumentation"
	  }, "See:", /*#__PURE__*/React__default['default'].createElement(DesignSystem.Link, {
	    ml: "default",
	    href: documentationLink
	  }, "the documentation")));
	};

	/**
	 * @memberof ErrorMessageBox
	 * @alias ErrorMessageBoxProps
	 */

	/**
	 * @class
	 * Prints error message
	 *
	 * @component
	 * @private
	 * @example
	 * return (
	 * <ErrorMessageBox title={'Some error'}>
	 *   <p>Text below the title</p>
	 * </ErrorMessageBox>
	 * )
	 */
	const ErrorMessageBox = props => {
	  const {
	    children,
	    title,
	    testId
	  } = props;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    "data-testid": testId,
	    message: title
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, children));
	};

	const NoResourceError = props => {
	  const {
	    resourceId
	  } = props;
	  const {
	    translateMessage
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    message: "404 - PAGE NOT FOUND",
	    "data-testid": "NoResourceError",
	    variant: "info",
	    m: "xxl"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('error404Resource', resourceId, {
	    resourceId
	  })));
	};

	const NoActionError = props => {
	  const {
	    resourceId,
	    actionName
	  } = props;
	  const {
	    translateMessage
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    message: "404 - PAGE NOT FOUND",
	    "data-testid": "NoActionError",
	    variant: "info",
	    m: "xxl"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('error404Action', resourceId, {
	    resourceId,
	    actionName
	  })));
	};

	const NoRecordError = props => {
	  const {
	    resourceId,
	    recordId
	  } = props;
	  const {
	    translateMessage
	  } = useTranslation();
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.MessageBox, {
	    message: "404 - PAGE NOT FOUND",
	    "data-testid": "NoRecordError",
	    variant: "info",
	    m: "xxl"
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Text, null, translateMessage('error404Record', resourceId, {
	    resourceId,
	    recordId
	  })));
	};

	const StyledWrapper = styled__default['default'](DesignSystem.Box).withConfig({
	  displayName: "wrapper__StyledWrapper",
	  componentId: "sc-1jcopgf-0"
	})(["& ", "{background:", ";padding:", ";overflow:visible;}& ", "{background:", ";padding:0 ", " ", ";}"], DesignSystem.DrawerContent, ({
	  theme
	}) => theme.colors.white, ({
	  theme
	}) => theme.space.xxl, DesignSystem.DrawerFooter, ({
	  theme
	}) => theme.colors.white, ({
	  theme
	}) => theme.space.xxl, ({
	  theme
	}) => theme.space.xxl);

	const Wrapper = props => {
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  const {
	    children,
	    variant,
	    color,
	    ...rest
	  } = props;
	  return /*#__PURE__*/React__default['default'].createElement(StyledWrapper, _extends_1({}, rest, {
	    variant: "grey",
	    mx: "auto"
	  }), children);
	};

	/**
	 * @alias DrawerPortalProps
	 * @memberof DrawerPortal
	 */

	const DRAWER_PORTAL_ID = 'drawerPortal';
	/**
	 * Shows all of its children in a Drawer on the right.
	 * Instead of rendering it's own {@link Drawer} component it reuses
	 * the global Drawer via React Portal.
	 *
	 * ### Usage
	 *
	 * ```
	 * import { DrawerPortal } from 'adminjs'
	 * ```
	 *
	 * @component
	 * @subcategory Application
	 */

	const DrawerPortal = ({
	  children,
	  width
	}) => {
	  const [drawerElement, setDrawerElement] = React.useState(window.document.getElementById(DRAWER_PORTAL_ID));

	  if (!drawerElement && window) {
	    const innerWrapper = window.document.createElement('div');
	    const DrawerWrapper = /*#__PURE__*/React__default['default'].createElement(styled.ThemeProvider, {
	      theme: window.THEME
	    }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Drawer, {
	      id: DRAWER_PORTAL_ID,
	      className: "hidden"
	    }));
	    window.document.body.appendChild(innerWrapper);
	    require$$4.render(DrawerWrapper, innerWrapper, () => {
	      setDrawerElement(window.document.getElementById(DRAWER_PORTAL_ID));
	    });
	  }

	  React.useEffect(() => {
	    if (drawerElement) {
	      drawerElement.classList.remove('hidden');

	      if (width) {
	        drawerElement.style.width = Array.isArray(width) ? width[0].toString() : width.toString();
	      }

	      return () => {
	        drawerElement.style.width = DesignSystem.DEFAULT_DRAWER_WIDTH;
	        drawerElement.classList.add('hidden');
	      };
	    }

	    return () => undefined;
	  }, [drawerElement]);

	  if (!drawerElement) {
	    return null;
	  }

	  return /*#__PURE__*/require$$4.createPortal(children, drawerElement);
	};

	const parseQuery = location => {
	  const filter = {};
	  const query = new URLSearchParams(location.search);

	  for (const entry of query.entries()) {
	    const [key, value] = entry;

	    if (key.match('filters.')) {
	      filter[key.replace('filters.', '')] = value;
	    }
	  }

	  return filter;
	};

	const FilterDrawer = props => {
	  const {
	    resource,
	    isVisible,
	    toggleFilter
	  } = props;
	  const properties = resource.filterProperties;
	  const location = reactRouterDom.useLocation();
	  const [filter, setFilter] = React.useState(parseQuery(location));
	  const match = reactRouterDom.useRouteMatch();
	  const history = reactRouterDom.useHistory();
	  const {
	    translateLabel,
	    translateButton
	  } = useTranslation();
	  const initialLoad = React.useRef(true);
	  React.useEffect(() => {
	    if (initialLoad.current) {
	      initialLoad.current = false;
	    } else {
	      setFilter({});
	    }
	  }, [match.params.resourceId]);

	  const handleSubmit = event => {
	    event.preventDefault();
	    const search = new URLSearchParams(window.location.search);
	    Object.keys(filter).forEach(key => {
	      if (filter[key] !== '') {
	        search.set(`filters.${key}`, filter[key]);
	      } else {
	        search.delete(`filters.${key}`);
	      }
	    });
	    search.set('page', '1');
	    history.push(`${history.location.pathname}?${search.toString()}`, {
	      previousPage: window.location.href
	    });
	    return false;
	  };

	  const resetFilter = event => {
	    event.preventDefault();
	    const filteredSearch = new URLSearchParams();
	    const search = new URLSearchParams(window.location.search);

	    for (const key of search.keys()) {
	      if (!key.match('filters.')) {
	        filteredSearch.set(key, search.get(key));
	      }
	    }

	    const query = filteredSearch.toString() === '' ? `?${filteredSearch.toString()}` : '';
	    history.push(history.location.pathname + query, {
	      previousPage: window.location.href
	    });
	    setFilter({});
	  };

	  const handleChange = (propertyName, value) => {
	    if (propertyName.params) {
	      throw new Error('you can not pass RecordJSON to filters');
	    }

	    setFilter({ ...filter,
	      [propertyName]: value
	    });
	  };

	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Drawer, {
	    variant: "filter",
	    isHidden: !isVisible,
	    as: "form",
	    onSubmit: handleSubmit
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerContent, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.H3, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    type: "button",
	    size: "icon",
	    rounded: true,
	    mr: "lg",
	    onClick: () => toggleFilter()
	  }, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Icon, {
	    icon: "ChevronRight",
	    color: "white"
	  })), translateLabel('filters', resource.id)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    my: "x3"
	  }, properties.map(property => /*#__PURE__*/React__default['default'].createElement(BasePropertyComponentExtended, {
	    key: property.propertyPath,
	    where: "filter",
	    onChange: handleChange,
	    property: property,
	    filter: filter,
	    resource: resource
	  })))), /*#__PURE__*/React__default['default'].createElement(DesignSystem.DrawerFooter, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: "primary",
	    size: "lg"
	  }, translateButton('applyChanges', resource.id)), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Button, {
	    variant: "text",
	    size: "lg",
	    onClick: resetFilter,
	    type: "button",
	    color: "white"
	  }, translateButton('resetFilter', resource.id))));
	};

	var AppComponents = /*#__PURE__*/Object.freeze({
		__proto__: null,
		SortLink: SortLink$1,
		NoRecords: NoRecords,
		PropertyHeader: PropertyHeader,
		RecordInList: RecordInList,
		RecordsTableHeader: RecordsTableHeader,
		RecordsTable: RecordsTable,
		SelectedRecords: SelectedRecords,
		SidebarResourceSection: SidebarResourceSection,
		Sidebar: Sidebar,
		ActionButton: ActionButton,
		ActionHeader: ActionHeader,
		BaseActionComponent: BaseActionComponent,
		BreadcrumbLink: BreadcrumbLink,
		Breadcrumbs: Breadcrumbs,
		DashboardHeader: DashboardHeader,
		Dashboard: Dashboard,
		ErrorBoundary: ErrorBoundary,
		DrawerPortal: DrawerPortal,
		NoResourceError: NoResourceError,
		NoActionError: NoActionError,
		NoRecordError: NoRecordError,
		ErrorMessageBox: ErrorMessageBox,
		FilterDrawer: FilterDrawer,
		LoggedIn: OverridableLoggedIn,
		NoticeElement: NoticeElement,
		NoticeBox: ConnectedNoticeBox,
		TopBar: TopBar,
		Version: Version
	});

	const api$3 = new ApiClient();

	const RecordAction = () => {
	  const [record, setRecord] = React.useState();
	  const [loading, setLoading] = React.useState(true);
	  const match = reactRouter.useRouteMatch();
	  const addNotice = useNotice();
	  const {
	    translateMessage
	  } = useTranslation();
	  const {
	    actionName,
	    recordId,
	    resourceId
	  } = match.params;
	  const resource = useResource(resourceId);
	  const action = record && record.recordActions.find(r => r.name === actionName);

	  const fetchRecord = () => {
	    setLoading(true);
	    api$3.recordAction(match.params).then(response => {
	      setLoading(false);

	      if (response.data.notice && response.data.notice.type === 'error') {
	        addNotice(response.data.notice);
	      }

	      setRecord(response.data.record);
	    }).catch(error => {
	      addNotice({
	        message: translateMessage('errorFetchingRecord', resourceId),
	        type: 'error'
	      });
	      throw error;
	    });
	  };

	  React.useEffect(() => {
	    fetchRecord();
	  }, [actionName, recordId, resourceId]);
	  const handleActionPerformed = React.useCallback((oldRecord, response) => {
	    if (response.record) {
	      setRecord(mergeRecordResponse(oldRecord, response));
	    } else {
	      fetchRecord();
	    }
	  }, [fetchRecord]);

	  if (!resource) {
	    return /*#__PURE__*/React__default['default'].createElement(NoResourceError, {
	      resourceId: resourceId
	    });
	  } // When the user visits this route (record action) from a different, than the current one, record.
	  // It renders everything with a new resource. The old record remains until useEffect fetches data
	  // from the API. that is why we have to check if the current record has correct record.id.
	  // Alternative approach would be to setRecord(undefined) before the fetch, but it is async and
	  // we cannot be sure that the component wont be rendered (it will be at least once) with the
	  // wrong data.


	  const hasDifferentRecord = record && record.id && record.id.toString() !== recordId;

	  if (loading || hasDifferentRecord) {
	    const actionFromResource = resource.actions.find(r => r.name === actionName);
	    return actionFromResource !== null && actionFromResource !== void 0 && actionFromResource.showInDrawer ? /*#__PURE__*/React__default['default'].createElement(DrawerPortal, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Loader, null)) : /*#__PURE__*/React__default['default'].createElement(DesignSystem.Loader, null);
	  }

	  if (!action) {
	    return /*#__PURE__*/React__default['default'].createElement(NoActionError, {
	      resourceId: resourceId,
	      actionName: actionName
	    });
	  }

	  if (!record) {
	    return /*#__PURE__*/React__default['default'].createElement(NoRecordError, {
	      resourceId: resourceId,
	      recordId: recordId
	    });
	  }

	  if (action.showInDrawer) {
	    return /*#__PURE__*/React__default['default'].createElement(DrawerPortal, {
	      width: action.containerWidth
	    }, /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	      action: action,
	      resource: resource,
	      record: record
	    }));
	  }

	  return /*#__PURE__*/React__default['default'].createElement(Wrapper, {
	    width: action.containerWidth
	  }, /*#__PURE__*/React__default['default'].createElement(ActionHeader, {
	    resource: resource,
	    action: action,
	    record: record,
	    actionPerformed: response => handleActionPerformed(record, response)
	  }), /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	    action: action,
	    resource: resource,
	    record: record
	  }));
	};

	const ResourceAction = props => {
	  const {
	    resources,
	    match
	  } = props;
	  const {
	    resourceId,
	    actionName
	  } = match.params;
	  const resource = resources.find(r => r.id === resourceId);

	  if (!resource) {
	    return /*#__PURE__*/React__default['default'].createElement(NoResourceError, {
	      resourceId: resourceId
	    });
	  }

	  const action = resource.resourceActions.find(r => r.name === actionName);

	  if (!action) {
	    return /*#__PURE__*/React__default['default'].createElement(NoActionError, {
	      resourceId: resourceId,
	      actionName: actionName
	    });
	  }

	  if (action.showInDrawer) {
	    return /*#__PURE__*/React__default['default'].createElement(DrawerPortal, {
	      width: action.containerWidth
	    }, /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	      action: action,
	      resource: resource
	    }));
	  }

	  return /*#__PURE__*/React__default['default'].createElement(Wrapper, {
	    width: action.containerWidth
	  }, /*#__PURE__*/React__default['default'].createElement(ActionHeader, {
	    resource: resource,
	    action: action
	  }), /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	    action: action,
	    resource: resource
	  }));
	};

	const mapStateToProps$2 = state => ({
	  resources: state.resources
	});

	var ResourceAction$1 = reactRedux.connect(mapStateToProps$2)(ResourceAction);

	const api$4 = new ApiClient();

	const BulkAction = () => {
	  const match = reactRouter.useRouteMatch();
	  const [records, setRecords] = React.useState([]);
	  const [loading, setLoading] = React.useState(false);
	  const {
	    translateMessage
	  } = useTranslation();
	  const addNotice = useNotice();
	  const location = reactRouter.useLocation();
	  const {
	    resourceId,
	    actionName
	  } = match.params;
	  const resource = useResource(resourceId);

	  const fetchRecords = () => {
	    const recordIdsString = new URLSearchParams(location.search).get('recordIds');
	    const recordIds = recordIdsString ? recordIdsString.split(',') : [];
	    setLoading(true);
	    return api$4.bulkAction({
	      resourceId,
	      recordIds,
	      actionName
	    }).then(response => {
	      setLoading(false);
	      setRecords(response.data.records);
	    }).catch(error => {
	      setLoading(false);
	      addNotice({
	        message: translateMessage('errorFetchingRecords', resourceId),
	        type: 'error'
	      });
	      throw error;
	    });
	  };

	  React.useEffect(() => {
	    fetchRecords();
	  }, [match.params.resourceId, match.params.actionName]);

	  if (!resource) {
	    return /*#__PURE__*/React__default['default'].createElement(NoResourceError, {
	      resourceId: resourceId
	    });
	  }

	  if (!records && !loading) {
	    return /*#__PURE__*/React__default['default'].createElement(ErrorMessageBox, {
	      title: "No records"
	    }, /*#__PURE__*/React__default['default'].createElement("p", null, translateMessage('noRecordsSelected', resourceId)));
	  }

	  const action = getBulkActionsFromRecords(records || []).find(r => r.name === actionName);

	  if (loading) {
	    const actionFromResource = resource.actions.find(r => r.name === actionName);
	    return actionFromResource !== null && actionFromResource !== void 0 && actionFromResource.showInDrawer ? /*#__PURE__*/React__default['default'].createElement(DrawerPortal, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Loader, null)) : /*#__PURE__*/React__default['default'].createElement(DesignSystem.Loader, null);
	  }

	  if (!action) {
	    return /*#__PURE__*/React__default['default'].createElement(NoActionError, {
	      resourceId: resourceId,
	      actionName: actionName
	    });
	  }

	  if (action.showInDrawer) {
	    return /*#__PURE__*/React__default['default'].createElement(DrawerPortal, {
	      width: action.containerWidth
	    }, /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	      action: action,
	      resource: resource,
	      records: records
	    }));
	  }

	  return /*#__PURE__*/React__default['default'].createElement(Wrapper, {
	    width: action.containerWidth
	  }, !(action !== null && action !== void 0 && action.showInDrawer) ? /*#__PURE__*/React__default['default'].createElement(ActionHeader, {
	    resource: resource,
	    action: action
	  }) : '', /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	    action: action,
	    resource: resource,
	    records: records
	  }));
	};

	class Page extends React__default['default'].Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isClient: false
	    };
	  }

	  componentDidMount() {
	    this.setState({
	      isClient: true
	    });
	  }

	  render() {
	    const {
	      pages,
	      match
	    } = this.props;
	    const {
	      params
	    } = match;
	    const {
	      pageName
	    } = params;
	    const {
	      isClient
	    } = this.state;
	    const currentPage = pages.find(page => page.name === pageName);

	    if (!currentPage) {
	      return /*#__PURE__*/React__default['default'].createElement(ErrorMessageBox, {
	        title: "There is no page of given name"
	      }, /*#__PURE__*/React__default['default'].createElement("p", null, "Page:", /*#__PURE__*/React__default['default'].createElement("b", null, ` "${pageName}" `), "does not exist."));
	    }

	    const Component = AdminJS.UserComponents[currentPage.component];

	    if (!Component || !isClient) {
	      return /*#__PURE__*/React__default['default'].createElement(ErrorMessageBox, {
	        title: "No component specified"
	      }, /*#__PURE__*/React__default['default'].createElement("p", null, "You have to specify component which will render this Page"));
	    }

	    return /*#__PURE__*/React__default['default'].createElement(ErrorBoundary, null, /*#__PURE__*/React__default['default'].createElement(Component, null));
	  }

	}

	const mapStateToProps$3 = state => ({
	  pages: state.pages
	});

	var Page$1 = reactRedux.connect(mapStateToProps$3)(Page);

	var queryHasFilter = (queryString => {
	  const query = new URLSearchParams(queryString);

	  for (const key of query.keys()) {
	    if (key.match('filters.')) {
	      return true;
	    }
	  }

	  return false;
	});

	const getAction = resource => {
	  const h = new ViewHelpers();
	  const resourceId = ':resourceId';
	  const actionName = ':actionName';
	  const recordId = ':recordId';
	  const recordActionUrl = h.recordActionUrl({
	    resourceId,
	    recordId,
	    actionName
	  });
	  const resourceActionUrl = h.resourceActionUrl({
	    resourceId,
	    actionName
	  });
	  const bulkActionUrl = h.bulkActionUrl({
	    resourceId,
	    actionName
	  });
	  const resourceActionMatch = reactRouterDom.useRouteMatch(resourceActionUrl);
	  const recordActionMatch = reactRouterDom.useRouteMatch(recordActionUrl);
	  const bulkActionMatch = reactRouterDom.useRouteMatch(bulkActionUrl);
	  const action = (resourceActionMatch === null || resourceActionMatch === void 0 ? void 0 : resourceActionMatch.params.actionName) || (recordActionMatch === null || recordActionMatch === void 0 ? void 0 : recordActionMatch.params.actionName) || (bulkActionMatch === null || bulkActionMatch === void 0 ? void 0 : bulkActionMatch.params.actionName);
	  return action ? resource.actions.find(a => a.name === action) : undefined;
	};

	const ResourceAction$2 = props => {
	  const {
	    resources,
	    match,
	    location
	  } = props;
	  const {
	    resourceId
	  } = match.params;
	  const [filterVisible, setFilerVisible] = React.useState(queryHasFilter(location.search));
	  const [tag, setTag] = React.useState('');
	  const resource = resources.find(r => r.id === resourceId);

	  if (!resource) {
	    return /*#__PURE__*/React__default['default'].createElement(NoResourceError, {
	      resourceId: resourceId
	    });
	  }

	  const realEndAction = getAction(resource);

	  if (realEndAction && !realEndAction.showInDrawer) {
	    return null;
	  }

	  const listActionName = 'list';
	  const listAction = resource.resourceActions.find(r => r.name === listActionName);

	  if (!listAction) {
	    return /*#__PURE__*/React__default['default'].createElement(NoActionError, {
	      resourceId: resourceId,
	      actionName: listActionName
	    });
	  }

	  const toggleFilter = listAction.showFilter ? () => setFilerVisible(!filterVisible) : undefined;
	  return /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    variant: "grey",
	    width: listAction.containerWidth,
	    mx: "auto"
	  }, /*#__PURE__*/React__default['default'].createElement(ActionHeader, {
	    resource: resource,
	    action: listAction,
	    tag: tag,
	    toggleFilter: toggleFilter
	  }), /*#__PURE__*/React__default['default'].createElement(BaseActionComponent, {
	    action: listAction,
	    resource: resource,
	    setTag: setTag
	  }), listAction.showFilter ? /*#__PURE__*/React__default['default'].createElement(FilterDrawer, {
	    resource: resource,
	    isVisible: filterVisible,
	    toggleFilter: () => {
	      setFilerVisible(!filterVisible);
	    }
	  }) : '');
	};

	const mapStateToProps$4 = state => ({
	  resources: state.resources
	});

	var Resource = reactRedux.connect(mapStateToProps$4)(ResourceAction$2);

	/* eslint-disable react/no-children-prop */
	const GlobalStyle = styled.createGlobalStyle`
  html, body, #app {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    color: ${({
  theme
}) => theme.colors.grey100}
  }
`;
	const h$4 = new ViewHelpers();

	const App = () => {
	  const [sidebarVisible, toggleSidebar] = React.useState(false);
	  const location = reactRouter.useLocation();
	  React.useEffect(() => {
	    if (sidebarVisible) {
	      toggleSidebar(false);
	    }
	  }, [location]);
	  const resourceId = ':resourceId';
	  const actionName = ':actionName';
	  const recordId = ':recordId';
	  const pageName = ':pageName';
	  const recordActionUrl = h$4.recordActionUrl({
	    resourceId,
	    recordId,
	    actionName
	  });
	  const resourceActionUrl = h$4.resourceActionUrl({
	    resourceId,
	    actionName
	  });
	  const bulkActionUrl = h$4.bulkActionUrl({
	    resourceId,
	    actionName
	  });
	  const resourceUrl = h$4.resourceUrl({
	    resourceId
	  });
	  const pageUrl = h$4.pageUrl(pageName);
	  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(DesignSystem.Reset, null), /*#__PURE__*/React__default['default'].createElement(GlobalStyle, null), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    height: "100%",
	    flex: true
	  }, sidebarVisible ? /*#__PURE__*/React__default['default'].createElement(DesignSystem.Overlay, {
	    onClick: () => toggleSidebar(!sidebarVisible)
	  }) : null, /*#__PURE__*/React__default['default'].createElement(Sidebar, {
	    isVisible: sidebarVisible
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    flex: true,
	    flexGrow: 1,
	    flexDirection: "column",
	    overflowY: "auto",
	    bg: "bg"
	  }, /*#__PURE__*/React__default['default'].createElement(TopBar, {
	    toggleSidebar: () => toggleSidebar(!sidebarVisible)
	  }), /*#__PURE__*/React__default['default'].createElement(DesignSystem.Box, {
	    position: "absolute",
	    top: 0,
	    zIndex: 2000
	  }, /*#__PURE__*/React__default['default'].createElement(ConnectedNoticeBox, null)), /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Route, {
	    path: h$4.dashboardUrl(),
	    exact: true,
	    component: Dashboard$2
	  }), /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Route, {
	    path: resourceUrl,
	    component: Resource
	  }), /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Route, {
	    path: pageUrl,
	    exact: true,
	    component: Page$1
	  })), /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Route, {
	    path: recordActionUrl,
	    component: RecordAction
	  }), /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Route, {
	    path: resourceActionUrl,
	    component: ResourceAction$1
	  }), /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Route, {
	    path: bulkActionUrl,
	    component: BulkAction
	  })))));
	};

	const ASSETS_INITIALIZE = 'ASSETS_INITIALIZE';

	const BRANDING_INITIALIZE = 'BRANDING_INITIALIZE';

	const DASHBOARD_INITIALIZE = 'DASHBOARD_INITIALIZE';

	const LOCALE_INITIALIZE = 'LOCALE_INITIALIZE';

	const PAGES_INITIALIZE = 'PAGES_INITIALIZE';

	const PATHS_INITIALIZE = 'PATHS_INITIALIZE';

	const RESOURCES_INITIALIZE = 'RESOURCES_INITIALIZE';

	const VERSIONS_INITIALIZE = 'VERSIONS_INITIALIZE';

	/* eslint-disable @typescript-eslint/explicit-function-return-type */

	const resourcesReducer = (state = [], action) => {
	  switch (action.type) {
	    case RESOURCES_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const pagesReducer = (state = [], action) => {
	  switch (action.type) {
	    case PAGES_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const localesReducer = (state = {
	  language: 'en',
	  translations: {}
	}, action) => {
	  switch (action.type) {
	    case LOCALE_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const brandingReducer = (state = {}, action) => {
	  switch (action.type) {
	    case BRANDING_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const assetsReducer = (state = {}, action) => {
	  switch (action.type) {
	    case ASSETS_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const pathsReducer = (state = DEFAULT_PATHS, action) => {
	  switch (action.type) {
	    case PATHS_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const dashboardReducer = (state = {}, action) => {
	  switch (action.type) {
	    case DASHBOARD_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const sessionReducer = (state = null, action) => {
	  switch (action.type) {
	    case SESSION_INITIALIZE:
	      return action.data;

	    default:
	      return state;
	  }
	};

	const versionsReducer = (state = {}, action) => {
	  switch (action.type) {
	    case VERSIONS_INITIALIZE:
	      return {
	        admin: action.data.admin,
	        app: action.data.app
	      };

	    default:
	      return state;
	  }
	};

	const noticesReducer = (state = [], action) => {
	  switch (action.type) {
	    case ADD_NOTICE:
	      {
	        const notices = [action.data];
	        return notices;
	      }

	    case DROP_NOTICE:
	      {
	        return state.filter(notice => notice.id !== action.data.noticeId);
	      }

	    case SET_NOTICE_PROGRESS:
	      {
	        return state.map(notice => ({ ...notice,
	          progress: notice.id === action.data.noticeId ? action.data.progress : notice.progress
	        }));
	      }

	    default:
	      return state;
	  }
	};

	const reducer = redux.combineReducers({
	  resources: resourcesReducer,
	  branding: brandingReducer,
	  assets: assetsReducer,
	  paths: pathsReducer,
	  session: sessionReducer,
	  dashboard: dashboardReducer,
	  notices: noticesReducer,
	  versions: versionsReducer,
	  pages: pagesReducer,
	  locale: localesReducer
	});
	var createStore = ((initialState = {}) => redux.createStore(reducer, initialState));

	const env = {
	  NODE_ENV: "development" 
	};
	const store = createStore(window.REDUX_STATE);
	const theme = window.THEME;
	const {
	  locale
	} = window.REDUX_STATE;
	i18n__default['default'].use(reactI18next.initReactI18next).init({
	  resources: {
	    [locale.language]: {
	      translation: locale.translations
	    }
	  },
	  lng: locale.language,
	  interpolation: {
	    escapeValue: false
	  }
	});
	const Application = /*#__PURE__*/React__default['default'].createElement(reactRedux.Provider, {
	  store: store
	}, /*#__PURE__*/React__default['default'].createElement(styled.ThemeProvider, {
	  theme: theme
	}, /*#__PURE__*/React__default['default'].createElement(reactRouterDom.BrowserRouter, null, /*#__PURE__*/React__default['default'].createElement(App, null)))); // eslint-disable-next-line no-undef

	window.regeneratorRuntime = regenerator;
	var bundleEntry = {
	  withNotice,
	  Application,
	  ViewHelpers,
	  UserComponents: {},
	  ApiClient,
	  BasePropertyComponent: BasePropertyComponentExtended,
	  env,
	  ...AppComponents,
	  ...Hooks,
	  flat,
	  // TODO: remove this from the next release
	  flatten: flat.flatten,
	  unflatten: flat.unflatten
	};

	return bundleEntry;

}(React, ReactRedux, ReactRouterDOM, styled, ReactI18Next, i18n, AdminJSDesignSystem, ReactRouter, axios, flat, Redux, ReactDOM, ReactSelect, ReactSelectAsync));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWJ1bmRsZS5kZXZlbG9wbWVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIi4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzL3ZpZXctaGVscGVycy50cyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCIuLi8uLi9ob2MvYWxsb3ctb3ZlcnJpZGUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc2lkZWJhci9zaWRlYmFyLWJyYW5kaW5nLnRzeCIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UmVkdWNlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5T2YuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWJ1cnJMZXR0ZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvU3RyaW5nLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVidXJyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlXb3Jkcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGVXb3JkLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVdvcmRzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC93b3Jkcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUNvbXBvdW5kZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2xpY2UuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0U2xpY2UuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNVbmljb2RlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlUb0FycmF5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVRvQXJyYXkuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb0FycmF5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ2FzZUZpcnN0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC91cHBlckZpcnN0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdGFydENhc2UuanMiLCIuLi8uLi8uLi91dGlscy90cmFuc2xhdGUtZnVuY3Rpb25zLmZhY3RvcnkudHMiLCIuLi8uLi9ob29rcy91c2UtdHJhbnNsYXRpb24udHMiLCIuLi8uLi9jb21wb25lbnRzL2FwcC9zaWRlYmFyL3NpZGViYXItcGFnZXMudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc2lkZWJhci9zaWRlYmFyLWZvb3Rlci50c3giLCIuLi8uLi91dGlscy9hcGktY2xpZW50LnRzIiwiLi4vLi4vaG9va3MvdXNlLXJlY29yZC9wYXJhbXMtdG8tZm9ybS1kYXRhLnRzIiwiLi4vLi4vc3RvcmUvYWN0aW9ucy9hZGQtbm90aWNlLnRzIiwiLi4vLi4vaG9va3MvdXNlLW5vdGljZS50cyIsIi4uLy4uL2hvb2tzL3VzZS1yZWNvcmQvbWVyZ2UtcmVjb3JkLXJlc3BvbnNlLnRzIiwiLi4vLi4vLi4vdXRpbHMvZmxhdC9jb25zdGFudHMudHMiLCIuLi8uLi8uLi91dGlscy9mbGF0L3Byb3BlcnR5LWtleS1yZWdleC50cyIsIi4uLy4uLy4uL3V0aWxzL2ZsYXQvc2VsZWN0LXBhcmFtcy50cyIsIi4uLy4uLy4uL3V0aWxzL2ZsYXQvZmlsdGVyLW91dC1wYXJhbXMudHMiLCIuLi8uLi8uLi91dGlscy9mbGF0L3BhdGgtdG8tcGFydHMudHMiLCIuLi8uLi8uLi91dGlscy9mbGF0L3NldC50cyIsIi4uLy4uLy4uL3V0aWxzL2ZsYXQvZ2V0LnRzIiwiLi4vLi4vLi4vdXRpbHMvZmxhdC9tZXJnZS50cyIsIi4uLy4uLy4uL3V0aWxzL2ZsYXQvcmVtb3ZlLXBhdGgudHMiLCIuLi8uLi8uLi91dGlscy9mbGF0L2ZsYXQtbW9kdWxlLnRzIiwiLi4vLi4vaG9va3MvdXNlLXJlY29yZC91cGRhdGUtcmVjb3JkLnRzIiwiLi4vLi4vaG9va3MvdXNlLXJlY29yZC9pcy1lbnRpcmUtcmVjb3JkLWdpdmVuLnRzIiwiLi4vLi4vaG9va3MvdXNlLXJlY29yZC9maWx0ZXItcmVjb3JkLnRzIiwiLi4vLi4vaG9va3MvdXNlLXJlY29yZC91c2UtcmVjb3JkLnRzeCIsIi4uLy4uL2ludGVyZmFjZXMvYWN0aW9uL2FjdGlvbi1oYXMtY29tcG9uZW50LnRzIiwiLi4vLi4vaW50ZXJmYWNlcy9hY3Rpb24vYWN0aW9uLWhyZWYudHMiLCIuLi8uLi9pbnRlcmZhY2VzL2FjdGlvbi9jYWxsLWFjdGlvbi1hcGkudHMiLCIuLi8uLi9pbnRlcmZhY2VzL2FjdGlvbi9idWlsZC1hY3Rpb24tYXBpLWNhbGwtdHJpZ2dlci50cyIsIi4uLy4uL2ludGVyZmFjZXMvYWN0aW9uL2J1aWxkLWFjdGlvbi10ZXN0LWlkLnRzIiwiLi4vLi4vaW50ZXJmYWNlcy9hY3Rpb24vYnVpbGQtYWN0aW9uLWNsaWNrLWhhbmRsZXIudHMiLCIuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvdXRpbHMvYXBwZW5kLWZvcmNlLXJlZnJlc2gudHMiLCIuLi8uLi9ob29rcy91c2UtYWN0aW9uL3VzZS1hY3Rpb24tcmVzcG9uc2UtaGFuZGxlci50cyIsIi4uLy4uL2hvb2tzL3VzZS1hY3Rpb24vdXNlLWFjdGlvbi50cyIsIi4uLy4uL3N0b3JlL2FjdGlvbnMvc2V0LWN1cnJlbnQtYWRtaW4udHMiLCIuLi8uLi9ob29rcy91c2UtY3VycmVudC1hZG1pbi50cyIsIi4uLy4uL2hvb2tzL3VzZS1sb2NhbC1zdG9yYWdlL3VzZS1sb2NhbC1zdG9yYWdlLnRzIiwiLi4vLi4vaG9va3MvdXNlLW5hdmlnYXRpb24tcmVzb3VyY2VzLnRzIiwiLi4vLi4vaG9va3MvdXNlLXJlY29yZHMvdXNlLXJlY29yZHMudHMiLCIuLi8uLi9ob29rcy91c2Utc2VsZWN0ZWQtcmVjb3Jkcy91c2Utc2VsZWN0ZWQtcmVjb3Jkcy50cyIsIi4uLy4uL2hvb2tzL3VzZS1yZXNvdXJjZS91c2UtcmVzb3VyY2UudHMiLCIuLi8uLi9jb21wb25lbnRzL2FwcC9zaWRlYmFyL3NpZGViYXItcmVzb3VyY2Utc2VjdGlvbi50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9zaWRlYmFyL3NpZGViYXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvbG9nZ2VkLWluLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3ZlcnNpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvdG9wLWJhci50c3giLCIuLi8uLi9zdG9yZS9hY3Rpb25zL2Ryb3Atbm90aWNlLnRzIiwiLi4vLi4vc3RvcmUvYWN0aW9ucy9zZXQtbm90aWNlLXByb2dyZXNzLnRzIiwiLi4vLi4vY29tcG9uZW50cy9hcHAvbm90aWNlLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2RlZmF1bHQtZGFzaGJvYXJkLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2Vycm9yLWJvdW5kYXJ5LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcm91dGVzL2Rhc2hib2FyZC50c3giLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3VzZS1tZW1vLW9uZS9kaXN0L3VzZS1tZW1vLW9uZS5janMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5janMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWJveC1tb2RlbC9kaXN0L2Nzcy1ib3gtbW9kZWwuY2pzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuY2pzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JhZi1zY2hkL2Rpc3QvcmFmLXNjaGQuY2pzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvZGlzdC9yZWFjdC1iZWF1dGlmdWwtZG5kLmNqcy5qcyIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9hcnJheS9hZGQtbmV3LWl0ZW0tdHJhbnNsYXRpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3V0aWxzL3Byb3BlcnR5LWRlc2NyaXB0aW9uL3Byb3BlcnR5LWRlc2NyaXB0aW9uLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS91dGlscy9wcm9wZXJ0eS1sYWJlbC9wcm9wZXJ0eS1sYWJlbC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvY29udmVydC10by1zdWItcHJvcGVydHkudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2FycmF5L3JlbW92ZS1zdWItcHJvcGVydHkudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvaW5kZXgudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvY29udmVydC10by1zdWItcHJvcGVydHkudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvaW5kZXgudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGVmYXVsdC10eXBlL2RlZmF1bHQtcHJvcGVydHktdmFsdWUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RlZmF1bHQtdHlwZS9zaG93LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9yZWNvcmQtcHJvcGVydHktaXMtZXF1YWwudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGVmYXVsdC10eXBlL2VkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RlZmF1bHQtdHlwZS9maWx0ZXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RlZmF1bHQtdHlwZS9saXN0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9ib29sZWFuL2VkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2Jvb2xlYW4vbWFwLXZhbHVlLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9ib29sZWFuL2Jvb2xlYW4tcHJvcGVydHktdmFsdWUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2Jvb2xlYW4vc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYm9vbGVhbi9saXN0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9ib29sZWFuL2ZpbHRlci50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGF0ZXRpbWUvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGF0ZXRpbWUvbWFwLXZhbHVlLnRzIiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RhdGV0aW1lL3Nob3cudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RhdGV0aW1lL2xpc3QudHN4IiwiLi4vLi4vLi4vYmFja2VuZC91dGlscy9maWx0ZXIvZmlsdGVyLnRzIiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RhdGV0aW1lL2ZpbHRlci50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmljaHRleHQvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmljaHRleHQvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmljaHRleHQvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmVmZXJlbmNlL2VkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JlZmVyZW5jZS9yZWZlcmVuY2UtdmFsdWUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JlZmVyZW5jZS9zaG93LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9yZWZlcmVuY2UvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmVmZXJlbmNlL2ZpbHRlci50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvdGV4dGFyZWEvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvdGV4dGFyZWEvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcGFzc3dvcmQvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcGFzc3dvcmQvaW5kZXgudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYmFzZS1wcm9wZXJ0eS1jb21wb25lbnQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2luZGV4LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2JyZWFkY3J1bWJzLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2FjdGlvbi1oZWFkZXIvYWN0aW9ucy10by1idXR0b24tZ3JvdXAudHMiLCIuLi8uLi9jb21wb25lbnRzL2FwcC9hY3Rpb24taGVhZGVyL3N0eWxlZC1iYWNrLWJ1dHRvbi50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9hY3Rpb24taGVhZGVyL2FjdGlvbi1oZWFkZXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hY3Rpb25zL3V0aWxzL2xheW91dC1lbGVtZW50LXJlbmRlcmVyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYWN0aW9ucy9uZXcudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hY3Rpb25zL2VkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hY3Rpb25zL3Nob3cudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvcmVjb3Jkcy10YWJsZS91dGlscy9kaXNwbGF5LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvcmVjb3JkLWluLWxpc3QudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc29ydC1saW5rLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvcHJvcGVydHktaGVhZGVyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvcmVjb3Jkcy10YWJsZS1oZWFkZXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvYWN0aW9uLWJ1dHRvbi9hY3Rpb24tYnV0dG9uLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvbm8tcmVjb3Jkcy50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9yZWNvcmRzLXRhYmxlL3V0aWxzL2dldC1idWxrLWFjdGlvbnMtZnJvbS1yZWNvcmRzLnRzIiwiLi4vLi4vY29tcG9uZW50cy9hcHAvcmVjb3Jkcy10YWJsZS9zZWxlY3RlZC1yZWNvcmRzLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvcmVjb3Jkcy10YWJsZS50c3giLCIuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvbGlzdC50c3giLCIuLi8uLi9ob2Mvd2l0aC1ub3RpY2UudHMiLCIuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvYnVsay1kZWxldGUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hY3Rpb25zL2luZGV4LnRzIiwiLi4vLi4vLi4vY29uc3RhbnRzLnRzIiwiLi4vLi4vY29tcG9uZW50cy9hcHAvYmFzZS1hY3Rpb24tY29tcG9uZW50LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2Vycm9yLW1lc3NhZ2UudHN4IiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvdXRpbHMvd3JhcHBlci50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9kcmF3ZXItcG9ydGFsLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2ZpbHRlci1kcmF3ZXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvcmVjb3JkLWFjdGlvbi50c3giLCIuLi8uLi9jb21wb25lbnRzL3JvdXRlcy9yZXNvdXJjZS1hY3Rpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvYnVsay1hY3Rpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvcGFnZS50c3giLCIuLi8uLi9jb21wb25lbnRzL3JvdXRlcy91dGlscy9xdWVyeS1oYXMtZmlsdGVyLnRzIiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvcmVzb3VyY2UudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHBsaWNhdGlvbi50c3giLCIuLi8uLi9zdG9yZS9hY3Rpb25zL2luaXRpYWxpemUtYXNzZXRzLnRzIiwiLi4vLi4vc3RvcmUvYWN0aW9ucy9pbml0aWFsaXplLWJyYW5kaW5nLnRzIiwiLi4vLi4vc3RvcmUvYWN0aW9ucy9pbml0aWFsaXplLWRhc2hib2FyZC50cyIsIi4uLy4uL3N0b3JlL2FjdGlvbnMvaW5pdGlhbGl6ZS1sb2NhbGUudHMiLCIuLi8uLi9zdG9yZS9hY3Rpb25zL2luaXRpYWxpemUtcGFnZXMudHMiLCIuLi8uLi9zdG9yZS9hY3Rpb25zL2luaXRpYWxpemUtcGF0aHMudHMiLCIuLi8uLi9zdG9yZS9hY3Rpb25zL2luaXRpYWxpemUtcmVzb3VyY2VzLnRzIiwiLi4vLi4vc3RvcmUvYWN0aW9ucy9pbml0aWFsaXplLXZlcnNpb25zLnRzIiwiLi4vLi4vc3RvcmUvc3RvcmUudHMiLCIuLi8uLi9idW5kbGUtZW50cnkuanN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsImltcG9ydCB7IEFkbWluSlNPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcbmltcG9ydCB7IFBhdGhzIH0gZnJvbSAnLi4vLi4vLi4vZnJvbnRlbmQvc3RvcmUvc3RvcmUnXG5cbmxldCBnbG9iYWxBbnk6IGFueSA9IHt9XG5cbnRyeSB7XG4gIGdsb2JhbEFueSA9IHdpbmRvd1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgaWYgKGVycm9yLm1lc3NhZ2UgIT09ICd3aW5kb3cgaXMgbm90IGRlZmluZWQnKSB7XG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vKipcbiAqIEJhc2UgUGFyYW1zIGZvciBhIGFueSBmdW5jdGlvblxuICogQGFsaWFzIEFjdGlvblBhcmFtc1xuICogQG1lbWJlcm9mIFZpZXdIZWxwZXJzXG4gKi9cbmV4cG9ydCB0eXBlIEFjdGlvblBhcmFtcyA9IHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBSZXNvdXJjZSBJRFxuICAgKi9cbiAgcmVzb3VyY2VJZDogc3RyaW5nO1xuICAvKipcbiAgICogQWN0aW9uIG5hbWVcbiAgICovXG4gIGFjdGlvbk5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIE9wdGlvbmFsIHF1ZXJ5IHN0cmluZzogPy4uLi5cbiAgICovXG4gIHNlYXJjaD8gOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUGFyYW1zIGZvciBhIHJlY29yZCBhY3Rpb25cbiAqIEBhbGlhcyBSZWNvcmRBY3Rpb25QYXJhbXNcbiAqIEBleHRlbmRzIEFjdGlvblBhcmFtc1xuICogQG1lbWJlcm9mIFZpZXdIZWxwZXJzXG4gKi9cbmV4cG9ydCB0eXBlIFJlY29yZEFjdGlvblBhcmFtcyA9IEFjdGlvblBhcmFtcyAmIHtcbiAgLyoqXG4gICAqIFJlY29yZCBJRFxuICAgKi9cbiAgcmVjb3JkSWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBQYXJhbXMgZm9yIGEgYnVsayBhY3Rpb25cbiAqIEBhbGlhcyBCdWxrQWN0aW9uUGFyYW1zXG4gKiBAZXh0ZW5kcyBBY3Rpb25QYXJhbXNcbiAqIEBtZW1iZXJvZiBWaWV3SGVscGVyc1xuICovXG5leHBvcnQgdHlwZSBCdWxrQWN0aW9uUGFyYW1zID0gQWN0aW9uUGFyYW1zICYge1xuICAvKipcbiAgICogQXJyYXkgb2YgUmVjb3JkcyBJRFxuICAgKi9cbiAgcmVjb3JkSWRzPzogQXJyYXk8c3RyaW5nPjtcbn1cblxuLyoqXG4gKiBQYXJhbXMgZm9yIGEgcmVzb3VyY2UgYWN0aW9uXG4gKiBAYWxpYXMgUmVzb3VyY2VBY3Rpb25QYXJhbXNcbiAqIEBleHRlbmRzIEFjdGlvblBhcmFtc1xuICogQG1lbWJlcm9mIFZpZXdIZWxwZXJzXG4gKi9cbmV4cG9ydCB0eXBlIFJlc291cmNlQWN0aW9uUGFyYW1zID0gQWN0aW9uUGFyYW1zXG5cbmNvbnN0IHJ1bkRhdGUgPSBuZXcgRGF0ZSgpXG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBoZWxwZXIgbWV0aG9kcyBhdmFpbGFibGUgaW4gdGhlIHZpZXdzXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3SGVscGVycyB7XG4gIHB1YmxpYyBvcHRpb25zOiBQYXRoc1xuXG4gIGNvbnN0cnVjdG9yKHsgb3B0aW9ucyB9OiB7IG9wdGlvbnM/OiBBZG1pbkpTT3B0aW9ucyB9ID0ge30pIHtcbiAgICBsZXQgb3B0czogUGF0aHMgPSBWaWV3SGVscGVycy5nZXRQYXRocyhvcHRpb25zKVxuXG4gICAgb3B0cyA9IG9wdHMgfHwge1xuICAgICAgcm9vdFBhdGg6ICcvYWRtaW4nLFxuICAgIH1cblxuICAgIC8vIHdoZW4gVmlld0hlbHBlcnMgYXJlIHVzZWQgb24gdGhlIGZyb250ZW5kLCBwYXRocyBhcmUgdGFrZW4gZnJvbSBnbG9iYWwgUmVkdXggU3RhdGVcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRzXG4gIH1cblxuICBzdGF0aWMgZ2V0UGF0aHMob3B0aW9ucz86IEFkbWluSlNPcHRpb25zKTogUGF0aHMge1xuICAgIHJldHVybiBvcHRpb25zIHx8IChnbG9iYWxBbnkuUkVEVVhfU1RBVEU/LnBhdGhzKVxuICB9XG5cbiAgLyoqXG4gICAqIFRvIGVhY2ggcmVsYXRlZCBwYXRoIGFkZHMgcm9vdFBhdGggcGFzc2VkIGJ5IHRoZSB1c2VyLCBhcyB3ZWxsIGFzIGEgcXVlcnkgc3RyaW5nXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59IFtwYXRoc10gICAgICBsaXN0IG9mIHBhcnRzIG9mIHRoZSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfSAgICAgICBwYXRoXG4gICAqIEByZXR1cm4ge3F1ZXJ5fSAgICAgICAgW3NlYXJjaD0nJ10gcXVlcnkgc3RyaW5nIHdoaWNoIGNhbiBiZSBmZXRjaFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gYGxvY2F0aW9uLnNlYXJjaGBcbiAgICovXG4gIHVybEJ1aWxkZXIocGF0aHM6IEFycmF5PHN0cmluZz4gPSBbXSwgc2VhcmNoID0gJycpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNlcGFyYXRvciA9ICcvJ1xuICAgIGNvbnN0IHJlcGxhY2UgPSBuZXcgUmVnRXhwKGAke3NlcGFyYXRvcn17MSx9YCwgJ2cnKVxuXG4gICAgbGV0IHsgcm9vdFBhdGggfSA9IHRoaXMub3B0aW9uc1xuICAgIGlmICghcm9vdFBhdGguc3RhcnRzV2l0aChzZXBhcmF0b3IpKSB7IHJvb3RQYXRoID0gYCR7c2VwYXJhdG9yfSR7cm9vdFBhdGh9YCB9XG5cbiAgICBjb25zdCBwYXJ0cyA9IFtyb290UGF0aCwgLi4ucGF0aHNdXG4gICAgcmV0dXJuIGAke3BhcnRzLmpvaW4oc2VwYXJhdG9yKS5yZXBsYWNlKHJlcGxhY2UsIHNlcGFyYXRvcil9JHtzZWFyY2h9YFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbG9naW4gVVJMXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGxvZ2luVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sb2dpblBhdGhcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGxvZ291dCBVUkxcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgbG9nb3V0VXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sb2dvdXRQYXRoXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBVUkwgZm9yIHRoZSBkYXNoYm9hcmRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZGFzaGJvYXJkVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yb290UGF0aFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgVVJMIGZvciBnaXZlbiBwYWdlIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhZ2VOYW1lICAgICAgIHBhZ2UgbmFtZSB3aGljaCBpcyBhIHVuaXF1ZSBrZXkgc3BlY2lmaWVkIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgQWRtaW5KU09wdGlvbnN9XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHBhZ2VVcmwocGFnZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudXJsQnVpbGRlcihbJ3BhZ2VzJywgcGFnZU5hbWVdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdXJsIGZvciBhIGBlZGl0YCBhY3Rpb24gaW4gZ2l2ZW4gUmVzb3VyY2UuIFVzZXMge0BsaW5rIHJlY29yZEFjdGlvblVybH1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgIGlkIHRvIHRoZSByZXNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVjb3JkSWQgICAgaWQgdG8gdGhlIHJlY29yZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlYXJjaF0gICAgICAgIG9wdGlvbmFsIHF1ZXJ5IHN0cmluZ1xuICAgKi9cbiAgZWRpdFVybChyZXNvdXJjZUlkOiBzdHJpbmcsIHJlY29yZElkOiBzdHJpbmcsIHNlYXJjaD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVjb3JkQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgcmVjb3JkSWQsIGFjdGlvbk5hbWU6ICdlZGl0Jywgc2VhcmNoIH0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB1cmwgZm9yIGEgYHNob3dgIGFjdGlvbiBpbiBnaXZlbiBSZXNvdXJjZS4gVXNlcyB7QGxpbmsgcmVjb3JkQWN0aW9uVXJsfVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VJZCAgaWQgdG8gdGhlIHJlc291cmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWNvcmRJZCAgICBpZCB0byB0aGUgcmVjb3JkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VhcmNoXSAgICAgICAgb3B0aW9uYWwgcXVlcnkgc3RyaW5nXG4gICAqL1xuICBzaG93VXJsKHJlc291cmNlSWQ6IHN0cmluZywgcmVjb3JkSWQ6IHN0cmluZywgc2VhcmNoPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCByZWNvcmRJZCwgYWN0aW9uTmFtZTogJ3Nob3cnLCBzZWFyY2ggfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHVybCBmb3IgYSBgZGVsZXRlYCBhY3Rpb24gaW4gZ2l2ZW4gUmVzb3VyY2UuIFVzZXMge0BsaW5rIHJlY29yZEFjdGlvblVybH1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgIGlkIHRvIHRoZSByZXNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVjb3JkSWQgICAgaWQgdG8gdGhlIHJlY29yZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlYXJjaF0gICAgICAgIG9wdGlvbmFsIHF1ZXJ5IHN0cmluZ1xuICAgKi9cbiAgZGVsZXRlVXJsKHJlc291cmNlSWQ6IHN0cmluZywgcmVjb3JkSWQ6IHN0cmluZywgc2VhcmNoPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCByZWNvcmRJZCwgYWN0aW9uTmFtZTogJ2RlbGV0ZScsIHNlYXJjaCB9KVxuICB9XG5cblxuICAvKipcbiAgICogUmV0dXJucyB1cmwgZm9yIGEgYG5ld2AgYWN0aW9uIGluIGdpdmVuIFJlc291cmNlLiBVc2VzIHtAbGluayByZXNvdXJjZUFjdGlvblVybH1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgIGlkIHRvIHRoZSByZXNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlYXJjaF0gICAgICAgIG9wdGlvbmFsIHF1ZXJ5IHN0cmluZ1xuICAgKi9cbiAgbmV3VXJsKHJlc291cmNlSWQ6IHN0cmluZywgc2VhcmNoPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZXNvdXJjZUFjdGlvblVybCh7IHJlc291cmNlSWQsIGFjdGlvbk5hbWU6ICduZXcnLCBzZWFyY2ggfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHVybCBmb3IgYSBgbGlzdGAgYWN0aW9uIGluIGdpdmVuIFJlc291cmNlLiBVc2VzIHtAbGluayByZXNvdXJjZUFjdGlvblVybH1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgIGlkIHRvIHRoZSByZXNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlYXJjaF0gICAgICAgIG9wdGlvbmFsIHF1ZXJ5IHN0cmluZ1xuICAgKi9cbiAgbGlzdFVybChyZXNvdXJjZUlkOiBzdHJpbmcsIHNlYXJjaD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVzb3VyY2VBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lOiAnbGlzdCcsIHNlYXJjaCB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdXJsIGZvciBhIGBidWxrRGVsZXRlYCBhY3Rpb24gaW4gZ2l2ZW4gUmVzb3VyY2UuIFVzZXMge0BsaW5rIGJ1bGtBY3Rpb25Vcmx9XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZUlkICBpZCB0byB0aGUgcmVzb3VyY2VcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSByZWNvcmRJZHMgICBzZXBhcmF0ZWQgYnkgY29tbWEgcmVjb3Jkc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlYXJjaF0gICAgICAgIG9wdGlvbmFsIHF1ZXJ5IHN0cmluZ1xuICAgKi9cbiAgYnVsa0RlbGV0ZVVybChyZXNvdXJjZUlkOiBzdHJpbmcsIHJlY29yZElkczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5idWxrQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgcmVjb3JkSWRzLCBhY3Rpb25OYW1lOiAnYnVsa0RlbGV0ZScsIHNlYXJjaCB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcmVzb3VyY2VBY3Rpb24gdXJsXG4gICAqXG4gICAqIEBwYXJhbSAgIHtSZXNvdXJjZUFjdGlvblBhcmFtc30gIG9wdGlvbnNcbiAgICogQHBhcmFtICAge3N0cmluZ30gIG9wdGlvbnMucmVzb3VyY2VJZFxuICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgb3B0aW9ucy5hY3Rpb25OYW1lXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBbb3B0aW9ucy5zZWFyY2hdICAgICAgICBvcHRpb25hbCBxdWVyeSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybiAge3N0cmluZ31cbiAgICovXG4gIHJlc291cmNlQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZSwgc2VhcmNoIH06IFJlc291cmNlQWN0aW9uUGFyYW1zKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy51cmxCdWlsZGVyKFsncmVzb3VyY2VzJywgcmVzb3VyY2VJZCwgJ2FjdGlvbnMnLCBhY3Rpb25OYW1lXSwgc2VhcmNoKVxuICB9XG5cbiAgcmVzb3VyY2VVcmwoeyByZXNvdXJjZUlkLCBzZWFyY2ggfTogT21pdDxSZXNvdXJjZUFjdGlvblBhcmFtcywgJ2FjdGlvbk5hbWUnPik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudXJsQnVpbGRlcihbJ3Jlc291cmNlcycsIHJlc291cmNlSWRdLCBzZWFyY2gpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyByZWNvcmRBY3Rpb24gdXJsXG4gICAqXG4gICAqIEBwYXJhbSAgIHtSZWNvcmRBY3Rpb25QYXJhbXN9ICBvcHRpb25zXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBvcHRpb25zLnJlc291cmNlSWRcbiAgICogQHBhcmFtICAge3N0cmluZ30gIG9wdGlvbnMucmVjb3JkSWRcbiAgICogQHBhcmFtICAge3N0cmluZ30gIG9wdGlvbnMuYWN0aW9uTmFtZVxuICAgKlxuICAgKiBAcmV0dXJuICB7c3RyaW5nfVxuICAgKi9cbiAgcmVjb3JkQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgcmVjb3JkSWQsIGFjdGlvbk5hbWUsIHNlYXJjaCB9OiBSZWNvcmRBY3Rpb25QYXJhbXMpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnVybEJ1aWxkZXIoWydyZXNvdXJjZXMnLCByZXNvdXJjZUlkLCAncmVjb3JkcycsIHJlY29yZElkLCBhY3Rpb25OYW1lXSwgc2VhcmNoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYnVsa0FjdGlvbiB1cmxcbiAgICpcbiAgICogQHBhcmFtICAge0J1bGtBY3Rpb25QYXJhbXN9ICBvcHRpb25zXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBvcHRpb25zLnJlc291cmNlSWRcbiAgICogQHBhcmFtICAge0FycmF5PHN0cmluZz59ICBbb3B0aW9ucy5yZWNvcmRJZHNdXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBvcHRpb25zLmFjdGlvbk5hbWVcbiAgICpcbiAgICogQHJldHVybiAge3N0cmluZ31cbiAgICovXG4gIGJ1bGtBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCByZWNvcmRJZHMsIGFjdGlvbk5hbWUsIHNlYXJjaCB9OiBCdWxrQWN0aW9uUGFyYW1zKTogc3RyaW5nIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLnVybEJ1aWxkZXIoW1xuICAgICAgJ3Jlc291cmNlcycsIHJlc291cmNlSWQsICdidWxrJywgYWN0aW9uTmFtZSxcbiAgICBdKVxuICAgIGlmIChyZWNvcmRJZHMgJiYgcmVjb3JkSWRzLmxlbmd0aCkge1xuICAgICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaClcbiAgICAgIHF1ZXJ5LnNldCgncmVjb3JkSWRzJywgcmVjb3JkSWRzLmpvaW4oJywnKSlcbiAgICAgIHJldHVybiBgJHt1cmx9PyR7cXVlcnkudG9TdHJpbmcoKX1gXG4gICAgfVxuICAgIHJldHVybiBgJHt1cmx9JHtzZWFyY2ggfHwgJyd9YFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWJzb2x1dGUgcGF0aCB0byBhIGdpdmVuIGFzc2V0LlxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGFzc2V0XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGFzc2V0UGF0aChhc3NldDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFzc2V0c0NETikge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChhc3NldCwgdGhpcy5vcHRpb25zLmFzc2V0c0NETikuaHJlZlxuXG4gICAgICAvLyBhZGRpbmcgdGltZXN0YW1wIHRvIHRoZSBocmVmIGludmFsaWRhdGVzIHRoZSBDRE4gY2FjaGVcbiAgICAgIHJldHVybiBgJHt1cmx9P2RhdGU9JHtydW5EYXRlLmdldFRpbWUoKX1gXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVybEJ1aWxkZXIoWydmcm9udGVuZCcsICdhc3NldHMnLCBhc3NldF0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlld0hlbHBlcnNcbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgT3ZlcnJpZGFibGVDb21wb25lbnQgfSBmcm9tICcuLi91dGlscy9vdmVycmlkYWJsZS1jb21wb25lbnQnXG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAY2xhc3NkZXNjXG4gKiBPdmVycmlkZXMgb25lIG9mIHRoZSBjb21wb25lbnQgZm9ybSBBZG1pbkpTIGNvcmUgd2hlbiB1c2VyIHBhc3MgaXRzIG5hbWUgdG9cbiAqIHtAbGluayBBZG1pbkpTLmJ1bmRsZX0gbWV0aG9kLlxuICpcbiAqIElmIGNhc2Ugb2YgYmVpbmcgb3ZlcnJpZGRlbiwgY29tcG9uZW50IHJlY2VpdmVzIGFkZGl0aW9uYWwgcHJvcDogYE9yaWdpbmFsQ29tcG9uZW50YFxuICpcbiAqIEBleGFtcGxlXG4gKiBBZG1pbkpTLmJ1bmRsZSgnLi9wYXRoL3RvL2NvbXBvbmVudCcsICdTaWRlYmFyRm9vdGVyJylcbiAqL1xuZnVuY3Rpb24gYWxsb3dPdmVycmlkZTxQPihcbiAgT3JpZ2luYWxDb21wb25lbnQ6IENvbXBvbmVudFR5cGU8UD4sXG4gIG5hbWU6IE92ZXJyaWRhYmxlQ29tcG9uZW50LFxuKTogQ29tcG9uZW50VHlwZTxQICYge09yaWdpbmFsQ29tcG9uZW50PzogQ29tcG9uZW50VHlwZTxQPn0+IHtcbiAgLy8gc3NyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBPcmlnaW5hbENvbXBvbmVudFxuICB9XG5cbiAgY29uc3QgV3JhcHBlckNvbXBvbmVudDogUmVhY3QuRkM8UD4gPSAocHJvcHMpID0+IHtcbiAgICBsZXQgZ2xvYmFsQW55OiBhbnkgPSB3aW5kb3dcbiAgICBnbG9iYWxBbnkgPSB3aW5kb3dcblxuICAgIGxldCBDb21wb25lbnQgPSBPcmlnaW5hbENvbXBvbmVudFxuXG4gICAgaWYgKGdsb2JhbEFueS5BZG1pbkpTXG4gICAgICAmJiBnbG9iYWxBbnkuQWRtaW5KUy5Vc2VyQ29tcG9uZW50c1xuICAgICAgJiYgZ2xvYmFsQW55LkFkbWluSlMuVXNlckNvbXBvbmVudHNbbmFtZV1cbiAgICApIHtcbiAgICAgIENvbXBvbmVudCA9IGdsb2JhbEFueS5BZG1pbkpTLlVzZXJDb21wb25lbnRzW25hbWVdXG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IE9yaWdpbmFsQ29tcG9uZW50PXtPcmlnaW5hbENvbXBvbmVudH0gLz5cbiAgICB9XG5cbiAgICByZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+XG4gIH1cblxuICByZXR1cm4gV3JhcHBlckNvbXBvbmVudFxufVxuXG5leHBvcnQge1xuICBhbGxvd092ZXJyaWRlIGFzIGRlZmF1bHQsXG4gIGFsbG93T3ZlcnJpZGUsXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBjc3NDbGFzcywgdGhlbWVHZXQgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IHsgQnJhbmRpbmdPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcbmltcG9ydCBhbGxvd092ZXJyaWRlIGZyb20gJy4uLy4uLy4uL2hvYy9hbGxvdy1vdmVycmlkZSdcblxudHlwZSBQcm9wcyA9IHtcbiAgYnJhbmRpbmc6IEJyYW5kaW5nT3B0aW9ucztcbn1cblxuZXhwb3J0IGNvbnN0IFN0eWxlZExvZ28gPSBzdHlsZWQoTGluaylgXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZmxleC1zaHJpbms6IDA7XG4gIHBhZGRpbmc6ICR7dGhlbWVHZXQoJ3NwYWNlJywgJ2xnJyl9ICR7dGhlbWVHZXQoJ3NwYWNlJywgJ3h4bCcpfSAke3RoZW1lR2V0KCdzcGFjZScsICd4eGwnKX07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAmID4gaDEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBmb250LXdlaWdodDogJHt0aGVtZUdldCgnZm9udFdlaWdodHMnLCAnYm9sZGVyJyl9O1xuICAgIGZvbnQtc2l6ZTogJHt0aGVtZUdldCgnZm9udFdlaWdodHMnLCAnYm9sZGVyJyl9O1xuICAgIGNvbG9yOiAke3RoZW1lR2V0KCdjb2xvcnMnLCAnZ3JleTgwJyl9O1xuICAgIGZvbnQtc2l6ZTogJHt0aGVtZUdldCgnZm9udFNpemVzJywgJ3hsJyl9O1xuICAgIGxpbmUtaGVpZ2h0OiAke3RoZW1lR2V0KCdsaW5lSGVpZ2h0cycsICd4bCcpfTtcbiAgfVxuXG4gICYgPiBpbWcge1xuICAgIG1heC13aWR0aDogMTcwcHg7XG4gIH1cblxuICAmOmhvdmVyIGgxIHtcbiAgICBjb2xvcjogJHt0aGVtZUdldCgnY29sb3JzJywgJ3ByaW1hcnkxMDAnKX07XG4gIH1cbmBcblxuY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG5cbmNvbnN0IFNpZGViYXJCcmFuZGluZzogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgYnJhbmRpbmcgfSA9IHByb3BzXG4gIGNvbnN0IHsgbG9nbywgY29tcGFueU5hbWUgfSA9IGJyYW5kaW5nXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZExvZ29cbiAgICAgIGNsYXNzTmFtZT17Y3NzQ2xhc3MoJ0xvZ28nKX1cbiAgICAgIHRvPXtoLmRhc2hib2FyZFVybCgpfVxuICAgID5cbiAgICAgIHtsb2dvID8gKFxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtsb2dvfVxuICAgICAgICAgIGFsdD17Y29tcGFueU5hbWV9XG4gICAgICAgIC8+XG4gICAgICApIDogPGgxPntjb21wYW55TmFtZX08L2gxPn1cbiAgICA8L1N0eWxlZExvZ28+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWxsb3dPdmVycmlkZShTaWRlYmFyQnJhbmRpbmcsICdTaWRlYmFyQnJhbmRpbmcnKVxuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UmVkdWNlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eU9mO1xuIiwidmFyIGJhc2VQcm9wZXJ0eU9mID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5T2YnKTtcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJ1cnJMZXR0ZXI7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBkZWJ1cnJMZXR0ZXIgPSByZXF1aXJlKCcuL19kZWJ1cnJMZXR0ZXInKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVidXJyO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlXb3JkcztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbnZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGVXb3JkO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gIHJzT3JkVXBwZXIsXG4gIHJzT3JkTG93ZXIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWNvZGVXb3JkcztcbiIsInZhciBhc2NpaVdvcmRzID0gcmVxdWlyZSgnLi9fYXNjaWlXb3JkcycpLFxuICAgIGhhc1VuaWNvZGVXb3JkID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZVdvcmQnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKSxcbiAgICB1bmljb2RlV29yZHMgPSByZXF1aXJlKCcuL191bmljb2RlV29yZHMnKTtcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAqL1xuZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd29yZHM7XG4iLCJ2YXIgYXJyYXlSZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheVJlZHVjZScpLFxuICAgIGRlYnVyciA9IHJlcXVpcmUoJy4vZGVidXJyJyksXG4gICAgd29yZHMgPSByZXF1aXJlKCcuL3dvcmRzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIjtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG52YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ29tcG91bmRlcjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2xpY2U7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gKi9cbmZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFNsaWNlO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVW5pY29kZTtcbiIsIi8qKlxuICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlUb0FycmF5O1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVRvQXJyYXk7XG4iLCJ2YXIgYXNjaWlUb0FycmF5ID0gcmVxdWlyZSgnLi9fYXNjaWlUb0FycmF5JyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICB1bmljb2RlVG9BcnJheSA9IHJlcXVpcmUoJy4vX3VuaWNvZGVUb0FycmF5Jyk7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvQXJyYXk7XG4iLCJ2YXIgY2FzdFNsaWNlID0gcmVxdWlyZSgnLi9fY2FzdFNsaWNlJyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICBzdHJpbmdUb0FycmF5ID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9BcnJheScpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ2FzZUZpcnN0O1xuIiwidmFyIGNyZWF0ZUNhc2VGaXJzdCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUNhc2VGaXJzdCcpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gKiAvLyA9PiAnRnJlZCdcbiAqXG4gKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAqIC8vID0+ICdGUkVEJ1xuICovXG52YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1cHBlckZpcnN0O1xuIiwidmFyIGNyZWF0ZUNvbXBvdW5kZXIgPSByZXF1aXJlKCcuL19jcmVhdGVDb21wb3VuZGVyJyksXG4gICAgdXBwZXJGaXJzdCA9IHJlcXVpcmUoJy4vdXBwZXJGaXJzdCcpO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMS4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAqIC8vID0+ICdGb28gQmFyJ1xuICpcbiAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAqIC8vID0+ICdGb28gQmFyJ1xuICpcbiAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICogLy8gPT4gJ0ZPTyBCQVInXG4gKi9cbnZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdGFydENhc2U7XG4iLCJpbXBvcnQgeyBpMThuIGFzIEkxOG4sIFRGdW5jdGlvbiwgVE9wdGlvbnMgfSBmcm9tICdpMThuZXh0J1xuaW1wb3J0IHN0YXJ0Q2FzZSBmcm9tICdsb2Rhc2gvc3RhcnRDYXNlJ1xuXG4vKipcbiAqIEBtZW1iZXJvZiBUcmFuc2xhdGVGdW5jdGlvbnNcbiAqIEBhbGlhcyBUcmFuc2xhdGVGdW5jdGlvblxuICovXG5leHBvcnQgdHlwZSBUcmFuc2xhdGVGdW5jdGlvbiA9IChcbiAgLyoqXG4gICAqIGt3eSB3aGljaCBzaG91bGQgYmUgdHJhbnNsYXRlZCBpbiBhIGdpdmVuIG5hbWVzcGFjZVxuICAgKi9cbiAga2V5OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBPcHRpb25hbCByZXNvdXJjZUlkIG9yIFtUcmFuc2xhdGUgb3B0aW9uc117QGxpbmsgaHR0cHM6Ly93d3cuaTE4bmV4dC5jb20vb3ZlcnZpZXcvY29uZmlndXJhdGlvbi1vcHRpb25zfVxuICAgKi9cbiAgcmVzb3VyY2VJZD86IHN0cmluZyB8IFRPcHRpb25zLFxuICAvKipcbiAgICogW1RyYW5zbGF0ZSBvcHRpb25zXXtAbGluayBodHRwczovL3d3dy5pMThuZXh0LmNvbS9vdmVydmlldy9jb25maWd1cmF0aW9uLW9wdGlvbnN9XG4gICAqL1xuICBvcHRpb25zPzogVE9wdGlvbnNcbikgPT4gc3RyaW5nXG5cbi8qKlxuICogVHJhbnNsYXRlIEZ1bmN0aW9ucyBhcmUgdGhlIGhlbHBlciBmdW5jdGlvbnMgd2hpY2ggeW91IGNhbiB1c2UgdG8gdHJhbnNsYXRlXG4gKiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIE9uIHRoZSBmcm9udGVkIHRoZXkgY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgdXNlVHJhbnNsYXRpb259IGhvb2suIE9uIHRoZSBiYWNrZW5kXG4gKiB0aGV5IGFyZSBpbmplY3RlZCB0byBhbnkge0BsaW5rIEFkbWluSlN9IGluc3RhbmNlIGFuZCB7QGxpbmsgQWN0aW9uQ29udGV4dH0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsYXRlRnVuY3Rpb25zIHtcbiAgLyoqXG4gICAqIHNob3J0Y3V0IGZvciBJMThuLnRyYW5zbGF0ZSBmdW5jdGlvbi5cbiAgICogQHNlZSBodHRwczovL3d3dy5pMThuZXh0LmNvbS9vdmVydmlldy9hcGkjdFxuICAgKi9cbiAgdDogVEZ1bmN0aW9uO1xuICAvKipcbiAgICogSTE4bi50cmFuc2xhdGUgZnVuY3Rpb24uXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cuaTE4bmV4dC5jb20vb3ZlcnZpZXcvYXBpI3RcbiAgICovXG4gIHRyYW5zbGF0ZTogVEZ1bmN0aW9uO1xuICAvKipcbiAgICogU2hvcnRjdXQgZm9yIHtAbGluayBUcmFuc2xhdGVGdW5jdGlvbnMjdHJhbnNsYXRlQWN0aW9ufVxuICAgKi9cbiAgdGE6IFRyYW5zbGF0ZUZ1bmN0aW9uO1xuICAvKipcbiAgICogVHJhbnNsYXRlcyBhbGwgW2FjdGlvbnNde0BsaW5rIEFjdGlvbn0sIHRvIGJlIG1vcmUgc3BlY2lmaWMgLSB0aGVpciBsYWJlbHMuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IGxvb2tzIGZvciBhIFt0cmFuc2xhdGlvbiBrZXlde0BsaW5rIExvY2FsZVRyYW5zbGF0aW9uc30gaW5cbiAgICogYHJlc291cmNlLntyZXNvdXJjZUlkfS5hY3Rpb25zLnthY3Rpb25OYW1lfWAsIHdoZW4gaXQgZG9lc24ndCBmaW5kXG4gICAqIHRoYXQsIHRoZSBsb29rdXAgaXMgbW92ZWQgdG8gYGFjdGlvbnMue2FjdGlvbk5hbWV9YC5cbiAgICogRmluYWxseSwgd2hlbiB0aGF0IGFsc28gZmFpbHMsIGl0IHJldHVybnMgc3RhcnRDYXNlIG9mIHRoZSBhY3Rpb24gbmFtZS5cbiAgICovXG4gIHRyYW5zbGF0ZUFjdGlvbjogVHJhbnNsYXRlRnVuY3Rpb247XG4gIC8qKlxuICAgKiBTaG9ydGN1dCBmb3Ige0BsaW5rIFRyYW5zbGF0ZUZ1bmN0aW9ucyN0cmFuc2xhdGVCdXR0b259XG4gICAqL1xuICB0YjogVHJhbnNsYXRlRnVuY3Rpb247XG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIGFsbCBidXR0b25zLlxuICAgKiBCeSBkZWZhdWx0LCBpdCBsb29rcyBmb3IgYSBbdHJhbnNsYXRpb24ga2V5XXtAbGluayBMb2NhbGVUcmFuc2xhdGlvbnN9IGluXG4gICAqIGByZXNvdXJjZS57cmVzb3VyY2VJZH0uYnV0dG9ucy57YWN0aW9uTmFtZX1gLCB3aGVuIGl0IGRvZXNuJ3QgZmluZFxuICAgKiB0aGF0LCB0aGUgbG9va3VwIGlzIG1vdmVkIHRvIGBidXR0b25zLnthY3Rpb25OYW1lfWAuXG4gICAqIEZpbmFsbHksIHdoZW4gdGhhdCBhbHNvIGZhaWxzLCBpdCByZXR1cm5zIHN0YXJ0Q2FzZSBvZiB0aGUgZ2l2ZW4gYnV0dG9uIG5hbWUuXG4gICAqL1xuICB0cmFuc2xhdGVCdXR0b246IFRyYW5zbGF0ZUZ1bmN0aW9uO1xuICAvKipcbiAgICogU2hvcnRjdXQgZm9yIHtAbGluayBUcmFuc2xhdGVGdW5jdGlvbnMjdHJhbnNsYXRlTGFiZWx9XG4gICAqL1xuICB0bDogVHJhbnNsYXRlRnVuY3Rpb247XG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIGFsbCBsYWJlbHMuIE1vc3Qgb2YgYWxsIGFsbCByZXNvdXJjZSBuYW1lcyBhcmUgdHJlYXRlZCBhcyBsYWJlbHMuXG4gICAqIEFsc28sIGxhYmVscyBhcmUgdGV4dHMgaW4gdGhlIHVzZXIgaW50ZXJmYWNlIHdoaWNoIGNhbm5vdCBiZSByZWNvZ25pemVkXG4gICAqIGFzIGFueSBvdGhlciB0eXBlLlxuICAgKiBCeSBkZWZhdWx0LCBpdCBsb29rcyBmb3IgYSBbdHJhbnNsYXRpb24ga2V5XXtAbGluayBMb2NhbGVUcmFuc2xhdGlvbnN9IGluXG4gICAqIGByZXNvdXJjZS57cmVzb3VyY2VJZH0ubGFiZWxzLnthY3Rpb25OYW1lfWAsIHdoZW4gaXQgZG9lc24ndCBmaW5kXG4gICAqIHRoYXQsIHRoZSBsb29rdXAgaXMgbW92ZWQgdG8gYGxhYmVscy57YWN0aW9uTmFtZX1gLlxuICAgKiBGaW5hbGx5LCB3aGVuIHRoYXQgYWxzbyBmYWlscywgaXQgcmV0dXJucyBzdGFydENhc2Ugb2YgdGhlIGdpdmVuIGxhYmVsLlxuICAgKi9cbiAgdHJhbnNsYXRlTGFiZWw6IFRyYW5zbGF0ZUZ1bmN0aW9uO1xuICAvKipcbiAgICogU2hvcnRjdXQgZm9yIHtAbGluayBUcmFuc2xhdGVGdW5jdGlvbnMjdHJhbnNsYXRlUHJvcGVydHl9XG4gICAqL1xuICB0cDogVHJhbnNsYXRlRnVuY3Rpb247XG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IGxvb2tzIGZvciBhIFt0cmFuc2xhdGlvbiBrZXlde0BsaW5rIExvY2FsZVRyYW5zbGF0aW9uc30gaW5cbiAgICogYHJlc291cmNlLntyZXNvdXJjZUlkfS5wcm9wZXJ0aWVzLntwcm9wZXJ0eVBhdGh9YCwgd2hlbiBpdCBkb2Vzbid0IGZpbmRcbiAgICogdGhhdCwgdGhlIGxvb2t1cCBpcyBtb3ZlZCB0byBgcHJvcGVydGllcy57cHJvcGVydHlQYXRofWAuIFdoZW4gdGhhdCBmYWlscyxcbiAgICogaXQgcmV0dXJucyBzdGFydENhc2Ugb2YgdGhlIGdpdmVuIHByb3BlcnR5IG5hbWUuXG4gICAqXG4gICAqIFdoYXQgaXMgaW1wb3J0YW50IGhlcmUgaXMgdGhhdCB5b3UgY2FuIHB1dCBuZXN0ZWQgcHJvcGVydHkgYXMgd2VsbCwgSW4gdGhhdFxuICAgKiBjYXNlIHlvdSBoYXZlIHRvIHBhc3MgZG90dGVkIHBhdGg6XG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICoge1xuICAgKiAgIHByb3BlcnRpZXM6IHtcbiAgICogICAgICBwYXJlbnQ6ICdwYXJlbnQgcHJvcGVydHknLFxuICAgKiAgICAgICdwYXJlbnQubmVzdGVkJzogJ25lc3RlZCBwcm9wZXJ0eSdcbiAgICogICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICB0cmFuc2xhdGVQcm9wZXJ0eTogVHJhbnNsYXRlRnVuY3Rpb247XG4gIC8qKlxuICAgKiBTaG9ydGN1dCBmb3Ige0BsaW5rIFRyYW5zbGF0ZUZ1bmN0aW9ucyN0cmFuc2xhdGVNZXNzYWdlfVxuICAgKi9cbiAgdG06IFRyYW5zbGF0ZUZ1bmN0aW9uO1xuICAvKipcbiAgICogVHJhbnNsYXRlcyBhbGwgdGhlIG1lc3NhZ2VzIGluIHRoZSBhcHBsaWNhdGlvbi5cbiAgICogQnkgZGVmYXVsdCwgaXQgbG9va3MgZm9yIGEgW3RyYW5zbGF0aW9uIGtleV17QGxpbmsgTG9jYWxlVHJhbnNsYXRpb25zfSBpblxuICAgKiBgcmVzb3VyY2Uue3Jlc291cmNlSWR9Lm1lc3NhZ2VzLnttZXNzYWdlTmFtZX1gLCB3aGVuIGl0IGRvZXNuJ3QgZmluZFxuICAgKiB0aGF0LCB0aGUgbG9va3VwIGlzIG1vdmVkIHRvIGBtZXNzYWdlcy57bWVzc2FnZU5hbWV9YC5cbiAgICogRmluYWxseSwgd2hlbiB0aGF0IGFsc28gZmFpbHMsIGl0IHJldHVybnMgc3RhcnRDYXNlIG9mIHRoZSBnaXZlbiBtZXNzYWdlIG5hbWUuXG4gICAqL1xuICB0cmFuc2xhdGVNZXNzYWdlOiBUcmFuc2xhdGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGNvbnN0IGZvcm1hdE5hbWUgPSAobmFtZTogc3RyaW5nKTogc3RyaW5nID0+IG5hbWUuc3BsaXQoJy4nKS5qb2luKCcmIzQ2OycpXG5cbmNvbnN0IHRyYW5zbGF0ZSA9IChcbiAgaTE4bjogSTE4bixcbiAga2V5OiBzdHJpbmcsXG4gIG5hbWU6IHN0cmluZyxcbiAgcmVzb3VyY2VJZD86IHN0cmluZyB8IFRPcHRpb25zLFxuICBvcHRpb25zPzogVE9wdGlvbnMsXG4pOiBzdHJpbmcgPT4ge1xuICBjb25zdCByZWFsT3B0aW9uczogVE9wdGlvbnMgPSAodHlwZW9mIHJlc291cmNlSWQgPT09ICdzdHJpbmcnID8gb3B0aW9ucyA6IHJlc291cmNlSWQpIHx8IHt9XG4gIGNvbnN0IGZvcm1hdHRlZE5hbWUgPSBmb3JtYXROYW1lKG5hbWUpXG4gIGxldCBrZXlzID0gW2Ake2tleX0uJHtmb3JtYXR0ZWROYW1lfWBdXG4gIGlmIChyZXNvdXJjZUlkKSB7XG4gICAga2V5cyA9IFtgcmVzb3VyY2VzLiR7cmVzb3VyY2VJZH0uJHtrZXl9LiR7Zm9ybWF0dGVkTmFtZX1gLCAuLi5rZXlzXVxuICB9XG4gIGlmIChpMThuLmV4aXN0cyhrZXlzKSkge1xuICAgIHJldHVybiBpMThuLnQoa2V5cywgcmVhbE9wdGlvbnMpXG4gIH1cbiAgcmV0dXJuIHJlYWxPcHRpb25zLmRlZmF1bHRWYWx1ZSA/PyBzdGFydENhc2UobmFtZSlcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUZ1bmN0aW9ucyA9IChpMThuOiBJMThuKTogVHJhbnNsYXRlRnVuY3Rpb25zID0+IHtcbiAgY29uc3QgdHJhbnNsYXRlQWN0aW9uOiBUcmFuc2xhdGVGdW5jdGlvbiA9IChhY3Rpb25OYW1lLCByZXNvdXJjZUlkLCBvcHRpb25zKSA9PiAoXG4gICAgdHJhbnNsYXRlKGkxOG4sICdhY3Rpb25zJywgYWN0aW9uTmFtZSBhcyBzdHJpbmcsIHJlc291cmNlSWQsIG9wdGlvbnMpXG4gIClcblxuICBjb25zdCB0cmFuc2xhdGVCdXR0b246IFRyYW5zbGF0ZUZ1bmN0aW9uID0gKFxuICAgIGJ1dHRvbkxhYmVsLCByZXNvdXJjZUlkLCBvcHRpb25zLFxuICApID0+IChcbiAgICB0cmFuc2xhdGUoaTE4biwgJ2J1dHRvbnMnLCBidXR0b25MYWJlbCwgcmVzb3VyY2VJZCwgb3B0aW9ucylcbiAgKVxuXG4gIGNvbnN0IHRyYW5zbGF0ZUxhYmVsOiBUcmFuc2xhdGVGdW5jdGlvbiA9IChsYWJlbCwgcmVzb3VyY2VJZCwgb3B0aW9ucykgPT4gKFxuICAgIHRyYW5zbGF0ZShpMThuLCAnbGFiZWxzJywgbGFiZWwgYXMgc3RyaW5nLCByZXNvdXJjZUlkLCBvcHRpb25zKVxuICApXG5cbiAgY29uc3QgdHJhbnNsYXRlUHJvcGVydHk6IFRyYW5zbGF0ZUZ1bmN0aW9uID0gKHByb3BlcnR5TmFtZSwgcmVzb3VyY2VJZCwgb3B0aW9ucykgPT4gKFxuICAgIHRyYW5zbGF0ZShpMThuLCAncHJvcGVydGllcycsIHByb3BlcnR5TmFtZSwgcmVzb3VyY2VJZCwgb3B0aW9ucylcbiAgKVxuXG4gIGNvbnN0IHRyYW5zbGF0ZU1lc3NhZ2U6IFRyYW5zbGF0ZUZ1bmN0aW9uID0gKG1lc3NhZ2VOYW1lLCByZXNvdXJjZUlkLCBvcHRpb25zKSA9PiAoXG4gICAgdHJhbnNsYXRlKGkxOG4sICdtZXNzYWdlcycsIG1lc3NhZ2VOYW1lLCByZXNvdXJjZUlkLCBvcHRpb25zKVxuICApXG5cbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVBY3Rpb24sXG4gICAgdGE6IHRyYW5zbGF0ZUFjdGlvbixcbiAgICB0cmFuc2xhdGVCdXR0b24sXG4gICAgdGI6IHRyYW5zbGF0ZUJ1dHRvbixcbiAgICB0cmFuc2xhdGVMYWJlbCxcbiAgICB0bDogdHJhbnNsYXRlTGFiZWwsXG4gICAgdHJhbnNsYXRlUHJvcGVydHksXG4gICAgdHA6IHRyYW5zbGF0ZVByb3BlcnR5LFxuICAgIHRyYW5zbGF0ZU1lc3NhZ2UsXG4gICAgdG06IHRyYW5zbGF0ZU1lc3NhZ2UsXG4gICAgdDogaTE4bi50LFxuICAgIHRyYW5zbGF0ZTogaTE4bi50LFxuICB9XG59XG4iLCJpbXBvcnQge1xuICB1c2VUcmFuc2xhdGlvbiBhcyBvcmlnaW5hbFVzZVRyYW5zbGF0aW9uLFxufSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgVEZ1bmN0aW9uLCBpMThuIH0gZnJvbSAnaTE4bmV4dCdcblxuaW1wb3J0IHsgVHJhbnNsYXRlRnVuY3Rpb25zLCBjcmVhdGVGdW5jdGlvbnMgfSBmcm9tICcuLi8uLi91dGlscy90cmFuc2xhdGUtZnVuY3Rpb25zLmZhY3RvcnknXG5cbi8qKlxuICogRXh0ZW5kcyB7QGxpbmsgVHJhbnNsYXRlRnVuY3Rpb25zfS4gQXBhcnQgZnJvbSB0aGF0IGl0IGFsc28gcmV0dXJucyBhbGwgdGhlIHByb3BlcnRpZXNcbiAqIGRlZmluZWQgYmVsb3cuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdhZG1pbmpzJ1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCB7IHRyYW5zbGF0ZUJ1dHRvbiB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Qm94PlxuICogICAgICAgPEJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiIG9uQ2xpY2s9ey4uLn0+e3RyYW5zbGF0ZUJ1dHRvbignc2F2ZScpfTxCdXR0b24+XG4gKiAgICAgPC9Cb3g+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBtZW1iZXJvZiB1c2VUcmFuc2xhdGlvblxuICogQGFsaWFzIFVzZVRyYW5zbGF0aW9uUmVzcG9uc2VcbiAqXG4gKiBAcHJvcGVydHkge1RyYW5zbGF0ZUZ1bmN0aW9ufSAuLi4gQWxsIGZ1bmN0aW9ucyBkZWZpbmVkIGluIHtAbGluayBUcmFuc2xhdGVGdW5jdGlvbnN9XG4gKi9cbmV4cG9ydCB0eXBlIFVzZVRyYW5zbGF0aW9uUmVzcG9uc2UgPSBUcmFuc2xhdGVGdW5jdGlvbnMgJiB7XG4gIHQ6IFRGdW5jdGlvbjtcbiAgLyoqXG4gICAqIEN1cnJlbnQgaTE4biBpbnN0YW5jZS5cbiAgICovXG4gIGkxOG46IGkxOG47XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdHJhbnNsYXRpb24gc3lzdGVtIGlzIHJlYWR5LiBJbiBBZG1pbkpTIGl0IGlzIGFsd2F5cyByZWFkeSA6KS5cbiAgICovXG4gIHJlYWR5OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIEV4dGVuZHMgdGhlIHVzZVRyYW5zbGF0aW9uIGhvb2sgZnJvbSByZWFjdC1pMThuZXh0IGxpYnJhcnkuXG4gKlxuICogUmV0dXJucyBhbGwgdGhlIHtAbGluayBUcmFuc2xhdGVGdW5jdGlvbnN9ICsgbWV0aG9kcyByZXR1cm5lZCBieSB0aGUgb3JpZ2luYWxcbiAqIHVzZVRyYW5zbGF0aW9uIG1ldGhvZCBmcm9tIHJlYWN0LWkxOG5leHQgbGlrZTogYGkxOG5gIGluc3RhbmNlIGFuZCBgcmVhZHlgIGZsYWcuXG4gKlxuICogQGNsYXNzXG4gKiBAc3ViY2F0ZWdvcnkgSG9va3NcbiAqIEBidW5kbGVcbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqIEByZXR1cm5zIHtVc2VUcmFuc2xhdGlvblJlc3BvbnNlfVxuICovXG5leHBvcnQgY29uc3QgdXNlVHJhbnNsYXRpb24gPSAoKTogVXNlVHJhbnNsYXRpb25SZXNwb25zZSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgY29uc3QgeyBpMThuLCAuLi5yZXN0IH0gPSBvcmlnaW5hbFVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgdHJhbnNsYXRlRnVuY3Rpb25zID0gY3JlYXRlRnVuY3Rpb25zKGkxOG4pXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN0LFxuICAgIGkxOG4sXG4gICAgLi4udHJhbnNsYXRlRnVuY3Rpb25zLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVRyYW5zbGF0aW9uXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBOYXZpZ2F0aW9uLCBOYXZpZ2F0aW9uRWxlbWVudFByb3BzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24gfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtdHJhbnNsYXRpb24nXG5pbXBvcnQgeyBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvc3RvcmUnXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHBhZ2VzPzogUmVkdXhTdGF0ZVsncGFnZXMnXTtcbn1cblxuY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG5cbmNvbnN0IFNpZGViYXJQYWdlczogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcGFnZXMgfSA9IHByb3BzXG5cbiAgY29uc3QgeyB0cmFuc2xhdGVMYWJlbCB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICBjb25zdCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKClcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuXG4gIGlmICghcGFnZXMgfHwgIXBhZ2VzLmxlbmd0aCkge1xuICAgIHJldHVybiAoPD48Lz4pXG4gIH1cblxuICBjb25zdCBpc0FjdGl2ZSA9IChwYWdlKTogYm9vbGVhbiA9PiAoXG4gICAgISFsb2NhdGlvbi5wYXRobmFtZS5tYXRjaChgL3BhZ2VzLyR7cGFnZS5uYW1lfWApXG4gIClcblxuICBjb25zdCBlbGVtZW50czogQXJyYXk8TmF2aWdhdGlvbkVsZW1lbnRQcm9wcz4gPSBwYWdlcy5tYXAocGFnZSA9PiAoe1xuICAgIGlkOiBwYWdlLm5hbWUsXG4gICAgbGFiZWw6IHBhZ2UubmFtZSxcbiAgICBpc1NlbGVjdGVkOiBpc0FjdGl2ZShwYWdlKSxcbiAgICBpY29uOiBwYWdlLmljb24sXG4gICAgaHJlZjogaC5wYWdlVXJsKHBhZ2UubmFtZSksXG4gICAgb25DbGljazogKGV2ZW50LCBlbGVtZW50KTogdm9pZCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBpZiAoZWxlbWVudC5ocmVmKSB7XG4gICAgICAgIGhpc3RvcnkucHVzaChlbGVtZW50LmhyZWYsIHsgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9KVxuICAgICAgfVxuICAgIH0sXG4gIH0pKVxuXG4gIHJldHVybiAoXG4gICAgPE5hdmlnYXRpb25cbiAgICAgIGxhYmVsPXt0cmFuc2xhdGVMYWJlbCgncGFnZXMnKX1cbiAgICAgIGVsZW1lbnRzPXtlbGVtZW50c31cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpZGViYXJQYWdlc1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQm94LCBTb2Z0d2FyZUJyb3RoZXJzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IGFsbG93T3ZlcnJpZGUgZnJvbSAnLi4vLi4vLi4vaG9jL2FsbG93LW92ZXJyaWRlJ1xuXG5jb25zdCBTaWRlYmFyRm9vdGVyOiBSZWFjdC5GQyA9ICgpID0+IChcbiAgPEJveCBtdD1cImxnXCI+XG4gICAgPFNvZnR3YXJlQnJvdGhlcnMgLz5cbiAgPC9Cb3g+XG4pXG5cbmV4cG9ydCBkZWZhdWx0IGFsbG93T3ZlcnJpZGUoU2lkZWJhckZvb3RlciwgJ1NpZGViYXJGb290ZXInKVxuIiwiaW1wb3J0IGF4aW9zLCB7IEF4aW9zUmVzcG9uc2UsIEF4aW9zSW5zdGFuY2UsIEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHtcbiAgUmVzb3VyY2VBY3Rpb25QYXJhbXMsXG4gIEJ1bGtBY3Rpb25QYXJhbXMsXG4gIFJlY29yZEFjdGlvblBhcmFtcyxcbiAgQWN0aW9uUGFyYW1zLFxufSBmcm9tICcuLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycy92aWV3LWhlbHBlcnMnXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWFsZXJ0ICovXG5pbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IFJlY29yZEFjdGlvblJlc3BvbnNlLCBBY3Rpb25SZXNwb25zZSwgQnVsa0FjdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYmFja2VuZC9hY3Rpb25zL2FjdGlvbi5pbnRlcmZhY2UnXG5cbmxldCBnbG9iYWxBbnk6IGFueSA9IHt9XG5cbnRyeSB7XG4gIGdsb2JhbEFueSA9IHdpbmRvd1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgaWYgKGVycm9yLm1lc3NhZ2UgIT09ICd3aW5kb3cgaXMgbm90IGRlZmluZWQnKSB7XG4gICAgdGhyb3cgZXJyb3JcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxBbnkgPSB7IGlzT25TZXJ2ZXI6IHRydWUgfVxuICB9XG59XG5cbi8qKlxuICogVHlwZSBvZiBhbiBbYXhpb3MgcmVxdWVzdF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2Jsb2IvbWFzdGVyL2luZGV4LmQudHMjTDQzfVxuICpcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEF4aW9zUmVxdWVzdENvbmZpZ1xuICogQGFsaWFzIEF4aW9zUmVxdWVzdENvbmZpZ1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvYmxvYi9tYXN0ZXIvaW5kZXguZC50cyNMNDNcbiAqL1xuXG5jb25zdCBjaGVja1Jlc3BvbnNlID0gKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKTogdm9pZCA9PiB7XG4gIGlmIChnbG9iYWxBbnkuaXNPblNlcnZlcikgeyByZXR1cm4gfVxuICBjb25zdCBsb2dpblVybCA9IFtnbG9iYWxBbnkubG9jYXRpb24ub3JpZ2luLCBnbG9iYWxBbnkuUkVEVVhfU1RBVEUucGF0aHMubG9naW5QYXRoXS5qb2luKCcnKVxuICAvLyBpZiByZXNwb25zZSBoYXMgcmVkaXJlY3QgdG8gbG9naW5VcmxcbiAgaWYgKHJlc3BvbnNlLnJlcXVlc3QucmVzcG9uc2VVUkxcbiAgICAgICYmIHJlc3BvbnNlLnJlcXVlc3QucmVzcG9uc2VVUkwubWF0Y2gobG9naW5VcmwpXG4gICkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIGFsZXJ0KCdZb3VyIHNlc3Npb24gZXhwaXJlZC4gWW91IHdpbGwgYmUgcmVkaXJlY3RlZCB0byBsb2dpbiBzY3JlZW4nKVxuICAgIGdsb2JhbEFueS5sb2NhdGlvbi5hc3NpZ24obG9naW5VcmwpXG4gIH1cbn1cblxuLyoqXG4gKiBFeHRlbmRzIHtAbGluayBBeGlvc1JlcXVlc3RDb25maWd9XG4gKlxuICogQGFsaWFzIEFjdGlvbkFQSVBhcmFtc1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHByb3BlcnR5IHthbnl9ICAgLi4uICAgIGFueSBwcm9wZXJ0eSBzdXBwb3J0ZWQgYnkge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqL1xuZXhwb3J0IHR5cGUgQWN0aW9uQVBJUGFyYW1zID0gQXhpb3NSZXF1ZXN0Q29uZmlnICYgQWN0aW9uUGFyYW1zXG5cbi8qKlxuICogRXh0ZW5kcyB7QGxpbmsgQWN0aW9uQVBJUGFyYW1zfVxuICpcbiAqIEBhbGlhcyBSZXNvdXJjZUFjdGlvbkFQSVBhcmFtc1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHByb3BlcnR5IHthbnl9ICAgLi4uICAgIGFueSBwcm9wZXJ0eSBzdXBwb3J0ZWQgYnkge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqL1xuZXhwb3J0IHR5cGUgUmVzb3VyY2VBY3Rpb25BUElQYXJhbXMgPSBBeGlvc1JlcXVlc3RDb25maWcgJiBSZXNvdXJjZUFjdGlvblBhcmFtcyAmIHtcbiAgcXVlcnk/OiBzdHJpbmc7XG59XG4vKipcbiAqIEV4dGVuZHMge0BsaW5rIEFjdGlvbkFQSVBhcmFtc31cbiAqXG4gKiBAYWxpYXMgUmVjb3JkQWN0aW9uQVBJUGFyYW1zXG4gKiBAbWVtYmVyb2YgQXBpQ2xpZW50XG4gKiBAcHJvcGVydHkge2FueX0gICAuLi4gICAgYW55IHByb3BlcnR5IHN1cHBvcnRlZCBieSB7QGxpbmsgQWN0aW9uQVBJUGFyYW1zfVxuICovXG5leHBvcnQgdHlwZSBSZWNvcmRBY3Rpb25BUElQYXJhbXMgPSBBeGlvc1JlcXVlc3RDb25maWcgJiBSZWNvcmRBY3Rpb25QYXJhbXNcblxuLyoqXG4gKiBFeHRlbmRzIHtAbGluayBBY3Rpb25BUElQYXJhbXN9XG4gKlxuICogQGFsaWFzIEJ1bGtBY3Rpb25BUElQYXJhbXNcbiAqIEBtZW1iZXJvZiBBcGlDbGllbnRcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2Jsb2IvbWFzdGVyL2luZGV4LmQudHMjTDQzXG4gKiBAcHJvcGVydHkge2FueX0gICAuLi4gICAgYW55IHByb3BlcnR5IHN1cHBvcnRlZCBieSB7QGxpbmsgQWN0aW9uQVBJUGFyYW1zfVxuICovXG5leHBvcnQgdHlwZSBCdWxrQWN0aW9uQVBJUGFyYW1zID0gQXhpb3NSZXF1ZXN0Q29uZmlnICYgQnVsa0FjdGlvblBhcmFtc1xuXG5cbi8qKlxuICogRXh0ZW5kcyB7QGxpbmsgQXhpb3NSZXF1ZXN0Q29uZmlnfVxuICpcbiAqIEBhbGlhcyBHZXRQYWdlQVBJUGFyYW1zXG4gKiBAbWVtYmVyb2YgQXBpQ2xpZW50XG4gKiBAcHJvcGVydHkge2FueX0gICAuLi4gICAgYW55IHByb3BlcnR5IHN1cHBvcnRlZCBieSB7QGxpbmsgQXhpb3NSZXF1ZXN0Q29uZmlnfVxuICovXG5leHBvcnQgdHlwZSBHZXRQYWdlQVBJUGFyYW1zID0gQXhpb3NSZXF1ZXN0Q29uZmlnICYge1xuICAvKipcbiAgICogVW5pcXVlIHBhZ2UgbmFtZVxuICAgKi9cbiAgcGFnZU5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBDbGllbnQgd2hpY2ggYWNjZXNzIHRoZSBhZG1pbiBBUEkuXG4gKiBVc2UgaXQgdG8gZmV0Y2ggZGF0YSBmcm9tIGF1dG8gZ2VuZXJhdGVkIEFkbWluSlMgQVBJLlxuICpcbiAqIEluIHRoZSBiYWNrZW5kIGl0IHVzZXMgW2F4aW9zXShodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MpIGNsaWVudFxuICogbGlicmFyeS5cbiAqXG4gKiBVc2FnZTpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IEFwaUNsaWVudCB9IGZyb20gJ2FkbWluanMnXG4gKlxuICogY29uc3QgYXBpID0gbmV3IEFwaUNsaWVudCgpXG4gKiAvLyBmZXRjaGluZyBhbGwgcmVjb3Jkc1xuICogYXBpLnJlc291cmNlQWN0aW9uKHsgcmVzb3VyY2VJZDogJ0NvbW1lbnRzJywgYWN0aW9uTmFtZTogJ2xpc3QnIH0pLnRoZW4ocmVzdWx0cyA9PiB7Li4ufSlcbiAqIGBgYFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3NcbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQXBpQ2xpZW50IHtcbiAgcHJpdmF0ZSBiYXNlVVJMOiBzdHJpbmdcblxuICBwcml2YXRlIGNsaWVudDogQXhpb3NJbnN0YW5jZVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFzZVVSTCA9IEFwaUNsaWVudC5nZXRCYXNlVXJsKClcbiAgICB0aGlzLmNsaWVudCA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiB0aGlzLmJhc2VVUkwsXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRCYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgaWYgKGdsb2JhbEFueS5pc09uU2VydmVyKSB7IHJldHVybiAnJyB9XG4gICAgcmV0dXJuIFtnbG9iYWxBbnkubG9jYXRpb24ub3JpZ2luLCBnbG9iYWxBbnkuUkVEVVhfU1RBVEU/LnBhdGhzLnJvb3RQYXRoXS5qb2luKCcnKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaCBieSBxdWVyeSBzdHJpbmcgZm9yIHJlY29yZHMgaW4gYSBnaXZlbiByZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtICAge09iamVjdH0gIG9wdGlvbnNcbiAgICogQHBhcmFtICAge1N0cmluZ30gIG9wdGlvbnMucmVzb3VyY2VJZCAgaWQgb2YgYSB7QGxpbmsgUmVzb3VyY2VKU09OfVxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgb3B0aW9ucy5xdWVyeSAgICAgICBxdWVyeSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybiAge1Byb21pc2U8U2VhcmNoUmVzcG9uc2U+fVxuICAgKi9cbiAgYXN5bmMgc2VhcmNoUmVjb3Jkcyh7IHJlc291cmNlSWQsIHF1ZXJ5IH06IHtcbiAgICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gICAgcXVlcnk6IHN0cmluZztcbiAgfSk6IFByb21pc2U8QXJyYXk8UmVjb3JkSlNPTj4+IHtcbiAgICBpZiAoZ2xvYmFsQW55LmlzT25TZXJ2ZXIpIHsgcmV0dXJuIFtdIH1cbiAgICBjb25zdCBhY3Rpb25OYW1lID0gJ3NlYXJjaCdcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucmVzb3VyY2VBY3Rpb24oeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lLCBxdWVyeSB9KVxuICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVjb3Jkc1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZXMgZ2l2ZW4gcmVzb3VyY2Uge0BsaW5rIEFjdGlvbn0gb24gdGhlIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtSZXNvdXJjZUFjdGlvbkFQSVBhcmFtc30gICAgIG9wdGlvbnNcbiAgICogQHJldHVybiAge1Byb21pc2U8QWN0aW9uUmVzcG9uc2U+fSAgICAgcmVzcG9uc2UgZnJvbSBhbiB7QGxpbmsgQWN0aW9ufVxuICAgKi9cbiAgYXN5bmMgcmVzb3VyY2VBY3Rpb24ob3B0aW9uczogUmVzb3VyY2VBY3Rpb25BUElQYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8QWN0aW9uUmVzcG9uc2U+PiB7XG4gICAgY29uc3QgeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lLCBkYXRhLCBxdWVyeSwgLi4uYXhpb3NQYXJhbXMgfSA9IG9wdGlvbnNcbiAgICBsZXQgdXJsID0gYC9hcGkvcmVzb3VyY2VzLyR7cmVzb3VyY2VJZH0vYWN0aW9ucy8ke2FjdGlvbk5hbWV9YFxuICAgIGlmIChxdWVyeSkge1xuICAgICAgY29uc3QgcSA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSlcbiAgICAgIHVybCA9IFt1cmwsIHFdLmpvaW4oJy8nKVxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgdXJsLFxuICAgICAgbWV0aG9kOiBkYXRhID8gJ1BPU1QnIDogJ0dFVCcsXG4gICAgICAuLi5heGlvc1BhcmFtcyxcbiAgICAgIGRhdGEsXG4gICAgfSlcbiAgICBjaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZXMgZ2l2ZW4gcmVjb3JkIHtAbGluayBBY3Rpb259IG9uIHRoZSBiYWNrZW5kLlxuICAgKlxuICAgKiBAcGFyYW0gICB7UmVjb3JkQWN0aW9uQVBJUGFyYW1zfSBvcHRpb25zXG4gICAqIEByZXR1cm4gIHtQcm9taXNlPFJlY29yZEFjdGlvblJlc3BvbnNlPn0gICAgICAgICAgICByZXNwb25zZSBmcm9tIGFuIHtAbGluayBBY3Rpb259XG4gICAqL1xuICBhc3luYyByZWNvcmRBY3Rpb24ob3B0aW9uczogUmVjb3JkQWN0aW9uQVBJUGFyYW1zKTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPFJlY29yZEFjdGlvblJlc3BvbnNlPj4ge1xuICAgIGNvbnN0IHsgcmVzb3VyY2VJZCwgcmVjb3JkSWQsIGFjdGlvbk5hbWUsIGRhdGEsIC4uLmF4aW9zUGFyYW1zIH0gPSBvcHRpb25zXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXF1ZXN0KHtcbiAgICAgIHVybDogYC9hcGkvcmVzb3VyY2VzLyR7cmVzb3VyY2VJZH0vcmVjb3Jkcy8ke3JlY29yZElkfS8ke2FjdGlvbk5hbWV9YCxcbiAgICAgIG1ldGhvZDogZGF0YSA/ICdQT1NUJyA6ICdHRVQnLFxuICAgICAgLi4uYXhpb3NQYXJhbXMsXG4gICAgICBkYXRhLFxuICAgIH0pXG4gICAgY2hlY2tSZXNwb25zZShyZXNwb25zZSlcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGdpdmVuIGJ1bGsge0BsaW5rIEFjdGlvbn0gb24gdGhlIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtCdWxrQWN0aW9uQVBJUGFyYW1zfSBvcHRpb25zXG4gICAqIEByZXR1cm4gIHtQcm9taXNlPEJ1bGtBY3Rpb25SZXNwb25zZT59ICAgICAgICAgICAgcmVzcG9uc2UgZnJvbSBhbiB7QGxpbmsgQWN0aW9ufVxuICAgKi9cbiAgYXN5bmMgYnVsa0FjdGlvbihvcHRpb25zOiBCdWxrQWN0aW9uQVBJUGFyYW1zKTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPEJ1bGtBY3Rpb25SZXNwb25zZT4+IHtcbiAgICBjb25zdCB7IHJlc291cmNlSWQsIHJlY29yZElkcywgYWN0aW9uTmFtZSwgZGF0YSwgLi4uYXhpb3NQYXJhbXMgfSA9IG9wdGlvbnNcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuICAgIHBhcmFtcy5zZXQoJ3JlY29yZElkcycsIChyZWNvcmRJZHMgfHwgW10pLmpvaW4oJywnKSlcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQucmVxdWVzdCh7XG4gICAgICB1cmw6IGAvYXBpL3Jlc291cmNlcy8ke3Jlc291cmNlSWR9L2J1bGsvJHthY3Rpb25OYW1lfWAsXG4gICAgICBtZXRob2Q6IGRhdGEgPyAnUE9TVCcgOiAnR0VUJyxcbiAgICAgIC4uLmF4aW9zUGFyYW1zLFxuICAgICAgZGF0YSxcbiAgICAgIHBhcmFtcyxcbiAgICB9KVxuICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyBkYXNoYm9hcmQgaGFuZGxlci5cbiAgICpcbiAgICogQHBhcmFtICAge0F4aW9zUmVxdWVzdENvbmZpZ30gICAgICAgb3B0aW9uc1xuICAgKiBAcmV0dXJuICB7UHJvbWlzZTxBeGlvc1Jlc3BvbnNlPGFueT4+fSByZXNwb25zZSBmcm9tIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIGRlZmluZWQgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIEFkbWluSlNPcHRpb25zI2Rhc2hib2FyZH1cbiAgICovXG4gIGFzeW5jIGdldERhc2hib2FyZChvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7fSk6IFByb21pc2U8QXhpb3NSZXNwb25zZTxhbnk+PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoJy9hcGkvZGFzaGJvYXJkJywgb3B0aW9ucylcbiAgICBjaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZXMgaGFuZGxlciBmdW5jdGlvbiBvZiBnaXZlbiBwYWdlIGFuZCByZXR1cm5zIGl0cyByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtICAge0dldFBhZ2VBUElQYXJhbXN9ICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICogQHJldHVybiAge1Byb21pc2U8QXhpb3NSZXNwb25zZTxhbnk+Pn0gICAgIHJlc3BvbnNlIGZyb20gdGhlIGhhbmRsZXIgb2YgZ2l2ZW4gcGFnZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lZCBpbiB7QGxpbmsgQWRtaW5KU09wdGlvbnMjcGFnZXN9XG4gICAqL1xuICBhc3luYyBnZXRQYWdlKG9wdGlvbnM6IEdldFBhZ2VBUElQYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8YW55Pj4ge1xuICAgIGNvbnN0IHsgcGFnZU5hbWUsIC4uLmF4aW9zUGFyYW1zIH0gPSBvcHRpb25zXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXF1ZXN0KHtcbiAgICAgIHVybDogYC9hcGkvcGFnZXMvJHtwYWdlTmFtZX1gLFxuICAgICAgLi4uYXhpb3NQYXJhbXMsXG4gICAgfSlcbiAgICBjaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIEFwaUNsaWVudCBhcyBkZWZhdWx0LFxuICBBcGlDbGllbnQsXG59XG4iLCJleHBvcnQgY29uc3QgRk9STV9WQUxVRV9OVUxMID0gJ19fRk9STV9WQUxVRV9OVUxMX18nXG5leHBvcnQgY29uc3QgRk9STV9WQUxVRV9FTVBUWV9PQkpFQ1QgPSAnX19GT1JNX1ZBTFVFX0VNUFRZX09CSkVDVF9fJ1xuZXhwb3J0IGNvbnN0IEZPUk1fVkFMVUVfRU1QVFlfQVJSQVkgPSAnX19GT1JNX1ZBTFVFX0VNUFRZX0FSUkFZX18nXG5cbmNvbnN0IGlzT2JqZWN0T3JBcnJheSA9ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiAoXG4gIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbiAgJiYgKHZhbHVlIGFzIG9iamVjdCkuY29uc3RydWN0b3IgIT09IEZpbGVcbiAgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpXG4pXG5cbi8qKlxuICogQ2hhbmdlcyBSZWNvcmRKU09OIHRoYXQgaXQgY2FuIGJlIHNlbmQgYXMgYSBGb3JtRGF0YSB0byB0aGUgYmFja2VuZC5cbiAqXG4gKiBGb3JtRGF0YSBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGFyZSBzZW5kaW5nIGZpbGVzIHZpYSB0aGUgd2lyZS4gQnV0IGl0IGhhcyBsaW1pdGF0aW9ucy5cbiAqIE5hbWVseSBpdCBjYW4gb25seSB0cmFuc3BvcnQgZmlsZXMgYW5kIHN0cmluZ3MuIFRoYXQgaXMgd2h5IHdlIGhhdmUgdG8gY29udmVydCBzb21lXG4gKiBzdGFuZGFyZCB0eXBlcyBsaWtlIE5VTEwgdG8gY29uc3RhbnRzIHNvIHRoZXkgY2FuIGJlIHByb3BlcnR5IGNvbnZlcnRlZCBiYWNrIGJ5IHRoZSBiYWNrZW5kLlxuICogQW5kIHRodXMgcHJvcGVybHkgaGFuZGxlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge1JlY29yZEpTT059ICByZWNvcmRcbiAqIEByZXR1cm4gIHtGb3JtRGF0YX1cbiAqL1xuZnVuY3Rpb24gcGFyYW1zVG9Gb3JtRGF0YShwYXJhbXM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBGb3JtRGF0YSB7XG4gIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcblxuICAvLyBBc3N1bWUgdGhhdCBwYXJhbXMgYXJlIGZsYXR0ZWRcbiAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAvLyB7QGxpbmsgdXBkYXRlUmVjb3JkfSBkb2VzIG5vdCBjaGFuZ2UgZW1wdHkgb2JqZWN0cyBcInt9XCIgLSBzbyBpbiBvcmRlciB0byBwcmV2ZW50IGhhdmluZ1xuICAgIC8vIHRoZW0gY2hhbmdlZCB0byBcIltvYmplY3QgT2JqZWN0XVwiIHdlIGhhdmUgdG8gc2V0IHRoZW0gdG8gZW1wdHkgc3RyaW5ncy5cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmb3JtRGF0YS5zZXQoa2V5LCBGT1JNX1ZBTFVFX05VTEwpXG4gICAgfVxuICAgIC8vIEZpbGUgb2JqZWN0cyBoYXMgdG8gZ28gdGhyb3VnaCBiZWNhdXNlIHRoZXkgYXJlIGhhbmRsZWQgYnkgRm9ybURhdGFcbiAgICBpZiAoaXNPYmplY3RPckFycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmb3JtRGF0YS5zZXQoa2V5LCBGT1JNX1ZBTFVFX0VNUFRZX0FSUkFZKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1EYXRhLnNldChrZXksIEZPUk1fVkFMVUVfRU1QVFlfT0JKRUNUKVxuICAgIH1cbiAgICAvLyBDb252ZXJ0IERhdGUgZmllbGRzIHRvIFVUQyB0aW1lem9uZVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiBmb3JtRGF0YS5zZXQoa2V5LCB2YWx1ZS50b0lTT1N0cmluZygpKVxuICAgIH1cblxuICAgIC8vIFJlc3QgZ29lcyBhcyBhIHN0YW5kYXJkIHZhbHVlXG4gICAgcmV0dXJuIGZvcm1EYXRhLnNldChrZXksIHZhbHVlIGFzIHN0cmluZylcbiAgfSlcbiAgcmV0dXJuIGZvcm1EYXRhXG59XG5cbmV4cG9ydCB7XG4gIHBhcmFtc1RvRm9ybURhdGEgYXMgZGVmYXVsdCxcbiAgcGFyYW1zVG9Gb3JtRGF0YSxcbn1cbiIsImltcG9ydCB7IE5vdGljZU1lc3NhZ2VJblN0YXRlIH0gZnJvbSAnLi4vc3RvcmUnXG5pbXBvcnQgeyBOb3RpY2VNZXNzYWdlIH0gZnJvbSAnLi4vLi4vaG9jL3dpdGgtbm90aWNlJ1xuXG5leHBvcnQgY29uc3QgQUREX05PVElDRSA9ICdBRERfTk9USUNFJ1xuXG5leHBvcnQgdHlwZSBBZGROb3RpY2VSZXNwb25zZSA9IHtcbiAgdHlwZTogdHlwZW9mIEFERF9OT1RJQ0U7XG4gIGRhdGE6IE5vdGljZU1lc3NhZ2VJblN0YXRlO1xufVxuXG5leHBvcnQgY29uc3QgYWRkTm90aWNlID0gKGRhdGE6IE5vdGljZU1lc3NhZ2UgPSB7IG1lc3NhZ2U6ICcnIH0pOiBBZGROb3RpY2VSZXNwb25zZSA9PiAoe1xuICB0eXBlOiBBRERfTk9USUNFLFxuICBkYXRhOiB7XG4gICAgbWVzc2FnZTogZGF0YS5tZXNzYWdlLFxuICAgIGlkOiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSksXG4gICAgdHlwZTogZGF0YS50eXBlIHx8ICdzdWNjZXNzJyxcbiAgICBwcm9ncmVzczogMCxcbiAgfSxcbn0pXG4iLCJpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgYWRkTm90aWNlIH0gZnJvbSAnLi4vc3RvcmUvYWN0aW9ucy9hZGQtbm90aWNlJ1xuaW1wb3J0IHsgTm90aWNlTWVzc2FnZSB9IGZyb20gJy4uL2hvYy93aXRoLW5vdGljZSdcblxuLyoqXG4gKiBAbWVtYmVyb2YgdXNlTm90aWNlXG4gKiBAYWxpYXMgQWRkTm90aWNlXG4gKi9cbmV4cG9ydCB0eXBlIEFkZE5vdGljZSA9IChub3RpY2U6IE5vdGljZU1lc3NhZ2UpID0+IGFueTtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBIb29rIHdoaWNoIGFsbG93cyB5b3UgdG8gYWRkIG5vdGljZSBtZXNzYWdlIHRvIHRoZSBhcHAuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgdXNlTm90aWNlLCBCdXR0b24gfSBmcm9tICdhZG1pbmpzJ1xuICpcbiAqIGNvbnN0IG15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBzZW5kTm90aWNlID0gdXNlTm90aWNlKClcbiAqICAgcmVuZGVyIChcbiAqICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHNlbmROb3RpY2UoeyBtZXNzYWdlOiAnSSBhbSBhd2Vzb21lJyB9KX0+SSBhbSBhd2Vzb21lPC9CdXR0b24+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBjbGFzc1xuICogQHN1YmNhdGVnb3J5IEhvb2tzXG4gKiBAYnVuZGxlXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VOb3RpY2UgPSAoKTogQWRkTm90aWNlID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIHJldHVybiAobm90aWNlKTogYW55ID0+IGRpc3BhdGNoKGFkZE5vdGljZShub3RpY2UpKVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VOb3RpY2VcbiIsImltcG9ydCB7IFJlY29yZEpTT04gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgUmVjb3JkQWN0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2FjdGlvbnMvYWN0aW9uLmludGVyZmFjZSdcblxuLyoqXG4gKiBIYW5kbGVycyBvZiBhbGwgW0FjdGlvbnNde0BsaW5rIEFjdGlvbn0gb2YgdHlwZSBgcmVjb3JkYCByZXR1cm5zIHJlY29yZC5cbiAqIERlcGVuZGluZyBvbiBhIHBsYWNlIGFuZCByZXNwb25zZSB3ZSBoYXZlIHRvIG1lcmdlIHdoYXQgd2FzIHJldHVybmVkXG4gKiB0byB0aGUgYWN0dWFsIHN0YXRlLiBJdCBpcyBkb25lIGluIGZvbGxvd2luZyBwbGFjZXM6XG4gKiAtIHtAbGluayB1c2VSZWNvcmR9IGhvb2tcbiAqIC0ge0BsaW5rIFJlY29yZEluTGlzdH0gY29tcG9uZW50XG4gKiAtIHtAbGluayBSZWNvcmRBY3Rpb259IGNvbXBvbmVudFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG1lcmdlUmVjb3JkUmVzcG9uc2UgPSAocmVjb3JkOiBSZWNvcmRKU09OLCByZXNwb25zZTogUmVjb3JkQWN0aW9uUmVzcG9uc2UpOiBSZWNvcmRKU09OID0+ICh7XG4gIC8vIHdlIHN0YXJ0IGZyb20gdGhlIHJlc3BvbnNlIGJlY2F1c2UgaXQgY2FuIGhhdmUgZGlmZmVyZW50IHJlY29yZEFjdGlvbnMgb3IgYnVsa0FjdGlvbnNcbiAgLi4uKHJlc3BvbnNlLnJlY29yZCB8fCByZWNvcmQpLFxuICAvLyByZWNvcmRzIGhhcyB0byBiZSByZXNldCBldmVyeSB0aW1lIGJlY2F1c2Ugc28gdGhhdCB1c2VyIHdvbnRcbiAgLy8gc2VlIG9sZCBlcnJvcnMgd2hpY2ggYXJlIG5vdCByZWxldmFudCBhbnltb3JlXG4gIGVycm9yczogcmVzcG9uc2UucmVjb3JkLmVycm9ycyxcbiAgcG9wdWxhdGVkOiB7IC4uLnJlY29yZC5wb3B1bGF0ZWQsIC4uLnJlc3BvbnNlLnJlY29yZC5wb3B1bGF0ZWQgfSxcbiAgcGFyYW1zOiB7IC4uLnJlY29yZC5wYXJhbXMsIC4uLnJlc3BvbnNlLnJlY29yZC5wYXJhbXMgfSxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlUmVjb3JkUmVzcG9uc2VcbiIsImNvbnN0IERFTElNSVRFUiA9ICcuJ1xuXG5cbmV4cG9ydCB7IERFTElNSVRFUiB9XG4iLCJpbXBvcnQgeyBERUxJTUlURVIgfSBmcm9tICcuL2NvbnN0YW50cydcbmltcG9ydCB7IEdldE9wdGlvbnMgfSBmcm9tICcuL2ZsYXQudHlwZXMnXG4vLyB0aGlzIGlzIHRoZSByZWdleCB1c2VkIHRvIGZpbmQgYWxsIGV4aXN0aW5nIHByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBhIGtleVxuXG5leHBvcnQgY29uc3QgcHJvcGVydHlLZXlSZWdleCA9IChwcm9wZXJ0eVBhdGg6IHN0cmluZywgb3B0aW9ucz86IEdldE9wdGlvbnMpOiBSZWdFeHAgPT4ge1xuICBjb25zdCBkZWxpbWl0ZXIgPSBuZXcgUmVnRXhwKGBcXFxcJHtERUxJTUlURVJ9YCwgJ2cnKVxuICBjb25zdCBlc2NhcGVkRGVsaW1pdGVyID0gYFxcXFwke0RFTElNSVRFUn1gXG4gIC8vIGJ1dCBmb3IgYG5lc3RlZC4xLnByb3BlcnR5LjBgIGl0IHdpbGwgcHJvZHVjZSBgbmVzdGVkKFxcLnxcXC5cXGQrXFwuKTEoXFwufFxcLlxcZCtcXC4pcHJvcGVydHkuMGBcbiAgLy8gYW5kIHRoaXMgaXMgaW50ZW50aW9uYWwgYmVjYXVzZSB1c2VyIGNhbiBnaXZlIGFuIG9uZSBpbmRleCBpbiBwcm9wZXJ0eSBwYXRoIGZvciB3aXRoIGRlZXBseVxuICAvLyBuZXN0ZWQgYXJyYXlzXG4gIGNvbnN0IGVzY2FwZWREZWxpbWl0ZXJPckluZGV4ID0gYCgke2VzY2FwZWREZWxpbWl0ZXJ9fCR7ZXNjYXBlZERlbGltaXRlcn1cXFxcZCske2VzY2FwZWREZWxpbWl0ZXJ9KWBcbiAgY29uc3QgcGF0aCA9IG9wdGlvbnM/LmluY2x1ZGVBbGxTaWJsaW5nc1xuICAgID8gcHJvcGVydHlQYXRoLnJlcGxhY2UoZGVsaW1pdGVyLCBlc2NhcGVkRGVsaW1pdGVyT3JJbmRleClcbiAgICA6IHByb3BlcnR5UGF0aC5yZXBsYWNlKGRlbGltaXRlciwgZXNjYXBlZERlbGltaXRlcilcbiAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3BhdGh9KCR8JHtlc2NhcGVkRGVsaW1pdGVyfSlgLCAnJylcbn1cbiIsImltcG9ydCB7IHByb3BlcnR5S2V5UmVnZXggfSBmcm9tICcuL3Byb3BlcnR5LWtleS1yZWdleCdcbmltcG9ydCB7IEZsYXR0ZW5QYXJhbXMsIEdldE9wdGlvbnMgfSBmcm9tICcuL2ZsYXQudHlwZXMnXG5cbi8qKlxuICogQGxvYWQgLi9zZWxlY3QtcGFyYW1zLmRvYy5tZFxuICogQG1lbWJlcm9mIG1vZHVsZTpmbGF0XG4gKiBAcGFyYW0ge0ZsYXR0ZW5QYXJhbXN9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmcgfCBBcnJheTxzdHJpbmc+fSBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge0dldE9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge0ZsYXR0ZW5QYXJhbXN9XG4gKi9cbmNvbnN0IHNlbGVjdFBhcmFtcyA9IChcbiAgcGFyYW1zOiBGbGF0dGVuUGFyYW1zLFxuICBwcm9wZXJ0aWVzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LFxuICBvcHRpb25zPzogR2V0T3B0aW9ucyxcbik6IEZsYXR0ZW5QYXJhbXMgPT4ge1xuICBjb25zdCBwcm9wZXJ0eUFycmF5ID0gQXJyYXkuaXNBcnJheShwcm9wZXJ0aWVzKSA/IHByb3BlcnRpZXMgOiBbcHJvcGVydGllc11cbiAgY29uc3Qgc2VsZWN0ZWQgPSBwcm9wZXJ0eUFycmF5XG4gICAgLmZpbHRlcihwcm9wZXJ0eVBhdGggPT4gISFwcm9wZXJ0eVBhdGgpXG4gICAgLnJlZHVjZSgoZ2xvYmFsTWVtbywgcHJvcGVydHlQYXRoKSA9PiB7XG4gICAgICBjb25zdCByZWdleCA9IHByb3BlcnR5S2V5UmVnZXgocHJvcGVydHlQYXRoLCBvcHRpb25zKVxuICAgICAgY29uc3QgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAvLyBmaWx0ZXIgYWxsIGtleXMgd2hpY2ggc3RhcnRzIHdpdGggcHJvcGVydHkgcGF0aFxuICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkubWF0Y2gocmVnZXgpKVxuICAgICAgICAucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICAgICAgICBtZW1vW2tleV0gPSAocGFyYW1zW2tleV0gYXMgc3RyaW5nKVxuICAgICAgICAgIHJldHVybiBtZW1vXG4gICAgICAgIH0sIHt9IGFzIEZsYXR0ZW5QYXJhbXMpXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5nbG9iYWxNZW1vLFxuICAgICAgICAuLi5maWx0ZXJlZCxcbiAgICAgIH1cbiAgICB9LCB7fSBhcyBGbGF0dGVuUGFyYW1zKVxuICByZXR1cm4gc2VsZWN0ZWRcbn1cblxuZXhwb3J0IHsgc2VsZWN0UGFyYW1zIH1cbiIsImltcG9ydCB7IHByb3BlcnR5S2V5UmVnZXggfSBmcm9tICcuL3Byb3BlcnR5LWtleS1yZWdleCdcbmltcG9ydCB7IEZsYXR0ZW5QYXJhbXMgfSBmcm9tICcuL2ZsYXQudHlwZXMnXG5cbi8qKlxuICogQGxvYWQgLi9maWx0ZXItb3V0LXBhcmFtcy5kb2MubWRcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZmxhdFxuICogQHBhcmFtIHtGbGF0dGVuUGFyYW1zfSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nIHwgQXJyYXk8c3RyaW5nPn0gcHJvcGVydGllc1xuICogQHJldHVybnMge0ZsYXR0ZW5QYXJhbXN9XG4gKi9cbmNvbnN0IGZpbHRlck91dFBhcmFtcyA9IChcbiAgcGFyYW1zOiBGbGF0dGVuUGFyYW1zLFxuICBwcm9wZXJ0aWVzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LFxuKTogRmxhdHRlblBhcmFtcyA9PiB7XG4gIGNvbnN0IHByb3BlcnR5QXJyYXkgPSBBcnJheS5pc0FycmF5KHByb3BlcnRpZXMpID8gcHJvcGVydGllcyA6IFtwcm9wZXJ0aWVzXVxuXG4gIHJldHVybiBwcm9wZXJ0eUFycmF5XG4gICAgLmZpbHRlcihwcm9wZXJ0eVBhdGggPT4gISFwcm9wZXJ0eVBhdGgpXG4gICAgLnJlZHVjZSgoZ2xvYmFsRmlsdGVyZWQsIHByb3BlcnR5UGF0aCkgPT4ge1xuICAgICAgY29uc3QgcmVnZXggPSBwcm9wZXJ0eUtleVJlZ2V4KHByb3BlcnR5UGF0aClcblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGdsb2JhbEZpbHRlcmVkKVxuICAgICAgICAuZmlsdGVyKGtleSA9PiAha2V5Lm1hdGNoKHJlZ2V4KSlcbiAgICAgICAgLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgICAgICAgbWVtb1trZXldID0gKHBhcmFtc1trZXldIGFzIHN0cmluZylcbiAgICAgICAgICByZXR1cm4gbWVtb1xuICAgICAgICB9LCB7fSBhcyBGbGF0dGVuUGFyYW1zKVxuICAgIH0sIHBhcmFtcylcbn1cblxuZXhwb3J0IHsgZmlsdGVyT3V0UGFyYW1zIH1cbiIsImltcG9ydCB7IFBhdGhQYXJ0cyB9IGZyb20gJy4vcGF0aC1wYXJ0cy50eXBlJ1xuXG4vKipcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZmxhdFxuICogQGFsaWFzIFBhdGhUb1BhcnRzT3B0aW9uc1xuICovXG5leHBvcnQgdHlwZSBQYXRoVG9QYXJ0c09wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgYXJyYXkgaW5kZXhlcyBzaG91bGQgYmUgc2tpcHBlZCBmcm9tIHRoZSBvdXRjb21lLlxuICAgKi9cbiAgc2tpcEFycmF5SW5kZXhlcz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQGxvYWQgLi9wYXRoLXRvLXBhcnRzLmRvYy5tZFxuICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgICAgIHByb3BlcnR5UGF0aFxuICogQHBhcmFtICAge1BhdGhUb1BhcnRzT3B0aW9uc30gIG9wdGlvbnNcbiAqIEByZXR1cm5zICB7UGF0aFBhcnRzfVxuICpcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZmxhdFxuICogQGFsaWFzIHBhdGhUb1BhcnRzXG4gKi9cbmNvbnN0IHBhdGhUb1BhcnRzID0gKHByb3BlcnR5UGF0aDogc3RyaW5nLCBvcHRpb25zOiBQYXRoVG9QYXJ0c09wdGlvbnMgPSB7fSk6IFBhdGhQYXJ0cyA9PiB7XG4gIGxldCBhbGxQYXJ0cyA9IHByb3BlcnR5UGF0aC5zcGxpdCgnLicpXG4gIGlmIChvcHRpb25zLnNraXBBcnJheUluZGV4ZXMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgYWxsUGFydHMgPSBhbGxQYXJ0cy5maWx0ZXIocGFydCA9PiBpc05hTigrcGFydCkpXG4gIH1cbiAgcmV0dXJuIGFsbFBhcnRzLnJlZHVjZSgobWVtbywgcGFydCkgPT4ge1xuICAgIGlmIChtZW1vLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4ubWVtbyxcbiAgICAgICAgW21lbW9bbWVtby5sZW5ndGggLSAxXSwgcGFydF0uam9pbignLicpLFxuICAgICAgXVxuICAgIH1cbiAgICByZXR1cm4gW3BhcnRdXG4gIH0sIFtdIGFzIEFycmF5PHN0cmluZz4pXG59XG5cbmV4cG9ydCB7IHBhdGhUb1BhcnRzIH1cbiIsImltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdmbGF0J1xuaW1wb3J0IHsgREVMSU1JVEVSIH0gZnJvbSAnLi9jb25zdGFudHMnXG5pbXBvcnQgeyBGbGF0dGVuUGFyYW1zIH0gZnJvbSAnLi4vZmxhdCdcbmltcG9ydCB7IHByb3BlcnR5S2V5UmVnZXggfSBmcm9tICcuL3Byb3BlcnR5LWtleS1yZWdleCdcbmltcG9ydCB7IHBhdGhUb1BhcnRzIH0gZnJvbSAnLi9wYXRoLXRvLXBhcnRzJ1xuXG5jb25zdCBpc09iamVjdCA9ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiB7XG4gIC8vIE5vZGUgZW52aXJvbm1lbnRcbiAgaWYgKHR5cGVvZiBGaWxlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsXG4gIH1cbiAgLy8gV2luZG93IGVudmlyb25tZW50XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICEodmFsdWUgaW5zdGFuY2VvZiBGaWxlKSAmJiB2YWx1ZSAhPT0gbnVsbFxufVxuXG4vKipcbiAqIEBsb2FkIC4vc2V0LmRvYy5tZFxuICogQG1lbWJlcm9mIG1vZHVsZTpmbGF0XG4gKiBAcGFyYW0ge0ZsYXR0ZW5QYXJhbXN9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5UGF0aFxuICogQHBhcmFtIHthbnl9IFt2YWx1ZV0gICAgICAgaWYgbm90IGdpdmUgZnVuY3Rpb24gd2lsbCBvbmx5IHRyeSB0byByZW1vdmUgb2xkIGtleXNcbiAqIEByZXR1cm5zIHtGbGF0dGVuUGFyYW1zfVxuICovXG5jb25zdCBzZXQgPSAocGFyYW1zOiBGbGF0dGVuUGFyYW1zID0ge30sIHByb3BlcnR5UGF0aDogc3RyaW5nLCB2YWx1ZT86IGFueSk6IEZsYXR0ZW5QYXJhbXMgPT4ge1xuICBjb25zdCByZWdleCA9IHByb3BlcnR5S2V5UmVnZXgocHJvcGVydHlQYXRoKVxuXG4gIC8vIHJlbW92ZSBhbGwgZXhpc3Rpbmcga2V5c1xuICBjb25zdCBwYXJhbXNDb3B5ID0gT2JqZWN0LmtleXMocGFyYW1zKVxuICAgIC5maWx0ZXIoa2V5ID0+ICFrZXkubWF0Y2gocmVnZXgpKVxuICAgIC5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgICAgbWVtb1trZXldID0gcGFyYW1zW2tleV1cblxuICAgICAgcmV0dXJuIG1lbW9cbiAgICB9LCB7fSBhcyBGbGF0dGVuUGFyYW1zKVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIGNvbnN0IGZsYXR0ZW5lZCA9IGZsYXR0ZW4odmFsdWUpIGFzIGFueVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMoZmxhdHRlbmVkKS5sZW5ndGgpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoZmxhdHRlbmVkKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBwYXJhbXNDb3B5W2Ake3Byb3BlcnR5UGF0aH0ke0RFTElNSVRFUn0ke2tleX1gXSA9IGZsYXR0ZW5lZFtrZXldXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHBhcmFtc0NvcHlbcHJvcGVydHlQYXRoXSA9IFtdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXNDb3B5W3Byb3BlcnR5UGF0aF0gPSB7fVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXNDb3B5W3Byb3BlcnR5UGF0aF0gPSB2YWx1ZVxuICAgIH1cblxuICAgIC8vIHdoZW4gdXNlciBnYXZlIHsgXCJuZXN0ZWQudmFsdWVcIjogXCJzb21ldGhpbmdcIiB9IGFuZCBoYWQgXCJuZXN0ZWRcIiBzZXQgdG8gYG51bGxgLCB0aGVuXG4gICAgLy8gbmVzdGVkIHNob3VsZCBiZSByZW1vdmVkXG4gICAgY29uc3QgcGFydHMgPSBwYXRoVG9QYXJ0cyhwcm9wZXJ0eVBhdGgpLnNsaWNlKDAsIC0xKVxuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwYXJhbXNDb3B5KVxuICAgICAgICAuZmlsdGVyKGtleSA9PiAhcGFydHMuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgICAgICAgbWVtb1trZXldID0gcGFyYW1zQ29weVtrZXldXG5cbiAgICAgICAgICByZXR1cm4gbWVtb1xuICAgICAgICB9LCB7fSBhcyBGbGF0dGVuUGFyYW1zKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyYW1zQ29weVxufVxuXG5leHBvcnQgeyBzZXQgfVxuIiwiaW1wb3J0IHsgdW5mbGF0dGVuIH0gZnJvbSAnZmxhdCdcbmltcG9ydCB7IERFTElNSVRFUiB9IGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgc2VsZWN0UGFyYW1zIH0gZnJvbSAnLi9zZWxlY3QtcGFyYW1zJ1xuaW1wb3J0IHsgRmxhdHRlblBhcmFtcyB9IGZyb20gJy4uL2ZsYXQnXG5pbXBvcnQgeyBwcm9wZXJ0eUtleVJlZ2V4IH0gZnJvbSAnLi9wcm9wZXJ0eS1rZXktcmVnZXgnXG5pbXBvcnQgeyBHZXRPcHRpb25zIH0gZnJvbSAnLi9mbGF0LnR5cGVzJ1xuXG5jb25zdCBURU1QX0hPTERJTkdfS0VZID0gJ1RFTVBfSE9MRElOR19LRVknXG5cbi8qKlxuICogQGxvYWQgLi9nZXQuZG9jLm1kXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmZsYXRcbiAqIEBwYXJhbSB7RmxhdHRlblBhcmFtc30gICBwYXJhbXMgICAgICBmbGF0dGVuIHBhcmFtcyBmcm9tIHdoaWNoIHByb3BlcnR5IGhhcyB0byBiZSB0YWtlblxuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgIFtwcm9wZXJ0eVBhdGhdICBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICogQHBhcmFtIHtHZXRPcHRpb25zfSAgICAgIG9wdGlvbnMgICAgIG9wdGlvbnNcbiAqIEByZXR1cm5zIHthbnl9ICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHByb3BlcnR5IGtleSBleGlzdHMgZGlyZWN0bHkgaXQgcmV0dXJucyB3aGF0IGlzIGluc2lkZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgaXQgdHJpZXMgdG8gZmluZCBhbnkgbmVzdGVkIG9iamVjdHMgYW5kIHJldHVybnNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtXG4gKi9cbmNvbnN0IGdldCA9IChwYXJhbXM6IEZsYXR0ZW5QYXJhbXMgPSB7fSwgcHJvcGVydHlQYXRoPzogc3RyaW5nLCBvcHRpb25zPzogR2V0T3B0aW9ucyk6IGFueSA9PiB7XG4gIGlmICghcHJvcGVydHlQYXRoKSB7XG4gICAgcmV0dXJuIHVuZmxhdHRlbihwYXJhbXMpXG4gIH1cblxuICAvLyB3aGVuIG9iamVjdCBoYXMgdGhpcyBrZXkgLSBzaW1wbHkgcmV0dXJuIGl0XG4gIC8vIHdlIGNhbm5vdCByZWx5IG9uIHR5cGVvZiBwYXJhbXNbcHJvcGVydHlQYXRoICE9PSAndW5kZWZpbmVkJyBiZWNhdXNlIHBhcmFtcyBjYW4gYWN0dWFsbHkgYmVcbiAgLy8gdW5kZWZpbmVkIGFuZCBpbiBzdWNoIGNhc2UgaWYgd291bGQgcGFzcyBhbmQgZnVuY3Rpb24gd291bGQgcmV0dXJuIFt1bmRlZmluZWRdXG4gIGlmIChPYmplY3Qua2V5cyhwYXJhbXMpLmZpbmQoa2V5ID0+IChrZXkgPT09IHByb3BlcnR5UGF0aCkpKSB7XG4gICAgcmV0dXJuIHBhcmFtc1twcm9wZXJ0eVBhdGhdXG4gIH1cblxuICBjb25zdCByZWdleCA9IHByb3BlcnR5S2V5UmVnZXgocHJvcGVydHlQYXRoLCBvcHRpb25zKVxuICBjb25zdCBzZWxlY3RlZFBhcmFtcyA9IHNlbGVjdFBhcmFtcyhwYXJhbXMsIHByb3BlcnR5UGF0aCwgb3B0aW9ucylcblxuICBjb25zdCBuZXN0ZWRQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc2VsZWN0ZWRQYXJhbXMpLnJlZHVjZSgobWVtbywga2V5LCBpbmRleCkgPT4ge1xuICAgIGxldCBuZXdLZXkgPSBrZXkucmVwbGFjZShyZWdleCwgYCR7VEVNUF9IT0xESU5HX0tFWX0ke0RFTElNSVRFUn1gKVxuXG4gICAgLy8gd2hlbiB1c2VyIHdhbnRzIHRvIHRha2UgYWxsU2libGluZ3Mgd2UgaGF2ZSB0byBmaXggdGhlIGluZGV4ZXMgc28gbmVzdGVkIGl0ZW1zIGZyb21cbiAgICAvLyBkaWZmZXJlbnQgc2libGluZ3MgZG9uJ3Qgb3ZlcmxhcFxuICAgIC8vXG4gICAgLy8gRXhhbXBsZSBmb3Iga2V5IGBuZXN0ZWQuMS5lbGA6XG4gICAgLy8gICduZXN0ZWQuMC5lbC4wLnZhbHVlJzogJ3ZhbDAuMCcsXG4gICAgLy8gICduZXN0ZWQuMC5lbC4xLnZhbHVlJzogJ3ZhbDAuMScsXG4gICAgLy8gICduZXN0ZWQuMS5lbC4wLnZhbHVlJzogJ3ZhbDEnLFxuICAgIC8vICAnbmVzdGVkLjEuZWwuMS52YWx1ZSc6ICd2YWwyJyxcbiAgICAvL1xuICAgIC8vIGhhcyB0byBiZSBjaGFuZ2VkIHRvOlxuICAgIC8vICAnVEVNUF9IT0xESU5HX0tFWS4wLnZhbHVlJzogJ3ZhbDAuMCcsXG4gICAgLy8gICdURU1QX0hPTERJTkdfS0VZLjEudmFsdWUnOiAndmFsMC4xJyxcbiAgICAvLyAgJ1RFTVBfSE9MRElOR19LRVkuMi52YWx1ZSc6ICd2YWwxJyxcbiAgICAvLyAgJ1RFTVBfSE9MRElOR19LRVkuMy52YWx1ZSc6ICd2YWwyJyxcbiAgICBpZiAob3B0aW9ucz8uaW5jbHVkZUFsbFNpYmxpbmdzKSB7XG4gICAgICBuZXdLZXkgPSBuZXdLZXkucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cChgJHtURU1QX0hPTERJTkdfS0VZfVxcXFwke0RFTElNSVRFUn0oXFxcXGQqKWApLFxuICAgICAgICBgJHtURU1QX0hPTERJTkdfS0VZfSR7REVMSU1JVEVSfSR7aW5kZXh9YCxcbiAgICAgIClcbiAgICB9XG5cbiAgICBtZW1vW25ld0tleV0gPSBzZWxlY3RlZFBhcmFtc1trZXldXG5cbiAgICByZXR1cm4gbWVtb1xuICB9LCB7fSBhcyBGbGF0dGVuUGFyYW1zKVxuXG4gIGlmIChPYmplY3Qua2V5cyhuZXN0ZWRQcm9wZXJ0aWVzKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gKHVuZmxhdHRlbihuZXN0ZWRQcm9wZXJ0aWVzKSBhcyB7fSlbVEVNUF9IT0xESU5HX0tFWV1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCB7IGdldCB9XG4iLCJpbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnZmxhdCdcbmltcG9ydCB7IEZsYXR0ZW5QYXJhbXMgfSBmcm9tICcuL2ZsYXQudHlwZXMnXG5pbXBvcnQgeyBzZXQgfSBmcm9tICcuL3NldCdcblxuLyoqXG4gKiBNZXJnZXMgcGFyYW1zIHRvZ2V0aGVyIGFuZCByZXR1cm5zIGZsYXR0ZW4gcmVzdWx0XG4gKlxuICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICogQHBhcmFtIHtBcnJheTxhbnk+fSAuLi5tZXJnZVBhcmFtc1xuICogQHJldHVybnMge0ZsYXR0ZW5QYXJhbXN9XG4gKiBAbWVtYmVyb2YgbW9kdWxlOmZsYXRcbiAqL1xuY29uc3QgbWVyZ2UgPSAocGFyYW1zOiBhbnkgPSB7fSwgLi4ubWVyZ2VQYXJhbXM6IEFycmF5PGFueT4pOiBGbGF0dGVuUGFyYW1zID0+IHtcbiAgY29uc3QgZmxhdHRlblBhcmFtcyA9IGZsYXR0ZW4ocGFyYW1zKVxuXG4gIC8vIHJldmVyc2UgYmVjYXVzZSB3ZSBtZXJnZSBmcm9tIHJpZ2h0XG4gIHJldHVybiBtZXJnZVBhcmFtcy5yZXZlcnNlKCkucmVkdWNlKChnbG9iYWxNZW1vLCBtZXJnZVBhcmFtKSA9PiAoXG4gICAgT2JqZWN0LmtleXMobWVyZ2VQYXJhbSlcbiAgICAgIC5yZWR1Y2UoKG1lbW8sIGtleSkgPT4gKHNldChtZW1vLCBrZXksIG1lcmdlUGFyYW1ba2V5XSkpLCBnbG9iYWxNZW1vKVxuICApLCBmbGF0dGVuUGFyYW1zIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pXG59XG5cbmV4cG9ydCB7IG1lcmdlIH1cbiIsImltcG9ydCB7IGZpbHRlck91dFBhcmFtcyB9IGZyb20gJy4vZmlsdGVyLW91dC1wYXJhbXMnXG5pbXBvcnQgeyBGbGF0dGVuUGFyYW1zIH0gZnJvbSAnLi9mbGF0LnR5cGVzJ1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi9nZXQnXG5pbXBvcnQgeyBzZXQgfSBmcm9tICcuL3NldCdcbmltcG9ydCB7IHBhdGhUb1BhcnRzIH0gZnJvbSAnLi9wYXRoLXRvLXBhcnRzJ1xuaW1wb3J0IHsgREVMSU1JVEVSIH0gZnJvbSAnLi9jb25zdGFudHMnXG5cbi8qKlxuICogQGxvYWQgLi9yZW1vdmUtcGF0aC5kb2MubWRcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZmxhdFxuICogQHBhcmFtIHtGbGF0dGVuUGFyYW1zfSBwYXJhbXNcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmxhdHRlblBhcmFtc31cbiAqL1xuY29uc3QgcmVtb3ZlUGF0aCA9IChwYXJhbXM6IEZsYXR0ZW5QYXJhbXMsIHBhdGg6IHN0cmluZyk6IEZsYXR0ZW5QYXJhbXMgPT4ge1xuICAvLyBieSBkZWZhdWx0IHNpbXBseSBmaWx0ZXIgb3V0IGVsZW1lbnRzIGZyb20gdGhlIG9iamVjdFxuICBsZXQgZmlsdGVyZWQgPSBmaWx0ZXJPdXRQYXJhbXMocGFyYW1zLCBwYXRoKVxuXG4gIC8vIHJldmVyc2UgbWVhbnMgdGhhdCB3ZSBpdGVyYXRlIGZyb20gdGhlIGNsb3NlcyBwYXJlbnRcbiAgY29uc3QgcGFyZW50UGF0aHMgPSBwYXRoVG9QYXJ0cyhwYXRoKS5yZXZlcnNlKClcblxuICAvLyBidXQgaWYgb25lIG9mIHRoZSBwYXJlbnQgaXMgYW4gYXJyYXlcbiAgcGFyZW50UGF0aHMuZmluZCgocGFyZW50UGF0aCwgcGFyZW50SW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXJlbnQgPSBnZXQocGFyYW1zLCBwYXJlbnRQYXRoKVxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIC8vIHByZXZpb3VzIGVsZW1lbnQgaXMgc3RyaW5naWZpZWQgaW5kZXggbGlrZSAncHJvcGVydHkuMSdcbiAgICAgIGNvbnN0IHByZXZpb3VzUGF0aHMgPSBwYXJlbnRQYXRoc1twYXJlbnRJbmRleCAtIDFdLnNwbGl0KERFTElNSVRFUilcbiAgICAgIC8vIHNvIHRoaXMgaXMgdGhlIGluZGV4OiAxXG4gICAgICBjb25zdCBwcmV2aW91c1BhdGhJbmRleCA9IHByZXZpb3VzUGF0aHNbcHJldmlvdXNQYXRocy5sZW5ndGggLSAxXVxuICAgICAgcGFyZW50LnNwbGljZSgrcHJldmlvdXNQYXRoSW5kZXgsIDEpXG4gICAgICBmaWx0ZXJlZCA9IHNldChwYXJhbXMsIHBhcmVudFBhdGgsIHBhcmVudClcbiAgICAgIC8vIHRoaXMgd29ya3MganVzdCBmb3IgdGhlIGZpcnN0bHkgZm91bmQgYXJyYXkgaXRlbSwgYmVjYXVzZSBpbiBjYXNlIG9mIHJlbW92aW5nIHRoZSBsYXN0IG9uZVxuICAgICAgLy8gaXQgbGVhdmVzIGBbXWAgYXMgYSB2YWx1ZS5cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9KVxuXG4gIHJldHVybiBmaWx0ZXJlZFxufVxuXG5leHBvcnQgeyByZW1vdmVQYXRoIH1cbiIsImltcG9ydCB7IGZsYXR0ZW4sIHVuZmxhdHRlbiB9IGZyb20gJ2ZsYXQnXG5cbmltcG9ydCB7IERFTElNSVRFUiB9IGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgc2VsZWN0UGFyYW1zIH0gZnJvbSAnLi9zZWxlY3QtcGFyYW1zJ1xuaW1wb3J0IHsgZmlsdGVyT3V0UGFyYW1zIH0gZnJvbSAnLi9maWx0ZXItb3V0LXBhcmFtcydcbmltcG9ydCB7IHNldCB9IGZyb20gJy4vc2V0J1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi9nZXQnXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4vbWVyZ2UnXG5pbXBvcnQgeyBwYXRoVG9QYXJ0cyB9IGZyb20gJy4vcGF0aC10by1wYXJ0cydcbmltcG9ydCB7IHJlbW92ZVBhdGggfSBmcm9tICcuL3JlbW92ZS1wYXRoJ1xuXG5leHBvcnQgdHlwZSBGbGF0TW9kdWxlVHlwZSA9IHtcbiAgZmxhdHRlbjogdHlwZW9mIGZsYXR0ZW47XG4gIHVuZmxhdHRlbjogdHlwZW9mIHVuZmxhdHRlbjtcbiAgc2V0OiB0eXBlb2Ygc2V0O1xuICBnZXQ6IHR5cGVvZiBnZXQ7XG4gIHNlbGVjdFBhcmFtczogdHlwZW9mIHNlbGVjdFBhcmFtcztcbiAgZmlsdGVyT3V0UGFyYW1zOiB0eXBlb2YgZmlsdGVyT3V0UGFyYW1zO1xuICBERUxJTUlURVI6IHR5cGVvZiBERUxJTUlURVI7XG4gIHBhdGhUb1BhcnRzOiB0eXBlb2YgcGF0aFRvUGFydHM7XG4gIHJlbW92ZVBhdGg6IHR5cGVvZiByZW1vdmVQYXRoO1xuICBtZXJnZTogdHlwZW9mIG1lcmdlO1xufVxuXG4vKipcbiAqIEBtb2R1bGUgZmxhdFxuICogQG5hbWUgZmxhdFxuICogQG5ldyBpbiB2ZXJzaW9uIDMuM1xuICogQGxvYWQgLi9mbGF0LmRvYy5tZFxuICovXG5leHBvcnQgY29uc3QgZmxhdDogRmxhdE1vZHVsZVR5cGUgPSB7XG4gIC8qKlxuICAgKiBSYXcgYGZsYXR0ZW5gIGZ1bmN0aW9uIGV4cG9ydGVkIGZyb20gb3JpZ2luYWwge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2ZsYXQgZmxhdH1cbiAgICogcGFja2FnZS5cbiAgICovXG4gIGZsYXR0ZW4sXG4gIC8qKlxuICAgKiBSYXcgYHVuZmxhdHRlbmAgZnVuY3Rpb24gZXhwb3J0ZWQgZnJvbSBvcmlnaW5hbCB7QGxpbmsgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZmxhdCBmbGF0fVxuICAgKiBwYWNrYWdlLlxuICAgKi9cbiAgdW5mbGF0dGVuLFxuXG4gIHNldCxcbiAgZ2V0LFxuICBzZWxlY3RQYXJhbXMsXG4gIGZpbHRlck91dFBhcmFtcyxcbiAgcmVtb3ZlUGF0aCxcbiAgREVMSU1JVEVSLFxuICBwYXRoVG9QYXJ0cyxcbiAgbWVyZ2UsXG59XG4iLCJpbXBvcnQgeyBmbGF0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZmxhdCdcbmltcG9ydCB7IFJlY29yZEpTT04gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJ1xuXG4vKipcbiAqIEhPRiByZXR1cm5pbmcgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHJlY29yZCBhbmQgcmV0dXJucyBhbiB1cGRhdGVkIHJlY29yZC5cbiAqIFRoaXMgd2F5IHdlIGNhbiBwYXNzIHRoaXMgdG8gc2V0U3RhdGUgaW4gcmVhY3QsIHdoaWNoIHRha2VzIG9sZCBzdGF0ZVxuICogKGluIG91ciBjYXNlIHByZXZpb3VzUmVjb3JkKSBhcyBhbiBhcmd1bWVudC5cbiAqXG4gKiBGdW5jdGlvbiBpcyB1c2VkIHdoZW4gdG8gdGhlIHtAbGluayBPblByb3BlcnR5Q2hhbmdlfSBjYWxsYmFjaywgdXNlciBwYXNzZXNcbiAqIGtleSAocHJvcGVydHkgbmFtZSkgYW5kIHRoZSB2YWx1ZSAoZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgc2VsZWN0ZWRSZWNvcmQpLlxuICpcbiAqIFRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgZnVuY3Rpb24gaXMgdG86XG4gKiAtIGNsZWFyIG9sZCB2YWx1ZXMgdW5kZXIgcGFzc2VkIGtleTogc28gd2hlbiB1c2VyIHBhc3NlcyBwcm9wZXJ0eSA9PT0gYHNvbWUua2V5YFxuICogICBmdW5jdGlvbiByZW1vdmVzIGBzb21lLmtleS4xYCwgYHNvbWUua2V5LjJgIGV0Y1xuICogLSBzZXRzIG5ldyB2YWx1ZSB1bmRlciB0aGUgcGFzc2VkIGtleSBmb3IgcHJpbWl0aXZlIHR5cGVzXG4gKiAtIGluIGNhc2Ugb2Ygb2JqZWN0cyAtIGl0IGZsYXR0ZW5zIHRoZW0gZmlyc3QgYW5kIHRoZW4gc2V0cyBhbGwgdGhlIHJlc3VsdGVkIHZhbHVlc1xuICogICB1bmRlciB0aGUgcGF0aCBwcm92aWRlZCBpbiB0aGUgcHJvcGVydHkgYXJndW1lbnRcbiAqIC0gaXQgZmlsbHMgdmFsdWUgaW4gUmVjb3JkSlNPTiNwb3B1bGF0ZWQgd2hlbiBzZWxlY3RlZFJlY29yZCBpcyBnaXZlblxuICogLSBmaW5hbGx5IGl0IGludmFsaWRhdGVzIHBvcHVsYXRlZCBmb3IgZ2l2ZW4gcHJvcGVydHlcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgcHJvcGVydHkgICAgICAgIHByb3BlcnR5IHRoYXQgbXVzdCBiZSB1cGRhdGVkLCBzdXBwb3J0cyBuZXN0aW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBkb3RzXG4gKiBAcGFyYW0ge2FueX0gICAgICAgICB2YWx1ZSAgICAgICAgICAgdmFsdWUgdGhhdCBtdXN0IGJlIHNldCwgdW5kZWZpbmVkIG9yIG51bGwgaWZcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGluZywgd2lsbCBiZSBmbGF0dGVuZWRcbiAqIEBwYXJhbSB7UmVjb3JkSlNPTn0gIHNlbGVjdGVkUmVjb3JkICBpZiB2YWx1ZSBpcyByZWZlcmVuY2UgSUQsIHRoaXMgbXVzdCBiZSBhIHJlY29yZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0J3MgcmVmZXJlbmNpbmcgdG9cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCB1cGRhdGVSZWNvcmQgPSAoXG4gIHByb3BlcnR5OiBzdHJpbmcsXG4gIHZhbHVlOiBhbnksXG4gIHNlbGVjdGVkUmVjb3JkPzogUmVjb3JkSlNPTixcbikgPT4gKHByZXZpb3VzUmVjb3JkOiBSZWNvcmRKU09OKTogUmVjb3JkSlNPTiA9PiB7XG4gIGxldCBwb3B1bGF0ZWRNb2RpZmllZCA9IGZhbHNlXG4gIGNvbnN0IHBvcHVsYXRlZENvcHkgPSB7IC4uLnByZXZpb3VzUmVjb3JkLnBvcHVsYXRlZCB9XG4gIGNvbnN0IHBhcmFtc0NvcHkgPSBmbGF0LnNldChwcmV2aW91c1JlY29yZC5wYXJhbXMsIHByb3BlcnR5LCB2YWx1ZSlcblxuICBpZiAocHJvcGVydHkgaW4gcG9wdWxhdGVkQ29weSkge1xuICAgIGRlbGV0ZSBwb3B1bGF0ZWRDb3B5W3Byb3BlcnR5XVxuICAgIHBvcHVsYXRlZE1vZGlmaWVkID0gdHJ1ZVxuICB9XG5cbiAgaWYgKHNlbGVjdGVkUmVjb3JkKSB7XG4gICAgcG9wdWxhdGVkQ29weVtwcm9wZXJ0eV0gPSBzZWxlY3RlZFJlY29yZFxuICAgIHBvcHVsYXRlZE1vZGlmaWVkID0gdHJ1ZVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wcmV2aW91c1JlY29yZCxcbiAgICBwYXJhbXM6IHBhcmFtc0NvcHksXG4gICAgcG9wdWxhdGVkOiBwb3B1bGF0ZWRNb2RpZmllZCA/IHBvcHVsYXRlZENvcHkgOiBwcmV2aW91c1JlY29yZC5wb3B1bGF0ZWQsXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlUmVjb3JkXG4iLCJpbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcblxuY29uc3QgaXNFbnRpcmVSZWNvcmRHaXZlbiA9IChcbiAgcHJvcGVydHlPclJlY29yZDogUmVjb3JkSlNPTiB8IHN0cmluZyxcbiAgdmFsdWU/OiBzdHJpbmcsXG4pOiBib29sZWFuID0+ICEhKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAvLyB1c2VyIGNhbiBwYXNzIHByb3BlcnR5IGFuZCBvbWl0IHZhbHVlLiBUaGlzIG1ha2VzIHNlbnNlIHdoZW5cbiAgICAvLyB0aGlyZCBhcmd1bWVudCBvZiB0aGUgZnVuY3Rpb24gKHNlbGVjdGVkUmVjb3JkKSBpcyBwYXNzZWQgdG8gb25DaGFuZ2VcbiAgICAvLyBjYWxsYmFja1xuICAgICYmICEodHlwZW9mIHByb3BlcnR5T3JSZWNvcmQgPT09ICdzdHJpbmcnKVxuICAgIC8vIHdlIGFzc3VtZSB0aGF0IG9ubHkgcGFyYW1zIGhhcyB0byBiZSBnaXZlblxuICAgICYmIHByb3BlcnR5T3JSZWNvcmQucGFyYW1zKVxuXG5leHBvcnQge1xuICBpc0VudGlyZVJlY29yZEdpdmVuIGFzIGRlZmF1bHQsXG4gIGlzRW50aXJlUmVjb3JkR2l2ZW4sXG59XG4iLCJpbXBvcnQgeyBmbGF0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnXG5pbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IFVzZVJlY29yZE9wdGlvbnMgfSBmcm9tICcuL3VzZS1yZWNvcmQudHlwZSdcblxuZXhwb3J0IGNvbnN0IGZpbHRlclJlY29yZFBhcmFtcyA9IGZ1bmN0aW9uPFQgZXh0ZW5kcyBSZWNvcmRKU09OPiAoXG4gIHJlY29yZDogVCxcbiAgb3B0aW9uczogVXNlUmVjb3JkT3B0aW9ucyA9IHt9LFxuKTogVCB7XG4gIGlmIChvcHRpb25zLmluY2x1ZGVQYXJhbXMgJiYgcmVjb3JkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlY29yZCxcbiAgICAgIHBhcmFtczogZmxhdC5zZWxlY3RQYXJhbXMocmVjb3JkLnBhcmFtcyB8fCB7fSwgb3B0aW9ucy5pbmNsdWRlUGFyYW1zKSxcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29yZFxufVxuXG5leHBvcnQgY29uc3QgaXNQcm9wZXJ0eVBlcm1pdHRlZCA9IChwcm9wZXJ0eU5hbWUsIG9wdGlvbnM6IFVzZVJlY29yZE9wdGlvbnMgPSB7fSk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCB7IGluY2x1ZGVQYXJhbXMgfSA9IG9wdGlvbnNcbiAgaWYgKGluY2x1ZGVQYXJhbXMpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGZsYXQucGF0aFRvUGFydHMocHJvcGVydHlOYW1lLCB7IHNraXBBcnJheUluZGV4ZXM6IHRydWUgfSlcbiAgICByZXR1cm4gcGFydHMuc29tZShwYXJ0ID0+IGluY2x1ZGVQYXJhbXMuaW5jbHVkZXMocGFydCkpXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgRGlzcGF0Y2gsIFNldFN0YXRlQWN0aW9uIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnXG5pbXBvcnQgQXBpQ2xpZW50LCB7IFJlY29yZEFjdGlvbkFQSVBhcmFtcyB9IGZyb20gJy4uLy4uL3V0aWxzL2FwaS1jbGllbnQnXG5pbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IHBhcmFtc1RvRm9ybURhdGEgfSBmcm9tICcuL3BhcmFtcy10by1mb3JtLWRhdGEnXG5pbXBvcnQgdXNlTm90aWNlIGZyb20gJy4uL3VzZS1ub3RpY2UnXG5pbXBvcnQgeyBSZWNvcmRBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvYWN0aW9ucy9hY3Rpb24uaW50ZXJmYWNlJ1xuaW1wb3J0IG1lcmdlUmVjb3JkUmVzcG9uc2UgZnJvbSAnLi9tZXJnZS1yZWNvcmQtcmVzcG9uc2UnXG5pbXBvcnQgdXBkYXRlUmVjb3JkIGZyb20gJy4vdXBkYXRlLXJlY29yZCdcbmltcG9ydCB7IFVzZVJlY29yZE9wdGlvbnMsIFVzZVJlY29yZFJlc3VsdCwgVXNlUmVjb3JkU3VibWl0RnVuY3Rpb24gfSBmcm9tICcuL3VzZS1yZWNvcmQudHlwZSdcbmltcG9ydCBpc0VudGlyZVJlY29yZEdpdmVuIGZyb20gJy4vaXMtZW50aXJlLXJlY29yZC1naXZlbidcbmltcG9ydCB7IGZpbHRlclJlY29yZFBhcmFtcywgaXNQcm9wZXJ0eVBlcm1pdHRlZCB9IGZyb20gJy4vZmlsdGVyLXJlY29yZCdcbmltcG9ydCB7IGZsYXQgfSBmcm9tICcuLi8uLi8uLi91dGlscydcblxuY29uc3QgYXBpID0gbmV3IEFwaUNsaWVudCgpXG5cbi8qKlxuICogQGxvYWQgLi91c2UtcmVjb3JkLmRvYy5tZFxuICogQHN1YmNhdGVnb3J5IEhvb2tzXG4gKiBAY2xhc3NcbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqIEBidW5kbGVcbiAqIEBwYXJhbSB7UmVjb3JkSlNPTn0gW2luaXRpYWxSZWNvcmRdLFxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWRcbiAqIEBwYXJhbSB7VXNlUmVjb3JkT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtVc2VSZWNvcmRSZXN1bHR9XG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSZWNvcmQgPSAoXG4gIGluaXRpYWxSZWNvcmQ6IFJlY29yZEpTT04gfCB1bmRlZmluZWQsXG4gIHJlc291cmNlSWQ6IHN0cmluZyxcbiAgb3B0aW9ucz86IFVzZVJlY29yZE9wdGlvbnMsXG4pOiBVc2VSZWNvcmRSZXN1bHQgPT4ge1xuICAvLyBzZXR0aW5nIHVwIHN0YXRlXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbaXNTeW5jZWQsIHNldElzU3luY2VkXSA9IHVzZVN0YXRlKHRydWUpXG4gIGNvbnN0IFtwcm9ncmVzcywgc2V0UHJvZ3Jlc3NdID0gdXNlU3RhdGUoMClcblxuICBjb25zdCBmaWx0ZXJlZFJlY29yZCA9IGluaXRpYWxSZWNvcmQgPyBmaWx0ZXJSZWNvcmRQYXJhbXMoaW5pdGlhbFJlY29yZCwgb3B0aW9ucykgOiBudWxsXG5cbiAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IHVzZVN0YXRlPFJlY29yZEpTT04+KHtcbiAgICAuLi5maWx0ZXJlZFJlY29yZCxcbiAgICBwYXJhbXM6IGZpbHRlcmVkUmVjb3JkPy5wYXJhbXMgPz8ge30sXG4gICAgZXJyb3JzOiBpbml0aWFsUmVjb3JkPy5lcnJvcnMgPz8ge30sXG4gICAgcG9wdWxhdGVkOiBpbml0aWFsUmVjb3JkPy5wb3B1bGF0ZWQgPz8ge30sXG4gIH0gYXMgUmVjb3JkSlNPTilcblxuICAvLyBpdCBrZWVwcyB0aGUgc2FtZSBmb3JtYXQgYXMgdXNlU3RhdGUgZnVuY3Rpb24gd2hpY2ggY2FuIHRha2UgZWl0aGVyIHZhbHVlIG9yIGZ1bmN0aW9uXG4gIGNvbnN0IHNldEZpbHRlcmVkUmVjb3JkOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxSZWNvcmRKU09OPj4gPSB1c2VDYWxsYmFjaygodmFsdWUpID0+IHtcbiAgICBjb25zdCBuZXdSZWNvcmQgPSB2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gdmFsdWUocmVjb3JkKSA6IHZhbHVlXG4gICAgc2V0UmVjb3JkKGZpbHRlclJlY29yZFBhcmFtcyhuZXdSZWNvcmQsIG9wdGlvbnMpKVxuICB9LCBbb3B0aW9ucywgcmVjb3JkXSlcblxuICBjb25zdCBvbk5vdGljZSA9IHVzZU5vdGljZSgpXG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soKFxuICAgIHByb3BlcnR5T3JSZWNvcmQ6IFJlY29yZEpTT04gfCBzdHJpbmcsXG4gICAgdmFsdWU/OiBhbnksXG4gICAgaW5jb21pbmdSZWNvcmQ/OiBSZWNvcmRKU09OLFxuICApOiB2b2lkID0+IHtcbiAgICBpZiAoaXNFbnRpcmVSZWNvcmRHaXZlbihwcm9wZXJ0eU9yUmVjb3JkLCB2YWx1ZSkpIHtcbiAgICAgIHNldEZpbHRlcmVkUmVjb3JkKHByb3BlcnR5T3JSZWNvcmQgYXMgUmVjb3JkSlNPTilcbiAgICB9IGVsc2UgaWYgKGlzUHJvcGVydHlQZXJtaXR0ZWQocHJvcGVydHlPclJlY29yZCBhcyBzdHJpbmcsIG9wdGlvbnMpKSB7XG4gICAgICBzZXRSZWNvcmQodXBkYXRlUmVjb3JkKHByb3BlcnR5T3JSZWNvcmQgYXMgc3RyaW5nLCB2YWx1ZSwgaW5jb21pbmdSZWNvcmQpKVxuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oW1xuICAgICAgICBgWW91IGFyZSB0cnlpbmcgdG8gc2V0IHByb3BlcnR5OiBcIiR7cHJvcGVydHlPclJlY29yZCBhcyBzdHJpbmd9XCIgd2hpY2hgLFxuICAgICAgICAnaXMgbm90IHBlcm1pdHRlZC4gVGFrZSBhIGxvb2sgYXQgYHVzZVJlY29yZCguLi4sIHsgaW5jbHVkZVBhcmFtczogWy4uLl19KWAnLFxuICAgICAgXS5qb2luKCdcXG4nKSlcbiAgICB9XG4gICAgc2V0SXNTeW5jZWQoZmFsc2UpXG4gIH0sIFtzZXRSZWNvcmQsIG9wdGlvbnNdKVxuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdDogVXNlUmVjb3JkU3VibWl0RnVuY3Rpb24gPSB1c2VDYWxsYmFjaygoXG4gICAgY3VzdG9tUGFyYW1zID0ge30sIHN1Ym1pdE9wdGlvbnMsXG4gICk6IFByb21pc2U8QXhpb3NSZXNwb25zZTxSZWNvcmRBY3Rpb25SZXNwb25zZT4+ID0+IHtcbiAgICBzZXRMb2FkaW5nKHRydWUpXG5cbiAgICBjb25zdCBtZXJnZWRQYXJhbXMgPSBmbGF0Lm1lcmdlKHJlY29yZC5wYXJhbXMsIGN1c3RvbVBhcmFtcylcbiAgICBjb25zdCBmb3JtRGF0YSA9IHBhcmFtc1RvRm9ybURhdGEobWVyZ2VkUGFyYW1zKVxuXG4gICAgY29uc3QgcGFyYW1zOiBPbWl0PFJlY29yZEFjdGlvbkFQSVBhcmFtcywgJ2FjdGlvbk5hbWUnIHwgJ3JlY29yZElkJz4gPSB7XG4gICAgICByZXNvdXJjZUlkLFxuICAgICAgb25VcGxvYWRQcm9ncmVzczogKGUpOiB2b2lkID0+IHNldFByb2dyZXNzKE1hdGgucm91bmQoKGUubG9hZGVkICogMTAwKSAvIGUudG90YWwpKSxcbiAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnIH0sXG4gICAgfVxuXG4gICAgY29uc3QgcHJvbWlzZSA9IHJlY29yZC5pZFxuICAgICAgPyBhcGkucmVjb3JkQWN0aW9uKHtcbiAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICBhY3Rpb25OYW1lOiAnZWRpdCcsXG4gICAgICAgIHJlY29yZElkOiByZWNvcmQuaWQsXG4gICAgICB9KVxuICAgICAgOiBhcGkucmVzb3VyY2VBY3Rpb24oe1xuICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgIGFjdGlvbk5hbWU6ICduZXcnLFxuICAgICAgfSkgYXMgUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPFJlY29yZEFjdGlvblJlc3BvbnNlPj5cblxuICAgIHByb21pc2UudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLm5vdGljZSkge1xuICAgICAgICBvbk5vdGljZShyZXNwb25zZS5kYXRhLm5vdGljZSlcbiAgICAgIH1cbiAgICAgIGlmIChzdWJtaXRPcHRpb25zPy51cGRhdGVPblNhdmUgIT09IGZhbHNlKSB7XG4gICAgICAgIHNldEZpbHRlcmVkUmVjb3JkKHByZXYgPT4gbWVyZ2VSZWNvcmRSZXNwb25zZShwcmV2LCByZXNwb25zZS5kYXRhKSlcbiAgICAgIH1cbiAgICAgIHNldFByb2dyZXNzKDApXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKVxuICAgICAgc2V0SXNTeW5jZWQodHJ1ZSlcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICBvbk5vdGljZSh7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdUaGVyZSB3YXMgYW4gZXJyb3IgdXBkYXRpbmcgcmVjb3JkLCBDaGVjayBvdXQgY29uc29sZSB0byBzZWUgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgfSlcbiAgICAgIHNldFByb2dyZXNzKDApXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfSwgW3JlY29yZCwgcmVzb3VyY2VJZCwgc2V0TG9hZGluZywgc2V0UHJvZ3Jlc3MsIHNldFJlY29yZF0pXG5cbiAgcmV0dXJuIHtcbiAgICByZWNvcmQsXG4gICAgaGFuZGxlQ2hhbmdlLFxuICAgIHN1Ym1pdDogaGFuZGxlU3VibWl0LFxuICAgIGxvYWRpbmcsXG4gICAgcHJvZ3Jlc3MsXG4gICAgc2V0UmVjb3JkOiBzZXRGaWx0ZXJlZFJlY29yZCxcbiAgICBpc1N5bmNlZCxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VSZWNvcmRcbiIsImltcG9ydCB7IEFjdGlvbkpTT04gfSBmcm9tICcuL2FjdGlvbi1qc29uLmludGVyZmFjZSdcblxuZXhwb3J0IGNvbnN0IGFjdGlvbkhhc0NvbXBvbmVudCA9IChhY3Rpb246IEFjdGlvbkpTT04pOiBib29sZWFuID0+IChcbiAgdHlwZW9mIGFjdGlvbi5jb21wb25lbnQgIT09ICd1bmRlZmluZWQnICYmIGFjdGlvbi5jb21wb25lbnQgPT09IGZhbHNlXG4pXG4iLCJpbXBvcnQgeyBSZWNvcmRBY3Rpb25QYXJhbXMsIFZpZXdIZWxwZXJzIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgeyBEaWZmZXJlbnRBY3Rpb25QYXJhbXMgfSBmcm9tICcuLi8uLi9ob29rcydcbmltcG9ydCB7IEFjdGlvbkpTT04gfSBmcm9tICcuL2FjdGlvbi1qc29uLmludGVyZmFjZSdcblxuY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG5cbmV4cG9ydCBjb25zdCBhY3Rpb25IcmVmID0gKFxuICBhY3Rpb246IEFjdGlvbkpTT04sXG4gIHBhcmFtczogRGlmZmVyZW50QWN0aW9uUGFyYW1zLFxuKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGNvbnN0IGFjdGlvbk5hbWUgPSBhY3Rpb24ubmFtZVxuXG4gIGlmICghYWN0aW9uLmNvbXBvbmVudCAmJiAhYWN0aW9uLmhhc0hhbmRsZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgaHJlZk1hcCA9IHtcbiAgICByZWNvcmQ6ICgpOiBzdHJpbmcgPT4gaC5yZWNvcmRBY3Rpb25Vcmwoe1xuICAgICAgLi4ucGFyYW1zIGFzIFJlY29yZEFjdGlvblBhcmFtcyxcbiAgICAgIGFjdGlvbk5hbWUsXG4gICAgfSksXG4gICAgcmVzb3VyY2U6ICgpOiBzdHJpbmcgPT4gaC5yZXNvdXJjZUFjdGlvblVybCh7XG4gICAgICByZXNvdXJjZUlkOiBwYXJhbXMucmVzb3VyY2VJZCxcbiAgICAgIGFjdGlvbk5hbWUsXG4gICAgfSksXG4gICAgYnVsazogKCk6IHN0cmluZyA9PiBoLmJ1bGtBY3Rpb25Vcmwoe1xuICAgICAgLi4ucGFyYW1zLFxuICAgICAgYWN0aW9uTmFtZSxcbiAgICB9KSxcbiAgfVxuICBpZiAoaHJlZk1hcFthY3Rpb24uYWN0aW9uVHlwZV0pIHtcbiAgICByZXR1cm4gaHJlZk1hcFthY3Rpb24uYWN0aW9uVHlwZV0oKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignXCJhY3Rpb25UeXBlXCIgc2hvdWxkIGJlIGVpdGhlciByZWNvcmQsIHJlc291cmNlIG9yIGJ1bGsnKVxufVxuIiwiaW1wb3J0IHsgQXhpb3NSZXNwb25zZSB9IGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHsgQWN0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi9iYWNrZW5kJ1xuaW1wb3J0IHsgRGlmZmVyZW50QWN0aW9uUGFyYW1zIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5pbXBvcnQgeyBBcGlDbGllbnQgfSBmcm9tICcuLi8uLi91dGlscydcbmltcG9ydCB7IEFjdGlvbkpTT04gfSBmcm9tICcuL2FjdGlvbi1qc29uLmludGVyZmFjZSdcblxuY29uc3QgYXBpID0gbmV3IEFwaUNsaWVudCgpXG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsQWN0aW9uQXBpPEsgZXh0ZW5kcyBBY3Rpb25SZXNwb25zZT4oXG4gIGFjdGlvbjogQWN0aW9uSlNPTixcbiAgcGFyYW1zOiBEaWZmZXJlbnRBY3Rpb25QYXJhbXMsXG4gIHNlYXJjaD86IExvY2F0aW9uWydzZWFyY2gnXSxcbik6IFByb21pc2U8QXhpb3NSZXNwb25zZTxLPj4ge1xuICBsZXQgcHJvbWlzZTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPEs+PlxuICBjb25zdCB7IHJlY29yZElkLCByZWNvcmRJZHMsIHJlc291cmNlSWQgfSA9IHBhcmFtc1xuXG4gIHN3aXRjaCAoYWN0aW9uLmFjdGlvblR5cGUpIHtcbiAgY2FzZSAncmVjb3JkJzpcbiAgICBpZiAoIXJlY29yZElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIHNwZWNpZnkgXCJyZWNvcmRJZFwiIGZvciByZWNvcmQgYWN0aW9uJylcbiAgICB9XG4gICAgcHJvbWlzZSA9IGFwaS5yZWNvcmRBY3Rpb24oe1xuICAgICAgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsIHJlY29yZElkLCBzZWFyY2gsXG4gICAgfSkgYXMgYW55XG4gICAgYnJlYWtcbiAgY2FzZSAncmVzb3VyY2UnOlxuICAgIHByb21pc2UgPSBhcGkucmVzb3VyY2VBY3Rpb24oe1xuICAgICAgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsXG4gICAgfSkgYXMgYW55XG4gICAgYnJlYWtcbiAgY2FzZSAnYnVsayc6XG4gICAgaWYgKCFyZWNvcmRJZHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGhhdmUgdG8gc3BlY2lmeSBcInJlY29yZElkc1wiIGZvciBidWxrIGFjdGlvbicpXG4gICAgfVxuICAgIHByb21pc2UgPSBhcGkuYnVsa0FjdGlvbih7XG4gICAgICByZXNvdXJjZUlkLCBhY3Rpb25OYW1lOiBhY3Rpb24ubmFtZSwgcmVjb3JkSWRzLCBzZWFyY2gsXG4gICAgfSkgYXMgYW55XG4gICAgYnJlYWtcbiAgZGVmYXVsdDpcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiYWN0aW9uVHlwZVwiIHNob3VsZCBiZSBlaXRoZXIgcmVjb3JkLCByZXNvdXJjZSBvciBidWxrJylcbiAgfVxuICByZXR1cm4gcHJvbWlzZVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgYXJyb3ctcGFyZW5zICovXG5pbXBvcnQgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnXG5pbXBvcnQgeyBBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQnXG5pbXBvcnQgeyBEaWZmZXJlbnRBY3Rpb25QYXJhbXMsIHVzZUFjdGlvblJlc3BvbnNlSGFuZGxlciB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IHsgQWN0aW9uSlNPTiB9IGZyb20gJy4vYWN0aW9uLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgY2FsbEFjdGlvbkFwaSB9IGZyb20gJy4vY2FsbC1hY3Rpb24tYXBpJ1xuXG5leHBvcnQgdHlwZSBDYWxsQXBpRnVuY3Rpb248SyBleHRlbmRzIEFjdGlvblJlc3BvbnNlPiA9ICgpID0+IFByb21pc2U8QXhpb3NSZXNwb25zZTxLPj5cblxuZXhwb3J0IHR5cGUgQnVpbGRBY3Rpb25DYWxsQXBpVHJpZ2dlck9wdGlvbnMgPSB7XG4gIGFjdGlvbjogQWN0aW9uSlNPTjtcbiAgcGFyYW1zOiBEaWZmZXJlbnRBY3Rpb25QYXJhbXM7XG4gIGFjdGlvblJlc3BvbnNlSGFuZGxlcjogUmV0dXJuVHlwZTx0eXBlb2YgdXNlQWN0aW9uUmVzcG9uc2VIYW5kbGVyPjtcbiAgc2VhcmNoPzogTG9jYXRpb25bJ3NlYXJjaCddO1xufVxuXG5leHBvcnQgY29uc3QgYnVpbGRBY3Rpb25DYWxsQXBpVHJpZ2dlciA9IDxLPihcbiAgb3B0aW9uczogQnVpbGRBY3Rpb25DYWxsQXBpVHJpZ2dlck9wdGlvbnMsXG4pOiBDYWxsQXBpRnVuY3Rpb248Sz4gPT4ge1xuICBjb25zdCB7IGFjdGlvbiwgcGFyYW1zLCBhY3Rpb25SZXNwb25zZUhhbmRsZXIsIHNlYXJjaCB9ID0gb3B0aW9uc1xuICBjb25zdCBjYWxsQXBpOiBDYWxsQXBpRnVuY3Rpb248Sz4gPSAoKSA9PiB7XG4gICAgY29uc3QgcHJvbWlzZSA9IGNhbGxBY3Rpb25BcGkoYWN0aW9uLCBwYXJhbXMsIHNlYXJjaClcbiAgICBwcm9taXNlLnRoZW4oYWN0aW9uUmVzcG9uc2VIYW5kbGVyKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfSlcblxuICAgIHJldHVybiBwcm9taXNlIGFzIFByb21pc2U8QXhpb3NSZXNwb25zZTxLPj5cbiAgfVxuICByZXR1cm4gY2FsbEFwaVxufVxuIiwiaW1wb3J0IHsgQWN0aW9uSlNPTiB9IGZyb20gJy4vYWN0aW9uLWpzb24uaW50ZXJmYWNlJ1xuXG5leHBvcnQgY29uc3QgYnVpbGRBY3Rpb25UZXN0SWQgPSAoYWN0aW9uOiBBY3Rpb25KU09OKTogc3RyaW5nID0+IGBhY3Rpb24tJHthY3Rpb24ubmFtZX1gXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1hbGVydCAqL1xuaW1wb3J0IHsgRGlmZmVyZW50QWN0aW9uUGFyYW1zLCB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXIgfSBmcm9tICcuLi8uLi9ob29rcydcbmltcG9ydCB7IGFjdGlvbkhhc0NvbXBvbmVudCB9IGZyb20gJy4vYWN0aW9uLWhhcy1jb21wb25lbnQnXG5pbXBvcnQgeyBhY3Rpb25IcmVmIH0gZnJvbSAnLi9hY3Rpb24taHJlZidcbmltcG9ydCB7IEFjdGlvbkpTT04gfSBmcm9tICcuL2FjdGlvbi1qc29uLmludGVyZmFjZSdcbmltcG9ydCB7IGJ1aWxkQWN0aW9uQ2FsbEFwaVRyaWdnZXIgfSBmcm9tICcuL2J1aWxkLWFjdGlvbi1hcGktY2FsbC10cmlnZ2VyJ1xuXG5leHBvcnQgdHlwZSBCdWlsZEFjdGlvbkNsaWNrT3B0aW9ucyA9IHtcbiAgYWN0aW9uOiBBY3Rpb25KU09OO1xuICBwYXJhbXM6IERpZmZlcmVudEFjdGlvblBhcmFtcztcbiAgYWN0aW9uUmVzcG9uc2VIYW5kbGVyOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXI+O1xuICBwdXNoOiAocGF0aDogc3RyaW5nLCBzdGF0ZT86IGFueSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgQnVpbGRBY3Rpb25DbGlja1JldHVybiA9IChldmVudDogYW55KSA9PiBhbnlcblxuZXhwb3J0IGNvbnN0IGJ1aWxkQWN0aW9uQ2xpY2tIYW5kbGVyID0gKFxuICBvcHRpb25zOiBCdWlsZEFjdGlvbkNsaWNrT3B0aW9ucyxcbik6IEJ1aWxkQWN0aW9uQ2xpY2tSZXR1cm4gPT4ge1xuICBjb25zdCB7IGFjdGlvbiwgcGFyYW1zLCBhY3Rpb25SZXNwb25zZUhhbmRsZXIsIHB1c2ggfSA9IG9wdGlvbnNcblxuICBjb25zdCBoYW5kbGVBY3Rpb25DbGljayA9IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MRWxlbWVudD4pOiB2b2lkID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGNvbnN0IGhyZWYgPSBhY3Rpb25IcmVmKGFjdGlvbiwgcGFyYW1zKVxuXG4gICAgY29uc3QgY2FsbEFwaSA9IGJ1aWxkQWN0aW9uQ2FsbEFwaVRyaWdnZXIoe1xuICAgICAgcGFyYW1zLCBhY3Rpb24sIGFjdGlvblJlc3BvbnNlSGFuZGxlcixcbiAgICB9KVxuXG4gICAgaWYgKGFjdGlvbi5ndWFyZCAmJiAhY29uZmlybShhY3Rpb24uZ3VhcmQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGFjdGlvbkhhc0NvbXBvbmVudChhY3Rpb24pKSB7XG4gICAgICBjYWxsQXBpKClcbiAgICB9IGVsc2UgaWYgKGhyZWYpIHtcbiAgICAgIHB1c2goaHJlZiwgeyBwcmV2aW91c1BhZ2U6IHdpbmRvdy5sb2NhdGlvbi5ocmVmIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGhhbmRsZUFjdGlvbkNsaWNrXG59XG4iLCJleHBvcnQgY29uc3QgUkVGUkVTSF9LRVkgPSAncmVmcmVzaCdcbmV4cG9ydCBjb25zdCBJR05PUkVfUEFSQU1TX0tFWSA9ICdpZ25vcmVfcGFyYW1zJ1xuXG4vKipcbiAqIEFkZHMgcmVmcmVzaD10cnVlIHRvIHRoZSB1cmwsIHdoaWNoIGluIHR1cm4gc2hvdWxkIGNhdXNlIGxpc3QgdG8gcmVsb2FkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgICAgICB1cmwgdG8gd2hpY2ggZnVuY3Rpb24gc2hvdWxkIGFkZCBgcmVmcmVzaGBcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2VhcmNoXSBvcHRpb25hbCBzZWFyY2ggcXVlcnkgd2hpY2ggc2hvdWxkIGJlIHVwZGF0ZWQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGdpdmVuIGZ1bmN0aW9uIHdpbGwgdXNlIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBhcHBlbmRGb3JjZVJlZnJlc2ggPSAodXJsOiBzdHJpbmcsIHNlYXJjaD86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHNlYXJjaFBhcmFtc0lkeCA9IHVybC5sYXN0SW5kZXhPZignPycpXG4gIGNvbnN0IHVybFNlYXJjaFBhcmFtcyA9IHNlYXJjaFBhcmFtc0lkeCAhPT0gLTFcbiAgICA/IHVybC5zdWJzdHJpbmcoc2VhcmNoUGFyYW1zSWR4ICsgMSlcbiAgICA6IG51bGxcblxuICBjb25zdCBvbGRQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCA/PyB1cmxTZWFyY2hQYXJhbXMgPz8gd2luZG93LmxvY2F0aW9uLnNlYXJjaCA/PyAnJylcbiAgY29uc3Qgc2hvdWxkSWdub3JlT2xkUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh1cmxTZWFyY2hQYXJhbXMgfHwgJycpLmdldChJR05PUkVfUEFSQU1TX0tFWSkgPT09ICd0cnVlJ1xuICBjb25zdCBuZXdQYXJhbXMgPSBzaG91bGRJZ25vcmVPbGRQYXJhbXMgPyBuZXcgVVJMU2VhcmNoUGFyYW1zKCcnKSA6IG5ldyBVUkxTZWFyY2hQYXJhbXMob2xkUGFyYW1zLnRvU3RyaW5nKCkpXG5cbiAgbmV3UGFyYW1zLnNldChSRUZSRVNIX0tFWSwgJ3RydWUnKVxuXG4gIGNvbnN0IG5ld1VybCA9IHNlYXJjaFBhcmFtc0lkeCAhPT0gLTFcbiAgICA/IHVybC5zdWJzdHJpbmcoMCwgc2VhcmNoUGFyYW1zSWR4KVxuICAgIDogdXJsXG5cbiAgcmV0dXJuIGAke25ld1VybH0/JHtuZXdQYXJhbXMudG9TdHJpbmcoKX1gXG59XG5cbmV4cG9ydCBjb25zdCBoYXNGb3JjZVJlZnJlc2ggPSAoc2VhcmNoOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpXG4gIHJldHVybiAhIXBhcmFtcy5nZXQoUkVGUkVTSF9LRVkpXG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVGb3JjZVJlZnJlc2ggPSAoc2VhcmNoOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaClcbiAgaWYgKHBhcmFtcy5nZXQoUkVGUkVTSF9LRVkpKSB7XG4gICAgcGFyYW1zLmRlbGV0ZShSRUZSRVNIX0tFWSlcbiAgfVxuICByZXR1cm4gcGFyYW1zLnRvU3RyaW5nKClcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZSAqL1xuaW1wb3J0IHsgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24gfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgeyBBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvYWN0aW9ucy9hY3Rpb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgYXBwZW5kRm9yY2VSZWZyZXNoIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9hY3Rpb25zL3V0aWxzL2FwcGVuZC1mb3JjZS1yZWZyZXNoJ1xuaW1wb3J0IHsgQWN0aW9uQ2FsbENhbGxiYWNrIH0gZnJvbSAnLidcbmltcG9ydCB7IHVzZU5vdGljZSB9IGZyb20gJy4uL3VzZS1ub3RpY2UnXG5cblxuZXhwb3J0IGNvbnN0IHVzZUFjdGlvblJlc3BvbnNlSGFuZGxlciA9IChvbkFjdGlvbkNhbGw/OiBBY3Rpb25DYWxsQ2FsbGJhY2spID0+IHtcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcbiAgY29uc3QgYWRkTm90aWNlID0gdXNlTm90aWNlKClcblxuICByZXR1cm4gKHJlc3BvbnNlOiBBY3Rpb25SZXNwb25zZSkgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gcmVzcG9uc2VcbiAgICBpZiAoZGF0YS5ub3RpY2UpIHtcbiAgICAgIGFkZE5vdGljZShkYXRhLm5vdGljZSlcbiAgICB9XG4gICAgaWYgKGRhdGEucmVkaXJlY3RVcmwgJiYgbG9jYXRpb24ucGF0aG5hbWUgIT09IGRhdGEucmVkaXJlY3RVcmwpIHtcbiAgICAgIGNvbnN0IGFwcGVuZGVkID0gYXBwZW5kRm9yY2VSZWZyZXNoKGRhdGEucmVkaXJlY3RVcmwpXG4gICAgICBoaXN0b3J5LnB1c2goYXBwZW5kZWQsIHsgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9KVxuICAgIH1cbiAgICBpZiAob25BY3Rpb25DYWxsKSB7XG4gICAgICBvbkFjdGlvbkNhbGwoZGF0YSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5cbmltcG9ydCB7IEFjdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9hY3Rpb25zL2FjdGlvbi5pbnRlcmZhY2UnXG5cbmltcG9ydCB7IEFjdGlvbkpTT04sIGJ1aWxkQWN0aW9uQ2FsbEFwaVRyaWdnZXIsIGJ1aWxkQWN0aW9uQ2xpY2tIYW5kbGVyIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcblxuaW1wb3J0IHsgRGlmZmVyZW50QWN0aW9uUGFyYW1zLCBBY3Rpb25DYWxsQ2FsbGJhY2ssIFVzZUFjdGlvblJlc3VsdCB9IGZyb20gJy4vdXNlLWFjdGlvbi50eXBlcydcbmltcG9ydCB7IGFjdGlvbkhyZWYgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2FjdGlvbi9hY3Rpb24taHJlZidcbmltcG9ydCB7IHVzZUFjdGlvblJlc3BvbnNlSGFuZGxlciB9IGZyb20gJy4vdXNlLWFjdGlvbi1yZXNwb25zZS1oYW5kbGVyJ1xuXG4vKipcbiAqIEBsb2FkIC4vdXNlLWFjdGlvbi5kb2MubWRcbiAqIEBzdWJjYXRlZ29yeSBIb29rc1xuICpcbiAqIEBwYXJhbSB7QWN0aW9uSlNPTn0gICBhY3Rpb24gICAgICBhY3Rpb24gb2JqZWN0XG4gKiBAcGFyYW0ge0FjdGlvblBhcmFtc30gcGFyYW1zXG4gKiBAcGFyYW0ge0FjdGlvbkNhbGxDYWxsYmFja30gb25BY3Rpb25DYWxsIC0gY2FsbGJhY2sgdHJpZ2dlcmVkIHdoZW4gYWN0aW9uIGlzIHBlcmZvcm1lZFxuICogQHJldHVybiB7VXNlQWN0aW9uUmVzdWx0fVxuICogQG5ldyBJbiB2ZXJzaW9uIDMuM1xuICogQGNsYXNzXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBY3Rpb248SyBleHRlbmRzIEFjdGlvblJlc3BvbnNlPihcbiAgYWN0aW9uOiBBY3Rpb25KU09OLFxuICBwYXJhbXM6IERpZmZlcmVudEFjdGlvblBhcmFtcyxcbiAgb25BY3Rpb25DYWxsPzogQWN0aW9uQ2FsbENhbGxiYWNrLFxuKTogVXNlQWN0aW9uUmVzdWx0PEs+IHtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuXG4gIGNvbnN0IGFjdGlvblJlc3BvbnNlSGFuZGxlciA9IHVzZUFjdGlvblJlc3BvbnNlSGFuZGxlcihvbkFjdGlvbkNhbGwpXG5cbiAgY29uc3QgaHJlZiA9IGFjdGlvbkhyZWYoYWN0aW9uLCBwYXJhbXMpXG5cbiAgY29uc3QgY2FsbEFwaSA9IGJ1aWxkQWN0aW9uQ2FsbEFwaVRyaWdnZXI8Sz4oe1xuICAgIGFjdGlvbixcbiAgICBwYXJhbXMsXG4gICAgYWN0aW9uUmVzcG9uc2VIYW5kbGVyLFxuICB9KVxuXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gYnVpbGRBY3Rpb25DbGlja0hhbmRsZXIoe1xuICAgIGFjdGlvbixcbiAgICBwYXJhbXMsXG4gICAgYWN0aW9uUmVzcG9uc2VIYW5kbGVyLFxuICAgIHB1c2g6IGhpc3RvcnkucHVzaCxcbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGhyZWYsXG4gICAgY2FsbEFwaSxcbiAgICBoYW5kbGVDbGljayxcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ3VycmVudEFkbWluIH0gZnJvbSAnLi4vLi4vLi4vY3VycmVudC1hZG1pbi5pbnRlcmZhY2UnXG5cbmV4cG9ydCBjb25zdCBTRVNTSU9OX0lOSVRJQUxJWkUgPSAnU0VTU0lPTl9JTklUSUFMSVpFJ1xuXG5leHBvcnQgdHlwZSBTZXRDdXJyZW50QWRtaW5SZXNwb25zZSA9IHtcbiAgdHlwZTogdHlwZW9mIFNFU1NJT05fSU5JVElBTElaRTtcbiAgZGF0YTogQ3VycmVudEFkbWluIHwgbnVsbDtcbn1cblxuZXhwb3J0IGNvbnN0IHNldEN1cnJlbnRBZG1pbiA9IChkYXRhOiBDdXJyZW50QWRtaW4gfCBudWxsID0gbnVsbCk6IFNldEN1cnJlbnRBZG1pblJlc3BvbnNlID0+ICh7XG4gIHR5cGU6IFNFU1NJT05fSU5JVElBTElaRSxcbiAgZGF0YSxcbn0pXG4iLCJpbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IFJlZHV4U3RhdGUgfSBmcm9tICcuLi9zdG9yZS9zdG9yZSdcbmltcG9ydCB7IHNldEN1cnJlbnRBZG1pbiB9IGZyb20gJy4uL3N0b3JlL2FjdGlvbnMvc2V0LWN1cnJlbnQtYWRtaW4nXG5pbXBvcnQgeyBDdXJyZW50QWRtaW4gfSBmcm9tICcuLi8uLi9jdXJyZW50LWFkbWluLmludGVyZmFjZSdcblxuZXhwb3J0IHR5cGUgVXNlQ3VycmVudEFkbWluUmVzcG9uc2UgPSBbXG4gIEN1cnJlbnRBZG1pbiB8IG51bGwsXG4gIChjdXJyZW50QWRtaW46IEN1cnJlbnRBZG1pbiB8IG51bGwpID0+IEN1cnJlbnRBZG1pbiB8IHt9XG5dXG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogSG9vayB3aGljaCBhbGxvd3MgeW91IHRvIGdldCBhbmQgc2V0IGN1cnJlbnRBZG1pblxuICpcbiAqICMjIyBVc2FnZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IHVzZUN1cnJlbnRBZG1pbiB9IGZyb20gJ2FkbWluanMnXG4gKlxuICogY29uc3QgbXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFtjdXJyZW50QWRtaW4sIHNldEN1cnJlbnRBZG1pbl0gPSB1c2VDdXJyZW50QWRtaW4oKVxuICogICAvLyAuLi5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBjbGFzc1xuICogQHN1YmNhdGVnb3J5IEhvb2tzXG4gKiBAYnVuZGxlXG4gKiBAcmV0dXJucyB7VXNlQ3VycmVudEFkbWluUmVzcG9uc2V9XG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIHVzZUN1cnJlbnRBZG1pbigpOiBVc2VDdXJyZW50QWRtaW5SZXNwb25zZSB7XG4gIGNvbnN0IGN1cnJlbnRBZG1pbiA9IHVzZVNlbGVjdG9yKChzdGF0ZTogUmVkdXhTdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbilcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIHJldHVybiBbXG4gICAgY3VycmVudEFkbWluLFxuICAgIChhZG1pbjogQ3VycmVudEFkbWluIHwgbnVsbCk6IGFueSA9PiBkaXNwYXRjaChzZXRDdXJyZW50QWRtaW4oYWRtaW4pKSxcbiAgXVxufVxuXG5leHBvcnQge1xuICB1c2VDdXJyZW50QWRtaW4sXG4gIHVzZUN1cnJlbnRBZG1pbiBhcyBkZWZhdWx0LFxufVxuXG4vKipcbiAqIFJlc3VsdCBvZiB0aGUge0BsaW5rIHVzZUN1cnJlbnRBZG1pbn0uXG4gKiBJdCBpcyBhIHR1cGxlIGNvbnRhaW5pbmcgdmFsdWUgYW5kIHRoZSBzZXR0ZXJcbiAqXG4gKiBAdHlwZWRlZiB7QXJyYXl9IFVzZUN1cnJlbnRBZG1pblJlc3BvbnNlXG4gKiBAbWVtYmVyb2YgdXNlQ3VycmVudEFkbWluXG4gKiBAYWxpYXMgVXNlQ3VycmVudEFkbWluUmVzcG9uc2VcbiAqIEBwcm9wZXJ0eSB7Q3VycmVudEFkbWluIHwgbnVsbH0gWzBdICAgIGN1cnJlbnQgYWRtaW5cbiAqIEBwcm9wZXJ0eSB7UmVhY3QuRGlzcGF0Y2g8UmVhY3QuU2V0U3RhdGVBY3Rpb248Q3VycmVudEFkbWluPj59IFsxXSAgICB2YWx1ZSBzZXR0ZXIgY29tcGF0aWJsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggcmVhY3QgdXNlU3RhdGVcbiAqL1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBVc2VMb2NhbFN0b3JhZ2VSZXN1bHQgfSBmcm9tICcuL3VzZS1sb2NhbC1zdG9yYWdlLXJlc3VsdC50eXBlJ1xuXG4vKipcbiAqIEBsb2FkIC4vdXNlLWxvY2FsLXN0b3JhZ2UuZG9jLm1kXG4gKiBAc3ViY2F0ZWdvcnkgSG9va3NcbiAqIEBjbGFzc1xuICogQHNlZSBodHRwczovL3VzZWhvb2tzLmNvbS91c2VMb2NhbFN0b3JhZ2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5ICAgICAgICAgIGtleSB1bmRlciB3aGljaCBob29rIHdpbGwgc3RvcmUgdGhlIGRhdGFcbiAqIEBwYXJhbSB7VH0gICAgICBpbml0aWFsVmFsdWUgICAgdmFsdWUgd2hpY2ggd2lsbCBiZSBzdHJpbmdpZmllZCBhbmQgc3RvcmVkXG4gKiBAcmV0dXJuIHtVc2VMb2NhbFN0b3JhZ2VSZXN1bHQ8VD59XG4gKiBAbmV3IEluIHZlcnNpb24gMy4zXG4gKiBAYnVuZGxlXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhbFN0b3JhZ2U8VD4oa2V5OiBzdHJpbmcsIGluaXRpYWxWYWx1ZTogVCk6IFVzZUxvY2FsU3RvcmFnZVJlc3VsdDxUPiB7XG4gIC8vIFN0YXRlIHRvIHN0b3JlIG91ciB2YWx1ZVxuICAvLyBQYXNzIGluaXRpYWwgc3RhdGUgZnVuY3Rpb24gdG8gdXNlU3RhdGUgc28gbG9naWMgaXMgb25seSBleGVjdXRlZCBvbmNlXG4gIGNvbnN0IFtzdG9yZWRWYWx1ZSwgc2V0U3RvcmVkVmFsdWVdID0gdXNlU3RhdGU8VD4oKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgZnJvbSBsb2NhbCBzdG9yYWdlIGJ5IGtleVxuICAgICAgY29uc3QgaXRlbSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpXG4gICAgICAvLyBQYXJzZSBzdG9yZWQganNvbiBvciBpZiBub25lIHJldHVybiBpbml0aWFsVmFsdWVcbiAgICAgIHJldHVybiBpdGVtID8gSlNPTi5wYXJzZShpdGVtKSA6IGluaXRpYWxWYWx1ZVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBlcnJvciBhbHNvIHJldHVybiBpbml0aWFsVmFsdWVcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgcmV0dXJuIGluaXRpYWxWYWx1ZVxuICAgIH1cbiAgfSlcblxuICAvLyBSZXR1cm4gYSB3cmFwcGVkIHZlcnNpb24gb2YgdXNlU3RhdGUncyBzZXR0ZXIgZnVuY3Rpb24gdGhhdCAuLi5cbiAgLy8gLi4uIHBlcnNpc3RzIHRoZSBuZXcgdmFsdWUgdG8gbG9jYWxTdG9yYWdlLlxuICBjb25zdCBzZXRWYWx1ZTogUmVhY3QuRGlzcGF0Y2g8UmVhY3QuU2V0U3RhdGVBY3Rpb248VD4+ID0gKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEFsbG93IHZhbHVlIHRvIGJlIGEgZnVuY3Rpb24gc28gd2UgaGF2ZSBzYW1lIEFQSSBhcyB1c2VTdGF0ZVxuICAgICAgY29uc3QgdmFsdWVUb1N0b3JlID0gdmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IHZhbHVlKHN0b3JlZFZhbHVlKSA6IHZhbHVlXG4gICAgICAvLyBTYXZlIHN0YXRlXG4gICAgICBzZXRTdG9yZWRWYWx1ZSh2YWx1ZVRvU3RvcmUpXG4gICAgICAvLyBTYXZlIHRvIGxvY2FsIHN0b3JhZ2VcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlVG9TdG9yZSkpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIEEgbW9yZSBhZHZhbmNlZCBpbXBsZW1lbnRhdGlvbiB3b3VsZCBoYW5kbGUgdGhlIGVycm9yIGNhc2VcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbc3RvcmVkVmFsdWUsIHNldFZhbHVlXVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VMb2NhbFN0b3JhZ2VcbiIsImltcG9ydCB7IHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmltcG9ydCB7XG4gIE5hdmlnYXRpb25Qcm9wcyxcbiAgTmF2aWdhdGlvbkVsZW1lbnRQcm9wcyxcbiAgTmF2aWdhdGlvbkVsZW1lbnRXaXRoQ2hpbGRyZW5Qcm9wcyxcbn0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFJlc291cmNlSlNPTiB9IGZyb20gJy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgdXNlTG9jYWxTdG9yYWdlIGZyb20gJy4vdXNlLWxvY2FsLXN0b3JhZ2UvdXNlLWxvY2FsLXN0b3JhZ2UnXG5cbmNvbnN0IGlzU2VsZWN0ZWQgPSAoaHJlZiwgbG9jYXRpb24pOiBib29sZWFuID0+IHtcbiAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChgJHtocmVmfSgkfC8pYClcbiAgcmV0dXJuICEhbG9jYXRpb24ucGF0aG5hbWUubWF0Y2gocmVnRXhwKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlTmF2aWdhdGlvblJlc291cmNlcyhcbiAgcmVzb3VyY2VzOiBBcnJheTxSZXNvdXJjZUpTT04+LFxuKTogTmF2aWdhdGlvblByb3BzWydlbGVtZW50cyddIHtcbiAgY29uc3QgW29wZW5FbGVtZW50cywgc2V0T3BlbkVsZW1lbnRzXSA9IHVzZUxvY2FsU3RvcmFnZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oXG4gICAgJ3NpZGViYXJFbGVtZW50cycsIHt9LFxuICApXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpXG5cbiAgY29uc3QgZW5yaWNoUmVzb3VyY2UgPSB1c2VNZW1vKCgpID0+IChcbiAgICByZXNvdXJjZTogUmVzb3VyY2VKU09OLFxuICAgIGljb24/OiBzdHJpbmcsXG4gICk6IE5hdmlnYXRpb25FbGVtZW50V2l0aENoaWxkcmVuUHJvcHMgPT4gKHtcbiAgICBocmVmOiByZXNvdXJjZS5ocmVmIHx8IHVuZGVmaW5lZCxcbiAgICBpY29uLFxuICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQocmVzb3VyY2UuaHJlZiwgbG9jYXRpb24pLFxuICAgIGxhYmVsOiByZXNvdXJjZS5uYW1lLFxuICAgIGlkOiByZXNvdXJjZS5pZCxcbiAgICBvbkNsaWNrOiAoZXZlbnQpOiB2b2lkID0+IHtcbiAgICAgIGlmIChyZXNvdXJjZS5ocmVmKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgaGlzdG9yeS5wdXNoKHJlc291cmNlLmhyZWYsIHsgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9KVxuICAgICAgfVxuICAgIH0sXG4gIH0pLCBbbG9jYXRpb24sIGhpc3RvcnldKVxuXG4gIC8vIGdyb3VwaW5nIHJlc291cmNlcyBpbnRvIHBhcmVudHNcbiAgY29uc3QgbWFwID0gcmVzb3VyY2VzXG4gICAgLy8gZmlyc3QgZmlsdGVyIG91dCByZXNvdXJjZXMgd2hpY2ggYXJlIG5vdCB2aXNpYmxlXG4gICAgLmZpbHRlcihyZXMgPT4gcmVzLmhyZWYgJiYgcmVzLm5hdmlnYXRpb24/LnNob3cgIT09IGZhbHNlKVxuICAgIC5yZWR1Y2UoKG1lbW8sIHJlc291cmNlKSA9PiB7XG4gICAgICAvLyBpbiBjYXNlIHJlc291cmNlIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHBhcmVudCB3ZSBuYW1lc3BhY2UgaXQgd2l0IFwicmVzb3VyY2UtXCJcIlxuICAgICAgY29uc3Qga2V5ID0gcmVzb3VyY2UubmF2aWdhdGlvbj8ubmFtZSB8fCBbJ3Jlc291cmNlJywgcmVzb3VyY2UubmFtZV0uam9pbignLScpXG5cbiAgICAgIGlmICghcmVzb3VyY2UubmF2aWdhdGlvbiB8fCByZXNvdXJjZS5uYXZpZ2F0aW9uLm5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgbWVtb1trZXldID0gZW5yaWNoUmVzb3VyY2UocmVzb3VyY2UsIHJlc291cmNlLm5hdmlnYXRpb24/Lmljb24pXG4gICAgICB9IGVsc2UgaWYgKG1lbW9ba2V5XSAmJiBtZW1vW2tleV0uZWxlbWVudHMgJiYgcmVzb3VyY2UubmF2aWdhdGlvbj8ubmFtZSkge1xuICAgICAgICAobWVtb1trZXldLmVsZW1lbnRzIGFzIEFycmF5PE5hdmlnYXRpb25FbGVtZW50UHJvcHM+KS5wdXNoKGVucmljaFJlc291cmNlKHJlc291cmNlKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW9ba2V5XSA9IHtcbiAgICAgICAgICBlbGVtZW50czogW2VucmljaFJlc291cmNlKHJlc291cmNlKV0sXG4gICAgICAgICAgbGFiZWw6IHJlc291cmNlLm5hdmlnYXRpb24/Lm5hbWUsXG4gICAgICAgICAgaWNvbjogcmVzb3VyY2UubmF2aWdhdGlvbj8uaWNvbixcbiAgICAgICAgICBvbkNsaWNrOiAoKTogdm9pZCA9PiBzZXRPcGVuRWxlbWVudHMoe1xuICAgICAgICAgICAgLi4ub3BlbkVsZW1lbnRzLFxuICAgICAgICAgICAgW2tleV06ICFvcGVuRWxlbWVudHNba2V5XSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBpc09wZW46ICEhb3BlbkVsZW1lbnRzW2tleV0sXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW1vXG4gICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgTmF2aWdhdGlvbkVsZW1lbnRXaXRoQ2hpbGRyZW5Qcm9wcz4pXG5cbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMobWFwKVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VOYXZpZ2F0aW9uUmVzb3VyY2VzXG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcydcbmltcG9ydCB7IHVzZUxvY2F0aW9uLCB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IHsgUmVjb3JkSlNPTiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgdXNlTm90aWNlIGZyb20gJy4uL3VzZS1ub3RpY2UnXG5pbXBvcnQgQXBpQ2xpZW50IGZyb20gJy4uLy4uL3V0aWxzL2FwaS1jbGllbnQnXG5pbXBvcnQgeyBMaXN0QWN0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2FjdGlvbnMvbGlzdC9saXN0LWFjdGlvbidcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vdXNlLXRyYW5zbGF0aW9uJ1xuaW1wb3J0IHsgaGFzRm9yY2VSZWZyZXNoLCByZW1vdmVGb3JjZVJlZnJlc2ggfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvdXRpbHMvYXBwZW5kLWZvcmNlLXJlZnJlc2gnXG5pbXBvcnQgeyBVc2VSZWNvcmRzUmVzdWx0IH0gZnJvbSAnLi91c2UtcmVjb3Jkcy1yZXN1bHQudHlwZSdcblxuY29uc3QgYXBpID0gbmV3IEFwaUNsaWVudCgpXG5cbi8qKlxuICogQGxvYWQgLi91c2UtcmVjb3Jkcy5kb2MubWRcbiAqIEBzdWJjYXRlZ29yeSBIb29rc1xuICogQGNsYXNzXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgICAgICBpZCBvZiBhIHJlc291cmNlIGZvciB3aGljaCB5b3Ugd2FudCB0byBmZXRjaCByZWNvcmRzXG4gKiBAcmV0dXJuIHtVc2VSZWNvcmRzUmVzdWx0fVxuICogQG5ldyBJbiB2ZXJzaW9uIDMuM1xuICogQGJ1bmRsZVxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB1c2VSZWNvcmRzKHJlc291cmNlSWQ6IHN0cmluZyk6IFVzZVJlY29yZHNSZXN1bHQge1xuICBjb25zdCBbcmVjb3Jkcywgc2V0UmVjb3Jkc10gPSB1c2VTdGF0ZTxBcnJheTxSZWNvcmRKU09OPj4oW10pXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbcGVyUGFnZSwgc2V0UGVyUGFnZV0gPSB1c2VTdGF0ZSgxMClcbiAgY29uc3QgW3BhZ2UsIHNldFBhZ2VdID0gdXNlU3RhdGUoMSlcbiAgY29uc3QgW3RvdGFsLCBzZXRUb3RhbF0gPSB1c2VTdGF0ZSgwKVxuICBjb25zdCBbZGlyZWN0aW9uLCBzZXREaXJlY3Rpb25dID0gdXNlU3RhdGU8J2FzYyd8ICdkZXNjJz4oJ2FzYycpXG4gIGNvbnN0IFtzb3J0QnksIHNldFNvcnRCeV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KClcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcbiAgY29uc3QgYWRkTm90aWNlID0gdXNlTm90aWNlKClcbiAgY29uc3QgeyB0cmFuc2xhdGVNZXNzYWdlIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IG9uTm90aWNlID0gdXNlTm90aWNlKClcblxuICBjb25zdCBmZXRjaERhdGEgPSAoKTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPExpc3RBY3Rpb25SZXNwb25zZT4+ID0+IHtcbiAgICBzZXRMb2FkaW5nKHRydWUpXG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaClcblxuICAgIGNvbnN0IHByb21pc2UgPSBhcGkucmVzb3VyY2VBY3Rpb24oe1xuICAgICAgYWN0aW9uTmFtZTogJ2xpc3QnLCByZXNvdXJjZUlkLCBwYXJhbXM6IHF1ZXJ5LFxuICAgIH0pIGFzIFByb21pc2U8QXhpb3NSZXNwb25zZTxMaXN0QWN0aW9uUmVzcG9uc2U+PlxuXG4gICAgcHJvbWlzZS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgbGlzdEFjdGlvblJlc3BvbnNlID0gcmVzcG9uc2UuZGF0YSBhcyBMaXN0QWN0aW9uUmVzcG9uc2VcbiAgICAgIGlmIChsaXN0QWN0aW9uUmVzcG9uc2Uubm90aWNlKSB7XG4gICAgICAgIG9uTm90aWNlKGxpc3RBY3Rpb25SZXNwb25zZS5ub3RpY2UpXG4gICAgICB9XG4gICAgICBpZiAobGlzdEFjdGlvblJlc3BvbnNlLnJlZGlyZWN0VXJsKSB7XG4gICAgICAgIGhpc3RvcnkucHVzaChsaXN0QWN0aW9uUmVzcG9uc2UucmVkaXJlY3RVcmwsIHsgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgc2V0UmVjb3JkcyhsaXN0QWN0aW9uUmVzcG9uc2UucmVjb3JkcylcbiAgICAgIHNldFBhZ2UobGlzdEFjdGlvblJlc3BvbnNlLm1ldGEucGFnZSlcbiAgICAgIHNldFBlclBhZ2UobGlzdEFjdGlvblJlc3BvbnNlLm1ldGEucGVyUGFnZSlcbiAgICAgIHNldFRvdGFsKGxpc3RBY3Rpb25SZXNwb25zZS5tZXRhLnRvdGFsKVxuICAgICAgc2V0RGlyZWN0aW9uKGxpc3RBY3Rpb25SZXNwb25zZS5tZXRhLmRpcmVjdGlvbilcbiAgICAgIHNldFNvcnRCeShsaXN0QWN0aW9uUmVzcG9uc2UubWV0YS5zb3J0QnkpXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKVxuICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgIGFkZE5vdGljZSh7XG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZU1lc3NhZ2UoJ2Vycm9yRmV0Y2hpbmdSZWNvcmRzJywgcmVzb3VyY2VJZCksXG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGhhc0ZvcmNlUmVmcmVzaChsb2NhdGlvbi5zZWFyY2gpKSB7XG4gICAgICBjb25zdCBsb2NhdGlvblN0YXRlOiBhbnkgPSBsb2NhdGlvbi5zdGF0ZSB8fCB7fVxuICAgICAgaWYgKCFsb2NhdGlvblN0YXRlLnByZXZpb3VzUGFnZSkge1xuICAgICAgICBsb2NhdGlvblN0YXRlLnByZXZpb3VzUGFnZSA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICB9XG5cbiAgICAgIGhpc3RvcnkucmVwbGFjZSh7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc3RhdGU6IGxvY2F0aW9uU3RhdGUsXG4gICAgICAgIHNlYXJjaDogcmVtb3ZlRm9yY2VSZWZyZXNoKGxvY2F0aW9uLnNlYXJjaCkudG9TdHJpbmcoKSxcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGZldGNoRGF0YSgpXG4gICAgfVxuICB9LCBbcmVzb3VyY2VJZCwgbG9jYXRpb24uc2VhcmNoLCBsb2NhdGlvbi5zdGF0ZV0pXG5cbiAgcmV0dXJuIHtcbiAgICByZWNvcmRzLFxuICAgIGxvYWRpbmcsXG4gICAgcGFnZSxcbiAgICB0b3RhbCxcbiAgICBkaXJlY3Rpb24sXG4gICAgc29ydEJ5LFxuICAgIHBlclBhZ2UsXG4gICAgZmV0Y2hEYXRhLFxuICB9XG59XG5cbmV4cG9ydCB7XG4gIHVzZVJlY29yZHMgYXMgZGVmYXVsdCxcbiAgdXNlUmVjb3Jkcyxcbn1cbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IFVzZVNlbGVjdGVkUmVjb3Jkc1Jlc3VsdCB9IGZyb20gJy4vdXNlLXNlbGVjdGVkLXJlY29yZHMtcmVzdWx0LnR5cGUnXG5cbi8qKlxuICogQGxvYWQgLi91c2Utc2VsZWN0ZWQtcmVjb3Jkcy5kb2MubWRcbiAqIEBzdWJjYXRlZ29yeSBIb29rc1xuICogQGNsYXNzXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5PFJlY29yZEpTT04+fSByZWNvcmRzICAgICBMaXN0IG9mIHJlY29yZHMgb24gd2hpY2ggeW91IGNhbiBwZXJmb3JtIGBzZWxlY3RgIGFjdGlvblxuICogQHJldHVybiB7VXNlU2VsZWN0ZWRSZWNvcmRzUmVzdWx0fVxuICogQG5ldyBJbiB2ZXJzaW9uIDMuM1xuICogQGJ1bmRsZVxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB1c2VTZWxlY3RlZFJlY29yZHMocmVjb3JkczogQXJyYXk8UmVjb3JkSlNPTj4pOiBVc2VTZWxlY3RlZFJlY29yZHNSZXN1bHQge1xuICBjb25zdCBbc2VsZWN0ZWRSZWNvcmRzLCBzZXRTZWxlY3RlZFJlY29yZHNdID0gdXNlU3RhdGU8QXJyYXk8UmVjb3JkSlNPTj4+KFtdKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9IChyZWNvcmQ6IFJlY29yZEpTT04pOiB2b2lkID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRSZWNvcmRzLmZpbmRJbmRleChzZWxlY3RlZCA9PiBzZWxlY3RlZC5pZCA9PT0gcmVjb3JkLmlkKVxuICAgIGlmIChzZWxlY3RlZEluZGV4IDwgMCkge1xuICAgICAgc2V0U2VsZWN0ZWRSZWNvcmRzKFsuLi5zZWxlY3RlZFJlY29yZHMsIHJlY29yZF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1NlbGVjdGVkUmVjb3JkcyA9IFsuLi5zZWxlY3RlZFJlY29yZHNdXG4gICAgICBuZXdTZWxlY3RlZFJlY29yZHMuc3BsaWNlKHNlbGVjdGVkSW5kZXgsIDEpXG4gICAgICBzZXRTZWxlY3RlZFJlY29yZHMobmV3U2VsZWN0ZWRSZWNvcmRzKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdEFsbCA9ICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBtaXNzaW5nID0gcmVjb3Jkcy5maWx0ZXIocmVjb3JkID0+IChcbiAgICAgICFzZWxlY3RlZFJlY29yZHMuZmluZChzZWxlY3RlZCA9PiBzZWxlY3RlZC5pZCA9PT0gcmVjb3JkLmlkKVxuICAgICAgJiYgcmVjb3JkLmJ1bGtBY3Rpb25zLmxlbmd0aFxuICAgICkpXG4gICAgaWYgKG1pc3NpbmcubGVuZ3RoKSB7XG4gICAgICBzZXRTZWxlY3RlZFJlY29yZHMoWy4uLnNlbGVjdGVkUmVjb3JkcywgLi4ubWlzc2luZ10pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1NlbGVjdGVkUmVjb3JkcyA9IHNlbGVjdGVkUmVjb3Jkcy5maWx0ZXIoc2VsZWN0ZWQgPT4gKFxuICAgICAgICAhcmVjb3Jkcy5maW5kKHJlY29yZCA9PiByZWNvcmQuaWQgPT09IHNlbGVjdGVkLmlkKVxuICAgICAgKSlcbiAgICAgIHNldFNlbGVjdGVkUmVjb3JkcyhuZXdTZWxlY3RlZFJlY29yZHMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVTZWxlY3QsXG4gICAgaGFuZGxlU2VsZWN0QWxsLFxuICAgIHNlbGVjdGVkUmVjb3JkcyxcbiAgICBzZXRTZWxlY3RlZFJlY29yZHMsXG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgdXNlU2VsZWN0ZWRSZWNvcmRzIGFzIGRlZmF1bHQsXG4gIHVzZVNlbGVjdGVkUmVjb3Jkcyxcbn1cbiIsImltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBSZXNvdXJjZUpTT04gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUmVkdXhTdGF0ZSB9IGZyb20gJy4uLy4uL3N0b3JlL3N0b3JlJ1xuXG4vKipcbiAqIEBsb2FkIC4vdXNlLXJlc291cmNlLmRvYy5tZFxuICogQHN1YmNhdGVnb3J5IEhvb2tzXG4gKiBAY2xhc3NcbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqIEBuZXcgaW4gdmVyc2lvbiAzLjNcbiAqIEBidW5kbGVcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZUlkICAgIElkIG9mIGEgcmVzb3VyY2UgeW91IHdhbnQgdG8gZ2V0XG4gKi9cbmNvbnN0IHVzZVJlc291cmNlID0gKHJlc291cmNlSWQ6IHN0cmluZyk6IFJlc291cmNlSlNPTiB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IHJlc291cmNlcyA9IHVzZVNlbGVjdG9yKChzdGF0ZTogUmVkdXhTdGF0ZSkgPT4gc3RhdGUucmVzb3VyY2VzKVxuXG4gIGNvbnN0IGZvdW5kUmVzb3VyY2UgPSByZXNvdXJjZXMuZmluZChyZXNvdXJjZSA9PiByZXNvdXJjZS5pZCA9PT0gcmVzb3VyY2VJZClcblxuICByZXR1cm4gZm91bmRSZXNvdXJjZVxufVxuXG5leHBvcnQge1xuICB1c2VSZXNvdXJjZSBhcyBkZWZhdWx0LFxuICB1c2VSZXNvdXJjZSxcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTmF2aWdhdGlvbiB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS10cmFuc2xhdGlvbidcbmltcG9ydCB7IFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgYWxsb3dPdmVycmlkZSBmcm9tICcuLi8uLi8uLi9ob2MvYWxsb3ctb3ZlcnJpZGUnXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uUmVzb3VyY2VzIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MnXG5cbi8qKlxuICogQGFsaWFzIFNpZGViYXJSZXNvdXJjZVNlY3Rpb25Qcm9wc1xuICogQG1lbWJlcm9mIFNpZGViYXJSZXNvdXJjZVNlY3Rpb25cbiAqL1xuZXhwb3J0IHR5cGUgU2lkZWJhclJlc291cmNlU2VjdGlvblByb3BzID0ge1xuICAvKiogTGlzdCBvZiB0aGUgcmVzb3VyY2VzIHdoaWNoIHNob3VsZCBiZSByZW5kZXJlZCAqL1xuICByZXNvdXJjZXM6IEFycmF5PFJlc291cmNlSlNPTj47XG59XG5cbi8qKlxuICogR3JvdXBzIHJlc291cmNlcyBieSBzZWN0aW9ucyBhbmQgcmVuZGVycyB0aGUgbGlzdCBpbiB7QGxpbmsgU2lkZWJhcn1cbiAqXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7IFNpZGViYXJSZXNvdXJjZVNlY3Rpb24gfSBmcm9tICdhZG1pbmpzYFxuICogYGBgXG4gKlxuICogQGNvbXBvbmVudFxuICogQHN1YmNhdGVnb3J5IEFwcGxpY2F0aW9uXG4gKiBAbmFtZSBTaWRlYmFyUmVzb3VyY2VTZWN0aW9uXG4gKi9cbmNvbnN0IFNpZGViYXJSZXNvdXJjZVNlY3Rpb25PcmlnaW5hbDogRkM8U2lkZWJhclJlc291cmNlU2VjdGlvblByb3BzPiA9ICh7IHJlc291cmNlcyB9KSA9PiB7XG4gIGNvbnN0IGVsZW1lbnRzID0gdXNlTmF2aWdhdGlvblJlc291cmNlcyhyZXNvdXJjZXMpXG5cbiAgY29uc3QgeyB0cmFuc2xhdGVMYWJlbCB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIHJldHVybiAoXG4gICAgPE5hdmlnYXRpb25cbiAgICAgIGxhYmVsPXt0cmFuc2xhdGVMYWJlbCgnbmF2aWdhdGlvbicpfVxuICAgICAgZWxlbWVudHM9e2VsZW1lbnRzfVxuICAgIC8+XG4gIClcbn1cblxuLy8gUm9sbHVwIGNhbm5vdCBoYW5kbGUgdHlwZSBleHBvcnRzIHdlbGwgLSB0aGF0IGlzIHdoeSB3ZSBuZWVkIHRvIGRvIHRoaXMgaGFjayB3aXRoXG4vLyBleHBvcnRpbmcgZGVmYXVsdCBhbmQgbmFtZWQgU2lkZWJhclJlc291cmNlU2VjdGlvblxuY29uc3QgU2lkZWJhclJlc291cmNlU2VjdGlvbiA9IGFsbG93T3ZlcnJpZGUoU2lkZWJhclJlc291cmNlU2VjdGlvbk9yaWdpbmFsLCAnU2lkZWJhclJlc291cmNlU2VjdGlvbicpXG5cbmV4cG9ydCB7IFNpZGViYXJSZXNvdXJjZVNlY3Rpb24gfVxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhclJlc291cmNlU2VjdGlvblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBCb3gsIGNzc0NsYXNzLCB0aGVtZUdldCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IEJyYW5kaW5nT3B0aW9ucyB9IGZyb20gJ3NyYy9hZG1pbmpzLW9wdGlvbnMuaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUmVzb3VyY2VKU09OLCBQYWdlSlNPTiB9IGZyb20gJ3NyYy9mcm9udGVuZC9pbnRlcmZhY2VzJ1xuaW1wb3J0IFNpZGViYXJCcmFuZGluZyBmcm9tICcuL3NpZGViYXItYnJhbmRpbmcnXG5pbXBvcnQgU2lkZWJhclBhZ2VzIGZyb20gJy4vc2lkZWJhci1wYWdlcydcbmltcG9ydCB7IFJlZHV4U3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdG9yZS9zdG9yZSdcbmltcG9ydCBTaWRlYmFyRm9vdGVyIGZyb20gJy4vc2lkZWJhci1mb290ZXInXG5cbmltcG9ydCBTaWRlYmFyUmVzb3VyY2VTZWN0aW9uIGZyb20gJy4vc2lkZWJhci1yZXNvdXJjZS1zZWN0aW9uJ1xuaW1wb3J0IGFsbG93T3ZlcnJpZGUgZnJvbSAnLi4vLi4vLi4vaG9jL2FsbG93LW92ZXJyaWRlJ1xuXG50eXBlIFByb3BzID0ge1xuICBpc1Zpc2libGU6IGJvb2xlYW47XG59O1xuXG5jb25zdCBTdHlsZWRTaWRlYmFyID0gc3R5bGVkKEJveClgXG4gIHRyYW5zaXRpb246IGxlZnQgMC4zcztcbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBvdmVyZmxvdy15OiBhdXRvO1xuXG4gICYuaGlkZGVuIHtcbiAgICBsZWZ0OiAtJHt0aGVtZUdldCgnc2l6ZXMnLCAnc2lkZWJhcldpZHRoJyl9O1xuICB9XG4gICYudmlzaWJsZSB7XG4gICAgbGVmdDogMDtcbiAgfVxuYFxuXG5TdHlsZWRTaWRlYmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgcG9zaXRpb246IFsnYWJzb2x1dGUnLCAnYWJzb2x1dGUnLCAnYWJzb2x1dGUnLCAnYWJzb2x1dGUnLCAnaW5oZXJpdCddLFxuICB3aWR0aDogJ3NpZGViYXJXaWR0aCcsXG4gIGJvcmRlclJpZ2h0OiAnZGVmYXVsdCcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIHpJbmRleDogNTAsXG4gIGJnOiAnd2hpdGUnLFxufVxuXG5jb25zdCBTaWRlYmFyT3JpZ2luYWw6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGlzVmlzaWJsZSB9ID0gcHJvcHNcbiAgY29uc3QgW2JyYW5kaW5nLCByZXNvdXJjZXMsIHBhZ2VzXTogW1xuICAgIEJyYW5kaW5nT3B0aW9ucyxcbiAgICBSZXNvdXJjZUpTT05bXSxcbiAgICBQYWdlSlNPTltdXG4gIF0gPSB1c2VTZWxlY3Rvcigoc3RhdGU6IFJlZHV4U3RhdGUpID0+IFtcbiAgICBzdGF0ZS5icmFuZGluZyxcbiAgICBzdGF0ZS5yZXNvdXJjZXMsXG4gICAgc3RhdGUucGFnZXMsXG4gIF0pXG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkU2lkZWJhciBjbGFzc05hbWU9e2lzVmlzaWJsZSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nfT5cbiAgICAgIDxTaWRlYmFyQnJhbmRpbmcgYnJhbmRpbmc9e2JyYW5kaW5nfSAvPlxuICAgICAgPEJveCBmbGV4R3Jvdz17MX0gY2xhc3NOYW1lPXtjc3NDbGFzcygnUmVzb3VyY2VzJyl9PlxuICAgICAgICA8U2lkZWJhclJlc291cmNlU2VjdGlvbiByZXNvdXJjZXM9e3Jlc291cmNlc30gLz5cbiAgICAgIDwvQm94PlxuICAgICAgPFNpZGViYXJQYWdlcyBwYWdlcz17cGFnZXN9IC8+XG4gICAgICB7YnJhbmRpbmc/LnNvZnR3YXJlQnJvdGhlcnMgJiYgPFNpZGViYXJGb290ZXIgLz59XG4gICAgPC9TdHlsZWRTaWRlYmFyPlxuICApXG59XG5cbmNvbnN0IFNpZGViYXIgPSBhbGxvd092ZXJyaWRlKFNpZGViYXJPcmlnaW5hbCwgJ1NpZGViYXInKVxuXG5leHBvcnQgeyBTaWRlYmFyIH1cbmV4cG9ydCBkZWZhdWx0IFNpZGViYXJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEN1cnJlbnRVc2VyTmF2LCBCb3gsIEN1cnJlbnRVc2VyTmF2UHJvcHMgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBDdXJyZW50QWRtaW4gfSBmcm9tICcuLi8uLi8uLi9jdXJyZW50LWFkbWluLmludGVyZmFjZSdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5pbXBvcnQgYWxsb3dPdmVycmlkZSBmcm9tICcuLi8uLi9ob2MvYWxsb3ctb3ZlcnJpZGUnXG5cbmV4cG9ydCB0eXBlIExvZ2dlZEluUHJvcHMgPSB7XG4gIHNlc3Npb246IEN1cnJlbnRBZG1pbjtcbiAgcGF0aHM6IHtcbiAgICBsb2dvdXRQYXRoOiBzdHJpbmc7XG4gIH07XG59XG5cbmNvbnN0IExvZ2dlZEluOiBSZWFjdC5GQzxMb2dnZWRJblByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHNlc3Npb24sIHBhdGhzIH0gPSBwcm9wc1xuICBjb25zdCB7IHRyYW5zbGF0ZUJ1dHRvbiB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIGNvbnN0IGRyb3BBY3Rpb25zOiBDdXJyZW50VXNlck5hdlByb3BzWydkcm9wQWN0aW9ucyddID0gW3tcbiAgICBsYWJlbDogdHJhbnNsYXRlQnV0dG9uKCdsb2dvdXQnKSxcbiAgICBvbkNsaWNrOiAoZXZlbnQ6IEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBhdGhzLmxvZ291dFBhdGhcbiAgICB9LFxuICAgIGljb246ICdMb2dvdXQnLFxuICB9XVxuICByZXR1cm4gKFxuICAgIDxCb3ggZmxleFNocmluaz17MH0+XG4gICAgICA8Q3VycmVudFVzZXJOYXZcbiAgICAgICAgbmFtZT17c2Vzc2lvbi5lbWFpbH1cbiAgICAgICAgdGl0bGU9e3Nlc3Npb24udGl0bGV9XG4gICAgICAgIGF2YXRhclVybD17c2Vzc2lvbi5hdmF0YXJVcmx9XG4gICAgICAgIGRyb3BBY3Rpb25zPXtkcm9wQWN0aW9uc31cbiAgICAgIC8+XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuY29uc3QgT3ZlcnJpZGFibGVMb2dnZWRJbiA9IGFsbG93T3ZlcnJpZGUoTG9nZ2VkSW4sICdMb2dnZWRJbicpXG5cbmV4cG9ydCB7XG4gIE92ZXJyaWRhYmxlTG9nZ2VkSW4gYXMgZGVmYXVsdCxcbiAgT3ZlcnJpZGFibGVMb2dnZWRJbiBhcyBMb2dnZWRJbixcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBjc3NDbGFzcywgVGV4dCwgQm94IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgVmVyc2lvblByb3BzIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICB2ZXJzaW9uczogVmVyc2lvblByb3BzO1xufVxuXG5jb25zdCBWZXJzaW9uSXRlbSA9IHN0eWxlZChUZXh0KWBcbiAgcGFkZGluZzogMTJweCAyNHB4IDEycHggMDtcbmBcblxuVmVyc2lvbkl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBkaXNwbGF5OiBbJ25vbmUnLCAnYmxvY2snXSxcbiAgY29sb3I6ICdncmV5MTAwJyxcbn1cblxuZXhwb3J0IGNvbnN0IFZlcnNpb246IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHZlcnNpb25zIH0gPSBwcm9wc1xuICBjb25zdCB7IGFkbWluLCBhcHAgfSA9IHZlcnNpb25zXG5cbiAgY29uc3QgeyB0cmFuc2xhdGVMYWJlbCB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIHJldHVybiAoXG4gICAgPEJveCBmbGV4IGZsZXhHcm93PXsxfSBweT1cImRlZmF1bHRcIiBweD1cInh4bFwiIGNsYXNzTmFtZT17Y3NzQ2xhc3MoJ1ZlcnNpb24nKX0+XG4gICAgICB7YWRtaW4gJiYgKFxuICAgICAgICA8VmVyc2lvbkl0ZW0+XG4gICAgICAgICAge3RyYW5zbGF0ZUxhYmVsKCdhZG1pblZlcnNpb24nLCB7IHZlcnNpb246IGFkbWluIH0pfVxuICAgICAgICA8L1ZlcnNpb25JdGVtPlxuICAgICAgKX1cbiAgICAgIHthcHAgJiYgKFxuICAgICAgICA8VmVyc2lvbkl0ZW0+XG4gICAgICAgICAge3RyYW5zbGF0ZUxhYmVsKCdhcHBWZXJzaW9uJywgeyB2ZXJzaW9uOiBhcHAgfSl9XG4gICAgICAgIDwvVmVyc2lvbkl0ZW0+XG4gICAgICApfVxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnNpb25cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgY3NzQ2xhc3MsIEJveCwgSWNvbiwgdGhlbWVHZXQgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgTG9nZ2VkSW4gZnJvbSAnLi9sb2dnZWQtaW4nXG5pbXBvcnQgVmVyc2lvbiBmcm9tICcuL3ZlcnNpb24nXG5cbmltcG9ydCB7IFJlZHV4U3RhdGUgfSBmcm9tICcuLi8uLi9zdG9yZS9zdG9yZSdcblxuXG5jb25zdCBOYXZCYXIgPSBzdHlsZWQoQm94KWBcbiAgaGVpZ2h0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMubmF2YmFySGVpZ2h0fTtcbiAgYm9yZGVyLWJvdHRvbTogJHt0aGVtZUdldCgnYm9yZGVycycsICdkZWZhdWx0Jyl9O1xuICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLndoaXRlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgZmxleC1zaHJpbms6IDA7XG5gXG5cbk5hdkJhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogY3NzQ2xhc3MoJ05hdkJhcicpLFxufVxuXG50eXBlIFByb3BzID0ge1xuICB0b2dnbGVTaWRlYmFyOiAoYW55KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgVG9wQmFyOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyB0b2dnbGVTaWRlYmFyIH0gPSBwcm9wc1xuICBjb25zdCBbc2Vzc2lvbiwgcGF0aHMsIHZlcnNpb25zXSA9IHVzZVNlbGVjdG9yKFxuICAgIChzdGF0ZTogUmVkdXhTdGF0ZSkgPT4gW3N0YXRlLnNlc3Npb24sIHN0YXRlLnBhdGhzLCBzdGF0ZS52ZXJzaW9uc10sXG4gIClcbiAgcmV0dXJuIChcbiAgICA8TmF2QmFyPlxuICAgICAgPEJveFxuICAgICAgICBweT1cImxnXCJcbiAgICAgICAgcHg9e1snZGVmYXVsdCcsICdsZyddfVxuICAgICAgICBvbkNsaWNrPXt0b2dnbGVTaWRlYmFyfVxuICAgICAgICBkaXNwbGF5PXtbJ2Jsb2NrJywgJ2Jsb2NrJywgJ2Jsb2NrJywgJ2Jsb2NrJywgJ25vbmUnXX1cbiAgICAgICAgc3R5bGU9e3sgY3Vyc29yOiAncG9pbnRlcicgfX1cbiAgICAgID5cbiAgICAgICAgPEljb24gaWNvbj1cIk1lbnVcIiBzaXplPXszMn0gY29sb3I9XCJncmV5MTAwXCIgLz5cbiAgICAgIDwvQm94PlxuICAgICAgPFZlcnNpb24gdmVyc2lvbnM9e3ZlcnNpb25zfSAvPlxuICAgICAge3Nlc3Npb24gJiYgc2Vzc2lvbi5lbWFpbCA/IDxMb2dnZWRJbiBzZXNzaW9uPXtzZXNzaW9ufSBwYXRocz17cGF0aHN9IC8+IDogJyd9XG4gICAgPC9OYXZCYXI+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9wQmFyXG4iLCJleHBvcnQgY29uc3QgRFJPUF9OT1RJQ0UgPSAnRFJPUF9OT1RJQ0UnXG5cbmV4cG9ydCB0eXBlIERyb3BOb3RpY2VSZXNwb25zZSA9IHtcbiAgdHlwZTogdHlwZW9mIERST1BfTk9USUNFO1xuICBkYXRhOiB7XG4gICAgbm90aWNlSWQ6IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGRyb3BOb3RpY2UgPSAobm90aWNlSWQ6IHN0cmluZyk6IERyb3BOb3RpY2VSZXNwb25zZSA9PiAoe1xuICB0eXBlOiAnRFJPUF9OT1RJQ0UnLFxuICBkYXRhOiB7IG5vdGljZUlkIH0sXG59KVxuIiwiXG5leHBvcnQgY29uc3QgU0VUX05PVElDRV9QUk9HUkVTUyA9ICdTRVRfTk9USUNFX1BST0dSRVNTJ1xuXG5leHBvcnQgdHlwZSBTZXROb3RpY2VQcm9ncmVzcyA9IHtcbiAgbm90aWNlSWQ6IHN0cmluZztcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgU2V0Tm90aWNlUHJvZ3Jlc3NSZXNwb25zZSA9IHtcbiAgdHlwZTogdHlwZW9mIFNFVF9OT1RJQ0VfUFJPR1JFU1M7XG4gIGRhdGE6IFNldE5vdGljZVByb2dyZXNzO1xufVxuXG5leHBvcnQgY29uc3Qgc2V0Tm90aWNlUHJvZ3Jlc3MgPSAoZGF0YTogU2V0Tm90aWNlUHJvZ3Jlc3MpOiBTZXROb3RpY2VQcm9ncmVzc1Jlc3BvbnNlID0+ICh7XG4gIHR5cGU6IFNFVF9OT1RJQ0VfUFJPR1JFU1MsXG4gIGRhdGEsXG59KVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgTWVzc2FnZUJveCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IE5vdGljZU1lc3NhZ2VJblN0YXRlLCBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUvc3RvcmUnXG5pbXBvcnQgeyBkcm9wTm90aWNlIH0gZnJvbSAnLi4vLi4vc3RvcmUvYWN0aW9ucy9kcm9wLW5vdGljZSdcbmltcG9ydCB7IHNldE5vdGljZVByb2dyZXNzIH0gZnJvbSAnLi4vLi4vc3RvcmUvYWN0aW9ucy9zZXQtbm90aWNlLXByb2dyZXNzJ1xuXG5jb25zdCBUSU1FX1RPX0RJU0FQUEVBUiA9IDNcblxuZXhwb3J0IHR5cGUgTm90aWZ5UHJvZ3Jlc3MgPSAob3B0aW9uczoge1xuICBub3RpY2VJZDogc3RyaW5nOyBwcm9ncmVzczogbnVtYmVyO1xufSkgPT4gdm9pZFxuXG5leHBvcnQgdHlwZSBOb3RpY2VFbGVtZW50UHJvcHMgPSB7XG4gIG5vdGljZTogTm90aWNlTWVzc2FnZUluU3RhdGU7XG4gIGRyb3A6ICgpID0+IGFueTtcbiAgbm90aWZ5UHJvZ3Jlc3M6IE5vdGlmeVByb2dyZXNzO1xufVxuXG5leHBvcnQgdHlwZSBOb3RpY2VFbGVtZW50U3RhdGUgPSB7XG4gIHByb2dyZXNzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBOb3RpY2VFbGVtZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PE5vdGljZUVsZW1lbnRQcm9wcywgTm90aWNlRWxlbWVudFN0YXRlPiB7XG4gIHByaXZhdGUgdGltZXI6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgY29uc3QgeyBub3RpY2UgfSA9IHByb3BzXG4gICAgdGhpcy50aW1lciA9IG51bGxcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcHJvZ3Jlc3M6IG5vdGljZS5wcm9ncmVzcyB8fCAwLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIGNvbnN0IHsgZHJvcCwgbm90aWNlLCBub3RpZnlQcm9ncmVzcyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gc3RhdGUucHJvZ3Jlc3MgKyAxMDAgLyBUSU1FX1RPX0RJU0FQUEVBUlxuICAgICAgICBub3RpZnlQcm9ncmVzcyh7IG5vdGljZUlkOiBub3RpY2UuaWQsIHByb2dyZXNzIH0pXG4gICAgICAgIHJldHVybiB7IHByb2dyZXNzIH1cbiAgICAgIH0pXG4gICAgfSwgMTAwMClcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKVxuICAgICAgfVxuICAgICAgZHJvcCgpXG4gICAgfSwgMTAwMCAqIChUSU1FX1RPX0RJU0FQUEVBUiArIDEpKVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IG5vdGljZSwgZHJvcCB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAoXG4gICAgICA8TWVzc2FnZUJveFxuICAgICAgICBzdHlsZT17eyBtaW5XaWR0aDogJzQ4MHB4JyB9fVxuICAgICAgICBtZXNzYWdlPXtub3RpY2UubWVzc2FnZX1cbiAgICAgICAgdmFyaWFudD17bm90aWNlLnR5cGUgPT09ICdzdWNjZXNzJyA/ICdzdWNjZXNzJyA6ICdkYW5nZXInfVxuICAgICAgICBvbkNsb3NlQ2xpY2s9e2Ryb3B9XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuXG50eXBlIE5vdGljZUJveFByb3BzRnJvbVN0YXRlID0ge1xuICBub3RpY2VzOiBBcnJheTxOb3RpY2VNZXNzYWdlSW5TdGF0ZT47XG59XG5cbnR5cGUgTm90aWNlQm94RGlzcGF0Y2hGcm9tU3RhdGUgPSB7XG4gIGRyb3A6IChub3RpY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBub3RpZnlQcm9ncmVzczogTm90aWZ5UHJvZ3Jlc3M7XG59XG5cbmNvbnN0IE5vdGljZUJveDogUmVhY3QuRkM8Tm90aWNlQm94UHJvcHNGcm9tU3RhdGUgJiBOb3RpY2VCb3hEaXNwYXRjaEZyb21TdGF0ZT4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBkcm9wLCBub3RpY2VzLCBub3RpZnlQcm9ncmVzcyB9ID0gcHJvcHNcbiAgY29uc3Qgbm90aWNlID0gbm90aWNlcy5sZW5ndGggPyBub3RpY2VzW25vdGljZXMubGVuZ3RoIC0gMV0gOiBudWxsXG4gIGlmIChub3RpY2UpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cIm5vdGljZS13cmFwcGVyXCI+XG4gICAgICAgIDxOb3RpY2VFbGVtZW50XG4gICAgICAgICAga2V5PXtub3RpY2UuaWR9XG4gICAgICAgICAgbm90aWNlPXtub3RpY2V9XG4gICAgICAgICAgZHJvcD17KCk6IHZvaWQgPT4gZHJvcChub3RpY2UuaWQpfVxuICAgICAgICAgIG5vdGlmeVByb2dyZXNzPXtub3RpZnlQcm9ncmVzc31cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuICByZXR1cm4gKFxuICAgIDxkaXYgLz5cbiAgKVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJlZHV4U3RhdGUpOiBOb3RpY2VCb3hQcm9wc0Zyb21TdGF0ZSA9PiAoe1xuICBub3RpY2VzOiBzdGF0ZS5ub3RpY2VzLFxufSlcblxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpOiBOb3RpY2VCb3hEaXNwYXRjaEZyb21TdGF0ZSA9PiAoe1xuICBkcm9wOiAobm90aWNlSWQ6IHN0cmluZyk6IHZvaWQgPT4gZGlzcGF0Y2goZHJvcE5vdGljZShub3RpY2VJZCkpLFxuICBub3RpZnlQcm9ncmVzczogKHtcbiAgICBub3RpY2VJZCwgcHJvZ3Jlc3MsXG4gIH0pOiB2b2lkID0+IGRpc3BhdGNoKHNldE5vdGljZVByb2dyZXNzKHsgbm90aWNlSWQsIHByb2dyZXNzIH0pKSxcbn0pXG5cbmNvbnN0IENvbm5lY3RlZE5vdGljZUJveCA9IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuKShOb3RpY2VCb3gpXG5cbmV4cG9ydCB7XG4gIENvbm5lY3RlZE5vdGljZUJveCBhcyBkZWZhdWx0LFxuICBDb25uZWN0ZWROb3RpY2VCb3ggYXMgTm90aWNlQm94LFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7XG4gIEJveCxcbiAgSDIsXG4gIEg1LFxuICBINCxcbiAgVGV4dCxcbiAgSWxsdXN0cmF0aW9uLFxuICBJbGx1c3RyYXRpb25Qcm9wcyxcbiAgQnV0dG9uLFxufSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuXG5jb25zdCBwYWdlSGVhZGVySGVpZ2h0ID0gMjg0XG5jb25zdCBwYWdlSGVhZGVyUGFkZGluZ1kgPSA3NFxuY29uc3QgcGFnZUhlYWRlclBhZGRpbmdYID0gMjUwXG5cbmV4cG9ydCBjb25zdCBEYXNoYm9hcmRIZWFkZXI6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHRyYW5zbGF0ZU1lc3NhZ2UgfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgcmV0dXJuIChcbiAgICA8Qm94IHBvc2l0aW9uPVwicmVsYXRpdmVcIiBvdmVyZmxvdz1cImhpZGRlblwiPlxuICAgICAgPEJveFxuICAgICAgICBwb3NpdGlvbj1cImFic29sdXRlXCJcbiAgICAgICAgdG9wPXs1MH1cbiAgICAgICAgbGVmdD17LTEwfVxuICAgICAgICBvcGFjaXR5PXtbMC4yLCAwLjQsIDFdfVxuICAgICAgICBhbmltYXRlXG4gICAgICA+XG4gICAgICAgIDxJbGx1c3RyYXRpb24gdmFyaWFudD1cIlJvY2tldFwiIC8+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3hcbiAgICAgICAgcG9zaXRpb249XCJhYnNvbHV0ZVwiXG4gICAgICAgIHRvcD17LTcwfVxuICAgICAgICByaWdodD17LTE1fVxuICAgICAgICBvcGFjaXR5PXtbMC4yLCAwLjQsIDFdfVxuICAgICAgICBhbmltYXRlXG4gICAgICA+XG4gICAgICAgIDxJbGx1c3RyYXRpb24gdmFyaWFudD1cIk1vb25cIiAvPlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94XG4gICAgICAgIGJnPVwiZ3JleTEwMFwiXG4gICAgICAgIGhlaWdodD17cGFnZUhlYWRlckhlaWdodH1cbiAgICAgICAgcHk9e3BhZ2VIZWFkZXJQYWRkaW5nWX1cbiAgICAgICAgcHg9e1snZGVmYXVsdCcsICdsZycsIHBhZ2VIZWFkZXJQYWRkaW5nWF19XG4gICAgICA+XG4gICAgICAgIDxUZXh0IHRleHRBbGlnbj1cImNlbnRlclwiIGNvbG9yPVwid2hpdGVcIj5cbiAgICAgICAgICA8SDI+e3RyYW5zbGF0ZU1lc3NhZ2UoJ3dlbGNvbWVPbkJvYXJkX3RpdGxlJyl9PC9IMj5cbiAgICAgICAgICA8VGV4dCBvcGFjaXR5PXswLjh9PlxuICAgICAgICAgICAge3RyYW5zbGF0ZU1lc3NhZ2UoJ3dlbGNvbWVPbkJvYXJkX3N1YnRpdGxlJyl9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKVxufVxuXG50eXBlIEJveFR5cGUgPSB7XG4gIHZhcmlhbnQ6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgc3VidGl0bGU6IHN0cmluZztcbiAgaHJlZjogc3RyaW5nO1xufVxuXG5jb25zdCBib3hlcyA9ICh7IHRyYW5zbGF0ZU1lc3NhZ2UgfSk6IEFycmF5PEJveFR5cGU+ID0+IFt7XG4gIHZhcmlhbnQ6ICdQbGFuZXQnLFxuICB0aXRsZTogdHJhbnNsYXRlTWVzc2FnZSgnYWRkaW5nUmVzb3VyY2VzX3RpdGxlJyksXG4gIHN1YnRpdGxlOiB0cmFuc2xhdGVNZXNzYWdlKCdhZGRpbmdSZXNvdXJjZXNfc3VidGl0bGUnKSxcbiAgaHJlZjogJ2h0dHBzOi8vYWRtaW5qcy5jby90dXRvcmlhbC1wYXNzaW5nLXJlc291cmNlcy5odG1sJyxcbn0sIHtcbiAgdmFyaWFudDogJ0RvY3VtZW50Q2hlY2snLFxuICB0aXRsZTogdHJhbnNsYXRlTWVzc2FnZSgnY3VzdG9taXplUmVzb3VyY2VzX3RpdGxlJyksXG4gIHN1YnRpdGxlOiB0cmFuc2xhdGVNZXNzYWdlKCdjdXN0b21pemVSZXNvdXJjZXNfc3VidGl0bGUnKSxcbiAgaHJlZjogJ2h0dHBzOi8vYWRtaW5qcy5jby90dXRvcmlhbC1jdXN0b21pemluZy1yZXNvdXJjZXMuaHRtbCcsXG59LCB7XG4gIHZhcmlhbnQ6ICdEb2N1bWVudFNlYXJjaCcsXG4gIHRpdGxlOiB0cmFuc2xhdGVNZXNzYWdlKCdjdXN0b21pemVBY3Rpb25zX3RpdGxlJyksXG4gIHN1YnRpdGxlOiB0cmFuc2xhdGVNZXNzYWdlKCdjdXN0b21pemVBY3Rpb25zX3N1YnRpdGxlJyksXG4gIGhyZWY6ICdodHRwczovL2FkbWluanMuY28vdHV0b3JpYWwtYWN0aW9ucy5odG1sJyxcbn0sIHtcbiAgdmFyaWFudDogJ0ZsYWdJbkNvZycsXG4gIHRpdGxlOiB0cmFuc2xhdGVNZXNzYWdlKCd3cml0ZU93bkNvbXBvbmVudHNfdGl0bGUnKSxcbiAgc3VidGl0bGU6IHRyYW5zbGF0ZU1lc3NhZ2UoJ3dyaXRlT3duQ29tcG9uZW50c19zdWJ0aXRsZScpLFxuICBocmVmOiAnaHR0cHM6Ly9hZG1pbmpzLmNvL3R1dG9yaWFsLXdyaXRpbmctcmVhY3QtY29tcG9uZW50cy5odG1sJyxcbn0sIHtcbiAgdmFyaWFudDogJ0ZvbGRlcnMnLFxuICB0aXRsZTogdHJhbnNsYXRlTWVzc2FnZSgnY3VzdG9tRGFzaGJvYXJkX3RpdGxlJyksXG4gIHN1YnRpdGxlOiB0cmFuc2xhdGVNZXNzYWdlKCdjdXN0b21EYXNoYm9hcmRfc3VidGl0bGUnKSxcbiAgaHJlZjogJ2h0dHBzOi8vYWRtaW5qcy5jby90dXRvcmlhbC1jdXN0b20tZGFzaGJvYXJkLmh0bWwnLFxufSwge1xuICB2YXJpYW50OiAnQXN0cm9uYXV0JyxcbiAgdGl0bGU6IHRyYW5zbGF0ZU1lc3NhZ2UoJ3JvbGVCYXNlZEFjY2Vzc190aXRsZScpLFxuICBzdWJ0aXRsZTogdHJhbnNsYXRlTWVzc2FnZSgncm9sZUJhc2VkQWNjZXNzX3N1YnRpdGxlJyksXG4gIGhyZWY6ICdodHRwczovL2FkbWluanMuY28vdHV0b3JpYWwtcmJhYy5odG1sJyxcbn1dXG5cbmNvbnN0IENhcmQgPSBzdHlsZWQoQm94KWBcbiAgZGlzcGxheTogJHsoeyBmbGV4IH0pOiBzdHJpbmcgPT4gKGZsZXggPyAnZmxleCcgOiAnYmxvY2snKX07XG4gIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmdyZXkxMDB9O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAmOmhvdmVyIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnkxMDB9O1xuICAgIGJveC1zaGFkb3c6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaGFkb3dzLmNhcmRIb3Zlcn07XG4gIH1cbmBcblxuQ2FyZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHZhcmlhbnQ6ICd3aGl0ZScsXG4gIGJveFNoYWRvdzogJ2NhcmQnLFxufVxuXG5leHBvcnQgY29uc3QgRGFzaGJvYXJkOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB0cmFuc2xhdGVNZXNzYWdlLCB0cmFuc2xhdGVCdXR0b24gfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuICAgICAgPERhc2hib2FyZEhlYWRlciAvPlxuICAgICAgPEJveFxuICAgICAgICBtdD17Wyd4bCcsICd4bCcsICctMTAwcHgnXX1cbiAgICAgICAgbWI9XCJ4bFwiXG4gICAgICAgIG14PXtbMCwgMCwgMCwgJ2F1dG8nXX1cbiAgICAgICAgcHg9e1snZGVmYXVsdCcsICdsZycsICd4eGwnLCAnMCddfVxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgZmxleFxuICAgICAgICBmbGV4RGlyZWN0aW9uPVwicm93XCJcbiAgICAgICAgZmxleFdyYXA9XCJ3cmFwXCJcbiAgICAgICAgd2lkdGg9e1sxLCAxLCAxLCAxMDI0XX1cbiAgICAgID5cbiAgICAgICAge2JveGVzKHsgdHJhbnNsYXRlTWVzc2FnZSB9KS5tYXAoKGJveCwgaW5kZXgpID0+IChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgPEJveCBrZXk9e2luZGV4fSB3aWR0aD17WzEsIDEgLyAyLCAxIC8gMiwgMSAvIDNdfSBwPVwibGdcIj5cbiAgICAgICAgICAgIDxDYXJkIGFzPVwiYVwiIGhyZWY9e2JveC5ocmVmfT5cbiAgICAgICAgICAgICAgPFRleHQgdGV4dEFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPElsbHVzdHJhdGlvblxuICAgICAgICAgICAgICAgICAgdmFyaWFudD17Ym94LnZhcmlhbnQgYXMgSWxsdXN0cmF0aW9uUHJvcHNbJ3ZhcmlhbnQnXX1cbiAgICAgICAgICAgICAgICAgIHdpZHRoPXsxMDB9XG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9ezcwfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEg1IG10PVwibGdcIj57Ym94LnRpdGxlfTwvSDU+XG4gICAgICAgICAgICAgICAgPFRleHQ+e2JveC5zdWJ0aXRsZX08L1RleHQ+XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgKSl9XG4gICAgICAgIDxCb3ggd2lkdGg9e1sxLCAxLCAxIC8gMl19IHA9XCJsZ1wiPlxuICAgICAgICAgIDxDYXJkIGFzPVwiYVwiIGZsZXggaHJlZj1cImh0dHBzOi8vam9pbi5zbGFjay5jb20vdC9hZG1pbmJyby9zaGFyZWRfaW52aXRlL3p0LWRqc3F4eHB6LV9ZQ1M4VU10UTlBZGU2RFB1TFI3WndcIj5cbiAgICAgICAgICAgIDxCb3ggZmxleFNocmluaz17MH0+PElsbHVzdHJhdGlvbiB2YXJpYW50PVwiU2xhY2tMb2dvXCIgLz48L0JveD5cbiAgICAgICAgICAgIDxCb3ggbWw9XCJ4bFwiPlxuICAgICAgICAgICAgICA8SDQ+e3RyYW5zbGF0ZU1lc3NhZ2UoJ2NvbW11bml0eV90aXRsZScpfTwvSDQ+XG4gICAgICAgICAgICAgIDxUZXh0Pnt0cmFuc2xhdGVNZXNzYWdlKCdjb21tdW5pdHlfc3VidGl0bGUnKX08L1RleHQ+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8Qm94IHdpZHRoPXtbMSwgMSwgMSAvIDJdfSBwPVwibGdcIj5cbiAgICAgICAgICA8Q2FyZCBhcz1cImFcIiBmbGV4IGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vU29mdHdhcmVCcm90aGVycy9hZG1pbmpzL2lzc3Vlc1wiPlxuICAgICAgICAgICAgPEJveCBmbGV4U2hyaW5rPXswfT48SWxsdXN0cmF0aW9uIHZhcmlhbnQ9XCJHaXRodWJMb2dvXCIgLz48L0JveD5cbiAgICAgICAgICAgIDxCb3ggbWw9XCJ4bFwiPlxuICAgICAgICAgICAgICA8SDQ+e3RyYW5zbGF0ZU1lc3NhZ2UoJ2ZvdW5kQnVnX3RpdGxlJyl9PC9IND5cbiAgICAgICAgICAgICAgPFRleHQ+e3RyYW5zbGF0ZU1lc3NhZ2UoJ2ZvdW5kQnVnX3N1YnRpdGxlJyl9PC9UZXh0PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPC9DYXJkPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPEJveCB2YXJpYW50PVwid2hpdGVcIiBib3hTaGFkb3c9XCJjYXJkXCIgd2lkdGg9ezF9IG09XCJsZ1wiPlxuICAgICAgICAgIDxUZXh0IHRleHRBbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgICAgPElsbHVzdHJhdGlvbiB2YXJpYW50PVwiU29mdHdhcmVCcm90aGVyc0xvZ29cIiAvPlxuICAgICAgICAgICAgPEg0Pnt0cmFuc2xhdGVNZXNzYWdlKCduZWVkTW9yZVNvbHV0aW9uc190aXRsZScpfTwvSDQ+XG4gICAgICAgICAgICA8VGV4dD57dHJhbnNsYXRlTWVzc2FnZSgnbmVlZE1vcmVTb2x1dGlvbnNfc3VidGl0bGUnKX08L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCBtdD1cInh4bFwiPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgYXM9XCJhXCJcbiAgICAgICAgICAgICAgICB2YXJpYW50PVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vc29mdHdhcmVicm90aGVycy5jby9zZXJ2aWNlc1wiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dHJhbnNsYXRlQnV0dG9uKCdjb250YWN0VXMnKX1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IERhc2hib2FyZFxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVGV4dCwgTWVzc2FnZUJveCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5cbnR5cGUgU3RhdGUgPSB7XG4gIGVycm9yOiBhbnk7XG59XG5cbmNvbnN0IEVycm9yTWVzc2FnZTogUmVhY3QuRkM8U3RhdGU+ID0gKHsgZXJyb3IgfSkgPT4ge1xuICBjb25zdCB7IHRyYW5zbGF0ZU1lc3NhZ2UgfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgcmV0dXJuIChcbiAgICA8TWVzc2FnZUJveCBtPVwieHhsXCIgdmFyaWFudD1cImRhbmdlclwiIG1lc3NhZ2U9XCJKYXZhc2NyaXB0IEVycm9yXCI+XG4gICAgICA8VGV4dD57ZXJyb3IudG9TdHJpbmcoKX08L1RleHQ+XG4gICAgICA8VGV4dCBtdD1cImRlZmF1bHRcIj57dHJhbnNsYXRlTWVzc2FnZSgnc2VlQ29uc29sZUZvck1vcmUnKX08L1RleHQ+XG4gICAgPC9NZXNzYWdlQm94PlxuICApXG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGwsXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IpOiB2b2lkIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3IgfSlcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHRoaXMuc3RhdGVcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICg8RXJyb3JNZXNzYWdlIGVycm9yPXtlcnJvcn0gLz4pXG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuIHx8IG51bGxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFcnJvckJvdW5kYXJ5XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgRGVmYXVsdERhc2hib2FyZCBmcm9tICcuLi9hcHAvZGVmYXVsdC1kYXNoYm9hcmQnXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9hcHAvZXJyb3ItYm91bmRhcnknXG5pbXBvcnQgeyBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUvc3RvcmUnXG5cbmRlY2xhcmUgY29uc3QgQWRtaW5KUzoge1xuICBVc2VyQ29tcG9uZW50czogUmVjb3JkPHN0cmluZywgRnVuY3Rpb25Db21wb25lbnQ+O1xufVxuXG50eXBlIFN0YXRlID0ge1xuICBpc0NsaWVudDogYm9vbGVhbjtcbn1cblxudHlwZSBQcm9wc0Zyb21TdGF0ZSA9IHtcbiAgZGFzaGJvYXJkOiB7XG4gICAgY29tcG9uZW50Pzogc3RyaW5nO1xuICB9O1xufVxuXG5jbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHNGcm9tU3RhdGUsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wc0Zyb21TdGF0ZSkge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NsaWVudDogZmFsc2UsXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ2xpZW50OiB0cnVlIH0pXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IGRhc2hib2FyZCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgaXNDbGllbnQgfSA9IHRoaXMuc3RhdGVcbiAgICBsZXQgQ29tcG9uZW50XG4gICAgaWYgKGRhc2hib2FyZCAmJiBkYXNoYm9hcmQuY29tcG9uZW50ICYmIGlzQ2xpZW50XG4gICAgICAgICYmIEFkbWluSlMuVXNlckNvbXBvbmVudHNbZGFzaGJvYXJkLmNvbXBvbmVudF1cbiAgICApIHtcbiAgICAgIENvbXBvbmVudCA9IEFkbWluSlMuVXNlckNvbXBvbmVudHNbZGFzaGJvYXJkLmNvbXBvbmVudF0gYXMgRnVuY3Rpb25Db21wb25lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgQ29tcG9uZW50ID0gRGVmYXVsdERhc2hib2FyZFxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgPENvbXBvbmVudCAvPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJlZHV4U3RhdGUpOiBQcm9wc0Zyb21TdGF0ZSA9PiAoe1xuICBkYXNoYm9hcmQ6IHN0YXRlLmRhc2hib2FyZCxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShEYXNoYm9hcmQpXG4iLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5mdW5jdGlvbiBhcmVJbnB1dHNFcXVhbChuZXdJbnB1dHMsIGxhc3RJbnB1dHMpIHtcbiAgaWYgKG5ld0lucHV0cy5sZW5ndGggIT09IGxhc3RJbnB1dHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdJbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobmV3SW5wdXRzW2ldICE9PSBsYXN0SW5wdXRzW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHVzZU1lbW9PbmUoZ2V0UmVzdWx0LCBpbnB1dHMpIHtcbiAgdmFyIGluaXRpYWwgPSByZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0czogaW5wdXRzLFxuICAgICAgcmVzdWx0OiBnZXRSZXN1bHQoKVxuICAgIH07XG4gIH0pWzBdO1xuICB2YXIgaXNGaXJzdFJ1biA9IHJlYWN0LnVzZVJlZih0cnVlKTtcbiAgdmFyIGNvbW1pdHRlZCA9IHJlYWN0LnVzZVJlZihpbml0aWFsKTtcbiAgdmFyIHVzZUNhY2hlID0gaXNGaXJzdFJ1bi5jdXJyZW50IHx8IEJvb2xlYW4oaW5wdXRzICYmIGNvbW1pdHRlZC5jdXJyZW50LmlucHV0cyAmJiBhcmVJbnB1dHNFcXVhbChpbnB1dHMsIGNvbW1pdHRlZC5jdXJyZW50LmlucHV0cykpO1xuICB2YXIgY2FjaGUgPSB1c2VDYWNoZSA/IGNvbW1pdHRlZC5jdXJyZW50IDoge1xuICAgIGlucHV0czogaW5wdXRzLFxuICAgIHJlc3VsdDogZ2V0UmVzdWx0KClcbiAgfTtcbiAgcmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpc0ZpcnN0UnVuLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBjb21taXR0ZWQuY3VycmVudCA9IGNhY2hlO1xuICB9LCBbY2FjaGVdKTtcbiAgcmV0dXJuIGNhY2hlLnJlc3VsdDtcbn1cbmZ1bmN0aW9uIHVzZUNhbGxiYWNrT25lKGNhbGxiYWNrLCBpbnB1dHMpIHtcbiAgcmV0dXJuIHVzZU1lbW9PbmUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfSwgaW5wdXRzKTtcbn1cbnZhciB1c2VNZW1vID0gdXNlTWVtb09uZTtcbnZhciB1c2VDYWxsYmFjayA9IHVzZUNhbGxiYWNrT25lO1xuXG5leHBvcnRzLnVzZUNhbGxiYWNrID0gdXNlQ2FsbGJhY2s7XG5leHBvcnRzLnVzZUNhbGxiYWNrT25lID0gdXNlQ2FsbGJhY2tPbmU7XG5leHBvcnRzLnVzZU1lbW8gPSB1c2VNZW1vO1xuZXhwb3J0cy51c2VNZW1vT25lID0gdXNlTWVtb09uZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGludmFyaWFudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBpbnZhcmlhbnQgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgndGlueS1pbnZhcmlhbnQnKSk7XG5cbnZhciBnZXRSZWN0ID0gZnVuY3Rpb24gZ2V0UmVjdChfcmVmKSB7XG4gIHZhciB0b3AgPSBfcmVmLnRvcCxcbiAgICAgIHJpZ2h0ID0gX3JlZi5yaWdodCxcbiAgICAgIGJvdHRvbSA9IF9yZWYuYm90dG9tLFxuICAgICAgbGVmdCA9IF9yZWYubGVmdDtcbiAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB2YXIgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICB2YXIgcmVjdCA9IHtcbiAgICB0b3A6IHRvcCxcbiAgICByaWdodDogcmlnaHQsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgbGVmdDogbGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogbGVmdCxcbiAgICB5OiB0b3AsXG4gICAgY2VudGVyOiB7XG4gICAgICB4OiAocmlnaHQgKyBsZWZ0KSAvIDIsXG4gICAgICB5OiAoYm90dG9tICsgdG9wKSAvIDJcbiAgICB9XG4gIH07XG4gIHJldHVybiByZWN0O1xufTtcbnZhciBleHBhbmQgPSBmdW5jdGlvbiBleHBhbmQodGFyZ2V0LCBleHBhbmRCeSkge1xuICByZXR1cm4ge1xuICAgIHRvcDogdGFyZ2V0LnRvcCAtIGV4cGFuZEJ5LnRvcCxcbiAgICBsZWZ0OiB0YXJnZXQubGVmdCAtIGV4cGFuZEJ5LmxlZnQsXG4gICAgYm90dG9tOiB0YXJnZXQuYm90dG9tICsgZXhwYW5kQnkuYm90dG9tLFxuICAgIHJpZ2h0OiB0YXJnZXQucmlnaHQgKyBleHBhbmRCeS5yaWdodFxuICB9O1xufTtcbnZhciBzaHJpbmsgPSBmdW5jdGlvbiBzaHJpbmsodGFyZ2V0LCBzaHJpbmtCeSkge1xuICByZXR1cm4ge1xuICAgIHRvcDogdGFyZ2V0LnRvcCArIHNocmlua0J5LnRvcCxcbiAgICBsZWZ0OiB0YXJnZXQubGVmdCArIHNocmlua0J5LmxlZnQsXG4gICAgYm90dG9tOiB0YXJnZXQuYm90dG9tIC0gc2hyaW5rQnkuYm90dG9tLFxuICAgIHJpZ2h0OiB0YXJnZXQucmlnaHQgLSBzaHJpbmtCeS5yaWdodFxuICB9O1xufTtcblxudmFyIHNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQodGFyZ2V0LCBzaGlmdEJ5KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0YXJnZXQudG9wICsgc2hpZnRCeS55LFxuICAgIGxlZnQ6IHRhcmdldC5sZWZ0ICsgc2hpZnRCeS54LFxuICAgIGJvdHRvbTogdGFyZ2V0LmJvdHRvbSArIHNoaWZ0QnkueSxcbiAgICByaWdodDogdGFyZ2V0LnJpZ2h0ICsgc2hpZnRCeS54XG4gIH07XG59O1xuXG52YXIgbm9TcGFjaW5nID0ge1xuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDBcbn07XG52YXIgY3JlYXRlQm94ID0gZnVuY3Rpb24gY3JlYXRlQm94KF9yZWYyKSB7XG4gIHZhciBib3JkZXJCb3ggPSBfcmVmMi5ib3JkZXJCb3gsXG4gICAgICBfcmVmMiRtYXJnaW4gPSBfcmVmMi5tYXJnaW4sXG4gICAgICBtYXJnaW4gPSBfcmVmMiRtYXJnaW4gPT09IHZvaWQgMCA/IG5vU3BhY2luZyA6IF9yZWYyJG1hcmdpbixcbiAgICAgIF9yZWYyJGJvcmRlciA9IF9yZWYyLmJvcmRlcixcbiAgICAgIGJvcmRlciA9IF9yZWYyJGJvcmRlciA9PT0gdm9pZCAwID8gbm9TcGFjaW5nIDogX3JlZjIkYm9yZGVyLFxuICAgICAgX3JlZjIkcGFkZGluZyA9IF9yZWYyLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX3JlZjIkcGFkZGluZyA9PT0gdm9pZCAwID8gbm9TcGFjaW5nIDogX3JlZjIkcGFkZGluZztcbiAgdmFyIG1hcmdpbkJveCA9IGdldFJlY3QoZXhwYW5kKGJvcmRlckJveCwgbWFyZ2luKSk7XG4gIHZhciBwYWRkaW5nQm94ID0gZ2V0UmVjdChzaHJpbmsoYm9yZGVyQm94LCBib3JkZXIpKTtcbiAgdmFyIGNvbnRlbnRCb3ggPSBnZXRSZWN0KHNocmluayhwYWRkaW5nQm94LCBwYWRkaW5nKSk7XG4gIHJldHVybiB7XG4gICAgbWFyZ2luQm94OiBtYXJnaW5Cb3gsXG4gICAgYm9yZGVyQm94OiBnZXRSZWN0KGJvcmRlckJveCksXG4gICAgcGFkZGluZ0JveDogcGFkZGluZ0JveCxcbiAgICBjb250ZW50Qm94OiBjb250ZW50Qm94LFxuICAgIG1hcmdpbjogbWFyZ2luLFxuICAgIGJvcmRlcjogYm9yZGVyLFxuICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgfTtcbn07XG5cbnZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHJhdykge1xuICB2YXIgdmFsdWUgPSByYXcuc2xpY2UoMCwgLTIpO1xuICB2YXIgc3VmZml4ID0gcmF3LnNsaWNlKC0yKTtcblxuICBpZiAoc3VmZml4ICE9PSAncHgnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gTnVtYmVyKHZhbHVlKTtcbiAgISFpc05hTihyZXN1bHQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNvdWxkIG5vdCBwYXJzZSB2YWx1ZSBbcmF3OiBcIiArIHJhdyArIFwiLCB3aXRob3V0IHN1ZmZpeDogXCIgKyB2YWx1ZSArIFwiXVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgZ2V0V2luZG93U2Nyb2xsID0gZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKCkge1xuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfTtcbn07XG5cbnZhciBvZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQob3JpZ2luYWwsIGNoYW5nZSkge1xuICB2YXIgYm9yZGVyQm94ID0gb3JpZ2luYWwuYm9yZGVyQm94LFxuICAgICAgYm9yZGVyID0gb3JpZ2luYWwuYm9yZGVyLFxuICAgICAgbWFyZ2luID0gb3JpZ2luYWwubWFyZ2luLFxuICAgICAgcGFkZGluZyA9IG9yaWdpbmFsLnBhZGRpbmc7XG4gIHZhciBzaGlmdGVkID0gc2hpZnQoYm9yZGVyQm94LCBjaGFuZ2UpO1xuICByZXR1cm4gY3JlYXRlQm94KHtcbiAgICBib3JkZXJCb3g6IHNoaWZ0ZWQsXG4gICAgYm9yZGVyOiBib3JkZXIsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgcGFkZGluZzogcGFkZGluZ1xuICB9KTtcbn07XG52YXIgd2l0aFNjcm9sbCA9IGZ1bmN0aW9uIHdpdGhTY3JvbGwob3JpZ2luYWwsIHNjcm9sbCkge1xuICBpZiAoc2Nyb2xsID09PSB2b2lkIDApIHtcbiAgICBzY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoKTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQob3JpZ2luYWwsIHNjcm9sbCk7XG59O1xudmFyIGNhbGN1bGF0ZUJveCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUJveChib3JkZXJCb3gsIHN0eWxlcykge1xuICB2YXIgbWFyZ2luID0ge1xuICAgIHRvcDogcGFyc2Uoc3R5bGVzLm1hcmdpblRvcCksXG4gICAgcmlnaHQ6IHBhcnNlKHN0eWxlcy5tYXJnaW5SaWdodCksXG4gICAgYm90dG9tOiBwYXJzZShzdHlsZXMubWFyZ2luQm90dG9tKSxcbiAgICBsZWZ0OiBwYXJzZShzdHlsZXMubWFyZ2luTGVmdClcbiAgfTtcbiAgdmFyIHBhZGRpbmcgPSB7XG4gICAgdG9wOiBwYXJzZShzdHlsZXMucGFkZGluZ1RvcCksXG4gICAgcmlnaHQ6IHBhcnNlKHN0eWxlcy5wYWRkaW5nUmlnaHQpLFxuICAgIGJvdHRvbTogcGFyc2Uoc3R5bGVzLnBhZGRpbmdCb3R0b20pLFxuICAgIGxlZnQ6IHBhcnNlKHN0eWxlcy5wYWRkaW5nTGVmdClcbiAgfTtcbiAgdmFyIGJvcmRlciA9IHtcbiAgICB0b3A6IHBhcnNlKHN0eWxlcy5ib3JkZXJUb3BXaWR0aCksXG4gICAgcmlnaHQ6IHBhcnNlKHN0eWxlcy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICBib3R0b206IHBhcnNlKHN0eWxlcy5ib3JkZXJCb3R0b21XaWR0aCksXG4gICAgbGVmdDogcGFyc2Uoc3R5bGVzLmJvcmRlckxlZnRXaWR0aClcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUJveCh7XG4gICAgYm9yZGVyQm94OiBib3JkZXJCb3gsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBib3JkZXI6IGJvcmRlclxuICB9KTtcbn07XG52YXIgZ2V0Qm94ID0gZnVuY3Rpb24gZ2V0Qm94KGVsKSB7XG4gIHZhciBib3JkZXJCb3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgcmV0dXJuIGNhbGN1bGF0ZUJveChib3JkZXJCb3gsIHN0eWxlcyk7XG59O1xuXG5leHBvcnRzLmNhbGN1bGF0ZUJveCA9IGNhbGN1bGF0ZUJveDtcbmV4cG9ydHMuY3JlYXRlQm94ID0gY3JlYXRlQm94O1xuZXhwb3J0cy5leHBhbmQgPSBleHBhbmQ7XG5leHBvcnRzLmdldEJveCA9IGdldEJveDtcbmV4cG9ydHMuZ2V0UmVjdCA9IGdldFJlY3Q7XG5leHBvcnRzLm9mZnNldCA9IG9mZnNldDtcbmV4cG9ydHMuc2hyaW5rID0gc2hyaW5rO1xuZXhwb3J0cy53aXRoU2Nyb2xsID0gd2l0aFNjcm9sbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXJlSW5wdXRzRXF1YWwobmV3SW5wdXRzLCBsYXN0SW5wdXRzKSB7XG4gICAgaWYgKG5ld0lucHV0cy5sZW5ndGggIT09IGxhc3RJbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdJbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKG5ld0lucHV0c1tpXSAhPT0gbGFzdElucHV0c1tpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBtZW1vaXplT25lKHJlc3VsdEZuLCBpc0VxdWFsKSB7XG4gICAgaWYgKGlzRXF1YWwgPT09IHZvaWQgMCkgeyBpc0VxdWFsID0gYXJlSW5wdXRzRXF1YWw7IH1cbiAgICB2YXIgbGFzdFRoaXM7XG4gICAgdmFyIGxhc3RBcmdzID0gW107XG4gICAgdmFyIGxhc3RSZXN1bHQ7XG4gICAgdmFyIGNhbGxlZE9uY2UgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICAgICAgdmFyIG5ld0FyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG5ld0FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGVkT25jZSAmJiBsYXN0VGhpcyA9PT0gdGhpcyAmJiBpc0VxdWFsKG5ld0FyZ3MsIGxhc3RBcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdEZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICAgICAgICBjYWxsZWRPbmNlID0gdHJ1ZTtcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0QXJncyA9IG5ld0FyZ3M7XG4gICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZU9uZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJhZlNjaGQgPSBmdW5jdGlvbiByYWZTY2hkKGZuKSB7XG4gIHZhciBsYXN0QXJncyA9IFtdO1xuICB2YXIgZnJhbWVJZCA9IG51bGw7XG5cbiAgdmFyIHdyYXBwZXJGbiA9IGZ1bmN0aW9uIHdyYXBwZXJGbigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgPSBhcmdzO1xuXG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZyYW1lSWQgPSBudWxsO1xuICAgICAgZm4uYXBwbHkodm9pZCAwLCBsYXN0QXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgd3JhcHBlckZuLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICBmcmFtZUlkID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gd3JhcHBlckZuO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSByYWZTY2hkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSZWFjdF9fZGVmYXVsdCA9IF9pbnRlcm9wRGVmYXVsdChSZWFjdCk7XG52YXIgX2luaGVyaXRzTG9vc2UgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJykpO1xudmFyIF9leHRlbmRzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpKTtcbnZhciByZWR1eCA9IHJlcXVpcmUoJ3JlZHV4Jyk7XG52YXIgcmVhY3RSZWR1eCA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4Jyk7XG52YXIgdXNlTWVtb09uZSA9IHJlcXVpcmUoJ3VzZS1tZW1vLW9uZScpO1xudmFyIGNzc0JveE1vZGVsID0gcmVxdWlyZSgnY3NzLWJveC1tb2RlbCcpO1xudmFyIG1lbW9pemVPbmUgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnbWVtb2l6ZS1vbmUnKSk7XG52YXIgcmFmU2NoZCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyYWYtc2NoZCcpKTtcbnZhciBSZWFjdERPTSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdC1kb20nKSk7XG5cbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHNwYWNlc0FuZFRhYnMgPSAvWyBcXHRdezIsfS9nO1xudmFyIGxpbmVTdGFydFdpdGhTcGFjZXMgPSAvXlsgXFx0XSovZ207XG5cbnZhciBjbGVhbiA9IGZ1bmN0aW9uIGNsZWFuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHNwYWNlc0FuZFRhYnMsICcgJykucmVwbGFjZShsaW5lU3RhcnRXaXRoU3BhY2VzLCAnJykudHJpbSgpO1xufTtcblxudmFyIGdldERldk1lc3NhZ2UgPSBmdW5jdGlvbiBnZXREZXZNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGNsZWFuKFwiXFxuICAlY3JlYWN0LWJlYXV0aWZ1bC1kbmRcXG5cXG4gICVjXCIgKyBjbGVhbihtZXNzYWdlKSArIFwiXFxuXFxuICAlY1xcdUQ4M0RcXHVEQzc3XFx1MjAwRCBUaGlzIGlzIGEgZGV2ZWxvcG1lbnQgb25seSBtZXNzYWdlLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMuXFxuXCIpO1xufTtcblxudmFyIGdldEZvcm1hdHRlZE1lc3NhZ2UgPSBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIFtnZXREZXZNZXNzYWdlKG1lc3NhZ2UpLCAnY29sb3I6ICMwMEM1ODQ7IGZvbnQtc2l6ZTogMS4yZW07IGZvbnQtd2VpZ2h0OiBib2xkOycsICdsaW5lLWhlaWdodDogMS41JywgJ2NvbG9yOiAjNzIzODc0OyddO1xufTtcbnZhciBpc0Rpc2FibGVkRmxhZyA9ICdfX3JlYWN0LWJlYXV0aWZ1bC1kbmQtZGlzYWJsZS1kZXYtd2FybmluZ3MnO1xuZnVuY3Rpb24gbG9nKHR5cGUsIG1lc3NhZ2UpIHtcbiAgdmFyIF9jb25zb2xlO1xuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93W2lzRGlzYWJsZWRGbGFnXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIChfY29uc29sZSA9IGNvbnNvbGUpW3R5cGVdLmFwcGx5KF9jb25zb2xlLCBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpKTtcbn1cbnZhciB3YXJuaW5nID0gbG9nLmJpbmQobnVsbCwgJ3dhcm4nKTtcbnZhciBlcnJvciA9IGxvZy5iaW5kKG51bGwsICdlcnJvcicpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0T3B0aW9ucyhzaGFyZWQsIGZyb21CaW5kaW5nKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgc2hhcmVkLCB7fSwgZnJvbUJpbmRpbmcpO1xufVxuXG5mdW5jdGlvbiBiaW5kRXZlbnRzKGVsLCBiaW5kaW5ncywgc2hhcmVkT3B0aW9ucykge1xuICB2YXIgdW5iaW5kaW5ncyA9IGJpbmRpbmdzLm1hcChmdW5jdGlvbiAoYmluZGluZykge1xuICAgIHZhciBvcHRpb25zID0gZ2V0T3B0aW9ucyhzaGFyZWRPcHRpb25zLCBiaW5kaW5nLm9wdGlvbnMpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoYmluZGluZy5ldmVudE5hbWUsIGJpbmRpbmcuZm4sIG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnROYW1lLCBiaW5kaW5nLmZuLCBvcHRpb25zKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVuYmluZEFsbCgpIHtcbiAgICB1bmJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKHVuYmluZCkge1xuICAgICAgdW5iaW5kKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbnZhciBpc1Byb2R1Y3Rpb24kMSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gUmJkSW52YXJpYW50KG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuUmJkSW52YXJpYW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdGhpcy5tZXNzYWdlO1xufTtcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbiQxKSB7XG4gICAgdGhyb3cgbmV3IFJiZEludmFyaWFudChwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBSYmRJbnZhcmlhbnQocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG52YXIgRXJyb3JCb3VuZGFyeSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEVycm9yQm91bmRhcnksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEVycm9yQm91bmRhcnkoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuY2FsbGJhY2tzID0gbnVsbDtcbiAgICBfdGhpcy51bmJpbmQgPSBub29wO1xuXG4gICAgX3RoaXMub25XaW5kb3dFcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IF90aGlzLmdldENhbGxiYWNrcygpO1xuXG4gICAgICBpZiAoY2FsbGJhY2tzLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICBjYWxsYmFja3MudHJ5QWJvcnQoKTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQW4gZXJyb3Igd2FzIGNhdWdodCBieSBvdXIgd2luZG93ICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgd2hpbGUgYSBkcmFnIHdhcyBvY2N1cnJpbmcuXFxuICAgICAgICBUaGUgYWN0aXZlIGRyYWcgaGFzIGJlZW4gYWJvcnRlZC5cXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBlcnIgPSBldmVudC5lcnJvcjtcblxuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJiZEludmFyaWFudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmdldENhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuY2FsbGJhY2tzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgQXBwQ2FsbGJhY2tzIGluIDxFcnJvckJvdW5kYXJ5Lz4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLmNhbGxiYWNrcztcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q2FsbGJhY2tzID0gZnVuY3Rpb24gKGNhbGxiYWNrcykge1xuICAgICAgX3RoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXJyb3JCb3VuZGFyeS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51bmJpbmQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3tcbiAgICAgIGV2ZW50TmFtZTogJ2Vycm9yJyxcbiAgICAgIGZuOiB0aGlzLm9uV2luZG93RXJyb3JcbiAgICB9XSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmJpbmQoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkQ2F0Y2ggPSBmdW5jdGlvbiBjb21wb25lbnREaWRDYXRjaChlcnIpIHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgUmJkSW52YXJpYW50KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBlcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe30pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuc2V0Q2FsbGJhY2tzKTtcbiAgfTtcblxuICByZXR1cm4gRXJyb3JCb3VuZGFyeTtcbn0oUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyA9IFwiXFxuICBQcmVzcyBzcGFjZSBiYXIgdG8gc3RhcnQgYSBkcmFnLlxcbiAgV2hlbiBkcmFnZ2luZyB5b3UgY2FuIHVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlIHRoZSBpdGVtIGFyb3VuZCBhbmQgZXNjYXBlIHRvIGNhbmNlbC5cXG4gIFNvbWUgc2NyZWVuIHJlYWRlcnMgbWF5IHJlcXVpcmUgeW91IHRvIGJlIGluIGZvY3VzIG1vZGUgb3IgdG8gdXNlIHlvdXIgcGFzcyB0aHJvdWdoIGtleVxcblwiO1xuXG52YXIgcG9zaXRpb24gPSBmdW5jdGlvbiBwb3NpdGlvbihpbmRleCkge1xuICByZXR1cm4gaW5kZXggKyAxO1xufTtcblxudmFyIG9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gb25EcmFnU3RhcnQoc3RhcnQpIHtcbiAgcmV0dXJuIFwiXFxuICBZb3UgaGF2ZSBsaWZ0ZWQgYW4gaXRlbSBpbiBwb3NpdGlvbiBcIiArIHBvc2l0aW9uKHN0YXJ0LnNvdXJjZS5pbmRleCkgKyBcIlxcblwiO1xufTtcblxudmFyIHdpdGhMb2NhdGlvbiA9IGZ1bmN0aW9uIHdpdGhMb2NhdGlvbihzb3VyY2UsIGRlc3RpbmF0aW9uKSB7XG4gIHZhciBpc0luSG9tZUxpc3QgPSBzb3VyY2UuZHJvcHBhYmxlSWQgPT09IGRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkO1xuICB2YXIgc3RhcnRQb3NpdGlvbiA9IHBvc2l0aW9uKHNvdXJjZS5pbmRleCk7XG4gIHZhciBlbmRQb3NpdGlvbiA9IHBvc2l0aW9uKGRlc3RpbmF0aW9uLmluZGV4KTtcblxuICBpZiAoaXNJbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgWW91IGhhdmUgbW92ZWQgdGhlIGl0ZW0gZnJvbSBwb3NpdGlvbiBcIiArIHN0YXJ0UG9zaXRpb24gKyBcIlxcbiAgICAgIHRvIHBvc2l0aW9uIFwiICsgZW5kUG9zaXRpb24gKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIHJldHVybiBcIlxcbiAgICBZb3UgaGF2ZSBtb3ZlZCB0aGUgaXRlbSBmcm9tIHBvc2l0aW9uIFwiICsgc3RhcnRQb3NpdGlvbiArIFwiXFxuICAgIGluIGxpc3QgXCIgKyBzb3VyY2UuZHJvcHBhYmxlSWQgKyBcIlxcbiAgICB0byBsaXN0IFwiICsgZGVzdGluYXRpb24uZHJvcHBhYmxlSWQgKyBcIlxcbiAgICBpbiBwb3NpdGlvbiBcIiArIGVuZFBvc2l0aW9uICsgXCJcXG4gIFwiO1xufTtcblxudmFyIHdpdGhDb21iaW5lID0gZnVuY3Rpb24gd2l0aENvbWJpbmUoaWQsIHNvdXJjZSwgY29tYmluZSkge1xuICB2YXIgaW5Ib21lTGlzdCA9IHNvdXJjZS5kcm9wcGFibGVJZCA9PT0gY29tYmluZS5kcm9wcGFibGVJZDtcblxuICBpZiAoaW5Ib21lTGlzdCkge1xuICAgIHJldHVybiBcIlxcbiAgICAgIFRoZSBpdGVtIFwiICsgaWQgKyBcIlxcbiAgICAgIGhhcyBiZWVuIGNvbWJpbmVkIHdpdGggXCIgKyBjb21iaW5lLmRyYWdnYWJsZUlkO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgICAgVGhlIGl0ZW0gXCIgKyBpZCArIFwiXFxuICAgICAgaW4gbGlzdCBcIiArIHNvdXJjZS5kcm9wcGFibGVJZCArIFwiXFxuICAgICAgaGFzIGJlZW4gY29tYmluZWQgd2l0aCBcIiArIGNvbWJpbmUuZHJhZ2dhYmxlSWQgKyBcIlxcbiAgICAgIGluIGxpc3QgXCIgKyBjb21iaW5lLmRyb3BwYWJsZUlkICsgXCJcXG4gICAgXCI7XG59O1xuXG52YXIgb25EcmFnVXBkYXRlID0gZnVuY3Rpb24gb25EcmFnVXBkYXRlKHVwZGF0ZSkge1xuICB2YXIgbG9jYXRpb24gPSB1cGRhdGUuZGVzdGluYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHdpdGhMb2NhdGlvbih1cGRhdGUuc291cmNlLCBsb2NhdGlvbik7XG4gIH1cblxuICB2YXIgY29tYmluZSA9IHVwZGF0ZS5jb21iaW5lO1xuXG4gIGlmIChjb21iaW5lKSB7XG4gICAgcmV0dXJuIHdpdGhDb21iaW5lKHVwZGF0ZS5kcmFnZ2FibGVJZCwgdXBkYXRlLnNvdXJjZSwgY29tYmluZSk7XG4gIH1cblxuICByZXR1cm4gJ1lvdSBhcmUgb3ZlciBhbiBhcmVhIHRoYXQgY2Fubm90IGJlIGRyb3BwZWQgb24nO1xufTtcblxudmFyIHJldHVybmVkVG9TdGFydCA9IGZ1bmN0aW9uIHJldHVybmVkVG9TdGFydChzb3VyY2UpIHtcbiAgcmV0dXJuIFwiXFxuICBUaGUgaXRlbSBoYXMgcmV0dXJuZWQgdG8gaXRzIHN0YXJ0aW5nIHBvc2l0aW9uXFxuICBvZiBcIiArIHBvc2l0aW9uKHNvdXJjZS5pbmRleCkgKyBcIlxcblwiO1xufTtcblxudmFyIG9uRHJhZ0VuZCA9IGZ1bmN0aW9uIG9uRHJhZ0VuZChyZXN1bHQpIHtcbiAgaWYgKHJlc3VsdC5yZWFzb24gPT09ICdDQU5DRUwnKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgTW92ZW1lbnQgY2FuY2VsbGVkLlxcbiAgICAgIFwiICsgcmV0dXJuZWRUb1N0YXJ0KHJlc3VsdC5zb3VyY2UpICsgXCJcXG4gICAgXCI7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSByZXN1bHQuZGVzdGluYXRpb247XG4gIHZhciBjb21iaW5lID0gcmVzdWx0LmNvbWJpbmU7XG5cbiAgaWYgKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgWW91IGhhdmUgZHJvcHBlZCB0aGUgaXRlbS5cXG4gICAgICBcIiArIHdpdGhMb2NhdGlvbihyZXN1bHQuc291cmNlLCBsb2NhdGlvbikgKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIGlmIChjb21iaW5lKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgWW91IGhhdmUgZHJvcHBlZCB0aGUgaXRlbS5cXG4gICAgICBcIiArIHdpdGhDb21iaW5lKHJlc3VsdC5kcmFnZ2FibGVJZCwgcmVzdWx0LnNvdXJjZSwgY29tYmluZSkgKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIHJldHVybiBcIlxcbiAgICBUaGUgaXRlbSBoYXMgYmVlbiBkcm9wcGVkIHdoaWxlIG5vdCBvdmVyIGEgZHJvcCBhcmVhLlxcbiAgICBcIiArIHJldHVybmVkVG9TdGFydChyZXN1bHQuc291cmNlKSArIFwiXFxuICBcIjtcbn07XG5cbnZhciBwcmVzZXQgPSB7XG4gIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uczogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zLFxuICBvbkRyYWdTdGFydDogb25EcmFnU3RhcnQsXG4gIG9uRHJhZ1VwZGF0ZTogb25EcmFnVXBkYXRlLFxuICBvbkRyYWdFbmQ6IG9uRHJhZ0VuZFxufTtcblxudmFyIG9yaWdpbiA9IHtcbiAgeDogMCxcbiAgeTogMFxufTtcbnZhciBhZGQgPSBmdW5jdGlvbiBhZGQocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludDEueCArIHBvaW50Mi54LFxuICAgIHk6IHBvaW50MS55ICsgcG9pbnQyLnlcbiAgfTtcbn07XG52YXIgc3VidHJhY3QgPSBmdW5jdGlvbiBzdWJ0cmFjdChwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50MS54IC0gcG9pbnQyLngsXG4gICAgeTogcG9pbnQxLnkgLSBwb2ludDIueVxuICB9O1xufTtcbnZhciBpc0VxdWFsID0gZnVuY3Rpb24gaXNFcXVhbChwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4gcG9pbnQxLnggPT09IHBvaW50Mi54ICYmIHBvaW50MS55ID09PSBwb2ludDIueTtcbn07XG52YXIgbmVnYXRlID0gZnVuY3Rpb24gbmVnYXRlKHBvaW50KSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQueCAhPT0gMCA/IC1wb2ludC54IDogMCxcbiAgICB5OiBwb2ludC55ICE9PSAwID8gLXBvaW50LnkgOiAwXG4gIH07XG59O1xudmFyIHBhdGNoID0gZnVuY3Rpb24gcGF0Y2gobGluZSwgdmFsdWUsIG90aGVyVmFsdWUpIHtcbiAgdmFyIF9yZWY7XG5cbiAgaWYgKG90aGVyVmFsdWUgPT09IHZvaWQgMCkge1xuICAgIG90aGVyVmFsdWUgPSAwO1xuICB9XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltsaW5lXSA9IHZhbHVlLCBfcmVmW2xpbmUgPT09ICd4JyA/ICd5JyA6ICd4J10gPSBvdGhlclZhbHVlLCBfcmVmO1xufTtcbnZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uIGRpc3RhbmNlKHBvaW50MSwgcG9pbnQyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnQyLnggLSBwb2ludDEueCwgMikgKyBNYXRoLnBvdyhwb2ludDIueSAtIHBvaW50MS55LCAyKSk7XG59O1xudmFyIGNsb3Nlc3QgPSBmdW5jdGlvbiBjbG9zZXN0KHRhcmdldCwgcG9pbnRzKSB7XG4gIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBwb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkge1xuICAgIHJldHVybiBkaXN0YW5jZSh0YXJnZXQsIHBvaW50KTtcbiAgfSkpO1xufTtcbnZhciBhcHBseSA9IGZ1bmN0aW9uIGFwcGx5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogZm4ocG9pbnQueCksXG4gICAgICB5OiBmbihwb2ludC55KVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgZXhlY3V0ZUNsaXAgPSAoZnVuY3Rpb24gKGZyYW1lLCBzdWJqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBjc3NCb3hNb2RlbC5nZXRSZWN0KHtcbiAgICB0b3A6IE1hdGgubWF4KHN1YmplY3QudG9wLCBmcmFtZS50b3ApLFxuICAgIHJpZ2h0OiBNYXRoLm1pbihzdWJqZWN0LnJpZ2h0LCBmcmFtZS5yaWdodCksXG4gICAgYm90dG9tOiBNYXRoLm1pbihzdWJqZWN0LmJvdHRvbSwgZnJhbWUuYm90dG9tKSxcbiAgICBsZWZ0OiBNYXRoLm1heChzdWJqZWN0LmxlZnQsIGZyYW1lLmxlZnQpXG4gIH0pO1xuXG4gIGlmIChyZXN1bHQud2lkdGggPD0gMCB8fCByZXN1bHQuaGVpZ2h0IDw9IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIG9mZnNldEJ5UG9zaXRpb24gPSBmdW5jdGlvbiBvZmZzZXRCeVBvc2l0aW9uKHNwYWNpbmcsIHBvaW50KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiBzcGFjaW5nLnRvcCArIHBvaW50LnksXG4gICAgbGVmdDogc3BhY2luZy5sZWZ0ICsgcG9pbnQueCxcbiAgICBib3R0b206IHNwYWNpbmcuYm90dG9tICsgcG9pbnQueSxcbiAgICByaWdodDogc3BhY2luZy5yaWdodCArIHBvaW50LnhcbiAgfTtcbn07XG52YXIgZ2V0Q29ybmVycyA9IGZ1bmN0aW9uIGdldENvcm5lcnMoc3BhY2luZykge1xuICByZXR1cm4gW3tcbiAgICB4OiBzcGFjaW5nLmxlZnQsXG4gICAgeTogc3BhY2luZy50b3BcbiAgfSwge1xuICAgIHg6IHNwYWNpbmcucmlnaHQsXG4gICAgeTogc3BhY2luZy50b3BcbiAgfSwge1xuICAgIHg6IHNwYWNpbmcubGVmdCxcbiAgICB5OiBzcGFjaW5nLmJvdHRvbVxuICB9LCB7XG4gICAgeDogc3BhY2luZy5yaWdodCxcbiAgICB5OiBzcGFjaW5nLmJvdHRvbVxuICB9XTtcbn07XG52YXIgbm9TcGFjaW5nID0ge1xuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDBcbn07XG5cbnZhciBzY3JvbGwgPSBmdW5jdGlvbiBzY3JvbGwodGFyZ2V0LCBmcmFtZSkge1xuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRCeVBvc2l0aW9uKHRhcmdldCwgZnJhbWUuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50KTtcbn07XG5cbnZhciBpbmNyZWFzZSA9IGZ1bmN0aW9uIGluY3JlYXNlKHRhcmdldCwgYXhpcywgd2l0aFBsYWNlaG9sZGVyKSB7XG4gIGlmICh3aXRoUGxhY2Vob2xkZXIgJiYgd2l0aFBsYWNlaG9sZGVyLmluY3JlYXNlZEJ5KSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdGFyZ2V0LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltheGlzLmVuZF0gPSB0YXJnZXRbYXhpcy5lbmRdICsgd2l0aFBsYWNlaG9sZGVyLmluY3JlYXNlZEJ5W2F4aXMubGluZV0sIF9leHRlbmRzMikpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBjbGlwID0gZnVuY3Rpb24gY2xpcCh0YXJnZXQsIGZyYW1lKSB7XG4gIGlmIChmcmFtZSAmJiBmcmFtZS5zaG91bGRDbGlwU3ViamVjdCkge1xuICAgIHJldHVybiBleGVjdXRlQ2xpcChmcmFtZS5wYWdlTWFyZ2luQm94LCB0YXJnZXQpO1xuICB9XG5cbiAgcmV0dXJuIGNzc0JveE1vZGVsLmdldFJlY3QodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRTdWJqZWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwYWdlID0gX3JlZi5wYWdlLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyID0gX3JlZi53aXRoUGxhY2Vob2xkZXIsXG4gICAgICBheGlzID0gX3JlZi5heGlzLFxuICAgICAgZnJhbWUgPSBfcmVmLmZyYW1lO1xuICB2YXIgc2Nyb2xsZWQgPSBzY3JvbGwocGFnZS5tYXJnaW5Cb3gsIGZyYW1lKTtcbiAgdmFyIGluY3JlYXNlZCA9IGluY3JlYXNlKHNjcm9sbGVkLCBheGlzLCB3aXRoUGxhY2Vob2xkZXIpO1xuICB2YXIgY2xpcHBlZCA9IGNsaXAoaW5jcmVhc2VkLCBmcmFtZSk7XG4gIHJldHVybiB7XG4gICAgcGFnZTogcGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IHdpdGhQbGFjZWhvbGRlcixcbiAgICBhY3RpdmU6IGNsaXBwZWRcbiAgfTtcbn0pO1xuXG52YXIgc2Nyb2xsRHJvcHBhYmxlID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIG5ld1Njcm9sbCkge1xuICAhZHJvcHBhYmxlLmZyYW1lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBzY3JvbGxhYmxlID0gZHJvcHBhYmxlLmZyYW1lO1xuICB2YXIgc2Nyb2xsRGlmZiA9IHN1YnRyYWN0KG5ld1Njcm9sbCwgc2Nyb2xsYWJsZS5zY3JvbGwuaW5pdGlhbCk7XG4gIHZhciBzY3JvbGxEaXNwbGFjZW1lbnQgPSBuZWdhdGUoc2Nyb2xsRGlmZik7XG5cbiAgdmFyIGZyYW1lID0gX2V4dGVuZHMoe30sIHNjcm9sbGFibGUsIHtcbiAgICBzY3JvbGw6IHtcbiAgICAgIGluaXRpYWw6IHNjcm9sbGFibGUuc2Nyb2xsLmluaXRpYWwsXG4gICAgICBjdXJyZW50OiBuZXdTY3JvbGwsXG4gICAgICBkaWZmOiB7XG4gICAgICAgIHZhbHVlOiBzY3JvbGxEaWZmLFxuICAgICAgICBkaXNwbGFjZW1lbnQ6IHNjcm9sbERpc3BsYWNlbWVudFxuICAgICAgfSxcbiAgICAgIG1heDogc2Nyb2xsYWJsZS5zY3JvbGwubWF4XG4gICAgfVxuICB9KTtcblxuICB2YXIgc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgIHBhZ2U6IGRyb3BwYWJsZS5zdWJqZWN0LnBhZ2UsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBkcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIsXG4gICAgYXhpczogZHJvcHBhYmxlLmF4aXMsXG4gICAgZnJhbWU6IGZyYW1lXG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIHN1YmplY3Q6IHN1YmplY3RcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgaWYgKE51bWJlci5pc0ludGVnZXIpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xufVxuZnVuY3Rpb24gdmFsdWVzKG1hcCkge1xuICBpZiAoT2JqZWN0LnZhbHVlcykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKG1hcCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtYXBba2V5XTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmaW5kSW5kZXgobGlzdCwgcHJlZGljYXRlKSB7XG4gIGlmIChsaXN0LmZpbmRJbmRleCkge1xuICAgIHJldHVybiBsaXN0LmZpbmRJbmRleChwcmVkaWNhdGUpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShsaXN0W2ldKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZmluZChsaXN0LCBwcmVkaWNhdGUpIHtcbiAgaWYgKGxpc3QuZmluZCkge1xuICAgIHJldHVybiBsaXN0LmZpbmQocHJlZGljYXRlKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGZpbmRJbmRleChsaXN0LCBwcmVkaWNhdGUpO1xuXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gbGlzdFtpbmRleF07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gdG9BcnJheShsaXN0KSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaXN0KTtcbn1cblxudmFyIHRvRHJvcHBhYmxlTWFwID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gZHJvcHBhYmxlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgcHJldmlvdXNbY3VycmVudC5kZXNjcmlwdG9yLmlkXSA9IGN1cnJlbnQ7XG4gICAgcmV0dXJuIHByZXZpb3VzO1xuICB9LCB7fSk7XG59KTtcbnZhciB0b0RyYWdnYWJsZU1hcCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyYWdnYWJsZXMpIHtcbiAgcmV0dXJuIGRyYWdnYWJsZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuICAgIHByZXZpb3VzW2N1cnJlbnQuZGVzY3JpcHRvci5pZF0gPSBjdXJyZW50O1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfSwge30pO1xufSk7XG52YXIgdG9Ecm9wcGFibGVMaXN0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gdmFsdWVzKGRyb3BwYWJsZXMpO1xufSk7XG52YXIgdG9EcmFnZ2FibGVMaXN0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJhZ2dhYmxlcykge1xuICByZXR1cm4gdmFsdWVzKGRyYWdnYWJsZXMpO1xufSk7XG5cbnZhciBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlSWQsIGRyYWdnYWJsZXMpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRHJhZ2dhYmxlTGlzdChkcmFnZ2FibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgIHJldHVybiBkcm9wcGFibGVJZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQ7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5kZXNjcmlwdG9yLmluZGV4IC0gYi5kZXNjcmlwdG9yLmluZGV4O1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5mdW5jdGlvbiB0cnlHZXREZXN0aW5hdGlvbihpbXBhY3QpIHtcbiAgaWYgKGltcGFjdC5hdCAmJiBpbXBhY3QuYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIGltcGFjdC5hdC5kZXN0aW5hdGlvbjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdHJ5R2V0Q29tYmluZShpbXBhY3QpIHtcbiAgaWYgKGltcGFjdC5hdCAmJiBpbXBhY3QuYXQudHlwZSA9PT0gJ0NPTUJJTkUnKSB7XG4gICAgcmV0dXJuIGltcGFjdC5hdC5jb21iaW5lO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciByZW1vdmVEcmFnZ2FibGVGcm9tTGlzdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHJlbW92ZSwgbGlzdCkge1xuICByZXR1cm4gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5kZXNjcmlwdG9yLmlkICE9PSByZW1vdmUuZGVzY3JpcHRvci5pZDtcbiAgfSk7XG59KTtcblxudmFyIG1vdmVUb05leHRDb21iaW5lID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0O1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdHJ5R2V0RGVzdGluYXRpb24ocHJldmlvdXNJbXBhY3QpO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEltcGFjdCh0YXJnZXQpIHtcbiAgICB2YXIgYXQgPSB7XG4gICAgICB0eXBlOiAnQ09NQklORScsXG4gICAgICBjb21iaW5lOiB7XG4gICAgICAgIGRyYWdnYWJsZUlkOiB0YXJnZXQsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZpb3VzSW1wYWN0LCB7XG4gICAgICBhdDogYXRcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhbGwgPSBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQuYWxsO1xuICB2YXIgY2xvc2VzdElkID0gYWxsLmxlbmd0aCA/IGFsbFswXSA6IG51bGw7XG5cbiAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgIHJldHVybiBjbG9zZXN0SWQgPyBnZXRJbXBhY3QoY2xvc2VzdElkKSA6IG51bGw7XG4gIH1cblxuICB2YXIgd2l0aG91dERyYWdnYWJsZSA9IHJlbW92ZURyYWdnYWJsZUZyb21MaXN0KGRyYWdnYWJsZSwgaW5zaWRlRGVzdGluYXRpb24pO1xuXG4gIGlmICghY2xvc2VzdElkKSB7XG4gICAgaWYgKCF3aXRob3V0RHJhZ2dhYmxlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGxhc3QgPSB3aXRob3V0RHJhZ2dhYmxlW3dpdGhvdXREcmFnZ2FibGUubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGdldEltcGFjdChsYXN0LmRlc2NyaXB0b3IuaWQpO1xuICB9XG5cbiAgdmFyIGluZGV4T2ZDbG9zZXN0ID0gZmluZEluZGV4KHdpdGhvdXREcmFnZ2FibGUsIGZ1bmN0aW9uIChkKSB7XG4gICAgcmV0dXJuIGQuZGVzY3JpcHRvci5pZCA9PT0gY2xvc2VzdElkO1xuICB9KTtcbiAgIShpbmRleE9mQ2xvc2VzdCAhPT0gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgZGlzcGxhY2VkIGl0ZW0gaW4gc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgcHJvcG9zZWRJbmRleCA9IGluZGV4T2ZDbG9zZXN0IC0gMTtcblxuICBpZiAocHJvcG9zZWRJbmRleCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBiZWZvcmUgPSB3aXRob3V0RHJhZ2dhYmxlW3Byb3Bvc2VkSW5kZXhdO1xuICByZXR1cm4gZ2V0SW1wYWN0KGJlZm9yZS5kZXNjcmlwdG9yLmlkKTtcbn0pO1xuXG52YXIgaXNIb21lT2YgPSAoZnVuY3Rpb24gKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pIHtcbiAgcmV0dXJuIGRyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkID09PSBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkO1xufSk7XG5cbnZhciBub0Rpc3BsYWNlZEJ5ID0ge1xuICBwb2ludDogb3JpZ2luLFxuICB2YWx1ZTogMFxufTtcbnZhciBlbXB0eUdyb3VwcyA9IHtcbiAgaW52aXNpYmxlOiB7fSxcbiAgdmlzaWJsZToge30sXG4gIGFsbDogW11cbn07XG52YXIgbm9JbXBhY3QgPSB7XG4gIGRpc3BsYWNlZDogZW1wdHlHcm91cHMsXG4gIGRpc3BsYWNlZEJ5OiBub0Rpc3BsYWNlZEJ5LFxuICBhdDogbnVsbFxufTtcblxudmFyIGlzV2l0aGluID0gKGZ1bmN0aW9uIChsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gbG93ZXJCb3VuZCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSB1cHBlckJvdW5kO1xuICB9O1xufSk7XG5cbnZhciBpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUgPSAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICB2YXIgaXNDb250YWluZWQgPSBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG5cbiAgICBpZiAoaXNDb250YWluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5ID0gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgfHwgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSk7XG4gICAgdmFyIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSA9IGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpIHx8IGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICB2YXIgaXNQYXJ0aWFsbHlDb250YWluZWQgPSBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5ICYmIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseTtcblxuICAgIGlmIChpc1BhcnRpYWxseUNvbnRhaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzQmlnZ2VyVmVydGljYWxseSA9IHN1YmplY3QudG9wIDwgZnJhbWUudG9wICYmIHN1YmplY3QuYm90dG9tID4gZnJhbWUuYm90dG9tO1xuICAgIHZhciBpc0JpZ2dlckhvcml6b250YWxseSA9IHN1YmplY3QubGVmdCA8IGZyYW1lLmxlZnQgJiYgc3ViamVjdC5yaWdodCA+IGZyYW1lLnJpZ2h0O1xuICAgIHZhciBpc1RhcmdldEJpZ2dlclRoYW5GcmFtZSA9IGlzQmlnZ2VyVmVydGljYWxseSAmJiBpc0JpZ2dlckhvcml6b250YWxseTtcblxuICAgIGlmIChpc1RhcmdldEJpZ2dlclRoYW5GcmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzVGFyZ2V0QmlnZ2VyT25PbmVBeGlzID0gaXNCaWdnZXJWZXJ0aWNhbGx5ICYmIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSB8fCBpc0JpZ2dlckhvcml6b250YWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5O1xuICAgIHJldHVybiBpc1RhcmdldEJpZ2dlck9uT25lQXhpcztcbiAgfTtcbn0pO1xuXG52YXIgaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSA9IChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgdmFyIGlzV2l0aGluVmVydGljYWwgPSBpc1dpdGhpbihmcmFtZS50b3AsIGZyYW1lLmJvdHRvbSk7XG4gIHZhciBpc1dpdGhpbkhvcml6b250YWwgPSBpc1dpdGhpbihmcmFtZS5sZWZ0LCBmcmFtZS5yaWdodCk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIHZhciBpc0NvbnRhaW5lZCA9IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC50b3ApICYmIGlzV2l0aGluVmVydGljYWwoc3ViamVjdC5ib3R0b20pICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICByZXR1cm4gaXNDb250YWluZWQ7XG4gIH07XG59KTtcblxudmFyIHZlcnRpY2FsID0ge1xuICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gIGxpbmU6ICd5JyxcbiAgY3Jvc3NBeGlzTGluZTogJ3gnLFxuICBzdGFydDogJ3RvcCcsXG4gIGVuZDogJ2JvdHRvbScsXG4gIHNpemU6ICdoZWlnaHQnLFxuICBjcm9zc0F4aXNTdGFydDogJ2xlZnQnLFxuICBjcm9zc0F4aXNFbmQ6ICdyaWdodCcsXG4gIGNyb3NzQXhpc1NpemU6ICd3aWR0aCdcbn07XG52YXIgaG9yaXpvbnRhbCA9IHtcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIGxpbmU6ICd4JyxcbiAgY3Jvc3NBeGlzTGluZTogJ3knLFxuICBzdGFydDogJ2xlZnQnLFxuICBlbmQ6ICdyaWdodCcsXG4gIHNpemU6ICd3aWR0aCcsXG4gIGNyb3NzQXhpc1N0YXJ0OiAndG9wJyxcbiAgY3Jvc3NBeGlzRW5kOiAnYm90dG9tJyxcbiAgY3Jvc3NBeGlzU2l6ZTogJ2hlaWdodCdcbn07XG5cbnZhciBpc1RvdGFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lT25BeGlzID0gKGZ1bmN0aW9uIChheGlzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICB2YXIgaXNXaXRoaW5WZXJ0aWNhbCA9IGlzV2l0aGluKGZyYW1lLnRvcCwgZnJhbWUuYm90dG9tKTtcbiAgICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgICAgaWYgKGF4aXMgPT09IHZlcnRpY2FsKSB7XG4gICAgICAgIHJldHVybiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVEaXNwbGFjZWQgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVEaXNwbGFjZWQodGFyZ2V0LCBkZXN0aW5hdGlvbikge1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGVzdGluYXRpb24uZnJhbWUgPyBkZXN0aW5hdGlvbi5mcmFtZS5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQgOiBvcmlnaW47XG4gIHJldHVybiBvZmZzZXRCeVBvc2l0aW9uKHRhcmdldCwgZGlzcGxhY2VtZW50KTtcbn07XG5cbnZhciBpc1Zpc2libGVJbkRyb3BwYWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZUluRHJvcHBhYmxlKHRhcmdldCwgZGVzdGluYXRpb24sIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKSB7XG4gIGlmICghZGVzdGluYXRpb24uc3ViamVjdC5hY3RpdmUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4oZGVzdGluYXRpb24uc3ViamVjdC5hY3RpdmUpKHRhcmdldCk7XG59O1xuXG52YXIgaXNWaXNpYmxlSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIGlzVmlzaWJsZUluVmlld3BvcnQodGFyZ2V0LCB2aWV3cG9ydCwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pIHtcbiAgcmV0dXJuIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKHZpZXdwb3J0KSh0YXJnZXQpO1xufTtcblxudmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZShfcmVmKSB7XG4gIHZhciB0b0JlRGlzcGxhY2VkID0gX3JlZi50YXJnZXQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gX3JlZi53aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4gPSBfcmVmLmlzVmlzaWJsZVRocm91Z2hGcmFtZUZuO1xuICB2YXIgZGlzcGxhY2VkVGFyZ2V0ID0gd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA/IGdldERyb3BwYWJsZURpc3BsYWNlZCh0b0JlRGlzcGxhY2VkLCBkZXN0aW5hdGlvbikgOiB0b0JlRGlzcGxhY2VkO1xuICByZXR1cm4gaXNWaXNpYmxlSW5Ecm9wcGFibGUoZGlzcGxhY2VkVGFyZ2V0LCBkZXN0aW5hdGlvbiwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pICYmIGlzVmlzaWJsZUluVmlld3BvcnQoZGlzcGxhY2VkVGFyZ2V0LCB2aWV3cG9ydCwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pO1xufTtcblxudmFyIGlzUGFydGlhbGx5VmlzaWJsZSA9IGZ1bmN0aW9uIGlzUGFydGlhbGx5VmlzaWJsZShhcmdzKSB7XG4gIHJldHVybiBpc1Zpc2libGUoX2V4dGVuZHMoe30sIGFyZ3MsIHtcbiAgICBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbjogaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lXG4gIH0pKTtcbn07XG52YXIgaXNUb3RhbGx5VmlzaWJsZSA9IGZ1bmN0aW9uIGlzVG90YWxseVZpc2libGUoYXJncykge1xuICByZXR1cm4gaXNWaXNpYmxlKF9leHRlbmRzKHt9LCBhcmdzLCB7XG4gICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm46IGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWVcbiAgfSkpO1xufTtcbnZhciBpc1RvdGFsbHlWaXNpYmxlT25BeGlzID0gZnVuY3Rpb24gaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyhhcmdzKSB7XG4gIHJldHVybiBpc1Zpc2libGUoX2V4dGVuZHMoe30sIGFyZ3MsIHtcbiAgICBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbjogaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZU9uQXhpcyhhcmdzLmRlc3RpbmF0aW9uLmF4aXMpXG4gIH0pKTtcbn07XG5cbnZhciBnZXRTaG91bGRBbmltYXRlID0gZnVuY3Rpb24gZ2V0U2hvdWxkQW5pbWF0ZShpZCwgbGFzdCwgZm9yY2VTaG91bGRBbmltYXRlKSB7XG4gIGlmICh0eXBlb2YgZm9yY2VTaG91bGRBbmltYXRlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gZm9yY2VTaG91bGRBbmltYXRlO1xuICB9XG5cbiAgaWYgKCFsYXN0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgaW52aXNpYmxlID0gbGFzdC5pbnZpc2libGUsXG4gICAgICB2aXNpYmxlID0gbGFzdC52aXNpYmxlO1xuXG4gIGlmIChpbnZpc2libGVbaWRdKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzID0gdmlzaWJsZVtpZF07XG4gIHJldHVybiBwcmV2aW91cyA/IHByZXZpb3VzLnNob3VsZEFuaW1hdGUgOiB0cnVlO1xufTtcblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KGRyYWdnYWJsZSwgZGlzcGxhY2VkQnkpIHtcbiAgdmFyIG1hcmdpbkJveCA9IGRyYWdnYWJsZS5wYWdlLm1hcmdpbkJveDtcbiAgdmFyIGV4cGFuZEJ5ID0ge1xuICAgIHRvcDogZGlzcGxhY2VkQnkucG9pbnQueSxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogZGlzcGxhY2VkQnkucG9pbnQueFxuICB9O1xuICByZXR1cm4gY3NzQm94TW9kZWwuZ2V0UmVjdChjc3NCb3hNb2RlbC5leHBhbmQobWFyZ2luQm94LCBleHBhbmRCeSkpO1xufVxuXG5mdW5jdGlvbiBnZXREaXNwbGFjZW1lbnRHcm91cHMoX3JlZikge1xuICB2YXIgYWZ0ZXJEcmFnZ2luZyA9IF9yZWYuYWZ0ZXJEcmFnZ2luZyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZi5kaXNwbGFjZWRCeSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZSA9IF9yZWYuZm9yY2VTaG91bGRBbmltYXRlLFxuICAgICAgbGFzdCA9IF9yZWYubGFzdDtcbiAgcmV0dXJuIGFmdGVyRHJhZ2dpbmcucmVkdWNlKGZ1bmN0aW9uIHByb2Nlc3MoZ3JvdXBzLCBkcmFnZ2FibGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGRyYWdnYWJsZSwgZGlzcGxhY2VkQnkpO1xuICAgIHZhciBpZCA9IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkO1xuICAgIGdyb3Vwcy5hbGwucHVzaChpZCk7XG4gICAgdmFyIGlzVmlzaWJsZSA9IGlzUGFydGlhbGx5VmlzaWJsZSh7XG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHRydWVcbiAgICB9KTtcblxuICAgIGlmICghaXNWaXNpYmxlKSB7XG4gICAgICBncm91cHMuaW52aXNpYmxlW2RyYWdnYWJsZS5kZXNjcmlwdG9yLmlkXSA9IHRydWU7XG4gICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRBbmltYXRlID0gZ2V0U2hvdWxkQW5pbWF0ZShpZCwgbGFzdCwgZm9yY2VTaG91bGRBbmltYXRlKTtcbiAgICB2YXIgZGlzcGxhY2VtZW50ID0ge1xuICAgICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgICAgc2hvdWxkQW5pbWF0ZTogc2hvdWxkQW5pbWF0ZVxuICAgIH07XG4gICAgZ3JvdXBzLnZpc2libGVbaWRdID0gZGlzcGxhY2VtZW50O1xuICAgIHJldHVybiBncm91cHM7XG4gIH0sIHtcbiAgICBhbGw6IFtdLFxuICAgIHZpc2libGU6IHt9LFxuICAgIGludmlzaWJsZToge31cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4T2ZMYXN0SXRlbShkcmFnZ2FibGVzLCBvcHRpb25zKSB7XG4gIGlmICghZHJhZ2dhYmxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBpbmRleE9mTGFzdEl0ZW0gPSBkcmFnZ2FibGVzW2RyYWdnYWJsZXMubGVuZ3RoIC0gMV0uZGVzY3JpcHRvci5pbmRleDtcbiAgcmV0dXJuIG9wdGlvbnMuaW5Ib21lTGlzdCA/IGluZGV4T2ZMYXN0SXRlbSA6IGluZGV4T2ZMYXN0SXRlbSArIDE7XG59XG5cbmZ1bmN0aW9uIGdvQXRFbmQoX3JlZikge1xuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgaW5Ib21lTGlzdCA9IF9yZWYuaW5Ib21lTGlzdCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZi5kaXNwbGFjZWRCeSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbjtcbiAgdmFyIG5ld0luZGV4ID0gZ2V0SW5kZXhPZkxhc3RJdGVtKGluc2lkZURlc3RpbmF0aW9uLCB7XG4gICAgaW5Ib21lTGlzdDogaW5Ib21lTGlzdFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGFjZWQ6IGVtcHR5R3JvdXBzLFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBhdDoge1xuICAgICAgdHlwZTogJ1JFT1JERVInLFxuICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUmVvcmRlckltcGFjdChfcmVmMikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZjIuZHJhZ2dhYmxlLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmMi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZjIuZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydCA9IF9yZWYyLnZpZXdwb3J0LFxuICAgICAgZGlzcGxhY2VkQnkgPSBfcmVmMi5kaXNwbGFjZWRCeSxcbiAgICAgIGxhc3QgPSBfcmVmMi5sYXN0LFxuICAgICAgaW5kZXggPSBfcmVmMi5pbmRleCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZSA9IF9yZWYyLmZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgdmFyIGluSG9tZUxpc3QgPSBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBnb0F0RW5kKHtcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGluSG9tZUxpc3Q6IGluSG9tZUxpc3QsXG4gICAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IGZpbmQoaW5zaWRlRGVzdGluYXRpb24sIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uZGVzY3JpcHRvci5pbmRleCA9PT0gaW5kZXg7XG4gIH0pO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gZ29BdEVuZCh7XG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBpbkhvbWVMaXN0OiBpbkhvbWVMaXN0LFxuICAgICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICB2YXIgd2l0aG91dERyYWdnaW5nID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbik7XG4gIHZhciBzbGljZUZyb20gPSBpbnNpZGVEZXN0aW5hdGlvbi5pbmRleE9mKG1hdGNoKTtcbiAgdmFyIGltcGFjdGVkID0gd2l0aG91dERyYWdnaW5nLnNsaWNlKHNsaWNlRnJvbSk7XG4gIHZhciBkaXNwbGFjZWQgPSBnZXREaXNwbGFjZW1lbnRHcm91cHMoe1xuICAgIGFmdGVyRHJhZ2dpbmc6IGltcGFjdGVkLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgbGFzdDogbGFzdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBmb3JjZVNob3VsZEFuaW1hdGVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGF0OiB7XG4gICAgICB0eXBlOiAnUkVPUkRFUicsXG4gICAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBkaWRTdGFydEFmdGVyQ3JpdGljYWwoZHJhZ2dhYmxlSWQsIGFmdGVyQ3JpdGljYWwpIHtcbiAgcmV0dXJuIEJvb2xlYW4oYWZ0ZXJDcml0aWNhbC5lZmZlY3RlZFtkcmFnZ2FibGVJZF0pO1xufVxuXG52YXIgZnJvbUNvbWJpbmUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGNvbWJpbmUgPSBfcmVmLmNvbWJpbmUsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGNvbWJpbmVJZCA9IGNvbWJpbmUuZHJhZ2dhYmxlSWQ7XG4gIHZhciBjb21iaW5lV2l0aCA9IGRyYWdnYWJsZXNbY29tYmluZUlkXTtcbiAgdmFyIGNvbWJpbmVXaXRoSW5kZXggPSBjb21iaW5lV2l0aC5kZXNjcmlwdG9yLmluZGV4O1xuICB2YXIgZGlkQ29tYmluZVdpdGhTdGFydEFmdGVyQ3JpdGljYWwgPSBkaWRTdGFydEFmdGVyQ3JpdGljYWwoY29tYmluZUlkLCBhZnRlckNyaXRpY2FsKTtcblxuICBpZiAoZGlkQ29tYmluZVdpdGhTdGFydEFmdGVyQ3JpdGljYWwpIHtcbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gY29tYmluZVdpdGhJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tYmluZVdpdGhJbmRleCAtIDE7XG4gIH1cblxuICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVXaXRoSW5kZXggKyAxO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVXaXRoSW5kZXg7XG59KTtcblxudmFyIGZyb21SZW9yZGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdCA9IF9yZWYuaXNJbkhvbWVMaXN0LFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uO1xuXG4gIGlmICghaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY3VycmVudEluZGV4ID0gbG9jYXRpb24uaW5kZXg7XG4gIHZhciBwcm9wb3NlZEluZGV4ID0gaXNNb3ZpbmdGb3J3YXJkID8gY3VycmVudEluZGV4ICsgMSA6IGN1cnJlbnRJbmRleCAtIDE7XG4gIHZhciBmaXJzdEluZGV4ID0gaW5zaWRlRGVzdGluYXRpb25bMF0uZGVzY3JpcHRvci5pbmRleDtcbiAgdmFyIGxhc3RJbmRleCA9IGluc2lkZURlc3RpbmF0aW9uW2luc2lkZURlc3RpbmF0aW9uLmxlbmd0aCAtIDFdLmRlc2NyaXB0b3IuaW5kZXg7XG4gIHZhciB1cHBlckJvdW5kID0gaXNJbkhvbWVMaXN0ID8gbGFzdEluZGV4IDogbGFzdEluZGV4ICsgMTtcblxuICBpZiAocHJvcG9zZWRJbmRleCA8IGZpcnN0SW5kZXgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwcm9wb3NlZEluZGV4ID4gdXBwZXJCb3VuZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHByb3Bvc2VkSW5kZXg7XG59KTtcblxudmFyIG1vdmVUb05leHRJbmRleCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBpc0luSG9tZUxpc3QgPSBfcmVmLmlzSW5Ib21lTGlzdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciB3YXNBdCA9IHByZXZpb3VzSW1wYWN0LmF0O1xuICAhd2FzQXQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgbW92ZSBpbiBkaXJlY3Rpb24gd2l0aG91dCBwcmV2aW91cyBpbXBhY3QgbG9jYXRpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgaWYgKHdhc0F0LnR5cGUgPT09ICdSRU9SREVSJykge1xuICAgIHZhciBfbmV3SW5kZXggPSBmcm9tUmVvcmRlcih7XG4gICAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgICAgbG9jYXRpb246IHdhc0F0LmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAoX25ld0luZGV4ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxjdWxhdGVSZW9yZGVySW1wYWN0KHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgbGFzdDogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkLFxuICAgICAgZGlzcGxhY2VkQnk6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZEJ5LFxuICAgICAgaW5kZXg6IF9uZXdJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgdmFyIG5ld0luZGV4ID0gZnJvbUNvbWJpbmUoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkaXNwbGFjZWQ6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGNvbWJpbmU6IHdhc0F0LmNvbWJpbmUsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcblxuICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGNhbGN1bGF0ZVJlb3JkZXJJbXBhY3Qoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGxhc3Q6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICBkaXNwbGFjZWRCeTogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkQnksXG4gICAgaW5kZXg6IG5ld0luZGV4XG4gIH0pO1xufSk7XG5cbnZhciBnZXRDb21iaW5lZEl0ZW1EaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRpc3BsYWNlZCA9IF9yZWYuZGlzcGxhY2VkLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbCxcbiAgICAgIGNvbWJpbmVXaXRoID0gX3JlZi5jb21iaW5lV2l0aCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZi5kaXNwbGFjZWRCeTtcbiAgdmFyIGlzRGlzcGxhY2VkID0gQm9vbGVhbihkaXNwbGFjZWQudmlzaWJsZVtjb21iaW5lV2l0aF0gfHwgZGlzcGxhY2VkLmludmlzaWJsZVtjb21iaW5lV2l0aF0pO1xuXG4gIGlmIChkaWRTdGFydEFmdGVyQ3JpdGljYWwoY29tYmluZVdpdGgsIGFmdGVyQ3JpdGljYWwpKSB7XG4gICAgcmV0dXJuIGlzRGlzcGxhY2VkID8gb3JpZ2luIDogbmVnYXRlKGRpc3BsYWNlZEJ5LnBvaW50KTtcbiAgfVxuXG4gIHJldHVybiBpc0Rpc3BsYWNlZCA/IGRpc3BsYWNlZEJ5LnBvaW50IDogb3JpZ2luO1xufSk7XG5cbnZhciB3aGVuQ29tYmluaW5nID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsLFxuICAgICAgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzO1xuICB2YXIgY29tYmluZSA9IHRyeUdldENvbWJpbmUoaW1wYWN0KTtcbiAgIWNvbWJpbmUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGNvbWJpbmVXaXRoID0gY29tYmluZS5kcmFnZ2FibGVJZDtcbiAgdmFyIGNlbnRlciA9IGRyYWdnYWJsZXNbY29tYmluZVdpdGhdLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgdmFyIGRpc3BsYWNlQnkgPSBnZXRDb21iaW5lZEl0ZW1EaXNwbGFjZW1lbnQoe1xuICAgIGRpc3BsYWNlZDogaW1wYWN0LmRpc3BsYWNlZCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsLFxuICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICBkaXNwbGFjZWRCeTogaW1wYWN0LmRpc3BsYWNlZEJ5XG4gIH0pO1xuICByZXR1cm4gYWRkKGNlbnRlciwgZGlzcGxhY2VCeSk7XG59KTtcblxudmFyIGRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGJveCkge1xuICByZXR1cm4gYm94Lm1hcmdpbltheGlzLnN0YXJ0XSArIGJveC5ib3JkZXJCb3hbYXhpcy5zaXplXSAvIDI7XG59O1xuXG52YXIgZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBkaXN0YW5jZUZyb21FbmRUb0JvcmRlckJveENlbnRlcihheGlzLCBib3gpIHtcbiAgcmV0dXJuIGJveC5tYXJnaW5bYXhpcy5lbmRdICsgYm94LmJvcmRlckJveFtheGlzLnNpemVdIC8gMjtcbn07XG5cbnZhciBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgdGFyZ2V0LCBpc01vdmluZykge1xuICByZXR1cm4gdGFyZ2V0W2F4aXMuY3Jvc3NBeGlzU3RhcnRdICsgaXNNb3ZpbmcubWFyZ2luW2F4aXMuY3Jvc3NBeGlzU3RhcnRdICsgaXNNb3ZpbmcuYm9yZGVyQm94W2F4aXMuY3Jvc3NBeGlzU2l6ZV0gLyAyO1xufTtcblxudmFyIGdvQWZ0ZXIgPSBmdW5jdGlvbiBnb0FmdGVyKF9yZWYpIHtcbiAgdmFyIGF4aXMgPSBfcmVmLmF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbyA9IF9yZWYubW92ZVJlbGF0aXZlVG8sXG4gICAgICBpc01vdmluZyA9IF9yZWYuaXNNb3Zpbmc7XG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveFtheGlzLmVuZF0gKyBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGlzTW92aW5nKSwgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveCwgaXNNb3ZpbmcpKTtcbn07XG52YXIgZ29CZWZvcmUgPSBmdW5jdGlvbiBnb0JlZm9yZShfcmVmMikge1xuICB2YXIgYXhpcyA9IF9yZWYyLmF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbyA9IF9yZWYyLm1vdmVSZWxhdGl2ZVRvLFxuICAgICAgaXNNb3ZpbmcgPSBfcmVmMi5pc01vdmluZztcbiAgcmV0dXJuIHBhdGNoKGF4aXMubGluZSwgbW92ZVJlbGF0aXZlVG8ubWFyZ2luQm94W2F4aXMuc3RhcnRdIC0gZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgaXNNb3ZpbmcpLCBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgbW92ZVJlbGF0aXZlVG8ubWFyZ2luQm94LCBpc01vdmluZykpO1xufTtcbnZhciBnb0ludG9TdGFydCA9IGZ1bmN0aW9uIGdvSW50b1N0YXJ0KF9yZWYzKSB7XG4gIHZhciBheGlzID0gX3JlZjMuYXhpcyxcbiAgICAgIG1vdmVJbnRvID0gX3JlZjMubW92ZUludG8sXG4gICAgICBpc01vdmluZyA9IF9yZWYzLmlzTW92aW5nO1xuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBtb3ZlSW50by5jb250ZW50Qm94W2F4aXMuc3RhcnRdICsgZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlcihheGlzLCBpc01vdmluZyksIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlcihheGlzLCBtb3ZlSW50by5jb250ZW50Qm94LCBpc01vdmluZykpO1xufTtcblxudmFyIHdoZW5SZW9yZGVyaW5nID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBkcmFnZ2FibGVQYWdlID0gZHJhZ2dhYmxlLnBhZ2U7XG4gIHZhciBheGlzID0gZHJvcHBhYmxlLmF4aXM7XG5cbiAgaWYgKCFpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZ29JbnRvU3RhcnQoe1xuICAgICAgYXhpczogYXhpcyxcbiAgICAgIG1vdmVJbnRvOiBkcm9wcGFibGUucGFnZSxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgZGlzcGxhY2VkID0gaW1wYWN0LmRpc3BsYWNlZCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gaW1wYWN0LmRpc3BsYWNlZEJ5O1xuICB2YXIgY2xvc2VzdEFmdGVyID0gZGlzcGxhY2VkLmFsbFswXTtcblxuICBpZiAoY2xvc2VzdEFmdGVyKSB7XG4gICAgdmFyIGNsb3Nlc3QgPSBkcmFnZ2FibGVzW2Nsb3Nlc3RBZnRlcl07XG5cbiAgICBpZiAoZGlkU3RhcnRBZnRlckNyaXRpY2FsKGNsb3Nlc3RBZnRlciwgYWZ0ZXJDcml0aWNhbCkpIHtcbiAgICAgIHJldHVybiBnb0JlZm9yZSh7XG4gICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgIG1vdmVSZWxhdGl2ZVRvOiBjbG9zZXN0LnBhZ2UsXG4gICAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgd2l0aERpc3BsYWNlbWVudCA9IGNzc0JveE1vZGVsLm9mZnNldChjbG9zZXN0LnBhZ2UsIGRpc3BsYWNlZEJ5LnBvaW50KTtcbiAgICByZXR1cm4gZ29CZWZvcmUoe1xuICAgICAgYXhpczogYXhpcyxcbiAgICAgIG1vdmVSZWxhdGl2ZVRvOiB3aXRoRGlzcGxhY2VtZW50LFxuICAgICAgaXNNb3Zpbmc6IGRyYWdnYWJsZVBhZ2VcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsYXN0ID0gaW5zaWRlRGVzdGluYXRpb25baW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoIC0gMV07XG5cbiAgaWYgKGxhc3QuZGVzY3JpcHRvci5pZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQpIHtcbiAgICByZXR1cm4gZHJhZ2dhYmxlUGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB9XG5cbiAgaWYgKGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbChsYXN0LmRlc2NyaXB0b3IuaWQsIGFmdGVyQ3JpdGljYWwpKSB7XG4gICAgdmFyIHBhZ2UgPSBjc3NCb3hNb2RlbC5vZmZzZXQobGFzdC5wYWdlLCBuZWdhdGUoYWZ0ZXJDcml0aWNhbC5kaXNwbGFjZWRCeS5wb2ludCkpO1xuICAgIHJldHVybiBnb0FmdGVyKHtcbiAgICAgIGF4aXM6IGF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbzogcGFnZSxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZ29BZnRlcih7XG4gICAgYXhpczogYXhpcyxcbiAgICBtb3ZlUmVsYXRpdmVUbzogbGFzdC5wYWdlLFxuICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gIH0pO1xufSk7XG5cbnZhciB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIHBvaW50KSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgcmV0dXJuIGFkZChwb2ludCwgZnJhbWUuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50KTtcbn0pO1xuXG52YXIgZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudCA9IGZ1bmN0aW9uIGdldFJlc3VsdFdpdGhvdXREcm9wcGFibGVEaXNwbGFjZW1lbnQoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciBvcmlnaW5hbCA9IGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXI7XG4gIHZhciBhdCA9IGltcGFjdC5hdDtcblxuICBpZiAoIWRyb3BwYWJsZSkge1xuICAgIHJldHVybiBvcmlnaW5hbDtcbiAgfVxuXG4gIGlmICghYXQpIHtcbiAgICByZXR1cm4gb3JpZ2luYWw7XG4gIH1cblxuICBpZiAoYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIHdoZW5SZW9yZGVyaW5nKHtcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlOiBkcm9wcGFibGUsXG4gICAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gd2hlbkNvbWJpbmluZyh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xufTtcblxudmFyIGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0ID0gKGZ1bmN0aW9uIChhcmdzKSB7XG4gIHZhciB3aXRob3V0RGlzcGxhY2VtZW50ID0gZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudChhcmdzKTtcbiAgdmFyIGRyb3BwYWJsZSA9IGFyZ3MuZHJvcHBhYmxlO1xuICB2YXIgd2l0aERpc3BsYWNlbWVudCA9IGRyb3BwYWJsZSA/IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQoZHJvcHBhYmxlLCB3aXRob3V0RGlzcGxhY2VtZW50KSA6IHdpdGhvdXREaXNwbGFjZW1lbnQ7XG4gIHJldHVybiB3aXRoRGlzcGxhY2VtZW50O1xufSk7XG5cbnZhciBzY3JvbGxWaWV3cG9ydCA9IChmdW5jdGlvbiAodmlld3BvcnQsIG5ld1Njcm9sbCkge1xuICB2YXIgZGlmZiA9IHN1YnRyYWN0KG5ld1Njcm9sbCwgdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwpO1xuICB2YXIgZGlzcGxhY2VtZW50ID0gbmVnYXRlKGRpZmYpO1xuICB2YXIgZnJhbWUgPSBjc3NCb3hNb2RlbC5nZXRSZWN0KHtcbiAgICB0b3A6IG5ld1Njcm9sbC55LFxuICAgIGJvdHRvbTogbmV3U2Nyb2xsLnkgKyB2aWV3cG9ydC5mcmFtZS5oZWlnaHQsXG4gICAgbGVmdDogbmV3U2Nyb2xsLngsXG4gICAgcmlnaHQ6IG5ld1Njcm9sbC54ICsgdmlld3BvcnQuZnJhbWUud2lkdGhcbiAgfSk7XG4gIHZhciB1cGRhdGVkID0ge1xuICAgIGZyYW1lOiBmcmFtZSxcbiAgICBzY3JvbGw6IHtcbiAgICAgIGluaXRpYWw6IHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsLFxuICAgICAgbWF4OiB2aWV3cG9ydC5zY3JvbGwubWF4LFxuICAgICAgY3VycmVudDogbmV3U2Nyb2xsLFxuICAgICAgZGlmZjoge1xuICAgICAgICB2YWx1ZTogZGlmZixcbiAgICAgICAgZGlzcGxhY2VtZW50OiBkaXNwbGFjZW1lbnRcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVkO1xufSk7XG5cbmZ1bmN0aW9uIGdldERyYWdnYWJsZXMoaWRzLCBkcmFnZ2FibGVzKSB7XG4gIHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBkcmFnZ2FibGVzW2lkXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyeUdldFZpc2libGUoaWQsIGdyb3Vwcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkaXNwbGFjZW1lbnQgPSBncm91cHNbaV0udmlzaWJsZVtpZF07XG5cbiAgICBpZiAoZGlzcGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gZGlzcGxhY2VtZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgc3BlY3VsYXRpdmVseUluY3JlYXNlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBtYXhTY3JvbGxDaGFuZ2UgPSBfcmVmLm1heFNjcm9sbENoYW5nZTtcbiAgdmFyIHNjcm9sbGVkVmlld3BvcnQgPSBzY3JvbGxWaWV3cG9ydCh2aWV3cG9ydCwgYWRkKHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50LCBtYXhTY3JvbGxDaGFuZ2UpKTtcbiAgdmFyIHNjcm9sbGVkRHJvcHBhYmxlID0gZGVzdGluYXRpb24uZnJhbWUgPyBzY3JvbGxEcm9wcGFibGUoZGVzdGluYXRpb24sIGFkZChkZXN0aW5hdGlvbi5mcmFtZS5zY3JvbGwuY3VycmVudCwgbWF4U2Nyb2xsQ2hhbmdlKSkgOiBkZXN0aW5hdGlvbjtcbiAgdmFyIGxhc3QgPSBpbXBhY3QuZGlzcGxhY2VkO1xuICB2YXIgd2l0aFZpZXdwb3J0U2Nyb2xsID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBnZXREcmFnZ2FibGVzKGxhc3QuYWxsLCBkcmFnZ2FibGVzKSxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZGlzcGxhY2VkQnk6IGltcGFjdC5kaXNwbGFjZWRCeSxcbiAgICB2aWV3cG9ydDogc2Nyb2xsZWRWaWV3cG9ydC5mcmFtZSxcbiAgICBsYXN0OiBsYXN0LFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgfSk7XG4gIHZhciB3aXRoRHJvcHBhYmxlU2Nyb2xsID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBnZXREcmFnZ2FibGVzKGxhc3QuYWxsLCBkcmFnZ2FibGVzKSxcbiAgICBkZXN0aW5hdGlvbjogc2Nyb2xsZWREcm9wcGFibGUsXG4gICAgZGlzcGxhY2VkQnk6IGltcGFjdC5kaXNwbGFjZWRCeSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgbGFzdDogbGFzdCxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZhbHNlXG4gIH0pO1xuICB2YXIgaW52aXNpYmxlID0ge307XG4gIHZhciB2aXNpYmxlID0ge307XG4gIHZhciBncm91cHMgPSBbbGFzdCwgd2l0aFZpZXdwb3J0U2Nyb2xsLCB3aXRoRHJvcHBhYmxlU2Nyb2xsXTtcbiAgbGFzdC5hbGwuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZGlzcGxhY2VtZW50ID0gdHJ5R2V0VmlzaWJsZShpZCwgZ3JvdXBzKTtcblxuICAgIGlmIChkaXNwbGFjZW1lbnQpIHtcbiAgICAgIHZpc2libGVbaWRdID0gZGlzcGxhY2VtZW50O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludmlzaWJsZVtpZF0gPSB0cnVlO1xuICB9KTtcblxuICB2YXIgbmV3SW1wYWN0ID0gX2V4dGVuZHMoe30sIGltcGFjdCwge1xuICAgIGRpc3BsYWNlZDoge1xuICAgICAgYWxsOiBsYXN0LmFsbCxcbiAgICAgIGludmlzaWJsZTogaW52aXNpYmxlLFxuICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0ltcGFjdDtcbn0pO1xuXG52YXIgd2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uICh2aWV3cG9ydCwgcG9pbnQpIHtcbiAgcmV0dXJuIGFkZCh2aWV3cG9ydC5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQsIHBvaW50KTtcbn0pO1xuXG52YXIgZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIHdpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlID0gd2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50KHZpZXdwb3J0LCBwYWdlQm9yZGVyQm94Q2VudGVyKTtcbiAgdmFyIG9mZnNldCA9IHN1YnRyYWN0KHdpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlLCBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyKTtcbiAgcmV0dXJuIGFkZChkcmFnZ2FibGUuY2xpZW50LmJvcmRlckJveC5jZW50ZXIsIG9mZnNldCk7XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLm5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gX3JlZi53aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgICAgX3JlZiRvbmx5T25NYWluQXhpcyA9IF9yZWYub25seU9uTWFpbkF4aXMsXG4gICAgICBvbmx5T25NYWluQXhpcyA9IF9yZWYkb25seU9uTWFpbkF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5T25NYWluQXhpcztcbiAgdmFyIGNoYW5nZU5lZWRlZCA9IHN1YnRyYWN0KG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsIGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXIpO1xuICB2YXIgc2hpZnRlZCA9IG9mZnNldEJ5UG9zaXRpb24oZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LCBjaGFuZ2VOZWVkZWQpO1xuICB2YXIgYXJncyA9IHtcbiAgICB0YXJnZXQ6IHNoaWZ0ZWQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH07XG4gIHJldHVybiBvbmx5T25NYWluQXhpcyA/IGlzVG90YWxseVZpc2libGVPbkF4aXMoYXJncykgOiBpc1RvdGFsbHlWaXNpYmxlKGFyZ3MpO1xufSk7XG5cbnZhciBtb3ZlVG9OZXh0UGxhY2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBwcmV2aW91c0NsaWVudFNlbGVjdGlvbiA9IF9yZWYucHJldmlvdXNDbGllbnRTZWxlY3Rpb24sXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgaXNJbkhvbWVMaXN0ID0gaXNIb21lT2YoZHJhZ2dhYmxlLCBkZXN0aW5hdGlvbik7XG4gIHZhciBpbXBhY3QgPSBtb3ZlVG9OZXh0Q29tYmluZSh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3RcbiAgfSkgfHwgbW92ZVRvTmV4dEluZGV4KHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBpc0luSG9tZUxpc3Q6IGlzSW5Ib21lTGlzdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuXG4gIGlmICghaW1wYWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbiAgdmFyIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPSBpc1RvdGFsbHlWaXNpYmxlSW5OZXdMb2NhdGlvbih7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IGZhbHNlLFxuICAgIG9ubHlPbk1haW5BeGlzOiB0cnVlXG4gIH0pO1xuXG4gIGlmIChpc1Zpc2libGVJbk5ld0xvY2F0aW9uKSB7XG4gICAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyKHtcbiAgICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgdmFyIGRpc3RhbmNlID0gc3VidHJhY3QocGFnZUJvcmRlckJveENlbnRlciwgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyKTtcbiAgdmFyIGNhdXRpb3VzID0gc3BlY3VsYXRpdmVseUluY3JlYXNlKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgbWF4U2Nyb2xsQ2hhbmdlOiBkaXN0YW5jZVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRTZWxlY3Rpb246IHByZXZpb3VzQ2xpZW50U2VsZWN0aW9uLFxuICAgIGltcGFjdDogY2F1dGlvdXMsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IGRpc3RhbmNlXG4gIH07XG59KTtcblxudmFyIGdldEtub3duQWN0aXZlID0gZnVuY3Rpb24gZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKSB7XG4gIHZhciByZWN0ID0gZHJvcHBhYmxlLnN1YmplY3QuYWN0aXZlO1xuICAhcmVjdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBnZXQgY2xpcHBlZCBhcmVhIGZyb20gZHJvcHBhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVjdDtcbn07XG5cbnZhciBnZXRCZXN0Q3Jvc3NBeGlzRHJvcHBhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBzb3VyY2UgPSBfcmVmLnNvdXJjZSxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciBhY3RpdmUgPSBzb3VyY2Uuc3ViamVjdC5hY3RpdmU7XG5cbiAgaWYgKCFhY3RpdmUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBheGlzID0gc291cmNlLmF4aXM7XG4gIHZhciBpc0JldHdlZW5Tb3VyY2VDbGlwcGVkID0gaXNXaXRoaW4oYWN0aXZlW2F4aXMuc3RhcnRdLCBhY3RpdmVbYXhpcy5lbmRdKTtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlICE9PSBzb3VyY2U7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZS5pc0VuYWJsZWQ7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZHJvcHBhYmxlLnN1YmplY3QuYWN0aXZlKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lKHZpZXdwb3J0LmZyYW1lKShnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICB2YXIgYWN0aXZlT2ZUYXJnZXQgPSBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpO1xuXG4gICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVtheGlzLmNyb3NzQXhpc0VuZF0gPCBhY3RpdmVPZlRhcmdldFtheGlzLmNyb3NzQXhpc0VuZF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGl2ZU9mVGFyZ2V0W2F4aXMuY3Jvc3NBeGlzU3RhcnRdIDwgYWN0aXZlW2F4aXMuY3Jvc3NBeGlzU3RhcnRdO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHZhciBhY3RpdmVPZlRhcmdldCA9IGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSk7XG4gICAgdmFyIGlzQmV0d2VlbkRlc3RpbmF0aW9uQ2xpcHBlZCA9IGlzV2l0aGluKGFjdGl2ZU9mVGFyZ2V0W2F4aXMuc3RhcnRdLCBhY3RpdmVPZlRhcmdldFtheGlzLmVuZF0pO1xuICAgIHJldHVybiBpc0JldHdlZW5Tb3VyY2VDbGlwcGVkKGFjdGl2ZU9mVGFyZ2V0W2F4aXMuc3RhcnRdKSB8fCBpc0JldHdlZW5Tb3VyY2VDbGlwcGVkKGFjdGl2ZU9mVGFyZ2V0W2F4aXMuZW5kXSkgfHwgaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkKGFjdGl2ZVtheGlzLnN0YXJ0XSkgfHwgaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkKGFjdGl2ZVtheGlzLmVuZF0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGZpcnN0ID0gZ2V0S25vd25BY3RpdmUoYSlbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gICAgdmFyIHNlY29uZCA9IGdldEtub3duQWN0aXZlKGIpW2F4aXMuY3Jvc3NBeGlzU3RhcnRdO1xuXG4gICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgcmV0dXJuIGZpcnN0IC0gc2Vjb25kO1xuICAgIH1cblxuICAgIHJldHVybiBzZWNvbmQgLSBmaXJzdDtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUsIGluZGV4LCBhcnJheSkge1xuICAgIHJldHVybiBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpW2F4aXMuY3Jvc3NBeGlzU3RhcnRdID09PSBnZXRLbm93bkFjdGl2ZShhcnJheVswXSlbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gIH0pO1xuXG4gIGlmICghY2FuZGlkYXRlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBjYW5kaWRhdGVzWzBdO1xuICB9XG5cbiAgdmFyIGNvbnRhaW5zID0gY2FuZGlkYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHZhciBpc1dpdGhpbkRyb3BwYWJsZSA9IGlzV2l0aGluKGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSlbYXhpcy5zdGFydF0sIGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSlbYXhpcy5lbmRdKTtcbiAgICByZXR1cm4gaXNXaXRoaW5Ecm9wcGFibGUocGFnZUJvcmRlckJveENlbnRlcltheGlzLmxpbmVdKTtcbiAgfSk7XG5cbiAgaWYgKGNvbnRhaW5zLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBjb250YWluc1swXTtcbiAgfVxuXG4gIGlmIChjb250YWlucy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBnZXRLbm93bkFjdGl2ZShhKVtheGlzLnN0YXJ0XSAtIGdldEtub3duQWN0aXZlKGIpW2F4aXMuc3RhcnRdO1xuICAgIH0pWzBdO1xuICB9XG5cbiAgcmV0dXJuIGNhbmRpZGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBmaXJzdCA9IGNsb3Nlc3QocGFnZUJvcmRlckJveENlbnRlciwgZ2V0Q29ybmVycyhnZXRLbm93bkFjdGl2ZShhKSkpO1xuICAgIHZhciBzZWNvbmQgPSBjbG9zZXN0KHBhZ2VCb3JkZXJCb3hDZW50ZXIsIGdldENvcm5lcnMoZ2V0S25vd25BY3RpdmUoYikpKTtcblxuICAgIGlmIChmaXJzdCAhPT0gc2Vjb25kKSB7XG4gICAgICByZXR1cm4gZmlyc3QgLSBzZWNvbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEtub3duQWN0aXZlKGEpW2F4aXMuc3RhcnRdIC0gZ2V0S25vd25BY3RpdmUoYilbYXhpcy5zdGFydF07XG4gIH0pWzBdO1xufSk7XG5cbnZhciBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlciA9IGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyKGRyYWdnYWJsZSwgYWZ0ZXJDcml0aWNhbCkge1xuICB2YXIgb3JpZ2luYWwgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICByZXR1cm4gZGlkU3RhcnRBZnRlckNyaXRpY2FsKGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkLCBhZnRlckNyaXRpY2FsKSA/IHN1YnRyYWN0KG9yaWdpbmFsLCBhZnRlckNyaXRpY2FsLmRpc3BsYWNlZEJ5LnBvaW50KSA6IG9yaWdpbmFsO1xufTtcbnZhciBnZXRDdXJyZW50UGFnZUJvcmRlckJveCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94KGRyYWdnYWJsZSwgYWZ0ZXJDcml0aWNhbCkge1xuICB2YXIgb3JpZ2luYWwgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3g7XG4gIHJldHVybiBkaWRTdGFydEFmdGVyQ3JpdGljYWwoZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQsIGFmdGVyQ3JpdGljYWwpID8gb2Zmc2V0QnlQb3NpdGlvbihvcmlnaW5hbCwgbmVnYXRlKGFmdGVyQ3JpdGljYWwuZGlzcGxhY2VkQnkucG9pbnQpKSA6IG9yaWdpbmFsO1xufTtcblxudmFyIGdldENsb3Nlc3REcmFnZ2FibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgc29ydGVkID0gaW5zaWRlRGVzdGluYXRpb24uZmlsdGVyKGZ1bmN0aW9uIChkcmFnZ2FibGUpIHtcbiAgICByZXR1cm4gaXNUb3RhbGx5VmlzaWJsZSh7XG4gICAgICB0YXJnZXQ6IGdldEN1cnJlbnRQYWdlQm9yZGVyQm94KGRyYWdnYWJsZSwgYWZ0ZXJDcml0aWNhbCksXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiB0cnVlXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGlzdGFuY2VUb0EgPSBkaXN0YW5jZShwYWdlQm9yZGVyQm94Q2VudGVyLCB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50KGRlc3RpbmF0aW9uLCBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlcihhLCBhZnRlckNyaXRpY2FsKSkpO1xuICAgIHZhciBkaXN0YW5jZVRvQiA9IGRpc3RhbmNlKHBhZ2VCb3JkZXJCb3hDZW50ZXIsIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQoZGVzdGluYXRpb24sIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyKGIsIGFmdGVyQ3JpdGljYWwpKSk7XG5cbiAgICBpZiAoZGlzdGFuY2VUb0EgPCBkaXN0YW5jZVRvQikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChkaXN0YW5jZVRvQiA8IGRpc3RhbmNlVG9BKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYS5kZXNjcmlwdG9yLmluZGV4IC0gYi5kZXNjcmlwdG9yLmluZGV4O1xuICB9KTtcbiAgcmV0dXJuIHNvcnRlZFswXSB8fCBudWxsO1xufSk7XG5cbnZhciBnZXREaXNwbGFjZWRCeSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gZ2V0RGlzcGxhY2VkQnkoYXhpcywgZGlzcGxhY2VCeSkge1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGlzcGxhY2VCeVtheGlzLmxpbmVdO1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBkaXNwbGFjZW1lbnQsXG4gICAgcG9pbnQ6IHBhdGNoKGF4aXMubGluZSwgZGlzcGxhY2VtZW50KVxuICB9O1xufSk7XG5cbnZhciBnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyID0gZnVuY3Rpb24gZ2V0UmVxdWlyZWRHcm93dGhGb3JQbGFjZWhvbGRlcihkcm9wcGFibGUsIHBsYWNlaG9sZGVyU2l6ZSwgZHJhZ2dhYmxlcykge1xuICB2YXIgYXhpcyA9IGRyb3BwYWJsZS5heGlzO1xuXG4gIGlmIChkcm9wcGFibGUuZGVzY3JpcHRvci5tb2RlID09PSAndmlydHVhbCcpIHtcbiAgICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBwbGFjZWhvbGRlclNpemVbYXhpcy5saW5lXSk7XG4gIH1cblxuICB2YXIgYXZhaWxhYmxlU3BhY2UgPSBkcm9wcGFibGUuc3ViamVjdC5wYWdlLmNvbnRlbnRCb3hbYXhpcy5zaXplXTtcbiAgdmFyIGluc2lkZURyb3BwYWJsZSA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgc3BhY2VVc2VkID0gaW5zaWRlRHJvcHBhYmxlLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gc3VtICsgZGltZW5zaW9uLmNsaWVudC5tYXJnaW5Cb3hbYXhpcy5zaXplXTtcbiAgfSwgMCk7XG4gIHZhciByZXF1aXJlZFNwYWNlID0gc3BhY2VVc2VkICsgcGxhY2Vob2xkZXJTaXplW2F4aXMubGluZV07XG4gIHZhciBuZWVkc1RvR3Jvd0J5ID0gcmVxdWlyZWRTcGFjZSAtIGF2YWlsYWJsZVNwYWNlO1xuXG4gIGlmIChuZWVkc1RvR3Jvd0J5IDw9IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG5lZWRzVG9Hcm93QnkpO1xufTtcblxudmFyIHdpdGhNYXhTY3JvbGwgPSBmdW5jdGlvbiB3aXRoTWF4U2Nyb2xsKGZyYW1lLCBtYXgpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBmcmFtZSwge1xuICAgIHNjcm9sbDogX2V4dGVuZHMoe30sIGZyYW1lLnNjcm9sbCwge1xuICAgICAgbWF4OiBtYXhcbiAgICB9KVxuICB9KTtcbn07XG5cbnZhciBhZGRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIGFkZFBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgZHJhZ2dhYmxlLCBkcmFnZ2FibGVzKSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcbiAgISFpc0hvbWVPZihkcmFnZ2FibGUsIGRyb3BwYWJsZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgbm90IGFkZCBwbGFjZWhvbGRlciBzcGFjZSB0byBob21lIGxpc3QnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEhZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGFkZCBwbGFjZWhvbGRlciBzaXplIHRvIGEgc3ViamVjdCB3aGVuIGl0IGFscmVhZHkgaGFzIG9uZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHBsYWNlaG9sZGVyU2l6ZSA9IGdldERpc3BsYWNlZEJ5KGRyb3BwYWJsZS5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSkucG9pbnQ7XG4gIHZhciByZXF1aXJlZEdyb3d0aCA9IGdldFJlcXVpcmVkR3Jvd3RoRm9yUGxhY2Vob2xkZXIoZHJvcHBhYmxlLCBwbGFjZWhvbGRlclNpemUsIGRyYWdnYWJsZXMpO1xuICB2YXIgYWRkZWQgPSB7XG4gICAgcGxhY2Vob2xkZXJTaXplOiBwbGFjZWhvbGRlclNpemUsXG4gICAgaW5jcmVhc2VkQnk6IHJlcXVpcmVkR3Jvd3RoLFxuICAgIG9sZEZyYW1lTWF4U2Nyb2xsOiBkcm9wcGFibGUuZnJhbWUgPyBkcm9wcGFibGUuZnJhbWUuc2Nyb2xsLm1heCA6IG51bGxcbiAgfTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgdmFyIF9zdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyOiBhZGRlZCxcbiAgICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgICAgZnJhbWU6IGRyb3BwYWJsZS5mcmFtZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICAgIHN1YmplY3Q6IF9zdWJqZWN0XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbWF4U2Nyb2xsID0gcmVxdWlyZWRHcm93dGggPyBhZGQoZnJhbWUuc2Nyb2xsLm1heCwgcmVxdWlyZWRHcm93dGgpIDogZnJhbWUuc2Nyb2xsLm1heDtcbiAgdmFyIG5ld0ZyYW1lID0gd2l0aE1heFNjcm9sbChmcmFtZSwgbWF4U2Nyb2xsKTtcbiAgdmFyIHN1YmplY3QgPSBnZXRTdWJqZWN0KHtcbiAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgIHdpdGhQbGFjZWhvbGRlcjogYWRkZWQsXG4gICAgYXhpczogZHJvcHBhYmxlLmF4aXMsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xufTtcbnZhciByZW1vdmVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIHJlbW92ZVBsYWNlaG9sZGVyKGRyb3BwYWJsZSkge1xuICB2YXIgYWRkZWQgPSBkcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXI7XG4gICFhZGRlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCByZW1vdmUgcGxhY2Vob2xkZXIgZm9ybSBzdWJqZWN0IHdoZW4gdGhlcmUgd2FzIG5vbmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgdmFyIF9zdWJqZWN0MiA9IGdldFN1YmplY3Qoe1xuICAgICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgICAgZnJhbWU6IG51bGwsXG4gICAgICB3aXRoUGxhY2Vob2xkZXI6IG51bGxcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgICBzdWJqZWN0OiBfc3ViamVjdDJcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBvbGRNYXhTY3JvbGwgPSBhZGRlZC5vbGRGcmFtZU1heFNjcm9sbDtcbiAgIW9sZE1heFNjcm9sbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGRyb3BwYWJsZSB3aXRoIGZyYW1lIHRvIGhhdmUgb2xkIG1heCBmcmFtZSBzY3JvbGwgd2hlbiByZW1vdmluZyBwbGFjZWhvbGRlcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG5ld0ZyYW1lID0gd2l0aE1heFNjcm9sbChmcmFtZSwgb2xkTWF4U2Nyb2xsKTtcbiAgdmFyIHN1YmplY3QgPSBnZXRTdWJqZWN0KHtcbiAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgIGZyYW1lOiBuZXdGcmFtZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IG51bGxcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBmcmFtZTogbmV3RnJhbWVcbiAgfSk7XG59O1xuXG52YXIgbW92ZVRvTmV3RHJvcHBhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIG1vdmVSZWxhdGl2ZVRvID0gX3JlZi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG5cbiAgaWYgKCFtb3ZlUmVsYXRpdmVUbykge1xuICAgIGlmIChpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm9wb3NlZCA9IHtcbiAgICAgIGRpc3BsYWNlZDogZW1wdHlHcm91cHMsXG4gICAgICBkaXNwbGFjZWRCeTogbm9EaXNwbGFjZWRCeSxcbiAgICAgIGF0OiB7XG4gICAgICAgIHR5cGU6ICdSRU9SREVSJyxcbiAgICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgICAgICBpbmRleDogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcHJvcG9zZWRQYWdlQm9yZGVyQm94Q2VudGVyID0gZ2V0UGFnZUJvcmRlckJveENlbnRlckZyb21JbXBhY3Qoe1xuICAgICAgaW1wYWN0OiBwcm9wb3NlZCxcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gICAgfSk7XG4gICAgdmFyIHdpdGhQbGFjZWhvbGRlciA9IGlzSG9tZU9mKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pID8gZGVzdGluYXRpb24gOiBhZGRQbGFjZWhvbGRlcihkZXN0aW5hdGlvbiwgZHJhZ2dhYmxlLCBkcmFnZ2FibGVzKTtcbiAgICB2YXIgaXNWaXNpYmxlSW5OZXdMb2NhdGlvbiA9IGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uKHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb246IHdpdGhQbGFjZWhvbGRlcixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByb3Bvc2VkUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IGZhbHNlLFxuICAgICAgb25seU9uTWFpbkF4aXM6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gaXNWaXNpYmxlSW5OZXdMb2NhdGlvbiA/IHByb3Bvc2VkIDogbnVsbDtcbiAgfVxuXG4gIHZhciBpc0dvaW5nQmVmb3JlVGFyZ2V0ID0gQm9vbGVhbihwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXJbZGVzdGluYXRpb24uYXhpcy5saW5lXSA8PSBtb3ZlUmVsYXRpdmVUby5wYWdlLmJvcmRlckJveC5jZW50ZXJbZGVzdGluYXRpb24uYXhpcy5saW5lXSk7XG5cbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbGF0aXZlVG8gPSBtb3ZlUmVsYXRpdmVUby5kZXNjcmlwdG9yLmluZGV4O1xuXG4gICAgaWYgKG1vdmVSZWxhdGl2ZVRvLmRlc2NyaXB0b3IuaWQgPT09IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmVUbztcbiAgICB9XG5cbiAgICBpZiAoaXNHb2luZ0JlZm9yZVRhcmdldCkge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlVG87XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF0aXZlVG8gKyAxO1xuICB9KCk7XG5cbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpO1xuICByZXR1cm4gY2FsY3VsYXRlUmVvcmRlckltcGFjdCh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGxhc3Q6IGVtcHR5R3JvdXBzLFxuICAgIGluZGV4OiBwcm9wb3NlZEluZGV4XG4gIH0pO1xufSk7XG5cbnZhciBtb3ZlQ3Jvc3NBeGlzID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBpc092ZXIgPSBfcmVmLmlzT3ZlcixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIGRlc3RpbmF0aW9uID0gZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHNvdXJjZTogaXNPdmVyLFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xuXG4gIGlmICghZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBtb3ZlUmVsYXRpdmVUbyA9IGdldENsb3Nlc3REcmFnZ2FibGUoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV3RHJvcHBhYmxlKHtcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBtb3ZlUmVsYXRpdmVUbzogbW92ZVJlbGF0aXZlVG8sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuXG4gIGlmICghaW1wYWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyKHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbFxuICB9O1xufSk7XG5cbnZhciB3aGF0SXNEcmFnZ2VkT3ZlciA9IChmdW5jdGlvbiAoaW1wYWN0KSB7XG4gIHZhciBhdCA9IGltcGFjdC5hdDtcblxuICBpZiAoIWF0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoYXQudHlwZSA9PT0gJ1JFT1JERVInKSB7XG4gICAgcmV0dXJuIGF0LmRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkO1xuICB9XG5cbiAgcmV0dXJuIGF0LmNvbWJpbmUuZHJvcHBhYmxlSWQ7XG59KTtcblxudmFyIGdldERyb3BwYWJsZU92ZXIgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVPdmVyKGltcGFjdCwgZHJvcHBhYmxlcykge1xuICB2YXIgaWQgPSB3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpO1xuICByZXR1cm4gaWQgPyBkcm9wcGFibGVzW2lkXSA6IG51bGw7XG59O1xuXG52YXIgbW92ZUluRGlyZWN0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICB0eXBlID0gX3JlZi50eXBlO1xuICB2YXIgaXNBY3R1YWxseU92ZXIgPSBnZXREcm9wcGFibGVPdmVyKHN0YXRlLmltcGFjdCwgc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzKTtcbiAgdmFyIGlzTWFpbkF4aXNNb3ZlbWVudEFsbG93ZWQgPSBCb29sZWFuKGlzQWN0dWFsbHlPdmVyKTtcbiAgdmFyIGhvbWUgPSBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJvcHBhYmxlLmlkXTtcbiAgdmFyIGlzT3ZlciA9IGlzQWN0dWFsbHlPdmVyIHx8IGhvbWU7XG4gIHZhciBkaXJlY3Rpb24gPSBpc092ZXIuYXhpcy5kaXJlY3Rpb247XG4gIHZhciBpc01vdmluZ09uTWFpbkF4aXMgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgJiYgKHR5cGUgPT09ICdNT1ZFX1VQJyB8fCB0eXBlID09PSAnTU9WRV9ET1dOJykgfHwgZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKHR5cGUgPT09ICdNT1ZFX0xFRlQnIHx8IHR5cGUgPT09ICdNT1ZFX1JJR0hUJyk7XG5cbiAgaWYgKGlzTW92aW5nT25NYWluQXhpcyAmJiAhaXNNYWluQXhpc01vdmVtZW50QWxsb3dlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IHR5cGUgPT09ICdNT1ZFX0RPV04nIHx8IHR5cGUgPT09ICdNT1ZFX1JJR0hUJztcbiAgdmFyIGRyYWdnYWJsZSA9IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gc3RhdGUuY3VycmVudC5wYWdlLmJvcmRlckJveENlbnRlcjtcbiAgdmFyIF9zdGF0ZSRkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucyxcbiAgICAgIGRyYWdnYWJsZXMgPSBfc3RhdGUkZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9zdGF0ZSRkaW1lbnNpb25zLmRyb3BwYWJsZXM7XG4gIHJldHVybiBpc01vdmluZ09uTWFpbkF4aXMgPyBtb3ZlVG9OZXh0UGxhY2Uoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBpc092ZXIsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgcHJldmlvdXNDbGllbnRTZWxlY3Rpb246IHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSkgOiBtb3ZlQ3Jvc3NBeGlzKHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBpc092ZXI6IGlzT3ZlcixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORyc7XG59XG5cbmZ1bmN0aW9uIGlzUG9zaXRpb25JbkZyYW1lKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gcnVuKHBvaW50KSB7XG4gICAgcmV0dXJuIGlzV2l0aGluVmVydGljYWwocG9pbnQueSkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHBvaW50LngpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNPdmVybGFwKGZpcnN0LCBzZWNvbmQpIHtcbiAgcmV0dXJuIGZpcnN0LmxlZnQgPCBzZWNvbmQucmlnaHQgJiYgZmlyc3QucmlnaHQgPiBzZWNvbmQubGVmdCAmJiBmaXJzdC50b3AgPCBzZWNvbmQuYm90dG9tICYmIGZpcnN0LmJvdHRvbSA+IHNlY29uZC50b3A7XG59XG5cbmZ1bmN0aW9uIGdldEZ1cnRoZXN0QXdheShfcmVmKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94ID0gX3JlZi5wYWdlQm9yZGVyQm94LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBjYW5kaWRhdGVzID0gX3JlZi5jYW5kaWRhdGVzO1xuICB2YXIgc3RhcnRDZW50ZXIgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB2YXIgc29ydGVkID0gY2FuZGlkYXRlcy5tYXAoZnVuY3Rpb24gKGNhbmRpZGF0ZSkge1xuICAgIHZhciBheGlzID0gY2FuZGlkYXRlLmF4aXM7XG4gICAgdmFyIHRhcmdldCA9IHBhdGNoKGNhbmRpZGF0ZS5heGlzLmxpbmUsIHBhZ2VCb3JkZXJCb3guY2VudGVyW2F4aXMubGluZV0sIGNhbmRpZGF0ZS5wYWdlLmJvcmRlckJveC5jZW50ZXJbYXhpcy5jcm9zc0F4aXNMaW5lXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBjYW5kaWRhdGUuZGVzY3JpcHRvci5pZCxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZShzdGFydENlbnRlciwgdGFyZ2V0KVxuICAgIH07XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5kaXN0YW5jZSAtIGEuZGlzdGFuY2U7XG4gIH0pO1xuICByZXR1cm4gc29ydGVkWzBdID8gc29ydGVkWzBdLmlkIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RHJvcHBhYmxlT3ZlciQxKF9yZWYyKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94ID0gX3JlZjIucGFnZUJvcmRlckJveCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYyLmRyYWdnYWJsZSxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmMi5kcm9wcGFibGVzO1xuICB2YXIgY2FuZGlkYXRlcyA9IHRvRHJvcHBhYmxlTGlzdChkcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0uaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFjdGl2ZSA9IGl0ZW0uc3ViamVjdC5hY3RpdmU7XG5cbiAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZ2V0SGFzT3ZlcmxhcChwYWdlQm9yZGVyQm94LCBhY3RpdmUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzUG9zaXRpb25JbkZyYW1lKGFjdGl2ZSkocGFnZUJvcmRlckJveC5jZW50ZXIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgYXhpcyA9IGl0ZW0uYXhpcztcbiAgICB2YXIgY2hpbGRDZW50ZXIgPSBhY3RpdmUuY2VudGVyW2F4aXMuY3Jvc3NBeGlzTGluZV07XG4gICAgdmFyIGNyb3NzQXhpc1N0YXJ0ID0gcGFnZUJvcmRlckJveFtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgICB2YXIgY3Jvc3NBeGlzRW5kID0gcGFnZUJvcmRlckJveFtheGlzLmNyb3NzQXhpc0VuZF07XG4gICAgdmFyIGlzQ29udGFpbmVkID0gaXNXaXRoaW4oYWN0aXZlW2F4aXMuY3Jvc3NBeGlzU3RhcnRdLCBhY3RpdmVbYXhpcy5jcm9zc0F4aXNFbmRdKTtcbiAgICB2YXIgaXNTdGFydENvbnRhaW5lZCA9IGlzQ29udGFpbmVkKGNyb3NzQXhpc1N0YXJ0KTtcbiAgICB2YXIgaXNFbmRDb250YWluZWQgPSBpc0NvbnRhaW5lZChjcm9zc0F4aXNFbmQpO1xuXG4gICAgaWYgKCFpc1N0YXJ0Q29udGFpbmVkICYmICFpc0VuZENvbnRhaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RhcnRDb250YWluZWQpIHtcbiAgICAgIHJldHVybiBjcm9zc0F4aXNTdGFydCA8IGNoaWxkQ2VudGVyO1xuICAgIH1cblxuICAgIHJldHVybiBjcm9zc0F4aXNFbmQgPiBjaGlsZENlbnRlcjtcbiAgfSk7XG5cbiAgaWYgKCFjYW5kaWRhdGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZXNbMF0uZGVzY3JpcHRvci5pZDtcbiAgfVxuXG4gIHJldHVybiBnZXRGdXJ0aGVzdEF3YXkoe1xuICAgIHBhZ2VCb3JkZXJCb3g6IHBhZ2VCb3JkZXJCb3gsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgY2FuZGlkYXRlczogY2FuZGlkYXRlc1xuICB9KTtcbn1cblxudmFyIG9mZnNldFJlY3RCeVBvc2l0aW9uID0gZnVuY3Rpb24gb2Zmc2V0UmVjdEJ5UG9zaXRpb24ocmVjdCwgcG9pbnQpIHtcbiAgcmV0dXJuIGNzc0JveE1vZGVsLmdldFJlY3Qob2Zmc2V0QnlQb3NpdGlvbihyZWN0LCBwb2ludCkpO1xufTtcblxudmFyIHdpdGhEcm9wcGFibGVTY3JvbGwgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZSwgYXJlYSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBhcmVhO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFJlY3RCeVBvc2l0aW9uKGFyZWEsIGZyYW1lLnNjcm9sbC5kaWZmLnZhbHVlKTtcbn0pO1xuXG5mdW5jdGlvbiBnZXRJc0Rpc3BsYWNlZChfcmVmKSB7XG4gIHZhciBkaXNwbGFjZWQgPSBfcmVmLmRpc3BsYWNlZCxcbiAgICAgIGlkID0gX3JlZi5pZDtcbiAgcmV0dXJuIEJvb2xlYW4oZGlzcGxhY2VkLnZpc2libGVbaWRdIHx8IGRpc3BsYWNlZC5pbnZpc2libGVbaWRdKTtcbn1cblxuZnVuY3Rpb24gYXRJbmRleChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGNsb3Nlc3QgPSBfcmVmLmNsb3Nlc3QsXG4gICAgICBpbkhvbWVMaXN0ID0gX3JlZi5pbkhvbWVMaXN0O1xuXG4gIGlmICghY2xvc2VzdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFpbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuIGNsb3Nlc3QuZGVzY3JpcHRvci5pbmRleDtcbiAgfVxuXG4gIGlmIChjbG9zZXN0LmRlc2NyaXB0b3IuaW5kZXggPiBkcmFnZ2FibGUuZGVzY3JpcHRvci5pbmRleCkge1xuICAgIHJldHVybiBjbG9zZXN0LmRlc2NyaXB0b3IuaW5kZXggLSAxO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3QuZGVzY3JpcHRvci5pbmRleDtcbn1cblxudmFyIGdldFJlb3JkZXJJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciB0YXJnZXRSZWN0ID0gX3JlZjIucGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGwsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmMi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYyLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmMi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGxhc3QgPSBfcmVmMi5sYXN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmMi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmMi5hZnRlckNyaXRpY2FsO1xuICB2YXIgYXhpcyA9IGRlc3RpbmF0aW9uLmF4aXM7XG4gIHZhciBkaXNwbGFjZWRCeSA9IGdldERpc3BsYWNlZEJ5KGRlc3RpbmF0aW9uLmF4aXMsIGRyYWdnYWJsZS5kaXNwbGFjZUJ5KTtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRpc3BsYWNlZEJ5LnZhbHVlO1xuICB2YXIgdGFyZ2V0U3RhcnQgPSB0YXJnZXRSZWN0W2F4aXMuc3RhcnRdO1xuICB2YXIgdGFyZ2V0RW5kID0gdGFyZ2V0UmVjdFtheGlzLmVuZF07XG4gIHZhciB3aXRob3V0RHJhZ2dpbmcgPSByZW1vdmVEcmFnZ2FibGVGcm9tTGlzdChkcmFnZ2FibGUsIGluc2lkZURlc3RpbmF0aW9uKTtcbiAgdmFyIGNsb3Nlc3QgPSBmaW5kKHdpdGhvdXREcmFnZ2luZywgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGlkID0gY2hpbGQuZGVzY3JpcHRvci5pZDtcbiAgICB2YXIgY2hpbGRDZW50ZXIgPSBjaGlsZC5wYWdlLmJvcmRlckJveC5jZW50ZXJbYXhpcy5saW5lXTtcbiAgICB2YXIgZGlkU3RhcnRBZnRlckNyaXRpY2FsJDEgPSBkaWRTdGFydEFmdGVyQ3JpdGljYWwoaWQsIGFmdGVyQ3JpdGljYWwpO1xuICAgIHZhciBpc0Rpc3BsYWNlZCA9IGdldElzRGlzcGxhY2VkKHtcbiAgICAgIGRpc3BsYWNlZDogbGFzdCxcbiAgICAgIGlkOiBpZFxuICAgIH0pO1xuXG4gICAgaWYgKGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbCQxKSB7XG4gICAgICBpZiAoaXNEaXNwbGFjZWQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldEVuZCA8PSBjaGlsZENlbnRlcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFN0YXJ0IDwgY2hpbGRDZW50ZXIgLSBkaXNwbGFjZW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGxhY2VkKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0RW5kIDw9IGNoaWxkQ2VudGVyICsgZGlzcGxhY2VtZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRTdGFydCA8IGNoaWxkQ2VudGVyO1xuICB9KTtcbiAgdmFyIG5ld0luZGV4ID0gYXRJbmRleCh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgY2xvc2VzdDogY2xvc2VzdCxcbiAgICBpbkhvbWVMaXN0OiBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKVxuICB9KTtcbiAgcmV0dXJuIGNhbGN1bGF0ZVJlb3JkZXJJbXBhY3Qoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGxhc3Q6IGxhc3QsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGluZGV4OiBuZXdJbmRleFxuICB9KTtcbn0pO1xuXG52YXIgY29tYmluZVRocmVzaG9sZERpdmlzb3IgPSA0O1xudmFyIGdldENvbWJpbmVJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgdGFyZ2V0UmVjdCA9IF9yZWYucGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGwsXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuICB2YXIgZGlzcGxhY2VkQnkgPSBnZXREaXNwbGFjZWRCeShkZXN0aW5hdGlvbi5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSBkaXNwbGFjZWRCeS52YWx1ZTtcbiAgdmFyIHRhcmdldFN0YXJ0ID0gdGFyZ2V0UmVjdFtheGlzLnN0YXJ0XTtcbiAgdmFyIHRhcmdldEVuZCA9IHRhcmdldFJlY3RbYXhpcy5lbmRdO1xuICB2YXIgd2l0aG91dERyYWdnaW5nID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbik7XG4gIHZhciBjb21iaW5lV2l0aCA9IGZpbmQod2l0aG91dERyYWdnaW5nLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB2YXIgaWQgPSBjaGlsZC5kZXNjcmlwdG9yLmlkO1xuICAgIHZhciBjaGlsZFJlY3QgPSBjaGlsZC5wYWdlLmJvcmRlckJveDtcbiAgICB2YXIgY2hpbGRTaXplID0gY2hpbGRSZWN0W2F4aXMuc2l6ZV07XG4gICAgdmFyIHRocmVzaG9sZCA9IGNoaWxkU2l6ZSAvIGNvbWJpbmVUaHJlc2hvbGREaXZpc29yO1xuICAgIHZhciBkaWRTdGFydEFmdGVyQ3JpdGljYWwkMSA9IGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbChpZCwgYWZ0ZXJDcml0aWNhbCk7XG4gICAgdmFyIGlzRGlzcGxhY2VkID0gZ2V0SXNEaXNwbGFjZWQoe1xuICAgICAgZGlzcGxhY2VkOiBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQsXG4gICAgICBpZDogaWRcbiAgICB9KTtcblxuICAgIGlmIChkaWRTdGFydEFmdGVyQ3JpdGljYWwkMSkge1xuICAgICAgaWYgKGlzRGlzcGxhY2VkKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRFbmQgPiBjaGlsZFJlY3RbYXhpcy5zdGFydF0gKyB0aHJlc2hvbGQgJiYgdGFyZ2V0RW5kIDwgY2hpbGRSZWN0W2F4aXMuZW5kXSAtIHRocmVzaG9sZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFN0YXJ0ID4gY2hpbGRSZWN0W2F4aXMuc3RhcnRdIC0gZGlzcGxhY2VtZW50ICsgdGhyZXNob2xkICYmIHRhcmdldFN0YXJ0IDwgY2hpbGRSZWN0W2F4aXMuZW5kXSAtIGRpc3BsYWNlbWVudCAtIHRocmVzaG9sZDtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwbGFjZWQpIHtcbiAgICAgIHJldHVybiB0YXJnZXRFbmQgPiBjaGlsZFJlY3RbYXhpcy5zdGFydF0gKyBkaXNwbGFjZW1lbnQgKyB0aHJlc2hvbGQgJiYgdGFyZ2V0RW5kIDwgY2hpbGRSZWN0W2F4aXMuZW5kXSArIGRpc3BsYWNlbWVudCAtIHRocmVzaG9sZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0U3RhcnQgPiBjaGlsZFJlY3RbYXhpcy5zdGFydF0gKyB0aHJlc2hvbGQgJiYgdGFyZ2V0U3RhcnQgPCBjaGlsZFJlY3RbYXhpcy5lbmRdIC0gdGhyZXNob2xkO1xuICB9KTtcblxuICBpZiAoIWNvbWJpbmVXaXRoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW1wYWN0ID0ge1xuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBkaXNwbGFjZWQ6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICBhdDoge1xuICAgICAgdHlwZTogJ0NPTUJJTkUnLFxuICAgICAgY29tYmluZToge1xuICAgICAgICBkcmFnZ2FibGVJZDogY29tYmluZVdpdGguZGVzY3JpcHRvci5pZCxcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWRcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBpbXBhY3Q7XG59KTtcblxudmFyIGdldERyYWdJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VPZmZzZXQgPSBfcmVmLnBhZ2VPZmZzZXQsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIHBhZ2VCb3JkZXJCb3ggPSBvZmZzZXRSZWN0QnlQb3NpdGlvbihkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3gsIHBhZ2VPZmZzZXQpO1xuICB2YXIgZGVzdGluYXRpb25JZCA9IGdldERyb3BwYWJsZU92ZXIkMSh7XG4gICAgcGFnZUJvcmRlckJveDogcGFnZUJvcmRlckJveCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzXG4gIH0pO1xuXG4gIGlmICghZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiBub0ltcGFjdDtcbiAgfVxuXG4gIHZhciBkZXN0aW5hdGlvbiA9IGRyb3BwYWJsZXNbZGVzdGluYXRpb25JZF07XG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBwYWdlQm9yZGVyQm94V2l0aERyb3BwYWJsZVNjcm9sbCA9IHdpdGhEcm9wcGFibGVTY3JvbGwoZGVzdGluYXRpb24sIHBhZ2VCb3JkZXJCb3gpO1xuICByZXR1cm4gZ2V0Q29tYmluZUltcGFjdCh7XG4gICAgcGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGw6IHBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSkgfHwgZ2V0UmVvcmRlckltcGFjdCh7XG4gICAgcGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGw6IHBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgbGFzdDogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xufSk7XG5cbnZhciBwYXRjaERyb3BwYWJsZU1hcCA9IChmdW5jdGlvbiAoZHJvcHBhYmxlcywgdXBkYXRlZCkge1xuICB2YXIgX2V4dGVuZHMyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlcywgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbdXBkYXRlZC5kZXNjcmlwdG9yLmlkXSA9IHVwZGF0ZWQsIF9leHRlbmRzMikpO1xufSk7XG5cbnZhciBjbGVhclVudXNlZFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gY2xlYXJVbnVzZWRQbGFjZWhvbGRlcihfcmVmKSB7XG4gIHZhciBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXM7XG4gIHZhciBsYXN0ID0gd2hhdElzRHJhZ2dlZE92ZXIocHJldmlvdXNJbXBhY3QpO1xuICB2YXIgbm93ID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcblxuICBpZiAoIWxhc3QpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIGlmIChsYXN0ID09PSBub3cpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIHZhciBsYXN0RHJvcHBhYmxlID0gZHJvcHBhYmxlc1tsYXN0XTtcblxuICBpZiAoIWxhc3REcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIHZhciB1cGRhdGVkID0gcmVtb3ZlUGxhY2Vob2xkZXIobGFzdERyb3BwYWJsZSk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChkcm9wcGFibGVzLCB1cGRhdGVkKTtcbn07XG5cbnZhciByZWNvbXB1dGVQbGFjZWhvbGRlcnMgPSAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmMi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZjIuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmMi5kcm9wcGFibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmMi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIGltcGFjdCA9IF9yZWYyLmltcGFjdDtcbiAgdmFyIGNsZWFuZWQgPSBjbGVhclVudXNlZFBsYWNlaG9sZGVyKHtcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlc1xuICB9KTtcbiAgdmFyIGlzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG5cbiAgaWYgKCFpc092ZXIpIHtcbiAgICByZXR1cm4gY2xlYW5lZDtcbiAgfVxuXG4gIHZhciBkcm9wcGFibGUgPSBkcm9wcGFibGVzW2lzT3Zlcl07XG5cbiAgaWYgKGlzSG9tZU9mKGRyYWdnYWJsZSwgZHJvcHBhYmxlKSkge1xuICAgIHJldHVybiBjbGVhbmVkO1xuICB9XG5cbiAgaWYgKGRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBjbGVhbmVkO1xuICB9XG5cbiAgdmFyIHBhdGNoZWQgPSBhZGRQbGFjZWhvbGRlcihkcm9wcGFibGUsIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcyk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChjbGVhbmVkLCBwYXRjaGVkKTtcbn0pO1xuXG52YXIgdXBkYXRlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBmb3JjZWRDbGllbnRTZWxlY3Rpb24gPSBfcmVmLmNsaWVudFNlbGVjdGlvbixcbiAgICAgIGZvcmNlZERpbWVuc2lvbnMgPSBfcmVmLmRpbWVuc2lvbnMsXG4gICAgICBmb3JjZWRWaWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBmb3JjZWRJbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0ID0gX3JlZi5zY3JvbGxKdW1wUmVxdWVzdDtcbiAgdmFyIHZpZXdwb3J0ID0gZm9yY2VkVmlld3BvcnQgfHwgc3RhdGUudmlld3BvcnQ7XG4gIHZhciBkaW1lbnNpb25zID0gZm9yY2VkRGltZW5zaW9ucyB8fCBzdGF0ZS5kaW1lbnNpb25zO1xuICB2YXIgY2xpZW50U2VsZWN0aW9uID0gZm9yY2VkQ2xpZW50U2VsZWN0aW9uIHx8IHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbjtcbiAgdmFyIG9mZnNldCA9IHN1YnRyYWN0KGNsaWVudFNlbGVjdGlvbiwgc3RhdGUuaW5pdGlhbC5jbGllbnQuc2VsZWN0aW9uKTtcbiAgdmFyIGNsaWVudCA9IHtcbiAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICBzZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChzdGF0ZS5pbml0aWFsLmNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIG9mZnNldClcbiAgfTtcbiAgdmFyIHBhZ2UgPSB7XG4gICAgc2VsZWN0aW9uOiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQpLFxuICAgIGJvcmRlckJveENlbnRlcjogYWRkKGNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50KSxcbiAgICBvZmZzZXQ6IGFkZChjbGllbnQub2Zmc2V0LCB2aWV3cG9ydC5zY3JvbGwuZGlmZi52YWx1ZSlcbiAgfTtcbiAgdmFyIGN1cnJlbnQgPSB7XG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZVxuICB9O1xuXG4gIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnQ09MTEVDVElORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIGN1cnJlbnQ6IGN1cnJlbnRcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIG5ld0ltcGFjdCA9IGZvcmNlZEltcGFjdCB8fCBnZXREcmFnSW1wYWN0KHtcbiAgICBwYWdlT2Zmc2V0OiBwYWdlLm9mZnNldCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzLFxuICAgIHByZXZpb3VzSW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHZhciB3aXRoVXBkYXRlZFBsYWNlaG9sZGVycyA9IHJlY29tcHV0ZVBsYWNlaG9sZGVycyh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaW1wYWN0OiBuZXdJbXBhY3QsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzXG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXM6IHdpdGhVcGRhdGVkUGxhY2Vob2xkZXJzXG4gICAgfSxcbiAgICBpbXBhY3Q6IG5ld0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IHNjcm9sbEp1bXBSZXF1ZXN0IHx8IG51bGwsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBzY3JvbGxKdW1wUmVxdWVzdCA/IGZhbHNlIDogbnVsbFxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmZ1bmN0aW9uIGdldERyYWdnYWJsZXMkMShpZHMsIGRyYWdnYWJsZXMpIHtcbiAgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGRyYWdnYWJsZXNbaWRdO1xuICB9KTtcbn1cblxudmFyIHJlY29tcHV0ZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlID0gX3JlZi5mb3JjZVNob3VsZEFuaW1hdGU7XG4gIHZhciBsYXN0ID0gaW1wYWN0LmRpc3BsYWNlZDtcbiAgdmFyIGFmdGVyRHJhZ2dpbmcgPSBnZXREcmFnZ2FibGVzJDEobGFzdC5hbGwsIGRyYWdnYWJsZXMpO1xuICB2YXIgZGlzcGxhY2VkID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBhZnRlckRyYWdnaW5nLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkaXNwbGFjZWRCeTogaW1wYWN0LmRpc3BsYWNlZEJ5LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZvcmNlU2hvdWxkQW5pbWF0ZSxcbiAgICBsYXN0OiBsYXN0XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGltcGFjdCwge1xuICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkXG4gIH0pO1xufSk7XG5cbnZhciBnZXRDbGllbnRCb3JkZXJCb3hDZW50ZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHJldHVybiBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG59KTtcblxudmFyIHJlZnJlc2hTbmFwID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBmb3JjZWREaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgZm9yY2VkVmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICAhKHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbmVlZHNWaXNpYmlsaXR5Q2hlY2sgPSBzdGF0ZS5pbXBhY3Q7XG4gIHZhciB2aWV3cG9ydCA9IGZvcmNlZFZpZXdwb3J0IHx8IHN0YXRlLnZpZXdwb3J0O1xuICB2YXIgZGltZW5zaW9ucyA9IGZvcmNlZERpbWVuc2lvbnMgfHwgc3RhdGUuZGltZW5zaW9ucztcbiAgdmFyIGRyYWdnYWJsZXMgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gZGltZW5zaW9ucy5kcm9wcGFibGVzO1xuICB2YXIgZHJhZ2dhYmxlID0gZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgaXNPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIobmVlZHNWaXNpYmlsaXR5Q2hlY2spO1xuICAhaXNPdmVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTXVzdCBiZSBvdmVyIGEgZGVzdGluYXRpb24gaW4gU05BUCBtb3ZlbWVudCBtb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZGVzdGluYXRpb24gPSBkcm9wcGFibGVzW2lzT3Zlcl07XG4gIHZhciBpbXBhY3QgPSByZWNvbXB1dGUoe1xuICAgIGltcGFjdDogbmVlZHNWaXNpYmlsaXR5Q2hlY2ssXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzXG4gIH0pO1xuICB2YXIgY2xpZW50U2VsZWN0aW9uID0gZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHJldHVybiB1cGRhdGUoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbn0pO1xuXG52YXIgZ2V0SG9tZUxvY2F0aW9uID0gKGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7XG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGRlc2NyaXB0b3IuaW5kZXgsXG4gICAgZHJvcHBhYmxlSWQ6IGRlc2NyaXB0b3IuZHJvcHBhYmxlSWRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0TGlmdEVmZmVjdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBob21lID0gX3JlZi5ob21lLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoaG9tZS5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG4gIHZhciBpbnNpZGVIb21lID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShob21lLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgcmF3SW5kZXggPSBpbnNpZGVIb21lLmluZGV4T2YoZHJhZ2dhYmxlKTtcbiAgIShyYXdJbmRleCAhPT0gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZHJhZ2dhYmxlIHRvIGJlIGluc2lkZSBob21lIGxpc3QnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBhZnRlckRyYWdnaW5nID0gaW5zaWRlSG9tZS5zbGljZShyYXdJbmRleCArIDEpO1xuICB2YXIgZWZmZWN0ZWQgPSBhZnRlckRyYWdnaW5nLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGl0ZW0pIHtcbiAgICBwcmV2aW91c1tpdGVtLmRlc2NyaXB0b3IuaWRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcHJldmlvdXM7XG4gIH0sIHt9KTtcbiAgdmFyIGFmdGVyQ3JpdGljYWwgPSB7XG4gICAgaW5WaXJ0dWFsTGlzdDogaG9tZS5kZXNjcmlwdG9yLm1vZGUgPT09ICd2aXJ0dWFsJyxcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgZWZmZWN0ZWQ6IGVmZmVjdGVkXG4gIH07XG4gIHZhciBkaXNwbGFjZWQgPSBnZXREaXNwbGFjZW1lbnRHcm91cHMoe1xuICAgIGFmdGVyRHJhZ2dpbmc6IGFmdGVyRHJhZ2dpbmcsXG4gICAgZGVzdGluYXRpb246IGhvbWUsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGxhc3Q6IG51bGwsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgfSk7XG4gIHZhciBpbXBhY3QgPSB7XG4gICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGF0OiB7XG4gICAgICB0eXBlOiAnUkVPUkRFUicsXG4gICAgICBkZXN0aW5hdGlvbjogZ2V0SG9tZUxvY2F0aW9uKGRyYWdnYWJsZS5kZXNjcmlwdG9yKVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH07XG59KTtcblxudmFyIHBhdGNoRGltZW5zaW9uTWFwID0gKGZ1bmN0aW9uIChkaW1lbnNpb25zLCB1cGRhdGVkKSB7XG4gIHJldHVybiB7XG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IHBhdGNoRHJvcHBhYmxlTWFwKGRpbWVuc2lvbnMuZHJvcHBhYmxlcywgdXBkYXRlZClcbiAgfTtcbn0pO1xuXG52YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59O1xudmFyIGZpbmlzaCA9IGZ1bmN0aW9uIGZpbmlzaChrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59O1xuXG52YXIgb2Zmc2V0RHJhZ2dhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0LFxuICAgICAgaW5pdGlhbFdpbmRvd1Njcm9sbCA9IF9yZWYuaW5pdGlhbFdpbmRvd1Njcm9sbDtcbiAgdmFyIGNsaWVudCA9IGNzc0JveE1vZGVsLm9mZnNldChkcmFnZ2FibGUuY2xpZW50LCBvZmZzZXQpO1xuICB2YXIgcGFnZSA9IGNzc0JveE1vZGVsLndpdGhTY3JvbGwoY2xpZW50LCBpbml0aWFsV2luZG93U2Nyb2xsKTtcblxuICB2YXIgbW92ZWQgPSBfZXh0ZW5kcyh7fSwgZHJhZ2dhYmxlLCB7XG4gICAgcGxhY2Vob2xkZXI6IF9leHRlbmRzKHt9LCBkcmFnZ2FibGUucGxhY2Vob2xkZXIsIHtcbiAgICAgIGNsaWVudDogY2xpZW50XG4gICAgfSksXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZVxuICB9KTtcblxuICByZXR1cm4gbW92ZWQ7XG59KTtcblxudmFyIGdldEZyYW1lID0gKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuICAhZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBEcm9wcGFibGUgdG8gaGF2ZSBhIGZyYW1lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZnJhbWU7XG59KTtcblxudmFyIGFkanVzdEFkZGl0aW9uc0ZvclNjcm9sbENoYW5nZXMgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGFkZGl0aW9ucyA9IF9yZWYuYWRkaXRpb25zLFxuICAgICAgdXBkYXRlZERyb3BwYWJsZXMgPSBfcmVmLnVwZGF0ZWREcm9wcGFibGVzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgd2luZG93U2Nyb2xsQ2hhbmdlID0gdmlld3BvcnQuc2Nyb2xsLmRpZmYudmFsdWU7XG4gIHJldHVybiBhZGRpdGlvbnMubWFwKGZ1bmN0aW9uIChkcmFnZ2FibGUpIHtcbiAgICB2YXIgZHJvcHBhYmxlSWQgPSBkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZDtcbiAgICB2YXIgbW9kaWZpZWQgPSB1cGRhdGVkRHJvcHBhYmxlc1tkcm9wcGFibGVJZF07XG4gICAgdmFyIGZyYW1lID0gZ2V0RnJhbWUobW9kaWZpZWQpO1xuICAgIHZhciBkcm9wcGFibGVTY3JvbGxDaGFuZ2UgPSBmcmFtZS5zY3JvbGwuZGlmZi52YWx1ZTtcbiAgICB2YXIgdG90YWxDaGFuZ2UgPSBhZGQod2luZG93U2Nyb2xsQ2hhbmdlLCBkcm9wcGFibGVTY3JvbGxDaGFuZ2UpO1xuICAgIHZhciBtb3ZlZCA9IG9mZnNldERyYWdnYWJsZSh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIG9mZnNldDogdG90YWxDaGFuZ2UsXG4gICAgICBpbml0aWFsV2luZG93U2Nyb2xsOiB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbFxuICAgIH0pO1xuICAgIHJldHVybiBtb3ZlZDtcbiAgfSk7XG59KTtcblxudmFyIHB1Ymxpc2hXaGlsZURyYWdnaW5nSW5WaXJ0dWFsID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBwdWJsaXNoZWQgPSBfcmVmLnB1Ymxpc2hlZDtcbiAgc3RhcnQoKTtcbiAgdmFyIHdpdGhTY3JvbGxDaGFuZ2UgPSBwdWJsaXNoZWQubW9kaWZpZWQubWFwKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbdXBkYXRlLmRyb3BwYWJsZUlkXTtcbiAgICB2YXIgc2Nyb2xsZWQgPSBzY3JvbGxEcm9wcGFibGUoZXhpc3RpbmcsIHVwZGF0ZS5zY3JvbGwpO1xuICAgIHJldHVybiBzY3JvbGxlZDtcbiAgfSk7XG5cbiAgdmFyIGRyb3BwYWJsZXMgPSBfZXh0ZW5kcyh7fSwgc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzLCB7fSwgdG9Ecm9wcGFibGVNYXAod2l0aFNjcm9sbENoYW5nZSkpO1xuXG4gIHZhciB1cGRhdGVkQWRkaXRpb25zID0gdG9EcmFnZ2FibGVNYXAoYWRqdXN0QWRkaXRpb25zRm9yU2Nyb2xsQ2hhbmdlcyh7XG4gICAgYWRkaXRpb25zOiBwdWJsaXNoZWQuYWRkaXRpb25zLFxuICAgIHVwZGF0ZWREcm9wcGFibGVzOiBkcm9wcGFibGVzLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydFxuICB9KSk7XG5cbiAgdmFyIGRyYWdnYWJsZXMgPSBfZXh0ZW5kcyh7fSwgc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzLCB7fSwgdXBkYXRlZEFkZGl0aW9ucyk7XG5cbiAgcHVibGlzaGVkLnJlbW92YWxzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgZGVsZXRlIGRyYWdnYWJsZXNbaWRdO1xuICB9KTtcbiAgdmFyIGRpbWVuc2lvbnMgPSB7XG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlcyxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzXG4gIH07XG4gIHZhciB3YXNPdmVySWQgPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpO1xuICB2YXIgd2FzT3ZlciA9IHdhc092ZXJJZCA/IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1t3YXNPdmVySWRdIDogbnVsbDtcbiAgdmFyIGRyYWdnYWJsZSA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgaG9tZSA9IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcm9wcGFibGUuaWRdO1xuXG4gIHZhciBfZ2V0TGlmdEVmZmVjdCA9IGdldExpZnRFZmZlY3Qoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGhvbWU6IGhvbWUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnRcbiAgfSksXG4gICAgICBvbkxpZnRJbXBhY3QgPSBfZ2V0TGlmdEVmZmVjdC5pbXBhY3QsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX2dldExpZnRFZmZlY3QuYWZ0ZXJDcml0aWNhbDtcblxuICB2YXIgcHJldmlvdXNJbXBhY3QgPSB3YXNPdmVyICYmIHdhc092ZXIuaXNDb21iaW5lRW5hYmxlZCA/IHN0YXRlLmltcGFjdCA6IG9uTGlmdEltcGFjdDtcbiAgdmFyIGltcGFjdCA9IGdldERyYWdJbXBhY3Qoe1xuICAgIHBhZ2VPZmZzZXQ6IHN0YXRlLmN1cnJlbnQucGFnZS5vZmZzZXQsXG4gICAgZHJhZ2dhYmxlOiBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXSxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbiAgZmluaXNoKCk7XG5cbiAgdmFyIGRyYWdnaW5nU3RhdGUgPSBfZXh0ZW5kcyh7XG4gICAgcGhhc2U6ICdEUkFHR0lORydcbiAgfSwgc3RhdGUsIHtcbiAgICBwaGFzZTogJ0RSQUdHSU5HJyxcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBvbkxpZnRJbXBhY3Q6IG9uTGlmdEltcGFjdCxcbiAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWwsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBmYWxzZVxuICB9KTtcblxuICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgIHJldHVybiBkcmFnZ2luZ1N0YXRlO1xuICB9XG5cbiAgdmFyIGRyb3BQZW5kaW5nID0gX2V4dGVuZHMoe1xuICAgIHBoYXNlOiAnRFJPUF9QRU5ESU5HJ1xuICB9LCBkcmFnZ2luZ1N0YXRlLCB7XG4gICAgcGhhc2U6ICdEUk9QX1BFTkRJTkcnLFxuICAgIHJlYXNvbjogc3RhdGUucmVhc29uLFxuICAgIGlzV2FpdGluZzogZmFsc2VcbiAgfSk7XG5cbiAgcmV0dXJuIGRyb3BQZW5kaW5nO1xufSk7XG5cbnZhciBpc1NuYXBwaW5nID0gZnVuY3Rpb24gaXNTbmFwcGluZyhzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUubW92ZW1lbnRNb2RlID09PSAnU05BUCc7XG59O1xuXG52YXIgcG9zdERyb3BwYWJsZUNoYW5nZSA9IGZ1bmN0aW9uIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIHVwZGF0ZWQsIGlzRW5hYmxlZENoYW5naW5nKSB7XG4gIHZhciBkaW1lbnNpb25zID0gcGF0Y2hEaW1lbnNpb25NYXAoc3RhdGUuZGltZW5zaW9ucywgdXBkYXRlZCk7XG5cbiAgaWYgKCFpc1NuYXBwaW5nKHN0YXRlKSB8fCBpc0VuYWJsZWRDaGFuZ2luZykge1xuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9uc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlZnJlc2hTbmFwKHtcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgZGltZW5zaW9uczogZGltZW5zaW9uc1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIHJlbW92ZVNjcm9sbEp1bXBSZXF1ZXN0KHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5pc0RyYWdnaW5nICYmIHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnRFJBR0dJTkcnXG4gICAgfSwgc3RhdGUsIHtcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBudWxsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG5cbnZhciBpZGxlID0ge1xuICBwaGFzZTogJ0lETEUnLFxuICBjb21wbGV0ZWQ6IG51bGwsXG4gIHNob3VsZEZsdXNoOiBmYWxzZVxufTtcbnZhciByZWR1Y2VyID0gKGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBpZGxlO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRkxVU0gnKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBpZGxlLCB7XG4gICAgICBzaG91bGRGbHVzaDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdJRExFJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdJTklUSUFMX1BVQkxJU0ggbXVzdCBjb21lIGFmdGVyIGEgSURMRSBwaGFzZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIGNyaXRpY2FsID0gX2FjdGlvbiRwYXlsb2FkLmNyaXRpY2FsLFxuICAgICAgICBjbGllbnRTZWxlY3Rpb24gPSBfYWN0aW9uJHBheWxvYWQuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICB2aWV3cG9ydCA9IF9hY3Rpb24kcGF5bG9hZC52aWV3cG9ydCxcbiAgICAgICAgZGltZW5zaW9ucyA9IF9hY3Rpb24kcGF5bG9hZC5kaW1lbnNpb25zLFxuICAgICAgICBtb3ZlbWVudE1vZGUgPSBfYWN0aW9uJHBheWxvYWQubW92ZW1lbnRNb2RlO1xuICAgIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgICB2YXIgaG9tZSA9IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1tjcml0aWNhbC5kcm9wcGFibGUuaWRdO1xuICAgIHZhciBjbGllbnQgPSB7XG4gICAgICBzZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgIGJvcmRlckJveENlbnRlcjogZHJhZ2dhYmxlLmNsaWVudC5ib3JkZXJCb3guY2VudGVyLFxuICAgICAgb2Zmc2V0OiBvcmlnaW5cbiAgICB9O1xuICAgIHZhciBpbml0aWFsID0ge1xuICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICBwYWdlOiB7XG4gICAgICAgIHNlbGVjdGlvbjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKSxcbiAgICAgICAgYm9yZGVyQm94Q2VudGVyOiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwpLFxuICAgICAgICBvZmZzZXQ6IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuZGlmZi52YWx1ZSlcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBpc1dpbmRvd1Njcm9sbEFsbG93ZWQgPSB0b0Ryb3BwYWJsZUxpc3QoZGltZW5zaW9ucy5kcm9wcGFibGVzKS5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuICFpdGVtLmlzRml4ZWRPblBhZ2U7XG4gICAgfSk7XG5cbiAgICB2YXIgX2dldExpZnRFZmZlY3QgPSBnZXRMaWZ0RWZmZWN0KHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgaG9tZTogaG9tZSxcbiAgICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICAgIH0pLFxuICAgICAgICBpbXBhY3QgPSBfZ2V0TGlmdEVmZmVjdC5pbXBhY3QsXG4gICAgICAgIGFmdGVyQ3JpdGljYWwgPSBfZ2V0TGlmdEVmZmVjdC5hZnRlckNyaXRpY2FsO1xuXG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHBoYXNlOiAnRFJBR0dJTkcnLFxuICAgICAgaXNEcmFnZ2luZzogdHJ1ZSxcbiAgICAgIGNyaXRpY2FsOiBjcml0aWNhbCxcbiAgICAgIG1vdmVtZW50TW9kZTogbW92ZW1lbnRNb2RlLFxuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgIGluaXRpYWw6IGluaXRpYWwsXG4gICAgICBjdXJyZW50OiBpbml0aWFsLFxuICAgICAgaXNXaW5kb3dTY3JvbGxBbGxvd2VkOiBpc1dpbmRvd1Njcm9sbEFsbG93ZWQsXG4gICAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWwsXG4gICAgICBvbkxpZnRJbXBhY3Q6IGltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBudWxsLFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnQ09MTEVDVElPTl9TVEFSVElORycpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDb2xsZWN0aW9uIGNhbm5vdCBzdGFydCBmcm9tIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfcmVzdWx0ID0gX2V4dGVuZHMoe1xuICAgICAgcGhhc2U6ICdDT0xMRUNUSU5HJ1xuICAgIH0sIHN0YXRlLCB7XG4gICAgICBwaGFzZTogJ0NPTExFQ1RJTkcnXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1BVQkxJU0hfV0hJTEVfRFJBR0dJTkcnKSB7XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVW5leHBlY3RlZCBcIiArIGFjdGlvbi50eXBlICsgXCIgcmVjZWl2ZWQgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBwdWJsaXNoV2hpbGVEcmFnZ2luZ0luVmlydHVhbCh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBwdWJsaXNoZWQ6IGFjdGlvbi5wYXlsb2FkXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdNT1ZFJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBhY3Rpb24udHlwZSArIFwiIG5vdCBwZXJtaXR0ZWQgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfY2xpZW50U2VsZWN0aW9uID0gYWN0aW9uLnBheWxvYWQuY2xpZW50O1xuXG4gICAgaWYgKGlzRXF1YWwoX2NsaWVudFNlbGVjdGlvbiwgc3RhdGUuY3VycmVudC5jbGllbnQuc2VsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgY2xpZW50U2VsZWN0aW9uOiBfY2xpZW50U2VsZWN0aW9uLFxuICAgICAgaW1wYWN0OiBpc1NuYXBwaW5nKHN0YXRlKSA/IHN0YXRlLmltcGFjdCA6IG51bGxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9EUk9QUEFCTEVfU0NST0xMJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiByZW1vdmVTY3JvbGxKdW1wUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICAgIHJldHVybiByZW1vdmVTY3JvbGxKdW1wUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgYWN0aW9uLnR5cGUgKyBcIiBub3QgcGVybWl0dGVkIGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkMiA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBpZCA9IF9hY3Rpb24kcGF5bG9hZDIuaWQsXG4gICAgICAgIG5ld1Njcm9sbCA9IF9hY3Rpb24kcGF5bG9hZDIubmV3U2Nyb2xsO1xuICAgIHZhciB0YXJnZXQgPSBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbaWRdO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsZWQgPSBzY3JvbGxEcm9wcGFibGUodGFyZ2V0LCBuZXdTY3JvbGwpO1xuICAgIHJldHVybiBwb3N0RHJvcHBhYmxlQ2hhbmdlKHN0YXRlLCBzY3JvbGxlZCwgZmFsc2UpO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnVVBEQVRFX0RST1BQQUJMRV9JU19FTkFCTEVEJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkF0dGVtcHRpbmcgdG8gbW92ZSBpbiBhbiB1bnN1cHBvcnRlZCBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDMgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgX2lkID0gX2FjdGlvbiRwYXlsb2FkMy5pZCxcbiAgICAgICAgaXNFbmFibGVkID0gX2FjdGlvbiRwYXlsb2FkMy5pc0VuYWJsZWQ7XG4gICAgdmFyIF90YXJnZXQgPSBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbX2lkXTtcbiAgICAhX3RhcmdldCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgZmluZCBEcm9wcGFibGVbaWQ6IFwiICsgX2lkICsgXCJdIHRvIHRvZ2dsZSBpdHMgZW5hYmxlZCBzdGF0ZVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgIShfdGFyZ2V0LmlzRW5hYmxlZCAhPT0gaXNFbmFibGVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJUcnlpbmcgdG8gc2V0IGRyb3BwYWJsZSBpc0VuYWJsZWQgdG8gXCIgKyBTdHJpbmcoaXNFbmFibGVkKSArIFwiXFxuICAgICAgYnV0IGl0IGlzIGFscmVhZHkgXCIgKyBTdHJpbmcoX3RhcmdldC5pc0VuYWJsZWQpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgdXBkYXRlZCA9IF9leHRlbmRzKHt9LCBfdGFyZ2V0LCB7XG4gICAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIHVwZGF0ZWQsIHRydWUpO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnVVBEQVRFX0RST1BQQUJMRV9JU19DT01CSU5FX0VOQUJMRUQnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQXR0ZW1wdGluZyB0byBtb3ZlIGluIGFuIHVuc3VwcG9ydGVkIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkNCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBfaWQyID0gX2FjdGlvbiRwYXlsb2FkNC5pZCxcbiAgICAgICAgaXNDb21iaW5lRW5hYmxlZCA9IF9hY3Rpb24kcGF5bG9hZDQuaXNDb21iaW5lRW5hYmxlZDtcbiAgICB2YXIgX3RhcmdldDIgPSBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbX2lkMl07XG4gICAgIV90YXJnZXQyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBmaW5kIERyb3BwYWJsZVtpZDogXCIgKyBfaWQyICsgXCJdIHRvIHRvZ2dsZSBpdHMgaXNDb21iaW5lRW5hYmxlZCBzdGF0ZVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgIShfdGFyZ2V0Mi5pc0NvbWJpbmVFbmFibGVkICE9PSBpc0NvbWJpbmVFbmFibGVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJUcnlpbmcgdG8gc2V0IGRyb3BwYWJsZSBpc0NvbWJpbmVFbmFibGVkIHRvIFwiICsgU3RyaW5nKGlzQ29tYmluZUVuYWJsZWQpICsgXCJcXG4gICAgICBidXQgaXQgaXMgYWxyZWFkeSBcIiArIFN0cmluZyhfdGFyZ2V0Mi5pc0NvbWJpbmVFbmFibGVkKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF91cGRhdGVkID0gX2V4dGVuZHMoe30sIF90YXJnZXQyLCB7XG4gICAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgX3VwZGF0ZWQsIHRydWUpO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnTU9WRV9CWV9XSU5ET1dfU0NST0xMJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBtb3ZlIGJ5IHdpbmRvdyBpbiBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgIXN0YXRlLmlzV2luZG93U2Nyb2xsQWxsb3dlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1dpbmRvdyBzY3JvbGxpbmcgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgZm9yIGZpeGVkIGxpc3RzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfbmV3U2Nyb2xsID0gYWN0aW9uLnBheWxvYWQubmV3U2Nyb2xsO1xuXG4gICAgaWYgKGlzRXF1YWwoc3RhdGUudmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQsIF9uZXdTY3JvbGwpKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlU2Nyb2xsSnVtcFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgIHZhciBfdmlld3BvcnQgPSBzY3JvbGxWaWV3cG9ydChzdGF0ZS52aWV3cG9ydCwgX25ld1Njcm9sbCk7XG5cbiAgICBpZiAoaXNTbmFwcGluZyhzdGF0ZSkpIHtcbiAgICAgIHJldHVybiByZWZyZXNoU25hcCh7XG4gICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgdmlld3BvcnQ6IF92aWV3cG9ydFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICB2aWV3cG9ydDogX3ZpZXdwb3J0XG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfVklFV1BPUlRfTUFYX1NDUk9MTCcpIHtcbiAgICBpZiAoIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHZhciBtYXhTY3JvbGwgPSBhY3Rpb24ucGF5bG9hZC5tYXhTY3JvbGw7XG5cbiAgICBpZiAoaXNFcXVhbChtYXhTY3JvbGwsIHN0YXRlLnZpZXdwb3J0LnNjcm9sbC5tYXgpKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHdpdGhNYXhTY3JvbGwgPSBfZXh0ZW5kcyh7fSwgc3RhdGUudmlld3BvcnQsIHtcbiAgICAgIHNjcm9sbDogX2V4dGVuZHMoe30sIHN0YXRlLnZpZXdwb3J0LnNjcm9sbCwge1xuICAgICAgICBtYXg6IG1heFNjcm9sbFxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0RSQUdHSU5HJ1xuICAgIH0sIHN0YXRlLCB7XG4gICAgICB2aWV3cG9ydDogd2l0aE1heFNjcm9sbFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnTU9WRV9VUCcgfHwgYWN0aW9uLnR5cGUgPT09ICdNT1ZFX0RPV04nIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9MRUZUJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfUklHSFQnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGFjdGlvbi50eXBlICsgXCIgcmVjZWl2ZWQgd2hpbGUgbm90IGluIERSQUdHSU5HIHBoYXNlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfcmVzdWx0MiA9IG1vdmVJbkRpcmVjdGlvbih7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICB0eXBlOiBhY3Rpb24udHlwZVxuICAgIH0pO1xuXG4gICAgaWYgKCFfcmVzdWx0Mikge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgaW1wYWN0OiBfcmVzdWx0Mi5pbXBhY3QsXG4gICAgICBjbGllbnRTZWxlY3Rpb246IF9yZXN1bHQyLmNsaWVudFNlbGVjdGlvbixcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBfcmVzdWx0Mi5zY3JvbGxKdW1wUmVxdWVzdFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgIHZhciByZWFzb24gPSBhY3Rpb24ucGF5bG9hZC5yZWFzb247XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IG1vdmUgaW50byB0aGUgRFJPUF9QRU5ESU5HIHBoYXNlIGZyb20gdGhlIENPTExFQ1RJTkcgcGhhc2UnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgbmV3U3RhdGUgPSBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0RST1BfUEVORElORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgcGhhc2U6ICdEUk9QX1BFTkRJTkcnLFxuICAgICAgaXNXYWl0aW5nOiB0cnVlLFxuICAgICAgcmVhc29uOiByZWFzb25cbiAgICB9KTtcblxuICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkNSA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBjb21wbGV0ZWQgPSBfYWN0aW9uJHBheWxvYWQ1LmNvbXBsZXRlZCxcbiAgICAgICAgZHJvcER1cmF0aW9uID0gX2FjdGlvbiRwYXlsb2FkNS5kcm9wRHVyYXRpb24sXG4gICAgICAgIG5ld0hvbWVDbGllbnRPZmZzZXQgPSBfYWN0aW9uJHBheWxvYWQ1Lm5ld0hvbWVDbGllbnRPZmZzZXQ7XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBhbmltYXRlIGRyb3AgZnJvbSBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9yZXN1bHQzID0ge1xuICAgICAgcGhhc2U6ICdEUk9QX0FOSU1BVElORycsXG4gICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICAgIGRyb3BEdXJhdGlvbjogZHJvcER1cmF0aW9uLFxuICAgICAgbmV3SG9tZUNsaWVudE9mZnNldDogbmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgIGRpbWVuc2lvbnM6IHN0YXRlLmRpbWVuc2lvbnNcbiAgICB9O1xuICAgIHJldHVybiBfcmVzdWx0MztcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgdmFyIF9jb21wbGV0ZWQgPSBhY3Rpb24ucGF5bG9hZC5jb21wbGV0ZWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBoYXNlOiAnSURMRScsXG4gICAgICBjb21wbGV0ZWQ6IF9jb21wbGV0ZWQsXG4gICAgICBzaG91bGRGbHVzaDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufSk7XG5cbnZhciBiZWZvcmVJbml0aWFsQ2FwdHVyZSA9IGZ1bmN0aW9uIGJlZm9yZUluaXRpYWxDYXB0dXJlKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQkVGT1JFX0lOSVRJQUxfQ0FQVFVSRScsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBsaWZ0ID0gZnVuY3Rpb24gbGlmdChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0xJRlQnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgaW5pdGlhbFB1Ymxpc2ggPSBmdW5jdGlvbiBpbml0aWFsUHVibGlzaChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0lOSVRJQUxfUFVCTElTSCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBwdWJsaXNoV2hpbGVEcmFnZ2luZyA9IGZ1bmN0aW9uIHB1Ymxpc2hXaGlsZURyYWdnaW5nKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUFVCTElTSF9XSElMRV9EUkFHR0lORycsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBjb2xsZWN0aW9uU3RhcnRpbmcgPSBmdW5jdGlvbiBjb2xsZWN0aW9uU3RhcnRpbmcoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0NPTExFQ1RJT05fU1RBUlRJTkcnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlU2Nyb2xsKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0RST1BQQUJMRV9TQ1JPTEwnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0RST1BQQUJMRV9JU19FTkFCTEVEJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0RST1BQQUJMRV9JU19DT01CSU5FX0VOQUJMRUQnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbW92ZSA9IGZ1bmN0aW9uIG1vdmUoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIG1vdmVCeVdpbmRvd1Njcm9sbCA9IGZ1bmN0aW9uIG1vdmVCeVdpbmRvd1Njcm9sbChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfQllfV0lORE9XX1NDUk9MTCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX1ZJRVdQT1JUX01BWF9TQ1JPTEwnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbW92ZVVwID0gZnVuY3Rpb24gbW92ZVVwKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX1VQJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIG1vdmVEb3duID0gZnVuY3Rpb24gbW92ZURvd24oKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfRE9XTicsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBtb3ZlUmlnaHQgPSBmdW5jdGlvbiBtb3ZlUmlnaHQoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfUklHSFQnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgbW92ZUxlZnQgPSBmdW5jdGlvbiBtb3ZlTGVmdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9MRUZUJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0ZMVVNIJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIGFuaW1hdGVEcm9wID0gZnVuY3Rpb24gYW5pbWF0ZURyb3AoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0FOSU1BVEUnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgY29tcGxldGVEcm9wID0gZnVuY3Rpb24gY29tcGxldGVEcm9wKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUF9DT01QTEVURScsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RST1AnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgZHJvcFBlbmRpbmcgPSBmdW5jdGlvbiBkcm9wUGVuZGluZyhhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RST1BfUEVORElORycsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBkcm9wQW5pbWF0aW9uRmluaXNoZWQgPSBmdW5jdGlvbiBkcm9wQW5pbWF0aW9uRmluaXNoZWQoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RST1BfQU5JTUFUSU9OX0ZJTklTSEVEJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xuXG5mdW5jdGlvbiBjaGVja0luZGV4ZXMoaW5zaWRlRGVzdGluYXRpb24pIHtcbiAgaWYgKGluc2lkZURlc3RpbmF0aW9uLmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluZGV4ZXMgPSBpbnNpZGVEZXN0aW5hdGlvbi5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gZC5kZXNjcmlwdG9yLmluZGV4O1xuICB9KTtcbiAgdmFyIGVycm9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgaW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjdXJyZW50ID0gaW5kZXhlc1tpXTtcbiAgICB2YXIgcHJldmlvdXMgPSBpbmRleGVzW2kgLSAxXTtcblxuICAgIGlmIChjdXJyZW50ICE9PSBwcmV2aW91cyArIDEpIHtcbiAgICAgIGVycm9yc1tjdXJyZW50XSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBmb3JtYXR0ZWQgPSBpbmRleGVzLm1hcChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgaGFzRXJyb3IgPSBCb29sZWFuKGVycm9yc1tpbmRleF0pO1xuICAgIHJldHVybiBoYXNFcnJvciA/IFwiW1xcdUQ4M0RcXHVERDI1XCIgKyBpbmRleCArIFwiXVwiIDogXCJcIiArIGluZGV4O1xuICB9KS5qb2luKCcsICcpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgIERldGVjdGVkIG5vbi1jb25zZWN1dGl2ZSA8RHJhZ2dhYmxlIC8+IGluZGV4ZXMuXFxuXFxuICAgIChUaGlzIGNhbiBjYXVzZSB1bmV4cGVjdGVkIGJ1Z3MpXFxuXFxuICAgIFwiICsgZm9ybWF0dGVkICsgXCJcXG4gIFwiKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEaW1lbnNpb25zKGNyaXRpY2FsLCBkaW1lbnNpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShjcml0aWNhbC5kcm9wcGFibGUuaWQsIGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyk7XG4gICAgY2hlY2tJbmRleGVzKGluc2lkZURlc3RpbmF0aW9uKTtcbiAgfVxufVxuXG52YXIgbGlmdCQxID0gKGZ1bmN0aW9uIChtYXJzaGFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gJ0xJRlQnKSB7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfYWN0aW9uJHBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgICAgIGlkID0gX2FjdGlvbiRwYXlsb2FkLmlkLFxuICAgICAgICAgICAgY2xpZW50U2VsZWN0aW9uID0gX2FjdGlvbiRwYXlsb2FkLmNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgICAgIG1vdmVtZW50TW9kZSA9IF9hY3Rpb24kcGF5bG9hZC5tb3ZlbWVudE1vZGU7XG4gICAgICAgIHZhciBpbml0aWFsID0gZ2V0U3RhdGUoKTtcblxuICAgICAgICBpZiAoaW5pdGlhbC5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgICAgICAgIGRpc3BhdGNoKGNvbXBsZXRlRHJvcCh7XG4gICAgICAgICAgICBjb21wbGV0ZWQ6IGluaXRpYWwuY29tcGxldGVkXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgIShnZXRTdGF0ZSgpLnBoYXNlID09PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCBwaGFzZSB0byBzdGFydCBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGRpc3BhdGNoKGZsdXNoKCkpO1xuICAgICAgICBkaXNwYXRjaChiZWZvcmVJbml0aWFsQ2FwdHVyZSh7XG4gICAgICAgICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgICAgICAgIG1vdmVtZW50TW9kZTogbW92ZW1lbnRNb2RlXG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIHNjcm9sbE9wdGlvbnMgPSB7XG4gICAgICAgICAgc2hvdWxkUHVibGlzaEltbWVkaWF0ZWx5OiBtb3ZlbWVudE1vZGUgPT09ICdTTkFQJ1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHtcbiAgICAgICAgICBkcmFnZ2FibGVJZDogaWQsXG4gICAgICAgICAgc2Nyb2xsT3B0aW9uczogc2Nyb2xsT3B0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBfbWFyc2hhbCRzdGFydFB1Ymxpc2ggPSBtYXJzaGFsLnN0YXJ0UHVibGlzaGluZyhyZXF1ZXN0KSxcbiAgICAgICAgICAgIGNyaXRpY2FsID0gX21hcnNoYWwkc3RhcnRQdWJsaXNoLmNyaXRpY2FsLFxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IF9tYXJzaGFsJHN0YXJ0UHVibGlzaC5kaW1lbnNpb25zLFxuICAgICAgICAgICAgdmlld3BvcnQgPSBfbWFyc2hhbCRzdGFydFB1Ymxpc2gudmlld3BvcnQ7XG5cbiAgICAgICAgdmFsaWRhdGVEaW1lbnNpb25zKGNyaXRpY2FsLCBkaW1lbnNpb25zKTtcbiAgICAgICAgZGlzcGF0Y2goaW5pdGlhbFB1Ymxpc2goe1xuICAgICAgICAgIGNyaXRpY2FsOiBjcml0aWNhbCxcbiAgICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgICAgICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICAgIG1vdmVtZW50TW9kZTogbW92ZW1lbnRNb2RlLFxuICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICAgICAgICB9KSk7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIHN0eWxlID0gKGZ1bmN0aW9uIChtYXJzaGFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgICAgICAgbWFyc2hhbC5kcmFnZ2luZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJykge1xuICAgICAgICAgIG1hcnNoYWwuZHJvcHBpbmcoYWN0aW9uLnBheWxvYWQuY29tcGxldGVkLnJlc3VsdC5yZWFzb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRkxVU0gnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScpIHtcbiAgICAgICAgICBtYXJzaGFsLnJlc3RpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgY3VydmVzID0ge1xuICBvdXRPZlRoZVdheTogJ2N1YmljLWJlemllcigwLjIsIDAsIDAsIDEpJyxcbiAgZHJvcDogJ2N1YmljLWJlemllciguMiwxLC4xLDEpJ1xufTtcbnZhciBjb21iaW5lID0ge1xuICBvcGFjaXR5OiB7XG4gICAgZHJvcDogMCxcbiAgICBjb21iaW5pbmc6IDAuN1xuICB9LFxuICBzY2FsZToge1xuICAgIGRyb3A6IDAuNzVcbiAgfVxufTtcbnZhciB0aW1pbmdzID0ge1xuICBvdXRPZlRoZVdheTogMC4yLFxuICBtaW5Ecm9wVGltZTogMC4zMyxcbiAgbWF4RHJvcFRpbWU6IDAuNTVcbn07XG52YXIgb3V0T2ZUaGVXYXlUaW1pbmcgPSB0aW1pbmdzLm91dE9mVGhlV2F5ICsgXCJzIFwiICsgY3VydmVzLm91dE9mVGhlV2F5O1xudmFyIHRyYW5zaXRpb25zID0ge1xuICBmbHVpZDogXCJvcGFjaXR5IFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcsXG4gIHNuYXA6IFwidHJhbnNmb3JtIFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcgKyBcIiwgb3BhY2l0eSBcIiArIG91dE9mVGhlV2F5VGltaW5nLFxuICBkcm9wOiBmdW5jdGlvbiBkcm9wKGR1cmF0aW9uKSB7XG4gICAgdmFyIHRpbWluZyA9IGR1cmF0aW9uICsgXCJzIFwiICsgY3VydmVzLmRyb3A7XG4gICAgcmV0dXJuIFwidHJhbnNmb3JtIFwiICsgdGltaW5nICsgXCIsIG9wYWNpdHkgXCIgKyB0aW1pbmc7XG4gIH0sXG4gIG91dE9mVGhlV2F5OiBcInRyYW5zZm9ybSBcIiArIG91dE9mVGhlV2F5VGltaW5nLFxuICBwbGFjZWhvbGRlcjogXCJoZWlnaHQgXCIgKyBvdXRPZlRoZVdheVRpbWluZyArIFwiLCB3aWR0aCBcIiArIG91dE9mVGhlV2F5VGltaW5nICsgXCIsIG1hcmdpbiBcIiArIG91dE9mVGhlV2F5VGltaW5nXG59O1xuXG52YXIgbW92ZVRvID0gZnVuY3Rpb24gbW92ZVRvKG9mZnNldCkge1xuICByZXR1cm4gaXNFcXVhbChvZmZzZXQsIG9yaWdpbikgPyBudWxsIDogXCJ0cmFuc2xhdGUoXCIgKyBvZmZzZXQueCArIFwicHgsIFwiICsgb2Zmc2V0LnkgKyBcInB4KVwiO1xufTtcblxudmFyIHRyYW5zZm9ybXMgPSB7XG4gIG1vdmVUbzogbW92ZVRvLFxuICBkcm9wOiBmdW5jdGlvbiBkcm9wKG9mZnNldCwgaXNDb21iaW5pbmcpIHtcbiAgICB2YXIgdHJhbnNsYXRlID0gbW92ZVRvKG9mZnNldCk7XG5cbiAgICBpZiAoIXRyYW5zbGF0ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFpc0NvbWJpbmluZykge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNsYXRlICsgXCIgc2NhbGUoXCIgKyBjb21iaW5lLnNjYWxlLmRyb3AgKyBcIilcIjtcbiAgfVxufTtcblxudmFyIG1pbkRyb3BUaW1lID0gdGltaW5ncy5taW5Ecm9wVGltZSxcbiAgICBtYXhEcm9wVGltZSA9IHRpbWluZ3MubWF4RHJvcFRpbWU7XG52YXIgZHJvcFRpbWVSYW5nZSA9IG1heERyb3BUaW1lIC0gbWluRHJvcFRpbWU7XG52YXIgbWF4RHJvcFRpbWVBdERpc3RhbmNlID0gMTUwMDtcbnZhciBjYW5jZWxEcm9wTW9kaWZpZXIgPSAwLjY7XG52YXIgZ2V0RHJvcER1cmF0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjdXJyZW50ID0gX3JlZi5jdXJyZW50LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgcmVhc29uID0gX3JlZi5yZWFzb247XG4gIHZhciBkaXN0YW5jZSQxID0gZGlzdGFuY2UoY3VycmVudCwgZGVzdGluYXRpb24pO1xuXG4gIGlmIChkaXN0YW5jZSQxIDw9IDApIHtcbiAgICByZXR1cm4gbWluRHJvcFRpbWU7XG4gIH1cblxuICBpZiAoZGlzdGFuY2UkMSA+PSBtYXhEcm9wVGltZUF0RGlzdGFuY2UpIHtcbiAgICByZXR1cm4gbWF4RHJvcFRpbWU7XG4gIH1cblxuICB2YXIgcGVyY2VudGFnZSA9IGRpc3RhbmNlJDEgLyBtYXhEcm9wVGltZUF0RGlzdGFuY2U7XG4gIHZhciBkdXJhdGlvbiA9IG1pbkRyb3BUaW1lICsgZHJvcFRpbWVSYW5nZSAqIHBlcmNlbnRhZ2U7XG4gIHZhciB3aXRoRHVyYXRpb24gPSByZWFzb24gPT09ICdDQU5DRUwnID8gZHVyYXRpb24gKiBjYW5jZWxEcm9wTW9kaWZpZXIgOiBkdXJhdGlvbjtcbiAgcmV0dXJuIE51bWJlcih3aXRoRHVyYXRpb24udG9GaXhlZCgyKSk7XG59KTtcblxudmFyIGdldE5ld0hvbWVDbGllbnRPZmZzZXQgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIGRyYWdnYWJsZXMgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gZGltZW5zaW9ucy5kcm9wcGFibGVzO1xuICB2YXIgZHJvcHBhYmxlSWQgPSB3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpO1xuICB2YXIgZGVzdGluYXRpb24gPSBkcm9wcGFibGVJZCA/IGRyb3BwYWJsZXNbZHJvcHBhYmxlSWRdIDogbnVsbDtcbiAgdmFyIGhvbWUgPSBkcm9wcGFibGVzW2RyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkXTtcbiAgdmFyIG5ld0NsaWVudENlbnRlciA9IGdldENsaWVudEJvcmRlckJveENlbnRlcih7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsLFxuICAgIGRyb3BwYWJsZTogZGVzdGluYXRpb24gfHwgaG9tZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG4gIHZhciBvZmZzZXQgPSBzdWJ0cmFjdChuZXdDbGllbnRDZW50ZXIsIGRyYWdnYWJsZS5jbGllbnQuYm9yZGVyQm94LmNlbnRlcik7XG4gIHJldHVybiBvZmZzZXQ7XG59KTtcblxudmFyIGdldERyb3BJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICByZWFzb24gPSBfcmVmLnJlYXNvbixcbiAgICAgIGxhc3RJbXBhY3QgPSBfcmVmLmxhc3RJbXBhY3QsXG4gICAgICBob21lID0gX3JlZi5ob21lLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgb25MaWZ0SW1wYWN0ID0gX3JlZi5vbkxpZnRJbXBhY3Q7XG5cbiAgaWYgKCFsYXN0SW1wYWN0LmF0IHx8IHJlYXNvbiAhPT0gJ0RST1AnKSB7XG4gICAgdmFyIHJlY29tcHV0ZWRIb21lSW1wYWN0ID0gcmVjb21wdXRlKHtcbiAgICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgICBpbXBhY3Q6IG9uTGlmdEltcGFjdCxcbiAgICAgIGRlc3RpbmF0aW9uOiBob21lLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltcGFjdDogcmVjb21wdXRlZEhvbWVJbXBhY3QsXG4gICAgICBkaWREcm9wSW5zaWRlRHJvcHBhYmxlOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICBpZiAobGFzdEltcGFjdC5hdC50eXBlID09PSAnUkVPUkRFUicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW1wYWN0OiBsYXN0SW1wYWN0LFxuICAgICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZTogdHJ1ZVxuICAgIH07XG4gIH1cblxuICB2YXIgd2l0aG91dE1vdmVtZW50ID0gX2V4dGVuZHMoe30sIGxhc3RJbXBhY3QsIHtcbiAgICBkaXNwbGFjZWQ6IGVtcHR5R3JvdXBzXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgaW1wYWN0OiB3aXRob3V0TW92ZW1lbnQsXG4gICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZTogdHJ1ZVxuICB9O1xufSk7XG5cbnZhciBkcm9wJDEgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZSxcbiAgICAgIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gJ0RST1AnKSB7XG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgdmFyIHJlYXNvbiA9IGFjdGlvbi5wYXlsb2FkLnJlYXNvbjtcblxuICAgICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICAgICAgZGlzcGF0Y2goZHJvcFBlbmRpbmcoe1xuICAgICAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdJRExFJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpc1dhaXRpbmdGb3JEcm9wID0gc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnICYmIHN0YXRlLmlzV2FpdGluZztcbiAgICAgICEhaXNXYWl0aW5nRm9yRHJvcCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0EgRFJPUCBhY3Rpb24gb2NjdXJyZWQgd2hpbGUgRFJPUF9QRU5ESU5HIGFuZCBzdGlsbCB3YWl0aW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBkcm9wIGluIHBoYXNlOiBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgY3JpdGljYWwgPSBzdGF0ZS5jcml0aWNhbDtcbiAgICAgIHZhciBkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucztcbiAgICAgIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcblxuICAgICAgdmFyIF9nZXREcm9wSW1wYWN0ID0gZ2V0RHJvcEltcGFjdCh7XG4gICAgICAgIHJlYXNvbjogcmVhc29uLFxuICAgICAgICBsYXN0SW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWwsXG4gICAgICAgIG9uTGlmdEltcGFjdDogc3RhdGUub25MaWZ0SW1wYWN0LFxuICAgICAgICBob21lOiBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJvcHBhYmxlLmlkXSxcbiAgICAgICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0LFxuICAgICAgICBkcmFnZ2FibGVzOiBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXNcbiAgICAgIH0pLFxuICAgICAgICAgIGltcGFjdCA9IF9nZXREcm9wSW1wYWN0LmltcGFjdCxcbiAgICAgICAgICBkaWREcm9wSW5zaWRlRHJvcHBhYmxlID0gX2dldERyb3BJbXBhY3QuZGlkRHJvcEluc2lkZURyb3BwYWJsZTtcblxuICAgICAgdmFyIGRlc3RpbmF0aW9uID0gZGlkRHJvcEluc2lkZURyb3BwYWJsZSA/IHRyeUdldERlc3RpbmF0aW9uKGltcGFjdCkgOiBudWxsO1xuICAgICAgdmFyIGNvbWJpbmUgPSBkaWREcm9wSW5zaWRlRHJvcHBhYmxlID8gdHJ5R2V0Q29tYmluZShpbXBhY3QpIDogbnVsbDtcbiAgICAgIHZhciBzb3VyY2UgPSB7XG4gICAgICAgIGluZGV4OiBjcml0aWNhbC5kcmFnZ2FibGUuaW5kZXgsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBjcml0aWNhbC5kcm9wcGFibGUuaWRcbiAgICAgIH07XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgIHR5cGU6IGRyYWdnYWJsZS5kZXNjcmlwdG9yLnR5cGUsXG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICByZWFzb246IHJlYXNvbixcbiAgICAgICAgbW9kZTogc3RhdGUubW92ZW1lbnRNb2RlLFxuICAgICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICAgIGNvbWJpbmU6IGNvbWJpbmVcbiAgICAgIH07XG4gICAgICB2YXIgbmV3SG9tZUNsaWVudE9mZnNldCA9IGdldE5ld0hvbWVDbGllbnRPZmZzZXQoe1xuICAgICAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgYWZ0ZXJDcml0aWNhbDogc3RhdGUuYWZ0ZXJDcml0aWNhbFxuICAgICAgfSk7XG4gICAgICB2YXIgY29tcGxldGVkID0ge1xuICAgICAgICBjcml0aWNhbDogc3RhdGUuY3JpdGljYWwsXG4gICAgICAgIGFmdGVyQ3JpdGljYWw6IHN0YXRlLmFmdGVyQ3JpdGljYWwsXG4gICAgICAgIHJlc3VsdDogcmVzdWx0LFxuICAgICAgICBpbXBhY3Q6IGltcGFjdFxuICAgICAgfTtcbiAgICAgIHZhciBpc0FuaW1hdGlvblJlcXVpcmVkID0gIWlzRXF1YWwoc3RhdGUuY3VycmVudC5jbGllbnQub2Zmc2V0LCBuZXdIb21lQ2xpZW50T2Zmc2V0KSB8fCBCb29sZWFuKHJlc3VsdC5jb21iaW5lKTtcblxuICAgICAgaWYgKCFpc0FuaW1hdGlvblJlcXVpcmVkKSB7XG4gICAgICAgIGRpc3BhdGNoKGNvbXBsZXRlRHJvcCh7XG4gICAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWRcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkcm9wRHVyYXRpb24gPSBnZXREcm9wRHVyYXRpb24oe1xuICAgICAgICBjdXJyZW50OiBzdGF0ZS5jdXJyZW50LmNsaWVudC5vZmZzZXQsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBuZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgfSk7XG4gICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgbmV3SG9tZUNsaWVudE9mZnNldDogbmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgICAgZHJvcER1cmF0aW9uOiBkcm9wRHVyYXRpb24sXG4gICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkXG4gICAgICB9O1xuICAgICAgZGlzcGF0Y2goYW5pbWF0ZURyb3AoYXJncykpO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGdldFdpbmRvd1Njcm9sbCA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJpbmRpbmcodXBkYXRlKSB7XG4gIHJldHVybiB7XG4gICAgZXZlbnROYW1lOiAnc2Nyb2xsJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9LFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gd2luZG93ICYmIGV2ZW50LnRhcmdldCAhPT0gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxMaXN0ZW5lcihfcmVmKSB7XG4gIHZhciBvbldpbmRvd1Njcm9sbCA9IF9yZWYub25XaW5kb3dTY3JvbGw7XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2Nyb2xsKCkge1xuICAgIG9uV2luZG93U2Nyb2xsKGdldFdpbmRvd1Njcm9sbCgpKTtcbiAgfVxuXG4gIHZhciBzY2hlZHVsZWQgPSByYWZTY2hkKHVwZGF0ZVNjcm9sbCk7XG4gIHZhciBiaW5kaW5nID0gZ2V0V2luZG93U2Nyb2xsQmluZGluZyhzY2hlZHVsZWQpO1xuICB2YXIgdW5iaW5kID0gbm9vcDtcblxuICBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gdW5iaW5kICE9PSBub29wO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgISFpc0FjdGl2ZSgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IHNjcm9sbCBsaXN0ZW5lciB3aGVuIGFscmVhZHkgYWN0aXZlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHVuYmluZCA9IGJpbmRFdmVudHMod2luZG93LCBbYmluZGluZ10pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAhaXNBY3RpdmUoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdG9wIHNjcm9sbCBsaXN0ZW5lciB3aGVuIG5vdCBhY3RpdmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgc2NoZWR1bGVkLmNhbmNlbCgpO1xuICAgIHVuYmluZCgpO1xuICAgIHVuYmluZCA9IG5vb3A7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBzdG9wOiBzdG9wLFxuICAgIGlzQWN0aXZlOiBpc0FjdGl2ZVxuICB9O1xufVxuXG52YXIgc2hvdWxkRW5kID0gZnVuY3Rpb24gc2hvdWxkRW5kKGFjdGlvbikge1xuICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScgfHwgYWN0aW9uLnR5cGUgPT09ICdGTFVTSCc7XG59O1xuXG52YXIgc2Nyb2xsTGlzdGVuZXIgPSAoZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHZhciBsaXN0ZW5lciA9IGdldFNjcm9sbExpc3RlbmVyKHtcbiAgICBvbldpbmRvd1Njcm9sbDogZnVuY3Rpb24gb25XaW5kb3dTY3JvbGwobmV3U2Nyb2xsKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChtb3ZlQnlXaW5kb3dTY3JvbGwoe1xuICAgICAgICBuZXdTY3JvbGw6IG5ld1Njcm9sbFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBpZiAoIWxpc3RlbmVyLmlzQWN0aXZlKCkgJiYgYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgICAgIGxpc3RlbmVyLnN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaXN0ZW5lci5pc0FjdGl2ZSgpICYmIHNob3VsZEVuZChhY3Rpb24pKSB7XG4gICAgICAgIGxpc3RlbmVyLnN0b3AoKTtcbiAgICAgIH1cblxuICAgICAgbmV4dChhY3Rpb24pO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGdldEV4cGlyaW5nQW5ub3VuY2UgPSAoZnVuY3Rpb24gKGFubm91bmNlKSB7XG4gIHZhciB3YXNDYWxsZWQgPSBmYWxzZTtcbiAgdmFyIGlzRXhwaXJlZCA9IGZhbHNlO1xuICB2YXIgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaXNFeHBpcmVkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdChtZXNzYWdlKSB7XG4gICAgaWYgKHdhc0NhbGxlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnQW5ub3VuY2VtZW50IGFscmVhZHkgbWFkZS4gTm90IG1ha2luZyBhIHNlY29uZCBhbm5vdW5jZW1lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNFeHBpcmVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgICBBbm5vdW5jZW1lbnRzIGNhbm5vdCBiZSBtYWRlIGFzeW5jaHJvbm91c2x5LlxcbiAgICAgICAgRGVmYXVsdCBtZXNzYWdlIGhhcyBhbHJlYWR5IGJlZW4gYW5ub3VuY2VkLlxcbiAgICAgIFwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXNDYWxsZWQgPSB0cnVlO1xuICAgIGFubm91bmNlKG1lc3NhZ2UpO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICB9O1xuXG4gIHJlc3VsdC53YXNDYWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdhc0NhbGxlZDtcbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBnZXRBc3luY01hcnNoYWwgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgZW50cmllcyA9IFtdO1xuXG4gIHZhciBleGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZSh0aW1lcklkKSB7XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4KGVudHJpZXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS50aW1lcklkID09PSB0aW1lcklkO1xuICAgIH0pO1xuICAgICEoaW5kZXggIT09IC0xKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBmaW5kIHRpbWVyJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF9lbnRyaWVzJHNwbGljZSA9IGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKSxcbiAgICAgICAgZW50cnkgPSBfZW50cmllcyRzcGxpY2VbMF07XG5cbiAgICBlbnRyeS5jYWxsYmFjaygpO1xuICB9O1xuXG4gIHZhciBhZGQgPSBmdW5jdGlvbiBhZGQoZm4pIHtcbiAgICB2YXIgdGltZXJJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGV4ZWN1dGUodGltZXJJZCk7XG4gICAgfSk7XG4gICAgdmFyIGVudHJ5ID0ge1xuICAgICAgdGltZXJJZDogdGltZXJJZCxcbiAgICAgIGNhbGxiYWNrOiBmblxuICAgIH07XG4gICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBpZiAoIWVudHJpZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNoYWxsb3cgPSBbXS5jb25jYXQoZW50cmllcyk7XG4gICAgZW50cmllcy5sZW5ndGggPSAwO1xuICAgIHNoYWxsb3cuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIGNsZWFyVGltZW91dChlbnRyeS50aW1lcklkKTtcbiAgICAgIGVudHJ5LmNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhZGQ6IGFkZCxcbiAgICBmbHVzaDogZmx1c2hcbiAgfTtcbn0pO1xuXG52YXIgYXJlTG9jYXRpb25zRXF1YWwgPSBmdW5jdGlvbiBhcmVMb2NhdGlvbnNFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gIGlmIChmaXJzdCA9PSBudWxsICYmIHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZmlyc3QgPT0gbnVsbCB8fCBzZWNvbmQgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmaXJzdC5kcm9wcGFibGVJZCA9PT0gc2Vjb25kLmRyb3BwYWJsZUlkICYmIGZpcnN0LmluZGV4ID09PSBzZWNvbmQuaW5kZXg7XG59O1xudmFyIGlzQ29tYmluZUVxdWFsID0gZnVuY3Rpb24gaXNDb21iaW5lRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICBpZiAoZmlyc3QgPT0gbnVsbCAmJiBzZWNvbmQgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGZpcnN0ID09IG51bGwgfHwgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmlyc3QuZHJhZ2dhYmxlSWQgPT09IHNlY29uZC5kcmFnZ2FibGVJZCAmJiBmaXJzdC5kcm9wcGFibGVJZCA9PT0gc2Vjb25kLmRyb3BwYWJsZUlkO1xufTtcbnZhciBpc0NyaXRpY2FsRXF1YWwgPSBmdW5jdGlvbiBpc0NyaXRpY2FsRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGlzRHJhZ2dhYmxlRXF1YWwgPSBmaXJzdC5kcmFnZ2FibGUuaWQgPT09IHNlY29uZC5kcmFnZ2FibGUuaWQgJiYgZmlyc3QuZHJhZ2dhYmxlLmRyb3BwYWJsZUlkID09PSBzZWNvbmQuZHJhZ2dhYmxlLmRyb3BwYWJsZUlkICYmIGZpcnN0LmRyYWdnYWJsZS50eXBlID09PSBzZWNvbmQuZHJhZ2dhYmxlLnR5cGUgJiYgZmlyc3QuZHJhZ2dhYmxlLmluZGV4ID09PSBzZWNvbmQuZHJhZ2dhYmxlLmluZGV4O1xuICB2YXIgaXNEcm9wcGFibGVFcXVhbCA9IGZpcnN0LmRyb3BwYWJsZS5pZCA9PT0gc2Vjb25kLmRyb3BwYWJsZS5pZCAmJiBmaXJzdC5kcm9wcGFibGUudHlwZSA9PT0gc2Vjb25kLmRyb3BwYWJsZS50eXBlO1xuICByZXR1cm4gaXNEcmFnZ2FibGVFcXVhbCAmJiBpc0Ryb3BwYWJsZUVxdWFsO1xufTtcblxudmFyIHdpdGhUaW1pbmdzID0gZnVuY3Rpb24gd2l0aFRpbWluZ3Moa2V5LCBmbikge1xuICBzdGFydCgpO1xuICBmbigpO1xuICBmaW5pc2goKTtcbn07XG5cbnZhciBnZXREcmFnU3RhcnQgPSBmdW5jdGlvbiBnZXREcmFnU3RhcnQoY3JpdGljYWwsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICBkcmFnZ2FibGVJZDogY3JpdGljYWwuZHJhZ2dhYmxlLmlkLFxuICAgIHR5cGU6IGNyaXRpY2FsLmRyb3BwYWJsZS50eXBlLFxuICAgIHNvdXJjZToge1xuICAgICAgZHJvcHBhYmxlSWQ6IGNyaXRpY2FsLmRyb3BwYWJsZS5pZCxcbiAgICAgIGluZGV4OiBjcml0aWNhbC5kcmFnZ2FibGUuaW5kZXhcbiAgICB9LFxuICAgIG1vZGU6IG1vZGVcbiAgfTtcbn07XG5cbnZhciBleGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZShyZXNwb25kZXIsIGRhdGEsIGFubm91bmNlLCBnZXREZWZhdWx0TWVzc2FnZSkge1xuICBpZiAoIXJlc3BvbmRlcikge1xuICAgIGFubm91bmNlKGdldERlZmF1bHRNZXNzYWdlKGRhdGEpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgd2lsbEV4cGlyZSA9IGdldEV4cGlyaW5nQW5ub3VuY2UoYW5ub3VuY2UpO1xuICB2YXIgcHJvdmlkZWQgPSB7XG4gICAgYW5ub3VuY2U6IHdpbGxFeHBpcmVcbiAgfTtcbiAgcmVzcG9uZGVyKGRhdGEsIHByb3ZpZGVkKTtcblxuICBpZiAoIXdpbGxFeHBpcmUud2FzQ2FsbGVkKCkpIHtcbiAgICBhbm5vdW5jZShnZXREZWZhdWx0TWVzc2FnZShkYXRhKSk7XG4gIH1cbn07XG5cbnZhciBnZXRQdWJsaXNoZXIgPSAoZnVuY3Rpb24gKGdldFJlc3BvbmRlcnMsIGFubm91bmNlKSB7XG4gIHZhciBhc3luY01hcnNoYWwgPSBnZXRBc3luY01hcnNoYWwoKTtcbiAgdmFyIGRyYWdnaW5nID0gbnVsbDtcblxuICB2YXIgYmVmb3JlQ2FwdHVyZSA9IGZ1bmN0aW9uIGJlZm9yZUNhcHR1cmUoZHJhZ2dhYmxlSWQsIG1vZGUpIHtcbiAgICAhIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25CZWZvcmVDYXB0dXJlIGFzIGEgZHJhZyBzdGFydCBoYXMgYWxyZWFkeSBiZWVuIHB1Ymxpc2hlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB3aXRoVGltaW5ncygnb25CZWZvcmVDYXB0dXJlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGZuID0gZ2V0UmVzcG9uZGVycygpLm9uQmVmb3JlQ2FwdHVyZTtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHZhciBiZWZvcmUgPSB7XG4gICAgICAgICAgZHJhZ2dhYmxlSWQ6IGRyYWdnYWJsZUlkLFxuICAgICAgICAgIG1vZGU6IG1vZGVcbiAgICAgICAgfTtcbiAgICAgICAgZm4oYmVmb3JlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBiZWZvcmVTdGFydChjcml0aWNhbCwgbW9kZSkge1xuICAgICEhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkJlZm9yZURyYWdTdGFydCBhcyBhIGRyYWcgc3RhcnQgaGFzIGFscmVhZHkgYmVlbiBwdWJsaXNoZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgd2l0aFRpbWluZ3MoJ29uQmVmb3JlRHJhZ1N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGZuID0gZ2V0UmVzcG9uZGVycygpLm9uQmVmb3JlRHJhZ1N0YXJ0O1xuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgZm4oZ2V0RHJhZ1N0YXJ0KGNyaXRpY2FsLCBtb2RlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoY3JpdGljYWwsIG1vZGUpIHtcbiAgICAhIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25CZWZvcmVEcmFnU3RhcnQgYXMgYSBkcmFnIHN0YXJ0IGhhcyBhbHJlYWR5IGJlZW4gcHVibGlzaGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkYXRhID0gZ2V0RHJhZ1N0YXJ0KGNyaXRpY2FsLCBtb2RlKTtcbiAgICBkcmFnZ2luZyA9IHtcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBsYXN0Q3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgbGFzdExvY2F0aW9uOiBkYXRhLnNvdXJjZSxcbiAgICAgIGxhc3RDb21iaW5lOiBudWxsXG4gICAgfTtcbiAgICBhc3luY01hcnNoYWwuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpdGhUaW1pbmdzKCdvbkRyYWdTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGUoZ2V0UmVzcG9uZGVycygpLm9uRHJhZ1N0YXJ0LCBkYXRhLCBhbm5vdW5jZSwgcHJlc2V0Lm9uRHJhZ1N0YXJ0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoY3JpdGljYWwsIGltcGFjdCkge1xuICAgIHZhciBsb2NhdGlvbiA9IHRyeUdldERlc3RpbmF0aW9uKGltcGFjdCk7XG4gICAgdmFyIGNvbWJpbmUgPSB0cnlHZXRDb21iaW5lKGltcGFjdCk7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25EcmFnTW92ZSB3aGVuIG9uRHJhZ1N0YXJ0IGhhcyBub3QgYmVlbiBjYWxsZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhhc0NyaXRpY2FsQ2hhbmdlZCA9ICFpc0NyaXRpY2FsRXF1YWwoY3JpdGljYWwsIGRyYWdnaW5nLmxhc3RDcml0aWNhbCk7XG5cbiAgICBpZiAoaGFzQ3JpdGljYWxDaGFuZ2VkKSB7XG4gICAgICBkcmFnZ2luZy5sYXN0Q3JpdGljYWwgPSBjcml0aWNhbDtcbiAgICB9XG5cbiAgICB2YXIgaGFzTG9jYXRpb25DaGFuZ2VkID0gIWFyZUxvY2F0aW9uc0VxdWFsKGRyYWdnaW5nLmxhc3RMb2NhdGlvbiwgbG9jYXRpb24pO1xuXG4gICAgaWYgKGhhc0xvY2F0aW9uQ2hhbmdlZCkge1xuICAgICAgZHJhZ2dpbmcubGFzdExvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgdmFyIGhhc0dyb3VwaW5nQ2hhbmdlZCA9ICFpc0NvbWJpbmVFcXVhbChkcmFnZ2luZy5sYXN0Q29tYmluZSwgY29tYmluZSk7XG5cbiAgICBpZiAoaGFzR3JvdXBpbmdDaGFuZ2VkKSB7XG4gICAgICBkcmFnZ2luZy5sYXN0Q29tYmluZSA9IGNvbWJpbmU7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNDcml0aWNhbENoYW5nZWQgJiYgIWhhc0xvY2F0aW9uQ2hhbmdlZCAmJiAhaGFzR3JvdXBpbmdDaGFuZ2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBfZXh0ZW5kcyh7fSwgZ2V0RHJhZ1N0YXJ0KGNyaXRpY2FsLCBkcmFnZ2luZy5tb2RlKSwge1xuICAgICAgY29tYmluZTogY29tYmluZSxcbiAgICAgIGRlc3RpbmF0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuXG4gICAgYXN5bmNNYXJzaGFsLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICB3aXRoVGltaW5ncygnb25EcmFnVXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZShnZXRSZXNwb25kZXJzKCkub25EcmFnVXBkYXRlLCBkYXRhLCBhbm5vdW5jZSwgcHJlc2V0Lm9uRHJhZ1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBmbHVzaCByZXNwb25kZXJzIHdoaWxlIGRyYWdnaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGFzeW5jTWFyc2hhbC5mbHVzaCgpO1xuICB9O1xuXG4gIHZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChyZXN1bHQpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkRyYWdFbmQgd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBvbkRyYWdTdGFydCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBkcmFnZ2luZyA9IG51bGw7XG4gICAgd2l0aFRpbWluZ3MoJ29uRHJhZ0VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleGVjdXRlKGdldFJlc3BvbmRlcnMoKS5vbkRyYWdFbmQsIHJlc3VsdCwgYW5ub3VuY2UsIHByZXNldC5vbkRyYWdFbmQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBhYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gX2V4dGVuZHMoe30sIGdldERyYWdTdGFydChkcmFnZ2luZy5sYXN0Q3JpdGljYWwsIGRyYWdnaW5nLm1vZGUpLCB7XG4gICAgICBjb21iaW5lOiBudWxsLFxuICAgICAgZGVzdGluYXRpb246IG51bGwsXG4gICAgICByZWFzb246ICdDQU5DRUwnXG4gICAgfSk7XG5cbiAgICBkcm9wKHJlc3VsdCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiZWZvcmVDYXB0dXJlOiBiZWZvcmVDYXB0dXJlLFxuICAgIGJlZm9yZVN0YXJ0OiBiZWZvcmVTdGFydCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIGRyb3A6IGRyb3AsXG4gICAgYWJvcnQ6IGFib3J0XG4gIH07XG59KTtcblxudmFyIHJlc3BvbmRlcnMgPSAoZnVuY3Rpb24gKGdldFJlc3BvbmRlcnMsIGFubm91bmNlKSB7XG4gIHZhciBwdWJsaXNoZXIgPSBnZXRQdWJsaXNoZXIoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdCRUZPUkVfSU5JVElBTF9DQVBUVVJFJykge1xuICAgICAgICAgIHB1Ymxpc2hlci5iZWZvcmVDYXB0dXJlKGFjdGlvbi5wYXlsb2FkLmRyYWdnYWJsZUlkLCBhY3Rpb24ucGF5bG9hZC5tb3ZlbWVudE1vZGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgICB2YXIgY3JpdGljYWwgPSBhY3Rpb24ucGF5bG9hZC5jcml0aWNhbDtcbiAgICAgICAgICBwdWJsaXNoZXIuYmVmb3JlU3RhcnQoY3JpdGljYWwsIGFjdGlvbi5wYXlsb2FkLm1vdmVtZW50TW9kZSk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHB1Ymxpc2hlci5zdGFydChjcml0aWNhbCwgYWN0aW9uLnBheWxvYWQubW92ZW1lbnRNb2RlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJykge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBhY3Rpb24ucGF5bG9hZC5jb21wbGV0ZWQucmVzdWx0O1xuICAgICAgICAgIHB1Ymxpc2hlci5mbHVzaCgpO1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICBwdWJsaXNoZXIuZHJvcChyZXN1bHQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdGTFVTSCcpIHtcbiAgICAgICAgICBwdWJsaXNoZXIuYWJvcnQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgICAgIHB1Ymxpc2hlci51cGRhdGUoc3RhdGUuY3JpdGljYWwsIHN0YXRlLmltcGFjdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZHJvcEFuaW1hdGlvbkZpbmlzaCA9IChmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gJ0RST1BfQU5JTUFUSU9OX0ZJTklTSEVEJykge1xuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICEoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmlzaCBhIGRyb3AgYW5pbWF0aW5nIHdoZW4gbm8gZHJvcCBpcyBvY2N1cnJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBzdG9yZS5kaXNwYXRjaChjb21wbGV0ZURyb3Aoe1xuICAgICAgICBjb21wbGV0ZWQ6IHN0YXRlLmNvbXBsZXRlZFxuICAgICAgfSkpO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGRyb3BBbmltYXRpb25GbHVzaE9uU2Nyb2xsID0gKGZ1bmN0aW9uIChzdG9yZSkge1xuICB2YXIgdW5iaW5kID0gbnVsbDtcbiAgdmFyIGZyYW1lSWQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICAgIGZyYW1lSWQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh1bmJpbmQpIHtcbiAgICAgIHVuYmluZCgpO1xuICAgICAgdW5iaW5kID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRkxVU0gnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVElPTl9GSU5JU0hFRCcpIHtcbiAgICAgICAgY2xlYXIoKTtcbiAgICAgIH1cblxuICAgICAgbmV4dChhY3Rpb24pO1xuXG4gICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdEUk9QX0FOSU1BVEUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGJpbmRpbmcgPSB7XG4gICAgICAgIGV2ZW50TmFtZTogJ3Njcm9sbCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZm46IGZ1bmN0aW9uIGZsdXNoRHJvcEFuaW1hdGlvbigpIHtcbiAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChkcm9wQW5pbWF0aW9uRmluaXNoZWQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZyYW1lSWQgPSBudWxsO1xuICAgICAgICB1bmJpbmQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW2JpbmRpbmddKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGRpbWVuc2lvbk1hcnNoYWxTdG9wcGVyID0gKGZ1bmN0aW9uIChtYXJzaGFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICAgICAgICBtYXJzaGFsLnN0b3BQdWJsaXNoaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGZvY3VzID0gKGZ1bmN0aW9uIChtYXJzaGFsKSB7XG4gIHZhciBpc1dhdGNoaW5nID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgICAgICAgaXNXYXRjaGluZyA9IHRydWU7XG4gICAgICAgICAgbWFyc2hhbC50cnlSZWNvcmRGb2N1cyhhY3Rpb24ucGF5bG9hZC5jcml0aWNhbC5kcmFnZ2FibGUuaWQpO1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICBtYXJzaGFsLnRyeVJlc3RvcmVGb2N1c1JlY29yZGVkKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuXG4gICAgICAgIGlmICghaXNXYXRjaGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJykge1xuICAgICAgICAgIGlzV2F0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICBtYXJzaGFsLnRyeVJlc3RvcmVGb2N1c1JlY29yZGVkKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScpIHtcbiAgICAgICAgICBpc1dhdGNoaW5nID0gZmFsc2U7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGFjdGlvbi5wYXlsb2FkLmNvbXBsZXRlZC5yZXN1bHQ7XG5cbiAgICAgICAgICBpZiAocmVzdWx0LmNvbWJpbmUpIHtcbiAgICAgICAgICAgIG1hcnNoYWwudHJ5U2hpZnRSZWNvcmQocmVzdWx0LmRyYWdnYWJsZUlkLCByZXN1bHQuY29tYmluZS5kcmFnZ2FibGVJZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWFyc2hhbC50cnlSZXN0b3JlRm9jdXNSZWNvcmRlZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIHNob3VsZFN0b3AgPSBmdW5jdGlvbiBzaG91bGRTdG9wKGFjdGlvbikge1xuICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScgfHwgYWN0aW9uLnR5cGUgPT09ICdGTFVTSCc7XG59O1xuXG52YXIgYXV0b1Njcm9sbCA9IChmdW5jdGlvbiAoYXV0b1Njcm9sbGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChzaG91bGRTdG9wKGFjdGlvbikpIHtcbiAgICAgICAgICBhdXRvU2Nyb2xsZXIuc3RvcCgpO1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBwaGFzZSB0byBiZSBEUkFHR0lORyBhZnRlciBJTklUSUFMX1BVQkxJU0gnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgYXV0b1Njcm9sbGVyLnN0YXJ0KHN0YXRlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgIGF1dG9TY3JvbGxlci5zY3JvbGwoc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIHBlbmRpbmdEcm9wID0gKGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgbmV4dChhY3Rpb24pO1xuXG4gICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdQVUJMSVNIX1dISUxFX0RSQUdHSU5HJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3N0QWN0aW9uU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICBpZiAocG9zdEFjdGlvblN0YXRlLnBoYXNlICE9PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3N0QWN0aW9uU3RhdGUuaXNXYWl0aW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3RvcmUuZGlzcGF0Y2goZHJvcCh7XG4gICAgICAgIHJlYXNvbjogcG9zdEFjdGlvblN0YXRlLnJlYXNvblxuICAgICAgfSkpO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGNvbXBvc2VFbmhhbmNlcnMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogcmVkdXguY29tcG9zZTtcbnZhciBjcmVhdGVTdG9yZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZGltZW5zaW9uTWFyc2hhbCA9IF9yZWYuZGltZW5zaW9uTWFyc2hhbCxcbiAgICAgIGZvY3VzTWFyc2hhbCA9IF9yZWYuZm9jdXNNYXJzaGFsLFxuICAgICAgc3R5bGVNYXJzaGFsID0gX3JlZi5zdHlsZU1hcnNoYWwsXG4gICAgICBnZXRSZXNwb25kZXJzID0gX3JlZi5nZXRSZXNwb25kZXJzLFxuICAgICAgYW5ub3VuY2UgPSBfcmVmLmFubm91bmNlLFxuICAgICAgYXV0b1Njcm9sbGVyID0gX3JlZi5hdXRvU2Nyb2xsZXI7XG4gIHJldHVybiByZWR1eC5jcmVhdGVTdG9yZShyZWR1Y2VyLCBjb21wb3NlRW5oYW5jZXJzKHJlZHV4LmFwcGx5TWlkZGxld2FyZShzdHlsZShzdHlsZU1hcnNoYWwpLCBkaW1lbnNpb25NYXJzaGFsU3RvcHBlcihkaW1lbnNpb25NYXJzaGFsKSwgbGlmdCQxKGRpbWVuc2lvbk1hcnNoYWwpLCBkcm9wJDEsIGRyb3BBbmltYXRpb25GaW5pc2gsIGRyb3BBbmltYXRpb25GbHVzaE9uU2Nyb2xsLCBwZW5kaW5nRHJvcCwgYXV0b1Njcm9sbChhdXRvU2Nyb2xsZXIpLCBzY3JvbGxMaXN0ZW5lciwgZm9jdXMoZm9jdXNNYXJzaGFsKSwgcmVzcG9uZGVycyhnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSkpKSk7XG59KTtcblxudmFyIGNsZWFuJDEgPSBmdW5jdGlvbiBjbGVhbigpIHtcbiAgcmV0dXJuIHtcbiAgICBhZGRpdGlvbnM6IHt9LFxuICAgIHJlbW92YWxzOiB7fSxcbiAgICBtb2RpZmllZDoge31cbiAgfTtcbn07XG5mdW5jdGlvbiBjcmVhdGVQdWJsaXNoZXIoX3JlZikge1xuICB2YXIgcmVnaXN0cnkgPSBfcmVmLnJlZ2lzdHJ5LFxuICAgICAgY2FsbGJhY2tzID0gX3JlZi5jYWxsYmFja3M7XG4gIHZhciBzdGFnaW5nID0gY2xlYW4kMSgpO1xuICB2YXIgZnJhbWVJZCA9IG51bGw7XG5cbiAgdmFyIGNvbGxlY3QgPSBmdW5jdGlvbiBjb2xsZWN0KCkge1xuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzLmNvbGxlY3Rpb25TdGFydGluZygpO1xuICAgIGZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgZnJhbWVJZCA9IG51bGw7XG4gICAgICBzdGFydCgpO1xuICAgICAgdmFyIF9zdGFnaW5nID0gc3RhZ2luZyxcbiAgICAgICAgICBhZGRpdGlvbnMgPSBfc3RhZ2luZy5hZGRpdGlvbnMsXG4gICAgICAgICAgcmVtb3ZhbHMgPSBfc3RhZ2luZy5yZW1vdmFscyxcbiAgICAgICAgICBtb2RpZmllZCA9IF9zdGFnaW5nLm1vZGlmaWVkO1xuICAgICAgdmFyIGFkZGVkID0gT2JqZWN0LmtleXMoYWRkaXRpb25zKS5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeS5kcmFnZ2FibGUuZ2V0QnlJZChpZCkuZ2V0RGltZW5zaW9uKG9yaWdpbik7XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmRlc2NyaXB0b3IuaW5kZXggLSBiLmRlc2NyaXB0b3IuaW5kZXg7XG4gICAgICB9KTtcbiAgICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmtleXMobW9kaWZpZWQpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gcmVnaXN0cnkuZHJvcHBhYmxlLmdldEJ5SWQoaWQpO1xuICAgICAgICB2YXIgc2Nyb2xsID0gZW50cnkuY2FsbGJhY2tzLmdldFNjcm9sbFdoaWxlRHJhZ2dpbmcoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkcm9wcGFibGVJZDogaWQsXG4gICAgICAgICAgc2Nyb2xsOiBzY3JvbGxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgYWRkaXRpb25zOiBhZGRlZCxcbiAgICAgICAgcmVtb3ZhbHM6IE9iamVjdC5rZXlzKHJlbW92YWxzKSxcbiAgICAgICAgbW9kaWZpZWQ6IHVwZGF0ZWRcbiAgICAgIH07XG4gICAgICBzdGFnaW5nID0gY2xlYW4kMSgpO1xuICAgICAgZmluaXNoKCk7XG4gICAgICBjYWxsYmFja3MucHVibGlzaChyZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBhZGQgPSBmdW5jdGlvbiBhZGQoZW50cnkpIHtcbiAgICB2YXIgaWQgPSBlbnRyeS5kZXNjcmlwdG9yLmlkO1xuICAgIHN0YWdpbmcuYWRkaXRpb25zW2lkXSA9IGVudHJ5O1xuICAgIHN0YWdpbmcubW9kaWZpZWRbZW50cnkuZGVzY3JpcHRvci5kcm9wcGFibGVJZF0gPSB0cnVlO1xuXG4gICAgaWYgKHN0YWdpbmcucmVtb3ZhbHNbaWRdKSB7XG4gICAgICBkZWxldGUgc3RhZ2luZy5yZW1vdmFsc1tpZF07XG4gICAgfVxuXG4gICAgY29sbGVjdCgpO1xuICB9O1xuXG4gIHZhciByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZW50cnkpIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IGVudHJ5LmRlc2NyaXB0b3I7XG4gICAgc3RhZ2luZy5yZW1vdmFsc1tkZXNjcmlwdG9yLmlkXSA9IHRydWU7XG4gICAgc3RhZ2luZy5tb2RpZmllZFtkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXSA9IHRydWU7XG5cbiAgICBpZiAoc3RhZ2luZy5hZGRpdGlvbnNbZGVzY3JpcHRvci5pZF0pIHtcbiAgICAgIGRlbGV0ZSBzdGFnaW5nLmFkZGl0aW9uc1tkZXNjcmlwdG9yLmlkXTtcbiAgICB9XG5cbiAgICBjb2xsZWN0KCk7XG4gIH07XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlmICghZnJhbWVJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lSWQpO1xuICAgIGZyYW1lSWQgPSBudWxsO1xuICAgIHN0YWdpbmcgPSBjbGVhbiQxKCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhZGQ6IGFkZCxcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICBzdG9wOiBzdG9wXG4gIH07XG59XG5cbnZhciBnZXRNYXhTY3JvbGwgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHNjcm9sbEhlaWdodCA9IF9yZWYuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGggPSBfcmVmLnNjcm9sbFdpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGg7XG4gIHZhciBtYXhTY3JvbGwgPSBzdWJ0cmFjdCh7XG4gICAgeDogc2Nyb2xsV2lkdGgsXG4gICAgeTogc2Nyb2xsSGVpZ2h0XG4gIH0sIHtcbiAgICB4OiB3aWR0aCxcbiAgICB5OiBoZWlnaHRcbiAgfSk7XG4gIHZhciBhZGp1c3RlZE1heFNjcm9sbCA9IHtcbiAgICB4OiBNYXRoLm1heCgwLCBtYXhTY3JvbGwueCksXG4gICAgeTogTWF0aC5tYXgoMCwgbWF4U2Nyb2xsLnkpXG4gIH07XG4gIHJldHVybiBhZGp1c3RlZE1heFNjcm9sbDtcbn0pO1xuXG52YXIgZ2V0RG9jdW1lbnRFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgIWRvYyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5kIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRvYztcbn0pO1xuXG52YXIgZ2V0TWF4V2luZG93U2Nyb2xsID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRvYyA9IGdldERvY3VtZW50RWxlbWVudCgpO1xuICB2YXIgbWF4U2Nyb2xsID0gZ2V0TWF4U2Nyb2xsKHtcbiAgICBzY3JvbGxIZWlnaHQ6IGRvYy5zY3JvbGxIZWlnaHQsXG4gICAgc2Nyb2xsV2lkdGg6IGRvYy5zY3JvbGxXaWR0aCxcbiAgICB3aWR0aDogZG9jLmNsaWVudFdpZHRoLFxuICAgIGhlaWdodDogZG9jLmNsaWVudEhlaWdodFxuICB9KTtcbiAgcmV0dXJuIG1heFNjcm9sbDtcbn0pO1xuXG52YXIgZ2V0Vmlld3BvcnQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgc2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKCk7XG4gIHZhciBtYXhTY3JvbGwgPSBnZXRNYXhXaW5kb3dTY3JvbGwoKTtcbiAgdmFyIHRvcCA9IHNjcm9sbC55O1xuICB2YXIgbGVmdCA9IHNjcm9sbC54O1xuICB2YXIgZG9jID0gZ2V0RG9jdW1lbnRFbGVtZW50KCk7XG4gIHZhciB3aWR0aCA9IGRvYy5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGRvYy5jbGllbnRIZWlnaHQ7XG4gIHZhciByaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgdmFyIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgdmFyIGZyYW1lID0gY3NzQm94TW9kZWwuZ2V0UmVjdCh7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICByaWdodDogcmlnaHQsXG4gICAgYm90dG9tOiBib3R0b21cbiAgfSk7XG4gIHZhciB2aWV3cG9ydCA9IHtcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc2Nyb2xsOiB7XG4gICAgICBpbml0aWFsOiBzY3JvbGwsXG4gICAgICBjdXJyZW50OiBzY3JvbGwsXG4gICAgICBtYXg6IG1heFNjcm9sbCxcbiAgICAgIGRpZmY6IHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICAgICAgZGlzcGxhY2VtZW50OiBvcmlnaW5cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiB2aWV3cG9ydDtcbn0pO1xuXG52YXIgZ2V0SW5pdGlhbFB1Ymxpc2ggPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNyaXRpY2FsID0gX3JlZi5jcml0aWNhbCxcbiAgICAgIHNjcm9sbE9wdGlvbnMgPSBfcmVmLnNjcm9sbE9wdGlvbnMsXG4gICAgICByZWdpc3RyeSA9IF9yZWYucmVnaXN0cnk7XG4gIHN0YXJ0KCk7XG4gIHZhciB2aWV3cG9ydCA9IGdldFZpZXdwb3J0KCk7XG4gIHZhciB3aW5kb3dTY3JvbGwgPSB2aWV3cG9ydC5zY3JvbGwuY3VycmVudDtcbiAgdmFyIGhvbWUgPSBjcml0aWNhbC5kcm9wcGFibGU7XG4gIHZhciBkcm9wcGFibGVzID0gcmVnaXN0cnkuZHJvcHBhYmxlLmdldEFsbEJ5VHlwZShob21lLnR5cGUpLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkuY2FsbGJhY2tzLmdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsKHdpbmRvd1Njcm9sbCwgc2Nyb2xsT3B0aW9ucyk7XG4gIH0pO1xuICB2YXIgZHJhZ2dhYmxlcyA9IHJlZ2lzdHJ5LmRyYWdnYWJsZS5nZXRBbGxCeVR5cGUoY3JpdGljYWwuZHJhZ2dhYmxlLnR5cGUpLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkuZ2V0RGltZW5zaW9uKHdpbmRvd1Njcm9sbCk7XG4gIH0pO1xuICB2YXIgZGltZW5zaW9ucyA9IHtcbiAgICBkcmFnZ2FibGVzOiB0b0RyYWdnYWJsZU1hcChkcmFnZ2FibGVzKSxcbiAgICBkcm9wcGFibGVzOiB0b0Ryb3BwYWJsZU1hcChkcm9wcGFibGVzKVxuICB9O1xuICBmaW5pc2goKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgIGNyaXRpY2FsOiBjcml0aWNhbCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5mdW5jdGlvbiBzaG91bGRQdWJsaXNoVXBkYXRlKHJlZ2lzdHJ5LCBkcmFnZ2luZywgZW50cnkpIHtcbiAgaWYgKGVudHJ5LmRlc2NyaXB0b3IuaWQgPT09IGRyYWdnaW5nLmlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGVudHJ5LmRlc2NyaXB0b3IudHlwZSAhPT0gZHJhZ2dpbmcudHlwZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBob21lID0gcmVnaXN0cnkuZHJvcHBhYmxlLmdldEJ5SWQoZW50cnkuZGVzY3JpcHRvci5kcm9wcGFibGVJZCk7XG5cbiAgaWYgKGhvbWUuZGVzY3JpcHRvci5tb2RlICE9PSAndmlydHVhbCcpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgWW91IGFyZSBhdHRlbXB0aW5nIHRvIGFkZCBvciByZW1vdmUgYSBEcmFnZ2FibGUgW2lkOiBcIiArIGVudHJ5LmRlc2NyaXB0b3IuaWQgKyBcIl1cXG4gICAgICB3aGlsZSBhIGRyYWcgaXMgb2NjdXJyaW5nLiBUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciB2aXJ0dWFsIGxpc3RzLlxcblxcbiAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9wYXR0ZXJucy92aXJ0dWFsLWxpc3RzLm1kXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIGNyZWF0ZURpbWVuc2lvbk1hcnNoYWwgPSAoZnVuY3Rpb24gKHJlZ2lzdHJ5LCBjYWxsYmFja3MpIHtcbiAgdmFyIGNvbGxlY3Rpb24gPSBudWxsO1xuICB2YXIgcHVibGlzaGVyID0gY3JlYXRlUHVibGlzaGVyKHtcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgIHB1Ymxpc2g6IGNhbGxiYWNrcy5wdWJsaXNoV2hpbGVEcmFnZ2luZyxcbiAgICAgIGNvbGxlY3Rpb25TdGFydGluZzogY2FsbGJhY2tzLmNvbGxlY3Rpb25TdGFydGluZ1xuICAgIH0sXG4gICAgcmVnaXN0cnk6IHJlZ2lzdHJ5XG4gIH0pO1xuXG4gIHZhciB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQoaWQsIGlzRW5hYmxlZCkge1xuICAgICFyZWdpc3RyeS5kcm9wcGFibGUuZXhpc3RzKGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgdXBkYXRlIGlzIGVuYWJsZWQgZmxhZyBvZiBEcm9wcGFibGUgXCIgKyBpZCArIFwiIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrcy51cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQoe1xuICAgICAgaWQ6IGlkLFxuICAgICAgaXNFbmFibGVkOiBpc0VuYWJsZWRcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQoaWQsIGlzQ29tYmluZUVuYWJsZWQpIHtcbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhcmVnaXN0cnkuZHJvcHBhYmxlLmV4aXN0cyhpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSBpc0NvbWJpbmVFbmFibGVkIGZsYWcgb2YgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY2FsbGJhY2tzLnVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQoe1xuICAgICAgaWQ6IGlkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciB1cGRhdGVEcm9wcGFibGVTY3JvbGwgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVTY3JvbGwoaWQsIG5ld1Njcm9sbCkge1xuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICFyZWdpc3RyeS5kcm9wcGFibGUuZXhpc3RzKGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgdXBkYXRlIHRoZSBzY3JvbGwgb24gRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY2FsbGJhY2tzLnVwZGF0ZURyb3BwYWJsZVNjcm9sbCh7XG4gICAgICBpZDogaWQsXG4gICAgICBuZXdTY3JvbGw6IG5ld1Njcm9sbFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzY3JvbGxEcm9wcGFibGUgPSBmdW5jdGlvbiBzY3JvbGxEcm9wcGFibGUoaWQsIGNoYW5nZSkge1xuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlZ2lzdHJ5LmRyb3BwYWJsZS5nZXRCeUlkKGlkKS5jYWxsYmFja3Muc2Nyb2xsKGNoYW5nZSk7XG4gIH07XG5cbiAgdmFyIHN0b3BQdWJsaXNoaW5nID0gZnVuY3Rpb24gc3RvcFB1Ymxpc2hpbmcoKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVibGlzaGVyLnN0b3AoKTtcbiAgICB2YXIgaG9tZSA9IGNvbGxlY3Rpb24uY3JpdGljYWwuZHJvcHBhYmxlO1xuICAgIHJlZ2lzdHJ5LmRyb3BwYWJsZS5nZXRBbGxCeVR5cGUoaG9tZS50eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5LmNhbGxiYWNrcy5kcmFnU3RvcHBlZCgpO1xuICAgIH0pO1xuICAgIGNvbGxlY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICBjb2xsZWN0aW9uID0gbnVsbDtcbiAgfTtcblxuICB2YXIgc3Vic2NyaWJlciA9IGZ1bmN0aW9uIHN1YnNjcmliZXIoZXZlbnQpIHtcbiAgICAhY29sbGVjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBvbmx5IGJlIHN1YnNjcmliZWQgd2hlbiBhIGNvbGxlY3Rpb24gaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkcmFnZ2luZyA9IGNvbGxlY3Rpb24uY3JpdGljYWwuZHJhZ2dhYmxlO1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdBRERJVElPTicpIHtcbiAgICAgIGlmIChzaG91bGRQdWJsaXNoVXBkYXRlKHJlZ2lzdHJ5LCBkcmFnZ2luZywgZXZlbnQudmFsdWUpKSB7XG4gICAgICAgIHB1Ymxpc2hlci5hZGQoZXZlbnQudmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAnUkVNT1ZBTCcpIHtcbiAgICAgIGlmIChzaG91bGRQdWJsaXNoVXBkYXRlKHJlZ2lzdHJ5LCBkcmFnZ2luZywgZXZlbnQudmFsdWUpKSB7XG4gICAgICAgIHB1Ymxpc2hlci5yZW1vdmUoZXZlbnQudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgc3RhcnRQdWJsaXNoaW5nID0gZnVuY3Rpb24gc3RhcnRQdWJsaXNoaW5nKHJlcXVlc3QpIHtcbiAgICAhIWNvbGxlY3Rpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RhcnQgY2FwdHVyaW5nIGNyaXRpY2FsIGRpbWVuc2lvbnMgYXMgdGhlcmUgaXMgYWxyZWFkeSBhIGNvbGxlY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGVudHJ5ID0gcmVnaXN0cnkuZHJhZ2dhYmxlLmdldEJ5SWQocmVxdWVzdC5kcmFnZ2FibGVJZCk7XG4gICAgdmFyIGhvbWUgPSByZWdpc3RyeS5kcm9wcGFibGUuZ2V0QnlJZChlbnRyeS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkKTtcbiAgICB2YXIgY3JpdGljYWwgPSB7XG4gICAgICBkcmFnZ2FibGU6IGVudHJ5LmRlc2NyaXB0b3IsXG4gICAgICBkcm9wcGFibGU6IGhvbWUuZGVzY3JpcHRvclxuICAgIH07XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gcmVnaXN0cnkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIGNvbGxlY3Rpb24gPSB7XG4gICAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICB9O1xuICAgIHJldHVybiBnZXRJbml0aWFsUHVibGlzaCh7XG4gICAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgICByZWdpc3RyeTogcmVnaXN0cnksXG4gICAgICBzY3JvbGxPcHRpb25zOiByZXF1ZXN0LnNjcm9sbE9wdGlvbnNcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgbWFyc2hhbCA9IHtcbiAgICB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCxcbiAgICB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkOiB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkLFxuICAgIHNjcm9sbERyb3BwYWJsZTogc2Nyb2xsRHJvcHBhYmxlLFxuICAgIHVwZGF0ZURyb3BwYWJsZVNjcm9sbDogdXBkYXRlRHJvcHBhYmxlU2Nyb2xsLFxuICAgIHN0YXJ0UHVibGlzaGluZzogc3RhcnRQdWJsaXNoaW5nLFxuICAgIHN0b3BQdWJsaXNoaW5nOiBzdG9wUHVibGlzaGluZ1xuICB9O1xuICByZXR1cm4gbWFyc2hhbDtcbn0pO1xuXG52YXIgY2FuU3RhcnREcmFnID0gKGZ1bmN0aW9uIChzdGF0ZSwgaWQpIHtcbiAgaWYgKHN0YXRlLnBoYXNlID09PSAnSURMRScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5waGFzZSAhPT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5jb21wbGV0ZWQucmVzdWx0LmRyYWdnYWJsZUlkID09PSBpZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jb21wbGV0ZWQucmVzdWx0LnJlYXNvbiA9PT0gJ0RST1AnO1xufSk7XG5cbnZhciBzY3JvbGxXaW5kb3cgPSAoZnVuY3Rpb24gKGNoYW5nZSkge1xuICB3aW5kb3cuc2Nyb2xsQnkoY2hhbmdlLngsIGNoYW5nZS55KTtcbn0pO1xuXG52YXIgZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZXMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcm9wcGFibGVzKSB7XG4gIHJldHVybiB0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICBpZiAoIWRyb3BwYWJsZS5pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWRyb3BwYWJsZS5mcmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn0pO1xuXG52YXIgZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZU92ZXIgPSBmdW5jdGlvbiBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3Zlcih0YXJnZXQsIGRyb3BwYWJsZXMpIHtcbiAgdmFyIG1heWJlID0gZmluZChnZXRTY3JvbGxhYmxlRHJvcHBhYmxlcyhkcm9wcGFibGVzKSwgZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgICFkcm9wcGFibGUuZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIHJlc3VsdCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gaXNQb3NpdGlvbkluRnJhbWUoZHJvcHBhYmxlLmZyYW1lLnBhZ2VNYXJnaW5Cb3gpKHRhcmdldCk7XG4gIH0pO1xuICByZXR1cm4gbWF5YmU7XG59O1xuXG52YXIgZ2V0QmVzdFNjcm9sbGFibGVEcm9wcGFibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcztcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICB2YXIgX2RpbWVuc2lvbiA9IGRyb3BwYWJsZXNbZGVzdGluYXRpb25dO1xuXG4gICAgaWYgKCFfZGltZW5zaW9uLmZyYW1lKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2RpbWVuc2lvbjtcbiAgfVxuXG4gIHZhciBkaW1lbnNpb24gPSBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3ZlcihjZW50ZXIsIGRyb3BwYWJsZXMpO1xuICByZXR1cm4gZGltZW5zaW9uO1xufSk7XG5cbnZhciBjb25maWcgPSB7XG4gIHN0YXJ0RnJvbVBlcmNlbnRhZ2U6IDAuMjUsXG4gIG1heFNjcm9sbEF0UGVyY2VudGFnZTogMC4wNSxcbiAgbWF4UGl4ZWxTY3JvbGw6IDI4LFxuICBlYXNlOiBmdW5jdGlvbiBlYXNlKHBlcmNlbnRhZ2UpIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocGVyY2VudGFnZSwgMik7XG4gIH0sXG4gIGR1cmF0aW9uRGFtcGVuaW5nOiB7XG4gICAgc3RvcERhbXBlbmluZ0F0OiAxMjAwLFxuICAgIGFjY2VsZXJhdGVBdDogMzYwXG4gIH1cbn07XG5cbnZhciBnZXREaXN0YW5jZVRocmVzaG9sZHMgPSAoZnVuY3Rpb24gKGNvbnRhaW5lciwgYXhpcykge1xuICB2YXIgc3RhcnRTY3JvbGxpbmdGcm9tID0gY29udGFpbmVyW2F4aXMuc2l6ZV0gKiBjb25maWcuc3RhcnRGcm9tUGVyY2VudGFnZTtcbiAgdmFyIG1heFNjcm9sbFZhbHVlQXQgPSBjb250YWluZXJbYXhpcy5zaXplXSAqIGNvbmZpZy5tYXhTY3JvbGxBdFBlcmNlbnRhZ2U7XG4gIHZhciB0aHJlc2hvbGRzID0ge1xuICAgIHN0YXJ0U2Nyb2xsaW5nRnJvbTogc3RhcnRTY3JvbGxpbmdGcm9tLFxuICAgIG1heFNjcm9sbFZhbHVlQXQ6IG1heFNjcm9sbFZhbHVlQXRcbiAgfTtcbiAgcmV0dXJuIHRocmVzaG9sZHM7XG59KTtcblxudmFyIGdldFBlcmNlbnRhZ2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHN0YXJ0T2ZSYW5nZSA9IF9yZWYuc3RhcnRPZlJhbmdlLFxuICAgICAgZW5kT2ZSYW5nZSA9IF9yZWYuZW5kT2ZSYW5nZSxcbiAgICAgIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQ7XG4gIHZhciByYW5nZSA9IGVuZE9mUmFuZ2UgLSBzdGFydE9mUmFuZ2U7XG5cbiAgaWYgKHJhbmdlID09PSAwKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIERldGVjdGVkIGRpc3RhbmNlIHJhbmdlIG9mIDAgaW4gdGhlIGZsdWlkIGF1dG8gc2Nyb2xsZXJcXG4gICAgICBUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHdvdWxkIGNhdXNlIGEgZGl2aWRlIGJ5IDAgaXNzdWUuXFxuICAgICAgTm90IGFsbG93aW5nIGFuIGF1dG8gc2Nyb2xsXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBjdXJyZW50SW5SYW5nZSA9IGN1cnJlbnQgLSBzdGFydE9mUmFuZ2U7XG4gIHZhciBwZXJjZW50YWdlID0gY3VycmVudEluUmFuZ2UgLyByYW5nZTtcbiAgcmV0dXJuIHBlcmNlbnRhZ2U7XG59KTtcblxudmFyIG1pblNjcm9sbCA9IDE7XG5cbnZhciBnZXRWYWx1ZUZyb21EaXN0YW5jZSA9IChmdW5jdGlvbiAoZGlzdGFuY2VUb0VkZ2UsIHRocmVzaG9sZHMpIHtcbiAgaWYgKGRpc3RhbmNlVG9FZGdlID4gdGhyZXNob2xkcy5zdGFydFNjcm9sbGluZ0Zyb20pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChkaXN0YW5jZVRvRWRnZSA8PSB0aHJlc2hvbGRzLm1heFNjcm9sbFZhbHVlQXQpIHtcbiAgICByZXR1cm4gY29uZmlnLm1heFBpeGVsU2Nyb2xsO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlVG9FZGdlID09PSB0aHJlc2hvbGRzLnN0YXJ0U2Nyb2xsaW5nRnJvbSkge1xuICAgIHJldHVybiBtaW5TY3JvbGw7XG4gIH1cblxuICB2YXIgcGVyY2VudGFnZUZyb21NYXhTY3JvbGxWYWx1ZUF0ID0gZ2V0UGVyY2VudGFnZSh7XG4gICAgc3RhcnRPZlJhbmdlOiB0aHJlc2hvbGRzLm1heFNjcm9sbFZhbHVlQXQsXG4gICAgZW5kT2ZSYW5nZTogdGhyZXNob2xkcy5zdGFydFNjcm9sbGluZ0Zyb20sXG4gICAgY3VycmVudDogZGlzdGFuY2VUb0VkZ2VcbiAgfSk7XG4gIHZhciBwZXJjZW50YWdlRnJvbVN0YXJ0U2Nyb2xsaW5nRnJvbSA9IDEgLSBwZXJjZW50YWdlRnJvbU1heFNjcm9sbFZhbHVlQXQ7XG4gIHZhciBzY3JvbGwgPSBjb25maWcubWF4UGl4ZWxTY3JvbGwgKiBjb25maWcuZWFzZShwZXJjZW50YWdlRnJvbVN0YXJ0U2Nyb2xsaW5nRnJvbSk7XG4gIHJldHVybiBNYXRoLmNlaWwoc2Nyb2xsKTtcbn0pO1xuXG52YXIgYWNjZWxlcmF0ZUF0ID0gY29uZmlnLmR1cmF0aW9uRGFtcGVuaW5nLmFjY2VsZXJhdGVBdDtcbnZhciBzdG9wQXQgPSBjb25maWcuZHVyYXRpb25EYW1wZW5pbmcuc3RvcERhbXBlbmluZ0F0O1xudmFyIGRhbXBlblZhbHVlQnlUaW1lID0gKGZ1bmN0aW9uIChwcm9wb3NlZFNjcm9sbCwgZHJhZ1N0YXJ0VGltZSkge1xuICB2YXIgc3RhcnRPZlJhbmdlID0gZHJhZ1N0YXJ0VGltZTtcbiAgdmFyIGVuZE9mUmFuZ2UgPSBzdG9wQXQ7XG4gIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICB2YXIgcnVuVGltZSA9IG5vdyAtIHN0YXJ0T2ZSYW5nZTtcblxuICBpZiAocnVuVGltZSA+PSBzdG9wQXQpIHtcbiAgICByZXR1cm4gcHJvcG9zZWRTY3JvbGw7XG4gIH1cblxuICBpZiAocnVuVGltZSA8IGFjY2VsZXJhdGVBdCkge1xuICAgIHJldHVybiBtaW5TY3JvbGw7XG4gIH1cblxuICB2YXIgYmV0d2VlbkFjY2VsZXJhdGVBdEFuZFN0b3BBdFBlcmNlbnRhZ2UgPSBnZXRQZXJjZW50YWdlKHtcbiAgICBzdGFydE9mUmFuZ2U6IGFjY2VsZXJhdGVBdCxcbiAgICBlbmRPZlJhbmdlOiBlbmRPZlJhbmdlLFxuICAgIGN1cnJlbnQ6IHJ1blRpbWVcbiAgfSk7XG4gIHZhciBzY3JvbGwgPSBwcm9wb3NlZFNjcm9sbCAqIGNvbmZpZy5lYXNlKGJldHdlZW5BY2NlbGVyYXRlQXRBbmRTdG9wQXRQZXJjZW50YWdlKTtcbiAgcmV0dXJuIE1hdGguY2VpbChzY3JvbGwpO1xufSk7XG5cbnZhciBnZXRWYWx1ZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZGlzdGFuY2VUb0VkZ2UgPSBfcmVmLmRpc3RhbmNlVG9FZGdlLFxuICAgICAgdGhyZXNob2xkcyA9IF9yZWYudGhyZXNob2xkcyxcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgc2Nyb2xsID0gZ2V0VmFsdWVGcm9tRGlzdGFuY2UoZGlzdGFuY2VUb0VkZ2UsIHRocmVzaG9sZHMpO1xuXG4gIGlmIChzY3JvbGwgPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmICghc2hvdWxkVXNlVGltZURhbXBlbmluZykge1xuICAgIHJldHVybiBzY3JvbGw7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXgoZGFtcGVuVmFsdWVCeVRpbWUoc2Nyb2xsLCBkcmFnU3RhcnRUaW1lKSwgbWluU2Nyb2xsKTtcbn0pO1xuXG52YXIgZ2V0U2Nyb2xsT25BeGlzID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjb250YWluZXIgPSBfcmVmLmNvbnRhaW5lcixcbiAgICAgIGRpc3RhbmNlVG9FZGdlcyA9IF9yZWYuZGlzdGFuY2VUb0VkZ2VzLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIGF4aXMgPSBfcmVmLmF4aXMsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgdGhyZXNob2xkcyA9IGdldERpc3RhbmNlVGhyZXNob2xkcyhjb250YWluZXIsIGF4aXMpO1xuICB2YXIgaXNDbG9zZXJUb0VuZCA9IGRpc3RhbmNlVG9FZGdlc1theGlzLmVuZF0gPCBkaXN0YW5jZVRvRWRnZXNbYXhpcy5zdGFydF07XG5cbiAgaWYgKGlzQ2xvc2VyVG9FbmQpIHtcbiAgICByZXR1cm4gZ2V0VmFsdWUoe1xuICAgICAgZGlzdGFuY2VUb0VkZ2U6IGRpc3RhbmNlVG9FZGdlc1theGlzLmVuZF0sXG4gICAgICB0aHJlc2hvbGRzOiB0aHJlc2hvbGRzLFxuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAtMSAqIGdldFZhbHVlKHtcbiAgICBkaXN0YW5jZVRvRWRnZTogZGlzdGFuY2VUb0VkZ2VzW2F4aXMuc3RhcnRdLFxuICAgIHRocmVzaG9sZHM6IHRocmVzaG9sZHMsXG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xufSk7XG5cbnZhciBhZGp1c3RGb3JTaXplTGltaXRzID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjb250YWluZXIgPSBfcmVmLmNvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBwcm9wb3NlZFNjcm9sbCA9IF9yZWYucHJvcG9zZWRTY3JvbGw7XG4gIHZhciBpc1Rvb0JpZ1ZlcnRpY2FsbHkgPSBzdWJqZWN0LmhlaWdodCA+IGNvbnRhaW5lci5oZWlnaHQ7XG4gIHZhciBpc1Rvb0JpZ0hvcml6b250YWxseSA9IHN1YmplY3Qud2lkdGggPiBjb250YWluZXIud2lkdGg7XG5cbiAgaWYgKCFpc1Rvb0JpZ0hvcml6b250YWxseSAmJiAhaXNUb29CaWdWZXJ0aWNhbGx5KSB7XG4gICAgcmV0dXJuIHByb3Bvc2VkU2Nyb2xsO1xuICB9XG5cbiAgaWYgKGlzVG9vQmlnSG9yaXpvbnRhbGx5ICYmIGlzVG9vQmlnVmVydGljYWxseSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBpc1Rvb0JpZ0hvcml6b250YWxseSA/IDAgOiBwcm9wb3NlZFNjcm9sbC54LFxuICAgIHk6IGlzVG9vQmlnVmVydGljYWxseSA/IDAgOiBwcm9wb3NlZFNjcm9sbC55XG4gIH07XG59KTtcblxudmFyIGNsZWFuJDIgPSBhcHBseShmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xufSk7XG52YXIgZ2V0U2Nyb2xsID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgY29udGFpbmVyID0gX3JlZi5jb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gX3JlZi5zdWJqZWN0LFxuICAgICAgY2VudGVyID0gX3JlZi5jZW50ZXIsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgZGlzdGFuY2VUb0VkZ2VzID0ge1xuICAgIHRvcDogY2VudGVyLnkgLSBjb250YWluZXIudG9wLFxuICAgIHJpZ2h0OiBjb250YWluZXIucmlnaHQgLSBjZW50ZXIueCxcbiAgICBib3R0b206IGNvbnRhaW5lci5ib3R0b20gLSBjZW50ZXIueSxcbiAgICBsZWZ0OiBjZW50ZXIueCAtIGNvbnRhaW5lci5sZWZ0XG4gIH07XG4gIHZhciB5ID0gZ2V0U2Nyb2xsT25BeGlzKHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBkaXN0YW5jZVRvRWRnZXM6IGRpc3RhbmNlVG9FZGdlcyxcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGF4aXM6IHZlcnRpY2FsLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG4gIHZhciB4ID0gZ2V0U2Nyb2xsT25BeGlzKHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBkaXN0YW5jZVRvRWRnZXM6IGRpc3RhbmNlVG9FZGdlcyxcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGF4aXM6IGhvcml6b250YWwsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbiAgdmFyIHJlcXVpcmVkID0gY2xlYW4kMih7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pO1xuXG4gIGlmIChpc0VxdWFsKHJlcXVpcmVkLCBvcmlnaW4pKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbGltaXRlZCA9IGFkanVzdEZvclNpemVMaW1pdHMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgcHJvcG9zZWRTY3JvbGw6IHJlcXVpcmVkXG4gIH0pO1xuXG4gIGlmICghbGltaXRlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGlzRXF1YWwobGltaXRlZCwgb3JpZ2luKSA/IG51bGwgOiBsaW1pdGVkO1xufSk7XG5cbnZhciBzbWFsbGVzdFNpZ25lZCA9IGFwcGx5KGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZSA+IDAgPyAxIDogLTE7XG59KTtcbnZhciBnZXRPdmVybGFwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZ2V0UmVtYWluZGVyID0gZnVuY3Rpb24gZ2V0UmVtYWluZGVyKHRhcmdldCwgbWF4KSB7XG4gICAgaWYgKHRhcmdldCA8IDApIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldCA+IG1heCkge1xuICAgICAgcmV0dXJuIHRhcmdldCAtIG1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgY3VycmVudCA9IF9yZWYuY3VycmVudCxcbiAgICAgICAgbWF4ID0gX3JlZi5tYXgsXG4gICAgICAgIGNoYW5nZSA9IF9yZWYuY2hhbmdlO1xuICAgIHZhciB0YXJnZXRTY3JvbGwgPSBhZGQoY3VycmVudCwgY2hhbmdlKTtcbiAgICB2YXIgb3ZlcmxhcCA9IHtcbiAgICAgIHg6IGdldFJlbWFpbmRlcih0YXJnZXRTY3JvbGwueCwgbWF4LngpLFxuICAgICAgeTogZ2V0UmVtYWluZGVyKHRhcmdldFNjcm9sbC55LCBtYXgueSlcbiAgICB9O1xuXG4gICAgaWYgKGlzRXF1YWwob3ZlcmxhcCwgb3JpZ2luKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG92ZXJsYXA7XG4gIH07XG59KCk7XG52YXIgY2FuUGFydGlhbGx5U2Nyb2xsID0gZnVuY3Rpb24gY2FuUGFydGlhbGx5U2Nyb2xsKF9yZWYyKSB7XG4gIHZhciByYXdNYXggPSBfcmVmMi5tYXgsXG4gICAgICBjdXJyZW50ID0gX3JlZjIuY3VycmVudCxcbiAgICAgIGNoYW5nZSA9IF9yZWYyLmNoYW5nZTtcbiAgdmFyIG1heCA9IHtcbiAgICB4OiBNYXRoLm1heChjdXJyZW50LngsIHJhd01heC54KSxcbiAgICB5OiBNYXRoLm1heChjdXJyZW50LnksIHJhd01heC55KVxuICB9O1xuICB2YXIgc21hbGxlc3RDaGFuZ2UgPSBzbWFsbGVzdFNpZ25lZChjaGFuZ2UpO1xuICB2YXIgb3ZlcmxhcCA9IGdldE92ZXJsYXAoe1xuICAgIG1heDogbWF4LFxuICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgY2hhbmdlOiBzbWFsbGVzdENoYW5nZVxuICB9KTtcblxuICBpZiAoIW92ZXJsYXApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzbWFsbGVzdENoYW5nZS54ICE9PSAwICYmIG92ZXJsYXAueCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNtYWxsZXN0Q2hhbmdlLnkgIT09IDAgJiYgb3ZlcmxhcC55ID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xudmFyIGNhblNjcm9sbFdpbmRvdyA9IGZ1bmN0aW9uIGNhblNjcm9sbFdpbmRvdyh2aWV3cG9ydCwgY2hhbmdlKSB7XG4gIHJldHVybiBjYW5QYXJ0aWFsbHlTY3JvbGwoe1xuICAgIGN1cnJlbnQ6IHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50LFxuICAgIG1heDogdmlld3BvcnQuc2Nyb2xsLm1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG52YXIgZ2V0V2luZG93T3ZlcmxhcCA9IGZ1bmN0aW9uIGdldFdpbmRvd092ZXJsYXAodmlld3BvcnQsIGNoYW5nZSkge1xuICBpZiAoIWNhblNjcm9sbFdpbmRvdyh2aWV3cG9ydCwgY2hhbmdlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1heCA9IHZpZXdwb3J0LnNjcm9sbC5tYXg7XG4gIHZhciBjdXJyZW50ID0gdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQ7XG4gIHJldHVybiBnZXRPdmVybGFwKHtcbiAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgIG1heDogbWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcbnZhciBjYW5TY3JvbGxEcm9wcGFibGUgPSBmdW5jdGlvbiBjYW5TY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLCBjaGFuZ2UpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FuUGFydGlhbGx5U2Nyb2xsKHtcbiAgICBjdXJyZW50OiBmcmFtZS5zY3JvbGwuY3VycmVudCxcbiAgICBtYXg6IGZyYW1lLnNjcm9sbC5tYXgsXG4gICAgY2hhbmdlOiBjaGFuZ2VcbiAgfSk7XG59O1xudmFyIGdldERyb3BwYWJsZU92ZXJsYXAgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVPdmVybGFwKGRyb3BwYWJsZSwgY2hhbmdlKSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIGNoYW5nZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBnZXRPdmVybGFwKHtcbiAgICBjdXJyZW50OiBmcmFtZS5zY3JvbGwuY3VycmVudCxcbiAgICBtYXg6IGZyYW1lLnNjcm9sbC5tYXgsXG4gICAgY2hhbmdlOiBjaGFuZ2VcbiAgfSk7XG59O1xuXG52YXIgZ2V0V2luZG93U2Nyb2xsQ2hhbmdlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBzdWJqZWN0ID0gX3JlZi5zdWJqZWN0LFxuICAgICAgY2VudGVyID0gX3JlZi5jZW50ZXIsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIHNjcm9sbCA9IGdldFNjcm9sbCh7XG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBjb250YWluZXI6IHZpZXdwb3J0LmZyYW1lLFxuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgY2VudGVyOiBjZW50ZXIsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbiAgcmV0dXJuIHNjcm9sbCAmJiBjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIHNjcm9sbCkgPyBzY3JvbGwgOiBudWxsO1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVTY3JvbGxDaGFuZ2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlLFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2Nyb2xsID0gZ2V0U2Nyb2xsKHtcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGNvbnRhaW5lcjogZnJhbWUucGFnZU1hcmdpbkJveCxcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGNlbnRlcjogY2VudGVyLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG4gIHJldHVybiBzY3JvbGwgJiYgY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgc2Nyb2xsKSA/IHNjcm9sbCA6IG51bGw7XG59KTtcblxudmFyIHNjcm9sbCQxID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZyxcbiAgICAgIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93LFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlID0gX3JlZi5zY3JvbGxEcm9wcGFibGU7XG4gIHZhciBjZW50ZXIgPSBzdGF0ZS5jdXJyZW50LnBhZ2UuYm9yZGVyQm94Q2VudGVyO1xuICB2YXIgZHJhZ2dhYmxlID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciBzdWJqZWN0ID0gZHJhZ2dhYmxlLnBhZ2UubWFyZ2luQm94O1xuXG4gIGlmIChzdGF0ZS5pc1dpbmRvd1Njcm9sbEFsbG93ZWQpIHtcbiAgICB2YXIgdmlld3BvcnQgPSBzdGF0ZS52aWV3cG9ydDtcblxuICAgIHZhciBfY2hhbmdlID0gZ2V0V2luZG93U2Nyb2xsQ2hhbmdlKHtcbiAgICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgICAgY2VudGVyOiBjZW50ZXIsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gICAgfSk7XG5cbiAgICBpZiAoX2NoYW5nZSkge1xuICAgICAgc2Nyb2xsV2luZG93KF9jaGFuZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkcm9wcGFibGUgPSBnZXRCZXN0U2Nyb2xsYWJsZURyb3BwYWJsZSh7XG4gICAgY2VudGVyOiBjZW50ZXIsXG4gICAgZGVzdGluYXRpb246IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCksXG4gICAgZHJvcHBhYmxlczogc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzXG4gIH0pO1xuXG4gIGlmICghZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoYW5nZSA9IGdldERyb3BwYWJsZVNjcm9sbENoYW5nZSh7XG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBkcm9wcGFibGU6IGRyb3BwYWJsZSxcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGNlbnRlcjogY2VudGVyLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG5cbiAgaWYgKGNoYW5nZSkge1xuICAgIHNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgY2hhbmdlKTtcbiAgfVxufSk7XG5cbnZhciBjcmVhdGVGbHVpZFNjcm9sbGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzY3JvbGxXaW5kb3cgPSBfcmVmLnNjcm9sbFdpbmRvdyxcbiAgICAgIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlO1xuICB2YXIgc2NoZWR1bGVXaW5kb3dTY3JvbGwgPSByYWZTY2hkKHNjcm9sbFdpbmRvdyk7XG4gIHZhciBzY2hlZHVsZURyb3BwYWJsZVNjcm9sbCA9IHJhZlNjaGQoc2Nyb2xsRHJvcHBhYmxlKTtcbiAgdmFyIGRyYWdnaW5nID0gbnVsbDtcblxuICB2YXIgdHJ5U2Nyb2xsID0gZnVuY3Rpb24gdHJ5U2Nyb2xsKHN0YXRlKSB7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZsdWlkIHNjcm9sbCBpZiBub3QgZHJhZ2dpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9kcmFnZ2luZyA9IGRyYWdnaW5nLFxuICAgICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX2RyYWdnaW5nLnNob3VsZFVzZVRpbWVEYW1wZW5pbmcsXG4gICAgICAgIGRyYWdTdGFydFRpbWUgPSBfZHJhZ2dpbmcuZHJhZ1N0YXJ0VGltZTtcbiAgICBzY3JvbGwkMSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzY3JvbGxXaW5kb3c6IHNjaGVkdWxlV2luZG93U2Nyb2xsLFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlOiBzY2hlZHVsZURyb3BwYWJsZVNjcm9sbCxcbiAgICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHN0YXJ0JDEgPSBmdW5jdGlvbiBzdGFydCQxKHN0YXRlKSB7XG4gICAgc3RhcnQoKTtcbiAgICAhIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IGF1dG8gc2Nyb2xsaW5nIHdoZW4gYWxyZWFkeSBzdGFydGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkcmFnU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgd2FzU2Nyb2xsTmVlZGVkID0gZmFsc2U7XG5cbiAgICB2YXIgZmFrZVNjcm9sbENhbGxiYWNrID0gZnVuY3Rpb24gZmFrZVNjcm9sbENhbGxiYWNrKCkge1xuICAgICAgd2FzU2Nyb2xsTmVlZGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgc2Nyb2xsJDEoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgZHJhZ1N0YXJ0VGltZTogMCxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IGZhbHNlLFxuICAgICAgc2Nyb2xsV2luZG93OiBmYWtlU2Nyb2xsQ2FsbGJhY2ssXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IGZha2VTY3JvbGxDYWxsYmFja1xuICAgIH0pO1xuICAgIGRyYWdnaW5nID0ge1xuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHdhc1Njcm9sbE5lZWRlZFxuICAgIH07XG4gICAgZmluaXNoKCk7XG5cbiAgICBpZiAod2FzU2Nyb2xsTmVlZGVkKSB7XG4gICAgICB0cnlTY3JvbGwoc3RhdGUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlV2luZG93U2Nyb2xsLmNhbmNlbCgpO1xuICAgIHNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsLmNhbmNlbCgpO1xuICAgIGRyYWdnaW5nID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCQxLFxuICAgIHN0b3A6IHN0b3AsXG4gICAgc2Nyb2xsOiB0cnlTY3JvbGxcbiAgfTtcbn0pO1xuXG52YXIgY3JlYXRlSnVtcFNjcm9sbGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBtb3ZlID0gX3JlZi5tb3ZlLFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlID0gX3JlZi5zY3JvbGxEcm9wcGFibGUsXG4gICAgICBzY3JvbGxXaW5kb3cgPSBfcmVmLnNjcm9sbFdpbmRvdztcblxuICB2YXIgbW92ZUJ5T2Zmc2V0ID0gZnVuY3Rpb24gbW92ZUJ5T2Zmc2V0KHN0YXRlLCBvZmZzZXQpIHtcbiAgICB2YXIgY2xpZW50ID0gYWRkKHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbiwgb2Zmc2V0KTtcbiAgICBtb3ZlKHtcbiAgICAgIGNsaWVudDogY2xpZW50XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHNjcm9sbERyb3BwYWJsZUFzTXVjaEFzSXRDYW4gPSBmdW5jdGlvbiBzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuKGRyb3BwYWJsZSwgY2hhbmdlKSB7XG4gICAgaWYgKCFjYW5TY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLCBjaGFuZ2UpKSB7XG4gICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cblxuICAgIHZhciBvdmVybGFwID0gZ2V0RHJvcHBhYmxlT3ZlcmxhcChkcm9wcGFibGUsIGNoYW5nZSk7XG5cbiAgICBpZiAoIW92ZXJsYXApIHtcbiAgICAgIHNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgY2hhbmdlKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aGF0VGhlRHJvcHBhYmxlQ2FuU2Nyb2xsID0gc3VidHJhY3QoY2hhbmdlLCBvdmVybGFwKTtcbiAgICBzY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIHdoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwpO1xuICAgIHZhciByZW1haW5kZXIgPSBzdWJ0cmFjdChjaGFuZ2UsIHdoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwpO1xuICAgIHJldHVybiByZW1haW5kZXI7XG4gIH07XG5cbiAgdmFyIHNjcm9sbFdpbmRvd0FzTXVjaEFzSXRDYW4gPSBmdW5jdGlvbiBzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuKGlzV2luZG93U2Nyb2xsQWxsb3dlZCwgdmlld3BvcnQsIGNoYW5nZSkge1xuICAgIGlmICghaXNXaW5kb3dTY3JvbGxBbGxvd2VkKSB7XG4gICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cblxuICAgIGlmICghY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBjaGFuZ2UpKSB7XG4gICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cblxuICAgIHZhciBvdmVybGFwID0gZ2V0V2luZG93T3ZlcmxhcCh2aWV3cG9ydCwgY2hhbmdlKTtcblxuICAgIGlmICghb3ZlcmxhcCkge1xuICAgICAgc2Nyb2xsV2luZG93KGNoYW5nZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2hhdFRoZVdpbmRvd0NhblNjcm9sbCA9IHN1YnRyYWN0KGNoYW5nZSwgb3ZlcmxhcCk7XG4gICAgc2Nyb2xsV2luZG93KHdoYXRUaGVXaW5kb3dDYW5TY3JvbGwpO1xuICAgIHZhciByZW1haW5kZXIgPSBzdWJ0cmFjdChjaGFuZ2UsIHdoYXRUaGVXaW5kb3dDYW5TY3JvbGwpO1xuICAgIHJldHVybiByZW1haW5kZXI7XG4gIH07XG5cbiAgdmFyIGp1bXBTY3JvbGxlciA9IGZ1bmN0aW9uIGp1bXBTY3JvbGxlcihzdGF0ZSkge1xuICAgIHZhciByZXF1ZXN0ID0gc3RhdGUuc2Nyb2xsSnVtcFJlcXVlc3Q7XG5cbiAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVzdGluYXRpb24gPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpO1xuICAgICFkZXN0aW5hdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwZXJmb3JtIGEganVtcCBzY3JvbGwgd2hlbiB0aGVyZSBpcyBubyBkZXN0aW5hdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZHJvcHBhYmxlUmVtYWluZGVyID0gc2Nyb2xsRHJvcHBhYmxlQXNNdWNoQXNJdENhbihzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNbZGVzdGluYXRpb25dLCByZXF1ZXN0KTtcblxuICAgIGlmICghZHJvcHBhYmxlUmVtYWluZGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdwb3J0ID0gc3RhdGUudmlld3BvcnQ7XG4gICAgdmFyIHdpbmRvd1JlbWFpbmRlciA9IHNjcm9sbFdpbmRvd0FzTXVjaEFzSXRDYW4oc3RhdGUuaXNXaW5kb3dTY3JvbGxBbGxvd2VkLCB2aWV3cG9ydCwgZHJvcHBhYmxlUmVtYWluZGVyKTtcblxuICAgIGlmICghd2luZG93UmVtYWluZGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW92ZUJ5T2Zmc2V0KHN0YXRlLCB3aW5kb3dSZW1haW5kZXIpO1xuICB9O1xuXG4gIHJldHVybiBqdW1wU2Nyb2xsZXI7XG59KTtcblxudmFyIGNyZWF0ZUF1dG9TY3JvbGxlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc2Nyb2xsRHJvcHBhYmxlID0gX3JlZi5zY3JvbGxEcm9wcGFibGUsXG4gICAgICBzY3JvbGxXaW5kb3cgPSBfcmVmLnNjcm9sbFdpbmRvdyxcbiAgICAgIG1vdmUgPSBfcmVmLm1vdmU7XG4gIHZhciBmbHVpZFNjcm9sbGVyID0gY3JlYXRlRmx1aWRTY3JvbGxlcih7XG4gICAgc2Nyb2xsV2luZG93OiBzY3JvbGxXaW5kb3csXG4gICAgc2Nyb2xsRHJvcHBhYmxlOiBzY3JvbGxEcm9wcGFibGVcbiAgfSk7XG4gIHZhciBqdW1wU2Nyb2xsID0gY3JlYXRlSnVtcFNjcm9sbGVyKHtcbiAgICBtb3ZlOiBtb3ZlLFxuICAgIHNjcm9sbFdpbmRvdzogc2Nyb2xsV2luZG93LFxuICAgIHNjcm9sbERyb3BwYWJsZTogc2Nyb2xsRHJvcHBhYmxlXG4gIH0pO1xuXG4gIHZhciBzY3JvbGwgPSBmdW5jdGlvbiBzY3JvbGwoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgIT09ICdEUkFHR0lORycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUubW92ZW1lbnRNb2RlID09PSAnRkxVSUQnKSB7XG4gICAgICBmbHVpZFNjcm9sbGVyLnNjcm9sbChzdGF0ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzdGF0ZS5zY3JvbGxKdW1wUmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGp1bXBTY3JvbGwoc3RhdGUpO1xuICB9O1xuXG4gIHZhciBzY3JvbGxlciA9IHtcbiAgICBzY3JvbGw6IHNjcm9sbCxcbiAgICBzdGFydDogZmx1aWRTY3JvbGxlci5zdGFydCxcbiAgICBzdG9wOiBmbHVpZFNjcm9sbGVyLnN0b3BcbiAgfTtcbiAgcmV0dXJuIHNjcm9sbGVyO1xufSk7XG5cbnZhciBwcmVmaXgkMSA9ICdkYXRhLXJiZCc7XG52YXIgZHJhZ0hhbmRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJhc2UgPSBwcmVmaXgkMSArIFwiLWRyYWctaGFuZGxlXCI7XG4gIHJldHVybiB7XG4gICAgYmFzZTogYmFzZSxcbiAgICBkcmFnZ2FibGVJZDogYmFzZSArIFwiLWRyYWdnYWJsZS1pZFwiLFxuICAgIGNvbnRleHRJZDogYmFzZSArIFwiLWNvbnRleHQtaWRcIlxuICB9O1xufSgpO1xudmFyIGRyYWdnYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJhc2UgPSBwcmVmaXgkMSArIFwiLWRyYWdnYWJsZVwiO1xuICByZXR1cm4ge1xuICAgIGJhc2U6IGJhc2UsXG4gICAgY29udGV4dElkOiBiYXNlICsgXCItY29udGV4dC1pZFwiLFxuICAgIGlkOiBiYXNlICsgXCItaWRcIlxuICB9O1xufSgpO1xudmFyIGRyb3BwYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJhc2UgPSBwcmVmaXgkMSArIFwiLWRyb3BwYWJsZVwiO1xuICByZXR1cm4ge1xuICAgIGJhc2U6IGJhc2UsXG4gICAgY29udGV4dElkOiBiYXNlICsgXCItY29udGV4dC1pZFwiLFxuICAgIGlkOiBiYXNlICsgXCItaWRcIlxuICB9O1xufSgpO1xudmFyIHNjcm9sbENvbnRhaW5lciA9IHtcbiAgY29udGV4dElkOiBwcmVmaXgkMSArIFwiLXNjcm9sbC1jb250YWluZXItY29udGV4dC1pZFwiXG59O1xuXG52YXIgbWFrZUdldFNlbGVjdG9yID0gZnVuY3Rpb24gbWFrZUdldFNlbGVjdG9yKGNvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gXCJbXCIgKyBhdHRyaWJ1dGUgKyBcIj1cXFwiXCIgKyBjb250ZXh0ICsgXCJcXFwiXVwiO1xuICB9O1xufTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIGdldFN0eWxlcyhydWxlcywgcHJvcGVydHkpIHtcbiAgcmV0dXJuIHJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgIHZhciB2YWx1ZSA9IHJ1bGUuc3R5bGVzW3Byb3BlcnR5XTtcblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZS5zZWxlY3RvciArIFwiIHsgXCIgKyB2YWx1ZSArIFwiIH1cIjtcbiAgfSkuam9pbignICcpO1xufTtcblxudmFyIG5vUG9pbnRlckV2ZW50cyA9ICdwb2ludGVyLWV2ZW50czogbm9uZTsnO1xudmFyIGdldFN0eWxlcyQxID0gKGZ1bmN0aW9uIChjb250ZXh0SWQpIHtcbiAgdmFyIGdldFNlbGVjdG9yID0gbWFrZUdldFNlbGVjdG9yKGNvbnRleHRJZCk7XG5cbiAgdmFyIGRyYWdIYW5kbGUkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZ3JhYkN1cnNvciA9IFwiXFxuICAgICAgY3Vyc29yOiAtd2Via2l0LWdyYWI7XFxuICAgICAgY3Vyc29yOiBncmFiO1xcbiAgICBcIjtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0b3I6IGdldFNlbGVjdG9yKGRyYWdIYW5kbGUuY29udGV4dElkKSxcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBhbHdheXM6IFwiXFxuICAgICAgICAgIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcXG4gICAgICAgICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsMCwwLDApO1xcbiAgICAgICAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcXG4gICAgICAgIFwiLFxuICAgICAgICByZXN0aW5nOiBncmFiQ3Vyc29yLFxuICAgICAgICBkcmFnZ2luZzogbm9Qb2ludGVyRXZlbnRzLFxuICAgICAgICBkcm9wQW5pbWF0aW5nOiBncmFiQ3Vyc29yXG4gICAgICB9XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBkcmFnZ2FibGUkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IFwiXFxuICAgICAgdHJhbnNpdGlvbjogXCIgKyB0cmFuc2l0aW9ucy5vdXRPZlRoZVdheSArIFwiO1xcbiAgICBcIjtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0b3I6IGdldFNlbGVjdG9yKGRyYWdnYWJsZS5jb250ZXh0SWQpLFxuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIGRyYWdnaW5nOiB0cmFuc2l0aW9uLFxuICAgICAgICBkcm9wQW5pbWF0aW5nOiB0cmFuc2l0aW9uLFxuICAgICAgICB1c2VyQ2FuY2VsOiB0cmFuc2l0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBkcm9wcGFibGUkMSA9IHtcbiAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJvcHBhYmxlLmNvbnRleHRJZCksXG4gICAgc3R5bGVzOiB7XG4gICAgICBhbHdheXM6IFwib3ZlcmZsb3ctYW5jaG9yOiBub25lO1wiXG4gICAgfVxuICB9O1xuICB2YXIgYm9keSA9IHtcbiAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgIHN0eWxlczoge1xuICAgICAgZHJhZ2dpbmc6IFwiXFxuICAgICAgICBjdXJzb3I6IGdyYWJiaW5nO1xcbiAgICAgICAgY3Vyc29yOiAtd2Via2l0LWdyYWJiaW5nO1xcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgIG92ZXJmbG93LWFuY2hvcjogbm9uZTtcXG4gICAgICBcIlxuICAgIH1cbiAgfTtcbiAgdmFyIHJ1bGVzID0gW2RyYWdnYWJsZSQxLCBkcmFnSGFuZGxlJDEsIGRyb3BwYWJsZSQxLCBib2R5XTtcbiAgcmV0dXJuIHtcbiAgICBhbHdheXM6IGdldFN0eWxlcyhydWxlcywgJ2Fsd2F5cycpLFxuICAgIHJlc3Rpbmc6IGdldFN0eWxlcyhydWxlcywgJ3Jlc3RpbmcnKSxcbiAgICBkcmFnZ2luZzogZ2V0U3R5bGVzKHJ1bGVzLCAnZHJhZ2dpbmcnKSxcbiAgICBkcm9wQW5pbWF0aW5nOiBnZXRTdHlsZXMocnVsZXMsICdkcm9wQW5pbWF0aW5nJyksXG4gICAgdXNlckNhbmNlbDogZ2V0U3R5bGVzKHJ1bGVzLCAndXNlckNhbmNlbCcpXG4gIH07XG59KTtcblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuXG52YXIgZ2V0SGVhZCA9IGZ1bmN0aW9uIGdldEhlYWQoKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xuICAhaGVhZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5kIHRoZSBoZWFkIHRvIGFwcGVuZCBhIHN0eWxlIHRvJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gaGVhZDtcbn07XG5cbnZhciBjcmVhdGVTdHlsZUVsID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVFbChub25jZSkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmIChub25jZSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cblxuICBlbC50eXBlID0gJ3RleHQvY3NzJztcbiAgcmV0dXJuIGVsO1xufTtcblxuZnVuY3Rpb24gdXNlU3R5bGVNYXJzaGFsKGNvbnRleHRJZCwgbm9uY2UpIHtcbiAgdmFyIHN0eWxlcyA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldFN0eWxlcyQxKGNvbnRleHRJZCk7XG4gIH0sIFtjb250ZXh0SWRdKTtcbiAgdmFyIGFsd2F5c1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGR5bmFtaWNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBzZXREeW5hbWljU3R5bGUgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKG1lbW9pemVPbmUoZnVuY3Rpb24gKHByb3Bvc2VkKSB7XG4gICAgdmFyIGVsID0gZHluYW1pY1JlZi5jdXJyZW50O1xuICAgICFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzZXQgZHluYW1pYyBzdHlsZSBlbGVtZW50IGlmIGl0IGlzIG5vdCBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZWwudGV4dENvbnRlbnQgPSBwcm9wb3NlZDtcbiAgfSksIFtdKTtcbiAgdmFyIHNldEFsd2F5c1N0eWxlID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAocHJvcG9zZWQpIHtcbiAgICB2YXIgZWwgPSBhbHdheXNSZWYuY3VycmVudDtcbiAgICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2V0IGR5bmFtaWMgc3R5bGUgZWxlbWVudCBpZiBpdCBpcyBub3Qgc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGVsLnRleHRDb250ZW50ID0gcHJvcG9zZWQ7XG4gIH0sIFtdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgISghYWx3YXlzUmVmLmN1cnJlbnQgJiYgIWR5bmFtaWNSZWYuY3VycmVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdzdHlsZSBlbGVtZW50cyBhbHJlYWR5IG1vdW50ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGFsd2F5cyA9IGNyZWF0ZVN0eWxlRWwobm9uY2UpO1xuICAgIHZhciBkeW5hbWljID0gY3JlYXRlU3R5bGVFbChub25jZSk7XG4gICAgYWx3YXlzUmVmLmN1cnJlbnQgPSBhbHdheXM7XG4gICAgZHluYW1pY1JlZi5jdXJyZW50ID0gZHluYW1pYztcbiAgICBhbHdheXMuc2V0QXR0cmlidXRlKHByZWZpeCQxICsgXCItYWx3YXlzXCIsIGNvbnRleHRJZCk7XG4gICAgZHluYW1pYy5zZXRBdHRyaWJ1dGUocHJlZml4JDEgKyBcIi1keW5hbWljXCIsIGNvbnRleHRJZCk7XG4gICAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKGFsd2F5cyk7XG4gICAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKGR5bmFtaWMpO1xuICAgIHNldEFsd2F5c1N0eWxlKHN0eWxlcy5hbHdheXMpO1xuICAgIHNldER5bmFtaWNTdHlsZShzdHlsZXMucmVzdGluZyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocmVmKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgICFjdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHVubW91bnQgcmVmIGFzIGl0IGlzIG5vdCBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGdldEhlYWQoKS5yZW1vdmVDaGlsZChjdXJyZW50KTtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgcmVtb3ZlKGFsd2F5c1JlZik7XG4gICAgICByZW1vdmUoZHluYW1pY1JlZik7XG4gICAgfTtcbiAgfSwgW25vbmNlLCBzZXRBbHdheXNTdHlsZSwgc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuYWx3YXlzLCBzdHlsZXMucmVzdGluZywgY29udGV4dElkXSk7XG4gIHZhciBkcmFnZ2luZyA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXREeW5hbWljU3R5bGUoc3R5bGVzLmRyYWdnaW5nKTtcbiAgfSwgW3NldER5bmFtaWNTdHlsZSwgc3R5bGVzLmRyYWdnaW5nXSk7XG4gIHZhciBkcm9wcGluZyA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gPT09ICdEUk9QJykge1xuICAgICAgc2V0RHluYW1pY1N0eWxlKHN0eWxlcy5kcm9wQW5pbWF0aW5nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnVzZXJDYW5jZWwpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuZHJvcEFuaW1hdGluZywgc3R5bGVzLnVzZXJDYW5jZWxdKTtcbiAgdmFyIHJlc3RpbmcgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWR5bmFtaWNSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldER5bmFtaWNTdHlsZShzdHlsZXMucmVzdGluZyk7XG4gIH0sIFtzZXREeW5hbWljU3R5bGUsIHN0eWxlcy5yZXN0aW5nXSk7XG4gIHZhciBtYXJzaGFsID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJhZ2dpbmc6IGRyYWdnaW5nLFxuICAgICAgZHJvcHBpbmc6IGRyb3BwaW5nLFxuICAgICAgcmVzdGluZzogcmVzdGluZ1xuICAgIH07XG4gIH0sIFtkcmFnZ2luZywgZHJvcHBpbmcsIHJlc3RpbmddKTtcbiAgcmV0dXJuIG1hcnNoYWw7XG59XG5cbnZhciBnZXRXaW5kb3dGcm9tRWwgPSAoZnVuY3Rpb24gKGVsKSB7XG4gIHJldHVybiBlbCAmJiBlbC5vd25lckRvY3VtZW50ID8gZWwub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn0pO1xuXG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KGVsKSB7XG4gIHJldHVybiBlbCBpbnN0YW5jZW9mIGdldFdpbmRvd0Zyb21FbChlbCkuSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGZpbmREcmFnSGFuZGxlKGNvbnRleHRJZCwgZHJhZ2dhYmxlSWQpIHtcbiAgdmFyIHNlbGVjdG9yID0gXCJbXCIgKyBkcmFnSGFuZGxlLmNvbnRleHRJZCArIFwiPVxcXCJcIiArIGNvbnRleHRJZCArIFwiXFxcIl1cIjtcbiAgdmFyIHBvc3NpYmxlID0gdG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG5cbiAgaWYgKCFwb3NzaWJsZS5sZW5ndGgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiVW5hYmxlIHRvIGZpbmQgYW55IGRyYWcgaGFuZGxlcyBpbiB0aGUgY29udGV4dCBcXFwiXCIgKyBjb250ZXh0SWQgKyBcIlxcXCJcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaGFuZGxlID0gZmluZChwb3NzaWJsZSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShkcmFnSGFuZGxlLmRyYWdnYWJsZUlkKSA9PT0gZHJhZ2dhYmxlSWQ7XG4gIH0pO1xuXG4gIGlmICghaGFuZGxlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlVuYWJsZSB0byBmaW5kIGRyYWcgaGFuZGxlIHdpdGggaWQgXFxcIlwiICsgZHJhZ2dhYmxlSWQgKyBcIlxcXCIgYXMgbm8gaGFuZGxlIHdpdGggYSBtYXRjaGluZyBpZCB3YXMgZm91bmRcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWlzSHRtbEVsZW1lbnQoaGFuZGxlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ2RyYWcgaGFuZGxlIG5lZWRzIHRvIGJlIGEgSFRNTEVsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGU7XG59XG5cbmZ1bmN0aW9uIHVzZUZvY3VzTWFyc2hhbChjb250ZXh0SWQpIHtcbiAgdmFyIGVudHJpZXNSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICB2YXIgcmVjb3JkUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgcmVzdG9yZUZvY3VzRnJhbWVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBpc01vdW50ZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgcmVnaXN0ZXIgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIHJlZ2lzdGVyKGlkLCBmb2N1cykge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZvY3VzOiBmb2N1c1xuICAgIH07XG4gICAgZW50cmllc1JlZi5jdXJyZW50W2lkXSA9IGVudHJ5O1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICAgICAgdmFyIGVudHJpZXMgPSBlbnRyaWVzUmVmLmN1cnJlbnQ7XG4gICAgICB2YXIgY3VycmVudCA9IGVudHJpZXNbaWRdO1xuXG4gICAgICBpZiAoY3VycmVudCAhPT0gZW50cnkpIHtcbiAgICAgICAgZGVsZXRlIGVudHJpZXNbaWRdO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHRyeUdpdmVGb2N1cyA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5R2l2ZUZvY3VzKHRyeUdpdmVGb2N1c1RvKSB7XG4gICAgdmFyIGhhbmRsZSA9IGZpbmREcmFnSGFuZGxlKGNvbnRleHRJZCwgdHJ5R2l2ZUZvY3VzVG8pO1xuXG4gICAgaWYgKGhhbmRsZSAmJiBoYW5kbGUgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIGhhbmRsZS5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2NvbnRleHRJZF0pO1xuICB2YXIgdHJ5U2hpZnRSZWNvcmQgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVNoaWZ0UmVjb3JkKHByZXZpb3VzLCByZWRpcmVjdFRvKSB7XG4gICAgaWYgKHJlY29yZFJlZi5jdXJyZW50ID09PSBwcmV2aW91cykge1xuICAgICAgcmVjb3JkUmVmLmN1cnJlbnQgPSByZWRpcmVjdFRvO1xuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVJlc3RvcmVGb2N1c1JlY29yZGVkKCkge1xuICAgIGlmIChyZXN0b3JlRm9jdXNGcmFtZVJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlc3RvcmVGb2N1c0ZyYW1lUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVzdG9yZUZvY3VzRnJhbWVSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB2YXIgcmVjb3JkID0gcmVjb3JkUmVmLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgdHJ5R2l2ZUZvY3VzKHJlY29yZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFt0cnlHaXZlRm9jdXNdKTtcbiAgdmFyIHRyeVJlY29yZEZvY3VzID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiB0cnlSZWNvcmRGb2N1cyhpZCkge1xuICAgIHJlY29yZFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB2YXIgZm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICBpZiAoIWZvY3VzZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZm9jdXNlZC5nZXRBdHRyaWJ1dGUoZHJhZ0hhbmRsZS5kcmFnZ2FibGVJZCkgIT09IGlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVjb3JkUmVmLmN1cnJlbnQgPSBpZDtcbiAgfSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFyRnJhbWVPblVubW91bnQoKSB7XG4gICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgdmFyIGZyYW1lSWQgPSByZXN0b3JlRm9jdXNGcmFtZVJlZi5jdXJyZW50O1xuXG4gICAgICBpZiAoZnJhbWVJZCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBtYXJzaGFsID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgICAgdHJ5UmVjb3JkRm9jdXM6IHRyeVJlY29yZEZvY3VzLFxuICAgICAgdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQ6IHRyeVJlc3RvcmVGb2N1c1JlY29yZGVkLFxuICAgICAgdHJ5U2hpZnRSZWNvcmQ6IHRyeVNoaWZ0UmVjb3JkXG4gICAgfTtcbiAgfSwgW3JlZ2lzdGVyLCB0cnlSZWNvcmRGb2N1cywgdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQsIHRyeVNoaWZ0UmVjb3JkXSk7XG4gIHJldHVybiBtYXJzaGFsO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWdpc3RyeSgpIHtcbiAgdmFyIGVudHJpZXMgPSB7XG4gICAgZHJhZ2dhYmxlczoge30sXG4gICAgZHJvcHBhYmxlczoge31cbiAgfTtcbiAgdmFyIHN1YnNjcmliZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGNiKSB7XG4gICAgc3Vic2NyaWJlcnMucHVzaChjYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIGluZGV4ID0gc3Vic2NyaWJlcnMuaW5kZXhPZihjYik7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdWJzY3JpYmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnkoZXZlbnQpIHtcbiAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoKSB7XG4gICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICByZXR1cm4gY2IoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZERyYWdnYWJsZUJ5SWQoaWQpIHtcbiAgICByZXR1cm4gZW50cmllcy5kcmFnZ2FibGVzW2lkXSB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RHJhZ2dhYmxlQnlJZChpZCkge1xuICAgIHZhciBlbnRyeSA9IGZpbmREcmFnZ2FibGVCeUlkKGlkKTtcbiAgICAhZW50cnkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgZHJhZ2dhYmxlIGVudHJ5IHdpdGggaWQgW1wiICsgaWQgKyBcIl1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBlbnRyeTtcbiAgfVxuXG4gIHZhciBkcmFnZ2FibGVBUEkgPSB7XG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICBlbnRyaWVzLmRyYWdnYWJsZXNbZW50cnkuZGVzY3JpcHRvci5pZF0gPSBlbnRyeTtcbiAgICAgIG5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdBRERJVElPTicsXG4gICAgICAgIHZhbHVlOiBlbnRyeVxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShlbnRyeSwgbGFzdCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBlbnRyaWVzLmRyYWdnYWJsZXNbbGFzdC5kZXNjcmlwdG9yLmlkXTtcblxuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQudW5pcXVlSWQgIT09IGVudHJ5LnVuaXF1ZUlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGVudHJpZXMuZHJhZ2dhYmxlc1tsYXN0LmRlc2NyaXB0b3IuaWRdO1xuICAgICAgZW50cmllcy5kcmFnZ2FibGVzW2VudHJ5LmRlc2NyaXB0b3IuaWRdID0gZW50cnk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBlbnRyeS5kZXNjcmlwdG9yLmlkO1xuICAgICAgdmFyIGN1cnJlbnQgPSBmaW5kRHJhZ2dhYmxlQnlJZChkcmFnZ2FibGVJZCk7XG5cbiAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnRyeS51bmlxdWVJZCAhPT0gY3VycmVudC51bmlxdWVJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBlbnRyaWVzLmRyYWdnYWJsZXNbZHJhZ2dhYmxlSWRdO1xuICAgICAgbm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ1JFTU9WQUwnLFxuICAgICAgICB2YWx1ZTogZW50cnlcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0QnlJZDogZ2V0RHJhZ2dhYmxlQnlJZCxcbiAgICBmaW5kQnlJZDogZmluZERyYWdnYWJsZUJ5SWQsXG4gICAgZXhpc3RzOiBmdW5jdGlvbiBleGlzdHMoaWQpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGZpbmREcmFnZ2FibGVCeUlkKGlkKSk7XG4gICAgfSxcbiAgICBnZXRBbGxCeVR5cGU6IGZ1bmN0aW9uIGdldEFsbEJ5VHlwZSh0eXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWVzKGVudHJpZXMuZHJhZ2dhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuZGVzY3JpcHRvci50eXBlID09PSB0eXBlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbmREcm9wcGFibGVCeUlkKGlkKSB7XG4gICAgcmV0dXJuIGVudHJpZXMuZHJvcHBhYmxlc1tpZF0gfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERyb3BwYWJsZUJ5SWQoaWQpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kRHJvcHBhYmxlQnlJZChpZCk7XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBmaW5kIGRyb3BwYWJsZSBlbnRyeSB3aXRoIGlkIFtcIiArIGlkICsgXCJdXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZW50cnk7XG4gIH1cblxuICB2YXIgZHJvcHBhYmxlQVBJID0ge1xuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihlbnRyeSkge1xuICAgICAgZW50cmllcy5kcm9wcGFibGVzW2VudHJ5LmRlc2NyaXB0b3IuaWRdID0gZW50cnk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICB2YXIgY3VycmVudCA9IGZpbmREcm9wcGFibGVCeUlkKGVudHJ5LmRlc2NyaXB0b3IuaWQpO1xuXG4gICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW50cnkudW5pcXVlSWQgIT09IGN1cnJlbnQudW5pcXVlSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgZW50cmllcy5kcm9wcGFibGVzW2VudHJ5LmRlc2NyaXB0b3IuaWRdO1xuICAgIH0sXG4gICAgZ2V0QnlJZDogZ2V0RHJvcHBhYmxlQnlJZCxcbiAgICBmaW5kQnlJZDogZmluZERyb3BwYWJsZUJ5SWQsXG4gICAgZXhpc3RzOiBmdW5jdGlvbiBleGlzdHMoaWQpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGZpbmREcm9wcGFibGVCeUlkKGlkKSk7XG4gICAgfSxcbiAgICBnZXRBbGxCeVR5cGU6IGZ1bmN0aW9uIGdldEFsbEJ5VHlwZSh0eXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWVzKGVudHJpZXMuZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuZGVzY3JpcHRvci50eXBlID09PSB0eXBlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNsZWFuKCkge1xuICAgIGVudHJpZXMuZHJhZ2dhYmxlcyA9IHt9O1xuICAgIGVudHJpZXMuZHJvcHBhYmxlcyA9IHt9O1xuICAgIHN1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlQVBJLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlQVBJLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGNsZWFuOiBjbGVhblxuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VSZWdpc3RyeSgpIHtcbiAgdmFyIHJlZ2lzdHJ5ID0gdXNlTWVtb09uZS51c2VNZW1vKGNyZWF0ZVJlZ2lzdHJ5LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVnaXN0cnkuY2xlYW4pO1xuICAgIH07XG4gIH0sIFtyZWdpc3RyeV0pO1xuICByZXR1cm4gcmVnaXN0cnk7XG59XG5cbnZhciBTdG9yZUNvbnRleHQgPSBSZWFjdF9fZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgZ2V0Qm9keUVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICFib2R5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgZG9jdW1lbnQuYm9keScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGJvZHk7XG59KTtcblxudmFyIHZpc3VhbGx5SGlkZGVuID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxcHgnLFxuICBoZWlnaHQ6ICcxcHgnLFxuICBtYXJnaW46ICctMXB4JyxcbiAgYm9yZGVyOiAnMCcsXG4gIHBhZGRpbmc6ICcwJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBjbGlwOiAncmVjdCgwIDAgMCAwKScsXG4gICdjbGlwLXBhdGgnOiAnaW5zZXQoMTAwJSknXG59O1xuXG52YXIgZ2V0SWQgPSBmdW5jdGlvbiBnZXRJZChjb250ZXh0SWQpIHtcbiAgcmV0dXJuIFwicmJkLWFubm91bmNlbWVudC1cIiArIGNvbnRleHRJZDtcbn07XG5mdW5jdGlvbiB1c2VBbm5vdW5jZXIoY29udGV4dElkKSB7XG4gIHZhciBpZCA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldElkKGNvbnRleHRJZCk7XG4gIH0sIFtjb250ZXh0SWRdKTtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJlZi5jdXJyZW50ID0gZWw7XG4gICAgZWwuaWQgPSBpZDtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtYXRvbWljJywgJ3RydWUnKTtcblxuICAgIF9leHRlbmRzKGVsLnN0eWxlLCB2aXN1YWxseUhpZGRlbik7XG5cbiAgICBnZXRCb2R5RWxlbWVudCgpLmFwcGVuZENoaWxkKGVsKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICB2YXIgYm9keSA9IGdldEJvZHlFbGVtZW50KCk7XG5cbiAgICAgICAgaWYgKGJvZHkuY29udGFpbnMoZWwpKSB7XG4gICAgICAgICAgYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwgPT09IHJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9LCBbaWRdKTtcbiAgdmFyIGFubm91bmNlID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHZhciBlbCA9IHJlZi5jdXJyZW50O1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIEEgc2NyZWVuIHJlYWRlciBtZXNzYWdlIHdhcyB0cnlpbmcgdG8gYmUgYW5ub3VuY2VkIGJ1dCBpdCB3YXMgdW5hYmxlIHRvIGRvIHNvLlxcbiAgICAgIFRoaXMgY2FuIG9jY3VyIGlmIHlvdSB1bm1vdW50IHlvdXIgPERyYWdEcm9wQ29udGV4dCAvPiBpbiB5b3VyIG9uRHJhZ0VuZC5cXG4gICAgICBDb25zaWRlciBjYWxsaW5nIHByb3ZpZGVkLmFubm91bmNlKCkgYmVmb3JlIHRoZSB1bm1vdW50IHNvIHRoYXQgdGhlIGluc3RydWN0aW9uIHdpbGxcXG4gICAgICBub3QgYmUgbG9zdCBmb3IgdXNlcnMgcmVseWluZyBvbiBhIHNjcmVlbiByZWFkZXIuXFxuXFxuICAgICAgTWVzc2FnZSBub3QgcGFzc2VkIHRvIHNjcmVlbiByZWFkZXI6XFxuXFxuICAgICAgXFxcIlwiICsgbWVzc2FnZSArIFwiXFxcIlxcbiAgICBcIikgOiB2b2lkIDA7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGFubm91bmNlO1xufVxuXG52YXIgY291bnQgPSAwO1xudmFyIGRlZmF1bHRzID0ge1xuICBzZXBhcmF0b3I6ICc6Oidcbn07XG5mdW5jdGlvbiByZXNldCgpIHtcbiAgY291bnQgPSAwO1xufVxuZnVuY3Rpb24gdXNlVW5pcXVlSWQocHJlZml4LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0gZGVmYXVsdHM7XG4gIH1cblxuICByZXR1cm4gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIG9wdGlvbnMuc2VwYXJhdG9yICsgY291bnQrKztcbiAgfSwgW29wdGlvbnMuc2VwYXJhdG9yLCBwcmVmaXhdKTtcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudElkKF9yZWYpIHtcbiAgdmFyIGNvbnRleHRJZCA9IF9yZWYuY29udGV4dElkLFxuICAgICAgdW5pcXVlSWQgPSBfcmVmLnVuaXF1ZUlkO1xuICByZXR1cm4gXCJyYmQtaGlkZGVuLXRleHQtXCIgKyBjb250ZXh0SWQgKyBcIi1cIiArIHVuaXF1ZUlkO1xufVxuZnVuY3Rpb24gdXNlSGlkZGVuVGV4dEVsZW1lbnQoX3JlZjIpIHtcbiAgdmFyIGNvbnRleHRJZCA9IF9yZWYyLmNvbnRleHRJZCxcbiAgICAgIHRleHQgPSBfcmVmMi50ZXh0O1xuICB2YXIgdW5pcXVlSWQgPSB1c2VVbmlxdWVJZCgnaGlkZGVuLXRleHQnLCB7XG4gICAgc2VwYXJhdG9yOiAnLSdcbiAgfSk7XG4gIHZhciBpZCA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRJZCh7XG4gICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICAgIHVuaXF1ZUlkOiB1bmlxdWVJZFxuICAgIH0pO1xuICB9LCBbdW5pcXVlSWQsIGNvbnRleHRJZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWwuaWQgPSBpZDtcbiAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBnZXRCb2R5RWxlbWVudCgpLmFwcGVuZENoaWxkKGVsKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICAgIHZhciBib2R5ID0gZ2V0Qm9keUVsZW1lbnQoKTtcblxuICAgICAgaWYgKGJvZHkuY29udGFpbnMoZWwpKSB7XG4gICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtpZCwgdGV4dF0pO1xuICByZXR1cm4gaWQ7XG59XG5cbnZhciBBcHBDb250ZXh0ID0gUmVhY3RfX2RlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcblxudmFyIHBlZXJEZXBlbmRlbmNpZXMgPSB7XG5cdHJlYWN0OiBcIl4xNi44LjVcIixcblx0XCJyZWFjdC1kb21cIjogXCJeMTYuOC41XCJcbn07XG5cbnZhciBzZW12ZXIgPSAvKFxcZCspXFwuKFxcZCspXFwuKFxcZCspLztcblxudmFyIGdldFZlcnNpb24gPSBmdW5jdGlvbiBnZXRWZXJzaW9uKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBzZW12ZXIuZXhlYyh2YWx1ZSk7XG4gICEocmVzdWx0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlVuYWJsZSB0byBwYXJzZSBSZWFjdCB2ZXJzaW9uIFwiICsgdmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG1ham9yID0gTnVtYmVyKHJlc3VsdFsxXSk7XG4gIHZhciBtaW5vciA9IE51bWJlcihyZXN1bHRbMl0pO1xuICB2YXIgcGF0Y2ggPSBOdW1iZXIocmVzdWx0WzNdKTtcbiAgcmV0dXJuIHtcbiAgICBtYWpvcjogbWFqb3IsXG4gICAgbWlub3I6IG1pbm9yLFxuICAgIHBhdGNoOiBwYXRjaCxcbiAgICByYXc6IHZhbHVlXG4gIH07XG59O1xuXG52YXIgaXNTYXRpc2ZpZWQgPSBmdW5jdGlvbiBpc1NhdGlzZmllZChleHBlY3RlZCwgYWN0dWFsKSB7XG4gIGlmIChhY3R1YWwubWFqb3IgPiBleHBlY3RlZC5tYWpvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGFjdHVhbC5tYWpvciA8IGV4cGVjdGVkLm1ham9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGFjdHVhbC5taW5vciA+IGV4cGVjdGVkLm1pbm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYWN0dWFsLm1pbm9yIDwgZXhwZWN0ZWQubWlub3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYWN0dWFsLnBhdGNoID49IGV4cGVjdGVkLnBhdGNoO1xufTtcblxudmFyIGNoZWNrUmVhY3RWZXJzaW9uID0gKGZ1bmN0aW9uIChwZWVyRGVwVmFsdWUsIGFjdHVhbFZhbHVlKSB7XG4gIHZhciBwZWVyRGVwID0gZ2V0VmVyc2lvbihwZWVyRGVwVmFsdWUpO1xuICB2YXIgYWN0dWFsID0gZ2V0VmVyc2lvbihhY3R1YWxWYWx1ZSk7XG5cbiAgaWYgKGlzU2F0aXNmaWVkKHBlZXJEZXAsIGFjdHVhbCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgIFJlYWN0IHZlcnNpb246IFtcIiArIGFjdHVhbC5yYXcgKyBcIl1cXG4gICAgZG9lcyBub3Qgc2F0aXNmeSBleHBlY3RlZCBwZWVyIGRlcGVuZGVuY3kgdmVyc2lvbjogW1wiICsgcGVlckRlcC5yYXcgKyBcIl1cXG5cXG4gICAgVGhpcyBjYW4gcmVzdWx0IGluIHJ1biB0aW1lIGJ1Z3MsIGFuZCBldmVuIGZhdGFsIGNyYXNoZXNcXG4gIFwiKSA6IHZvaWQgMDtcbn0pO1xuXG52YXIgc3VmZml4ID0gXCJcXG4gIFdlIGV4cGVjdCBhIGh0bWw1IGRvY3R5cGU6IDwhZG9jdHlwZSBodG1sPlxcbiAgVGhpcyBpcyB0byBlbnN1cmUgY29uc2lzdGVudCBicm93c2VyIGxheW91dCBhbmQgbWVhc3VyZW1lbnRcXG5cXG4gIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL2d1aWRlcy9kb2N0eXBlLm1kXFxuXCI7XG52YXIgY2hlY2tEb2N0eXBlID0gKGZ1bmN0aW9uIChkb2MpIHtcbiAgdmFyIGRvY3R5cGUgPSBkb2MuZG9jdHlwZTtcblxuICBpZiAoIWRvY3R5cGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgTm8gPCFkb2N0eXBlIGh0bWw+IGZvdW5kLlxcblxcbiAgICAgIFwiICsgc3VmZml4ICsgXCJcXG4gICAgXCIpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkb2N0eXBlLm5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIFVuZXhwZWN0ZWQgPCFkb2N0eXBlPiBmb3VuZDogKFwiICsgZG9jdHlwZS5uYW1lICsgXCIpXFxuXFxuICAgICAgXCIgKyBzdWZmaXggKyBcIlxcbiAgICBcIikgOiB2b2lkIDA7XG4gIH1cblxuICBpZiAoZG9jdHlwZS5wdWJsaWNJZCAhPT0gJycpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgVW5leHBlY3RlZCA8IWRvY3R5cGU+IHB1YmxpY0lkIGZvdW5kOiAoXCIgKyBkb2N0eXBlLnB1YmxpY0lkICsgXCIpXFxuICAgICAgQSBodG1sNSBkb2N0eXBlIGRvZXMgbm90IGhhdmUgYSBwdWJsaWNJZFxcblxcbiAgICAgIFwiICsgc3VmZml4ICsgXCJcXG4gICAgXCIpIDogdm9pZCAwO1xuICB9XG59KTtcblxuZnVuY3Rpb24gdXNlRGV2KHVzZUhvb2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1c2VIb29rKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlRGV2U2V0dXBXYXJuaW5nKGZuLCBpbnB1dHMpIHtcbiAgdXNlRGV2KGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3IoXCJcXG4gICAgICAgICAgQSBzZXR1cCBwcm9ibGVtIHdhcyBlbmNvdW50ZXJlZC5cXG5cXG4gICAgICAgICAgPiBcIiArIGUubWVzc2FnZSArIFwiXFxuICAgICAgICBcIik7XG4gICAgICB9XG4gICAgfSwgaW5wdXRzKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZVN0YXJ0dXBWYWxpZGF0aW9uKCkge1xuICB1c2VEZXZTZXR1cFdhcm5pbmcoZnVuY3Rpb24gKCkge1xuICAgIGNoZWNrUmVhY3RWZXJzaW9uKHBlZXJEZXBlbmRlbmNpZXMucmVhY3QsIFJlYWN0X19kZWZhdWx0LnZlcnNpb24pO1xuICAgIGNoZWNrRG9jdHlwZShkb2N1bWVudCk7XG4gIH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gdXNlUHJldmlvdXMoY3VycmVudCkge1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKGN1cnJlbnQpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gY3VycmVudDtcbiAgfSk7XG4gIHJldHVybiByZWY7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIGxvY2sgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGlzQ2xhaW1lZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbihsb2NrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQWN0aXZlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsb2NrO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhaW0oYWJhbmRvbikge1xuICAgICEhbG9jayA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjbGFpbSBsb2NrIGFzIGl0IGlzIGFscmVhZHkgY2xhaW1lZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbmV3TG9jayA9IHtcbiAgICAgIGFiYW5kb246IGFiYW5kb25cbiAgICB9O1xuICAgIGxvY2sgPSBuZXdMb2NrO1xuICAgIHJldHVybiBuZXdMb2NrO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVsZWFzZSgpIHtcbiAgICAhbG9jayA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCByZWxlYXNlIGxvY2sgd2hlbiB0aGVyZSBpcyBubyBsb2NrJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2sgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5QWJhbmRvbigpIHtcbiAgICBpZiAobG9jaykge1xuICAgICAgbG9jay5hYmFuZG9uKCk7XG4gICAgICByZWxlYXNlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0NsYWltZWQ6IGlzQ2xhaW1lZCxcbiAgICBpc0FjdGl2ZTogaXNBY3RpdmUsXG4gICAgY2xhaW06IGNsYWltLFxuICAgIHJlbGVhc2U6IHJlbGVhc2UsXG4gICAgdHJ5QWJhbmRvbjogdHJ5QWJhbmRvblxuICB9O1xufVxuXG52YXIgdGFiID0gOTtcbnZhciBlbnRlciA9IDEzO1xudmFyIGVzY2FwZSA9IDI3O1xudmFyIHNwYWNlID0gMzI7XG52YXIgcGFnZVVwID0gMzM7XG52YXIgcGFnZURvd24gPSAzNDtcbnZhciBlbmQgPSAzNTtcbnZhciBob21lID0gMzY7XG52YXIgYXJyb3dMZWZ0ID0gMzc7XG52YXIgYXJyb3dVcCA9IDM4O1xudmFyIGFycm93UmlnaHQgPSAzOTtcbnZhciBhcnJvd0Rvd24gPSA0MDtcblxudmFyIF9wcmV2ZW50ZWRLZXlzO1xudmFyIHByZXZlbnRlZEtleXMgPSAoX3ByZXZlbnRlZEtleXMgPSB7fSwgX3ByZXZlbnRlZEtleXNbZW50ZXJdID0gdHJ1ZSwgX3ByZXZlbnRlZEtleXNbdGFiXSA9IHRydWUsIF9wcmV2ZW50ZWRLZXlzKTtcbnZhciBwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMgPSAoZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChwcmV2ZW50ZWRLZXlzW2V2ZW50LmtleUNvZGVdKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufSk7XG5cbnZhciBzdXBwb3J0ZWRFdmVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IFtiYXNlLCBcIm1zXCIgKyBiYXNlLCBcIndlYmtpdFwiICsgYmFzZSwgXCJtb3pcIiArIGJhc2UsIFwib1wiICsgYmFzZV07XG4gIHZhciBzdXBwb3J0ZWQgPSBmaW5kKGNhbmRpZGF0ZXMsIGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICByZXR1cm4gXCJvblwiICsgZXZlbnROYW1lIGluIGRvY3VtZW50O1xuICB9KTtcbiAgcmV0dXJuIHN1cHBvcnRlZCB8fCBiYXNlO1xufSgpO1xuXG52YXIgcHJpbWFyeUJ1dHRvbiA9IDA7XG52YXIgc2xvcHB5Q2xpY2tUaHJlc2hvbGQgPSA1O1xuXG5mdW5jdGlvbiBpc1Nsb3BweUNsaWNrVGhyZXNob2xkRXhjZWVkZWQob3JpZ2luYWwsIGN1cnJlbnQpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGN1cnJlbnQueCAtIG9yaWdpbmFsLngpID49IHNsb3BweUNsaWNrVGhyZXNob2xkIHx8IE1hdGguYWJzKGN1cnJlbnQueSAtIG9yaWdpbmFsLnkpID49IHNsb3BweUNsaWNrVGhyZXNob2xkO1xufVxuXG52YXIgaWRsZSQxID0ge1xuICB0eXBlOiAnSURMRSdcbn07XG5cbmZ1bmN0aW9uIGdldENhcHR1cmVCaW5kaW5ncyhfcmVmKSB7XG4gIHZhciBjYW5jZWwgPSBfcmVmLmNhbmNlbCxcbiAgICAgIGNvbXBsZXRlZCA9IF9yZWYuY29tcGxldGVkLFxuICAgICAgZ2V0UGhhc2UgPSBfcmVmLmdldFBoYXNlLFxuICAgICAgc2V0UGhhc2UgPSBfcmVmLnNldFBoYXNlO1xuICByZXR1cm4gW3tcbiAgICBldmVudE5hbWU6ICdtb3VzZW1vdmUnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbixcbiAgICAgICAgICBjbGllbnRYID0gZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICBjbGllbnRZID0gZXZlbnQuY2xpZW50WTtcblxuICAgICAgaWYgKGJ1dHRvbiAhPT0gcHJpbWFyeUJ1dHRvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgeDogY2xpZW50WCxcbiAgICAgICAgeTogY2xpZW50WVxuICAgICAgfTtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG5cbiAgICAgIGlmIChwaGFzZS50eXBlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHBoYXNlLmFjdGlvbnMubW92ZShwb2ludCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgIShwaGFzZS50eXBlID09PSAnUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGJlIElETEUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgcGVuZGluZyA9IHBoYXNlLnBvaW50O1xuXG4gICAgICBpZiAoIWlzU2xvcHB5Q2xpY2tUaHJlc2hvbGRFeGNlZWRlZChwZW5kaW5nLCBwb2ludCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGFjdGlvbnMgPSBwaGFzZS5hY3Rpb25zLmZsdWlkTGlmdChwb2ludCk7XG4gICAgICBzZXRQaGFzZSh7XG4gICAgICAgIHR5cGU6ICdEUkFHR0lORycsXG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ21vdXNldXAnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgIT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHBoYXNlLmFjdGlvbnMuZHJvcCh7XG4gICAgICAgIHNob3VsZEJsb2NrTmV4dENsaWNrOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGNvbXBsZXRlZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ21vdXNlZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZ2V0UGhhc2UoKS50eXBlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNhbmNlbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ2tleWRvd24nLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gZXNjYXBlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyhldmVudCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAncmVzaXplJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0sXG4gICAgZm46IGZ1bmN0aW9uIGZuKCkge1xuICAgICAgaWYgKGdldFBoYXNlKCkudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3dlYmtpdG1vdXNlZm9yY2Vkb3duJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG4gICAgICAhKHBoYXNlLnR5cGUgIT09ICdJRExFJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmV4cGVjdGVkIHBoYXNlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgICBpZiAocGhhc2UuYWN0aW9ucy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcygpKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiBzdXBwb3J0ZWRFdmVudE5hbWUsXG4gICAgZm46IGNhbmNlbFxuICB9XTtcbn1cblxuZnVuY3Rpb24gdXNlTW91c2VTZW5zb3IoYXBpKSB7XG4gIHZhciBwaGFzZVJlZiA9IFJlYWN0LnVzZVJlZihpZGxlJDEpO1xuICB2YXIgdW5iaW5kRXZlbnRzUmVmID0gUmVhY3QudXNlUmVmKG5vb3ApO1xuICB2YXIgc3RhcnRDYXB0dXJlQmluZGluZyA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50TmFtZTogJ21vdXNlZG93bicsXG4gICAgICBmbjogZnVuY3Rpb24gb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSBwcmltYXJ5QnV0dG9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFkcmFnZ2FibGVJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gYXBpLnRyeUdldExvY2soZHJhZ2dhYmxlSWQsIHN0b3AsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgeTogZXZlbnQuY2xpZW50WVxuICAgICAgICB9O1xuICAgICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgICAgICBzdGFydFBlbmRpbmdEcmFnKGFjdGlvbnMsIHBvaW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbYXBpXSk7XG4gIHZhciBwcmV2ZW50Rm9yY2VQcmVzc0JpbmRpbmcgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWU6ICd3ZWJraXRtb3VzZWZvcmNld2lsbGJlZ2luJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZCA9IGFwaS5maW5kQ2xvc2VzdERyYWdnYWJsZUlkKGV2ZW50KTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcGkuZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUoaWQpO1xuXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhcGkuY2FuR2V0TG9jayhpZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFthcGldKTtcbiAgdmFyIGxpc3RlbkZvckNhcHR1cmUgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIGxpc3RlbkZvckNhcHR1cmUoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9O1xuICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50ID0gYmluZEV2ZW50cyh3aW5kb3csIFtwcmV2ZW50Rm9yY2VQcmVzc0JpbmRpbmcsIHN0YXJ0Q2FwdHVyZUJpbmRpbmddLCBvcHRpb25zKTtcbiAgfSwgW3ByZXZlbnRGb3JjZVByZXNzQmluZGluZywgc3RhcnRDYXB0dXJlQmluZGluZ10pO1xuICB2YXIgc3RvcCA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gcGhhc2VSZWYuY3VycmVudDtcblxuICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdJRExFJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBoYXNlUmVmLmN1cnJlbnQgPSBpZGxlJDE7XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gIH0sIFtsaXN0ZW5Gb3JDYXB0dXJlXSk7XG4gIHZhciBjYW5jZWwgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGhhc2UgPSBwaGFzZVJlZi5jdXJyZW50O1xuICAgIHN0b3AoKTtcblxuICAgIGlmIChwaGFzZS50eXBlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICBwaGFzZS5hY3Rpb25zLmNhbmNlbCh7XG4gICAgICAgIHNob3VsZEJsb2NrTmV4dENsaWNrOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICBwaGFzZS5hY3Rpb25zLmFib3J0KCk7XG4gICAgfVxuICB9LCBbc3RvcF0pO1xuICB2YXIgYmluZENhcHR1cmluZ0V2ZW50cyA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gYmluZENhcHR1cmluZ0V2ZW50cygpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIGJpbmRpbmdzID0gZ2V0Q2FwdHVyZUJpbmRpbmdzKHtcbiAgICAgIGNhbmNlbDogY2FuY2VsLFxuICAgICAgY29tcGxldGVkOiBzdG9wLFxuICAgICAgZ2V0UGhhc2U6IGZ1bmN0aW9uIGdldFBoYXNlKCkge1xuICAgICAgICByZXR1cm4gcGhhc2VSZWYuY3VycmVudDtcbiAgICAgIH0sXG4gICAgICBzZXRQaGFzZTogZnVuY3Rpb24gc2V0UGhhc2UocGhhc2UpIHtcbiAgICAgICAgcGhhc2VSZWYuY3VycmVudCA9IHBoYXNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50ID0gYmluZEV2ZW50cyh3aW5kb3csIGJpbmRpbmdzLCBvcHRpb25zKTtcbiAgfSwgW2NhbmNlbCwgc3RvcF0pO1xuICB2YXIgc3RhcnRQZW5kaW5nRHJhZyA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gc3RhcnRQZW5kaW5nRHJhZyhhY3Rpb25zLCBwb2ludCkge1xuICAgICEocGhhc2VSZWYuY3VycmVudC50eXBlID09PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gbW92ZSBmcm9tIElETEUgdG8gUEVORElORyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHBoYXNlUmVmLmN1cnJlbnQgPSB7XG4gICAgICB0eXBlOiAnUEVORElORycsXG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBhY3Rpb25zOiBhY3Rpb25zXG4gICAgfTtcbiAgICBiaW5kQ2FwdHVyaW5nRXZlbnRzKCk7XG4gIH0sIFtiaW5kQ2FwdHVyaW5nRXZlbnRzXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgbGlzdGVuRm9yQ2FwdHVyZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICB9O1xuICB9LCBbbGlzdGVuRm9yQ2FwdHVyZV0pO1xufVxuXG52YXIgX3Njcm9sbEp1bXBLZXlzO1xuXG5mdW5jdGlvbiBub29wJDEoKSB7fVxuXG52YXIgc2Nyb2xsSnVtcEtleXMgPSAoX3Njcm9sbEp1bXBLZXlzID0ge30sIF9zY3JvbGxKdW1wS2V5c1twYWdlRG93bl0gPSB0cnVlLCBfc2Nyb2xsSnVtcEtleXNbcGFnZVVwXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1tob21lXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1tlbmRdID0gdHJ1ZSwgX3Njcm9sbEp1bXBLZXlzKTtcblxuZnVuY3Rpb24gZ2V0RHJhZ2dpbmdCaW5kaW5ncyhhY3Rpb25zLCBzdG9wKSB7XG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBzdG9wKCk7XG4gICAgYWN0aW9ucy5jYW5jZWwoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgc3RvcCgpO1xuICAgIGFjdGlvbnMuZHJvcCgpO1xuICB9XG5cbiAgcmV0dXJuIFt7XG4gICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gZXNjYXBlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBzcGFjZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBkcm9wKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93RG93bikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBhY3Rpb25zLm1vdmVEb3duKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93VXApIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYWN0aW9ucy5tb3ZlVXAoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dSaWdodCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBhY3Rpb25zLm1vdmVSaWdodCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBhcnJvd0xlZnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYWN0aW9ucy5tb3ZlTGVmdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxKdW1wS2V5c1tldmVudC5rZXlDb2RlXSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyhldmVudCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZXVwJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hzdGFydCcsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAncmVzaXplJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd3aGVlbCcsXG4gICAgZm46IGNhbmNlbCxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiBzdXBwb3J0ZWRFdmVudE5hbWUsXG4gICAgZm46IGNhbmNlbFxuICB9XTtcbn1cblxuZnVuY3Rpb24gdXNlS2V5Ym9hcmRTZW5zb3IoYXBpKSB7XG4gIHZhciB1bmJpbmRFdmVudHNSZWYgPSBSZWFjdC51c2VSZWYobm9vcCQxKTtcbiAgdmFyIHN0YXJ0Q2FwdHVyZUJpbmRpbmcgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBvbktleURvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSAhPT0gc3BhY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFkcmFnZ2FibGVJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmVEcmFnID0gYXBpLnRyeUdldExvY2soZHJhZ2dhYmxlSWQsIHN0b3AsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFwcmVEcmFnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGlzQ2FwdHVyaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBwcmVEcmFnLnNuYXBMaWZ0KCk7XG4gICAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAhaXNDYXB0dXJpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBjYXB0dXJpbmcgYSBrZXlib2FyZCBkcmFnIHdoZW4gbm90IGNhcHR1cmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBpc0NhcHR1cmluZyA9IGZhbHNlO1xuICAgICAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgICAgICAgbGlzdGVuRm9yQ2FwdHVyZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgZ2V0RHJhZ2dpbmdCaW5kaW5ncyhhY3Rpb25zLCBzdG9wKSwge1xuICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2FwaV0pO1xuICB2YXIgbGlzdGVuRm9yQ2FwdHVyZSA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5U3RhcnRDYXB0dXJlKCkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfTtcbiAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCA9IGJpbmRFdmVudHMod2luZG93LCBbc3RhcnRDYXB0dXJlQmluZGluZ10sIG9wdGlvbnMpO1xuICB9LCBbc3RhcnRDYXB0dXJlQmluZGluZ10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGxpc3RlbkZvckNhcHR1cmUoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgfTtcbiAgfSwgW2xpc3RlbkZvckNhcHR1cmVdKTtcbn1cblxudmFyIGlkbGUkMiA9IHtcbiAgdHlwZTogJ0lETEUnXG59O1xudmFyIHRpbWVGb3JMb25nUHJlc3MgPSAxMjA7XG52YXIgZm9yY2VQcmVzc1RocmVzaG9sZCA9IDAuMTU7XG5cbmZ1bmN0aW9uIGdldFdpbmRvd0JpbmRpbmdzKF9yZWYpIHtcbiAgdmFyIGNhbmNlbCA9IF9yZWYuY2FuY2VsLFxuICAgICAgZ2V0UGhhc2UgPSBfcmVmLmdldFBoYXNlO1xuICByZXR1cm4gW3tcbiAgICBldmVudE5hbWU6ICdvcmllbnRhdGlvbmNoYW5nZScsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAncmVzaXplJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdjb250ZXh0bWVudScsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ2tleWRvd24nLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKGdldFBoYXNlKCkudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gZXNjYXBlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNhbmNlbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogc3VwcG9ydGVkRXZlbnROYW1lLFxuICAgIGZuOiBjYW5jZWxcbiAgfV07XG59XG5cbmZ1bmN0aW9uIGdldEhhbmRsZUJpbmRpbmdzKF9yZWYyKSB7XG4gIHZhciBjYW5jZWwgPSBfcmVmMi5jYW5jZWwsXG4gICAgICBjb21wbGV0ZWQgPSBfcmVmMi5jb21wbGV0ZWQsXG4gICAgICBnZXRQaGFzZSA9IF9yZWYyLmdldFBoYXNlO1xuICByZXR1cm4gW3tcbiAgICBldmVudE5hbWU6ICd0b3VjaG1vdmUnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG5cbiAgICAgIGlmIChwaGFzZS50eXBlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBoYXNlLmhhc01vdmVkID0gdHJ1ZTtcbiAgICAgIHZhciBfZXZlbnQkdG91Y2hlcyQgPSBldmVudC50b3VjaGVzWzBdLFxuICAgICAgICAgIGNsaWVudFggPSBfZXZlbnQkdG91Y2hlcyQuY2xpZW50WCxcbiAgICAgICAgICBjbGllbnRZID0gX2V2ZW50JHRvdWNoZXMkLmNsaWVudFk7XG4gICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgIHg6IGNsaWVudFgsXG4gICAgICAgIHk6IGNsaWVudFlcbiAgICAgIH07XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcGhhc2UuYWN0aW9ucy5tb3ZlKHBvaW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaGVuZCcsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcGhhc2UuYWN0aW9ucy5kcm9wKHtcbiAgICAgICAgc2hvdWxkQmxvY2tOZXh0Q2xpY2s6IHRydWVcbiAgICAgIH0pO1xuICAgICAgY29tcGxldGVkKCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hjYW5jZWwnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKGdldFBoYXNlKCkudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hmb3JjZWNoYW5nZScsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuICAgICAgIShwaGFzZS50eXBlICE9PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuXG4gICAgICBpZiAoIXRvdWNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRm9yY2VQcmVzcyA9IHRvdWNoLmZvcmNlID49IGZvcmNlUHJlc3NUaHJlc2hvbGQ7XG5cbiAgICAgIGlmICghaXNGb3JjZVByZXNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3VsZFJlc3BlY3QgPSBwaGFzZS5hY3Rpb25zLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzKCk7XG5cbiAgICAgIGlmIChwaGFzZS50eXBlID09PSAnUEVORElORycpIHtcbiAgICAgICAgaWYgKHNob3VsZFJlc3BlY3QpIHtcbiAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFJlc3BlY3QpIHtcbiAgICAgICAgaWYgKHBoYXNlLmhhc01vdmVkKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogc3VwcG9ydGVkRXZlbnROYW1lLFxuICAgIGZuOiBjYW5jZWxcbiAgfV07XG59XG5cbmZ1bmN0aW9uIHVzZU1vdXNlU2Vuc29yJDEoYXBpKSB7XG4gIHZhciBwaGFzZVJlZiA9IFJlYWN0LnVzZVJlZihpZGxlJDIpO1xuICB2YXIgdW5iaW5kRXZlbnRzUmVmID0gUmVhY3QudXNlUmVmKG5vb3ApO1xuICB2YXIgZ2V0UGhhc2UgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIGdldFBoYXNlKCkge1xuICAgIHJldHVybiBwaGFzZVJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG4gIHZhciBzZXRQaGFzZSA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gc2V0UGhhc2UocGhhc2UpIHtcbiAgICBwaGFzZVJlZi5jdXJyZW50ID0gcGhhc2U7XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0Q2FwdHVyZUJpbmRpbmcgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICAgIGZuOiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFkcmFnZ2FibGVJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gYXBpLnRyeUdldExvY2soZHJhZ2dhYmxlSWQsIHN0b3AsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgdmFyIGNsaWVudFggPSB0b3VjaC5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WSA9IHRvdWNoLmNsaWVudFk7XG4gICAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgICB4OiBjbGllbnRYLFxuICAgICAgICAgIHk6IGNsaWVudFlcbiAgICAgICAgfTtcbiAgICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICAgICAgc3RhcnRQZW5kaW5nRHJhZyhhY3Rpb25zLCBwb2ludCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2FwaV0pO1xuICB2YXIgbGlzdGVuRm9yQ2FwdHVyZSA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gbGlzdGVuRm9yQ2FwdHVyZSgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH07XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3N0YXJ0Q2FwdHVyZUJpbmRpbmddLCBvcHRpb25zKTtcbiAgfSwgW3N0YXJ0Q2FwdHVyZUJpbmRpbmddKTtcbiAgdmFyIHN0b3AgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHBoYXNlUmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoY3VycmVudC50eXBlID09PSAnSURMRScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudC50eXBlID09PSAnUEVORElORycpIHtcbiAgICAgIGNsZWFyVGltZW91dChjdXJyZW50LmxvbmdQcmVzc1RpbWVySWQpO1xuICAgIH1cblxuICAgIHNldFBoYXNlKGlkbGUkMik7XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gIH0sIFtsaXN0ZW5Gb3JDYXB0dXJlLCBzZXRQaGFzZV0pO1xuICB2YXIgY2FuY2VsID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBoYXNlID0gcGhhc2VSZWYuY3VycmVudDtcbiAgICBzdG9wKCk7XG5cbiAgICBpZiAocGhhc2UudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgcGhhc2UuYWN0aW9ucy5jYW5jZWwoe1xuICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgcGhhc2UuYWN0aW9ucy5hYm9ydCgpO1xuICAgIH1cbiAgfSwgW3N0b3BdKTtcbiAgdmFyIGJpbmRDYXB0dXJpbmdFdmVudHMgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIGJpbmRDYXB0dXJpbmdFdmVudHMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9O1xuICAgIHZhciBhcmdzID0ge1xuICAgICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgICBjb21wbGV0ZWQ6IHN0b3AsXG4gICAgICBnZXRQaGFzZTogZ2V0UGhhc2VcbiAgICB9O1xuICAgIHZhciB1bmJpbmRUYXJnZXQgPSBiaW5kRXZlbnRzKHdpbmRvdywgZ2V0SGFuZGxlQmluZGluZ3MoYXJncyksIG9wdGlvbnMpO1xuICAgIHZhciB1bmJpbmRXaW5kb3cgPSBiaW5kRXZlbnRzKHdpbmRvdywgZ2V0V2luZG93QmluZGluZ3MoYXJncyksIG9wdGlvbnMpO1xuXG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBmdW5jdGlvbiB1bmJpbmRBbGwoKSB7XG4gICAgICB1bmJpbmRUYXJnZXQoKTtcbiAgICAgIHVuYmluZFdpbmRvdygpO1xuICAgIH07XG4gIH0sIFtjYW5jZWwsIGdldFBoYXNlLCBzdG9wXSk7XG4gIHZhciBzdGFydERyYWdnaW5nID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiBzdGFydERyYWdnaW5nKCkge1xuICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG4gICAgIShwaGFzZS50eXBlID09PSAnUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBzdGFydCBkcmFnZ2luZyBmcm9tIHBoYXNlIFwiICsgcGhhc2UudHlwZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb25zID0gcGhhc2UuYWN0aW9ucy5mbHVpZExpZnQocGhhc2UucG9pbnQpO1xuICAgIHNldFBoYXNlKHtcbiAgICAgIHR5cGU6ICdEUkFHR0lORycsXG4gICAgICBhY3Rpb25zOiBhY3Rpb25zLFxuICAgICAgaGFzTW92ZWQ6IGZhbHNlXG4gICAgfSk7XG4gIH0sIFtnZXRQaGFzZSwgc2V0UGhhc2VdKTtcbiAgdmFyIHN0YXJ0UGVuZGluZ0RyYWcgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIHN0YXJ0UGVuZGluZ0RyYWcoYWN0aW9ucywgcG9pbnQpIHtcbiAgICAhKGdldFBoYXNlKCkudHlwZSA9PT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHRvIG1vdmUgZnJvbSBJRExFIHRvIFBFTkRJTkcgZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbG9uZ1ByZXNzVGltZXJJZCA9IHNldFRpbWVvdXQoc3RhcnREcmFnZ2luZywgdGltZUZvckxvbmdQcmVzcyk7XG4gICAgc2V0UGhhc2Uoe1xuICAgICAgdHlwZTogJ1BFTkRJTkcnLFxuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgYWN0aW9uczogYWN0aW9ucyxcbiAgICAgIGxvbmdQcmVzc1RpbWVySWQ6IGxvbmdQcmVzc1RpbWVySWRcbiAgICB9KTtcbiAgICBiaW5kQ2FwdHVyaW5nRXZlbnRzKCk7XG4gIH0sIFtiaW5kQ2FwdHVyaW5nRXZlbnRzLCBnZXRQaGFzZSwgc2V0UGhhc2UsIHN0YXJ0RHJhZ2dpbmddKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgICBjbGVhclRpbWVvdXQocGhhc2UubG9uZ1ByZXNzVGltZXJJZCk7XG4gICAgICAgIHNldFBoYXNlKGlkbGUkMik7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2dldFBoYXNlLCBsaXN0ZW5Gb3JDYXB0dXJlLCBzZXRQaGFzZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIHdlYmtpdEhhY2soKSB7XG4gICAgdmFyIHVuYmluZCA9IGJpbmRFdmVudHMod2luZG93LCBbe1xuICAgICAgZXZlbnROYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjYXB0dXJlOiBmYWxzZSxcbiAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIHVuYmluZDtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB1c2VWYWxpZGF0ZVNlbnNvckhvb2tzKHNlbnNvckhvb2tzKSB7XG4gIHVzZURldihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpb3VzUmVmID0gdXNlUHJldmlvdXMoc2Vuc29ySG9va3MpO1xuICAgIHVzZURldlNldHVwV2FybmluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAhKHByZXZpb3VzUmVmLmN1cnJlbnQubGVuZ3RoID09PSBzZW5zb3JIb29rcy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGNoYW5nZSB0aGUgYW1vdW50IG9mIHNlbnNvciBob29rcyBhZnRlciBtb3VudGluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9KTtcbiAgfSk7XG59XG5cbnZhciBpbnRlcmFjdGl2ZVRhZ05hbWVzID0ge1xuICBpbnB1dDogdHJ1ZSxcbiAgYnV0dG9uOiB0cnVlLFxuICB0ZXh0YXJlYTogdHJ1ZSxcbiAgc2VsZWN0OiB0cnVlLFxuICBvcHRpb246IHRydWUsXG4gIG9wdGdyb3VwOiB0cnVlLFxuICB2aWRlbzogdHJ1ZSxcbiAgYXVkaW86IHRydWVcbn07XG5cbmZ1bmN0aW9uIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQocGFyZW50LCBjdXJyZW50KSB7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaGFzQW5JbnRlcmFjdGl2ZVRhZyA9IEJvb2xlYW4oaW50ZXJhY3RpdmVUYWdOYW1lc1tjdXJyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV0pO1xuXG4gIGlmIChoYXNBbkludGVyYWN0aXZlVGFnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgYXR0cmlidXRlID0gY3VycmVudC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpO1xuXG4gIGlmIChhdHRyaWJ1dGUgPT09ICd0cnVlJyB8fCBhdHRyaWJ1dGUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoY3VycmVudCA9PT0gcGFyZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQocGFyZW50LCBjdXJyZW50LnBhcmVudEVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBpc0V2ZW50SW5JbnRlcmFjdGl2ZUVsZW1lbnQoZHJhZ2dhYmxlLCBldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIGlmICghaXNIdG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQoZHJhZ2dhYmxlLCB0YXJnZXQpO1xufVxuXG52YXIgZ2V0Qm9yZGVyQm94Q2VudGVyUG9zaXRpb24gPSAoZnVuY3Rpb24gKGVsKSB7XG4gIHJldHVybiBjc3NCb3hNb2RlbC5nZXRSZWN0KGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS5jZW50ZXI7XG59KTtcblxuZnVuY3Rpb24gaXNFbGVtZW50KGVsKSB7XG4gIHJldHVybiBlbCBpbnN0YW5jZW9mIGdldFdpbmRvd0Zyb21FbChlbCkuRWxlbWVudDtcbn1cblxudmFyIHN1cHBvcnRlZE1hdGNoZXNOYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmFzZSA9ICdtYXRjaGVzJztcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgdmFyIGNhbmRpZGF0ZXMgPSBbYmFzZSwgJ21zTWF0Y2hlc1NlbGVjdG9yJywgJ3dlYmtpdE1hdGNoZXNTZWxlY3RvciddO1xuICB2YXIgdmFsdWUgPSBmaW5kKGNhbmRpZGF0ZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgaW4gRWxlbWVudC5wcm90b3R5cGU7XG4gIH0pO1xuICByZXR1cm4gdmFsdWUgfHwgYmFzZTtcbn0oKTtcblxuZnVuY3Rpb24gY2xvc2VzdFBvbnlmaWxsKGVsLCBzZWxlY3Rvcikge1xuICBpZiAoZWwgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGVsW3N1cHBvcnRlZE1hdGNoZXNOYW1lXShzZWxlY3RvcikpIHtcbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdFBvbnlmaWxsKGVsLnBhcmVudEVsZW1lbnQsIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdCQxKGVsLCBzZWxlY3Rvcikge1xuICBpZiAoZWwuY2xvc2VzdCkge1xuICAgIHJldHVybiBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0UG9ueWZpbGwoZWwsIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VsZWN0b3IoY29udGV4dElkKSB7XG4gIHJldHVybiBcIltcIiArIGRyYWdIYW5kbGUuY29udGV4dElkICsgXCI9XFxcIlwiICsgY29udGV4dElkICsgXCJcXFwiXVwiO1xufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdERyYWdIYW5kbGVGcm9tRXZlbnQoY29udGV4dElkLCBldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIGlmICghaXNFbGVtZW50KHRhcmdldCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdldmVudC50YXJnZXQgbXVzdCBiZSBhIEVsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGNvbnRleHRJZCk7XG4gIHZhciBoYW5kbGUgPSBjbG9zZXN0JDEodGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgaWYgKCFoYW5kbGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNIdG1sRWxlbWVudChoYW5kbGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnZHJhZyBoYW5kbGUgbXVzdCBiZSBhIEhUTUxFbGVtZW50JykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlO1xufVxuXG5mdW5jdGlvbiB0cnlHZXRDbG9zZXN0RHJhZ2dhYmxlSWRGcm9tRXZlbnQoY29udGV4dElkLCBldmVudCkge1xuICB2YXIgaGFuZGxlID0gZmluZENsb3Nlc3REcmFnSGFuZGxlRnJvbUV2ZW50KGNvbnRleHRJZCwgZXZlbnQpO1xuXG4gIGlmICghaGFuZGxlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlLmdldEF0dHJpYnV0ZShkcmFnSGFuZGxlLmRyYWdnYWJsZUlkKTtcbn1cblxuZnVuY3Rpb24gZmluZERyYWdnYWJsZShjb250ZXh0SWQsIGRyYWdnYWJsZUlkKSB7XG4gIHZhciBzZWxlY3RvciA9IFwiW1wiICsgZHJhZ2dhYmxlLmNvbnRleHRJZCArIFwiPVxcXCJcIiArIGNvbnRleHRJZCArIFwiXFxcIl1cIjtcbiAgdmFyIHBvc3NpYmxlID0gdG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gIHZhciBkcmFnZ2FibGUkMSA9IGZpbmQocG9zc2libGUsIGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoZHJhZ2dhYmxlLmlkKSA9PT0gZHJhZ2dhYmxlSWQ7XG4gIH0pO1xuXG4gIGlmICghZHJhZ2dhYmxlJDEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNIdG1sRWxlbWVudChkcmFnZ2FibGUkMSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdEcmFnZ2FibGUgZWxlbWVudCBpcyBub3QgYSBIVE1MRWxlbWVudCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRyYWdnYWJsZSQxO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBfaXNBY3RpdmUoX3JlZikge1xuICB2YXIgZXhwZWN0ZWQgPSBfcmVmLmV4cGVjdGVkLFxuICAgICAgcGhhc2UgPSBfcmVmLnBoYXNlLFxuICAgICAgaXNMb2NrQWN0aXZlID0gX3JlZi5pc0xvY2tBY3RpdmUsXG4gICAgICBzaG91bGRXYXJuID0gX3JlZi5zaG91bGRXYXJuO1xuXG4gIGlmICghaXNMb2NrQWN0aXZlKCkpIHtcbiAgICBpZiAoc2hvdWxkV2Fybikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQ2Fubm90IHBlcmZvcm0gYWN0aW9uLlxcbiAgICAgICAgVGhlIHNlbnNvciBubyBsb25nZXIgaGFzIGFuIGFjdGlvbiBsb2NrLlxcblxcbiAgICAgICAgVGlwczpcXG5cXG4gICAgICAgIC0gVGhyb3cgYXdheSB5b3VyIGFjdGlvbiBoYW5kbGVycyB3aGVuIGZvcmNlU3RvcCgpIGlzIGNhbGxlZFxcbiAgICAgICAgLSBDaGVjayBhY3Rpb25zLmlzQWN0aXZlKCkgaWYgeW91IHJlYWxseSBuZWVkIHRvXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChleHBlY3RlZCAhPT0gcGhhc2UpIHtcbiAgICBpZiAoc2hvdWxkV2Fybikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQ2Fubm90IHBlcmZvcm0gYWN0aW9uLlxcbiAgICAgICAgVGhlIGFjdGlvbnMgeW91IHVzZWQgYmVsb25nIHRvIGFuIG91dGRhdGVkIHBoYXNlXFxuXFxuICAgICAgICBDdXJyZW50IHBoYXNlOiBcIiArIGV4cGVjdGVkICsgXCJcXG4gICAgICAgIFlvdSBjYWxsZWQgYW4gYWN0aW9uIGZyb20gb3V0ZGF0ZWQgcGhhc2U6IFwiICsgcGhhc2UgKyBcIlxcblxcbiAgICAgICAgVGlwczpcXG5cXG4gICAgICAgIC0gRG8gbm90IHVzZSBwcmVEcmFnQWN0aW9ucyBhY3Rpb25zIGFmdGVyIGNhbGxpbmcgcHJlRHJhZ0FjdGlvbnMubGlmdCgpXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjYW5TdGFydChfcmVmMikge1xuICB2YXIgbG9ja0FQSSA9IF9yZWYyLmxvY2tBUEksXG4gICAgICBzdG9yZSA9IF9yZWYyLnN0b3JlLFxuICAgICAgcmVnaXN0cnkgPSBfcmVmMi5yZWdpc3RyeSxcbiAgICAgIGRyYWdnYWJsZUlkID0gX3JlZjIuZHJhZ2dhYmxlSWQ7XG5cbiAgaWYgKGxvY2tBUEkuaXNDbGFpbWVkKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcmFnZ2FibGUuZmluZEJ5SWQoZHJhZ2dhYmxlSWQpO1xuXG4gIGlmICghZW50cnkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiVW5hYmxlIHRvIGZpbmQgZHJhZ2dhYmxlIHdpdGggaWQ6IFwiICsgZHJhZ2dhYmxlSWQpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghZW50cnkub3B0aW9ucy5pc0VuYWJsZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIWNhblN0YXJ0RHJhZyhzdG9yZS5nZXRTdGF0ZSgpLCBkcmFnZ2FibGVJZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdHJ5U3RhcnQoX3JlZjMpIHtcbiAgdmFyIGxvY2tBUEkgPSBfcmVmMy5sb2NrQVBJLFxuICAgICAgY29udGV4dElkID0gX3JlZjMuY29udGV4dElkLFxuICAgICAgc3RvcmUgPSBfcmVmMy5zdG9yZSxcbiAgICAgIHJlZ2lzdHJ5ID0gX3JlZjMucmVnaXN0cnksXG4gICAgICBkcmFnZ2FibGVJZCA9IF9yZWYzLmRyYWdnYWJsZUlkLFxuICAgICAgZm9yY2VTZW5zb3JTdG9wID0gX3JlZjMuZm9yY2VTZW5zb3JTdG9wLFxuICAgICAgc291cmNlRXZlbnQgPSBfcmVmMy5zb3VyY2VFdmVudDtcbiAgdmFyIHNob3VsZFN0YXJ0ID0gY2FuU3RhcnQoe1xuICAgIGxvY2tBUEk6IGxvY2tBUEksXG4gICAgc3RvcmU6IHN0b3JlLFxuICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlSWRcbiAgfSk7XG5cbiAgaWYgKCFzaG91bGRTdGFydCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGVudHJ5ID0gcmVnaXN0cnkuZHJhZ2dhYmxlLmdldEJ5SWQoZHJhZ2dhYmxlSWQpO1xuICB2YXIgZWwgPSBmaW5kRHJhZ2dhYmxlKGNvbnRleHRJZCwgZW50cnkuZGVzY3JpcHRvci5pZCk7XG5cbiAgaWYgKCFlbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJVbmFibGUgdG8gZmluZCBkcmFnZ2FibGUgZWxlbWVudCB3aXRoIGlkOiBcIiArIGRyYWdnYWJsZUlkKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChzb3VyY2VFdmVudCAmJiAhZW50cnkub3B0aW9ucy5jYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyAmJiBpc0V2ZW50SW5JbnRlcmFjdGl2ZUVsZW1lbnQoZWwsIHNvdXJjZUV2ZW50KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxvY2sgPSBsb2NrQVBJLmNsYWltKGZvcmNlU2Vuc29yU3RvcCB8fCBub29wKTtcbiAgdmFyIHBoYXNlID0gJ1BSRV9EUkFHJztcblxuICBmdW5jdGlvbiBnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcygpIHtcbiAgICByZXR1cm4gZW50cnkub3B0aW9ucy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTG9ja0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gbG9ja0FQSS5pc0FjdGl2ZShsb2NrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeURpc3BhdGNoKGV4cGVjdGVkLCBnZXRBY3Rpb24pIHtcbiAgICBpZiAoX2lzQWN0aXZlKHtcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgIGlzTG9ja0FjdGl2ZTogaXNMb2NrQWN0aXZlLFxuICAgICAgc2hvdWxkV2FybjogdHJ1ZVxuICAgIH0pKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChnZXRBY3Rpb24oKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nID0gdHJ5RGlzcGF0Y2guYmluZChudWxsLCAnRFJBR0dJTkcnKTtcblxuICBmdW5jdGlvbiBsaWZ0JDEoYXJncykge1xuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcbiAgICAgIGxvY2tBUEkucmVsZWFzZSgpO1xuICAgICAgcGhhc2UgPSAnQ09NUExFVEVEJztcbiAgICB9XG5cbiAgICBpZiAocGhhc2UgIT09ICdQUkVfRFJBRycpIHtcbiAgICAgIGNvbXBsZXRlZCgpO1xuICAgICAgIShwaGFzZSA9PT0gJ1BSRV9EUkFHJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGxpZnQgaW4gcGhhc2UgXCIgKyBwaGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHN0b3JlLmRpc3BhdGNoKGxpZnQoYXJncy5saWZ0QWN0aW9uQXJncykpO1xuICAgIHBoYXNlID0gJ0RSQUdHSU5HJztcblxuICAgIGZ1bmN0aW9uIGZpbmlzaChyZWFzb24sIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYXJncy5jbGVhbnVwKCk7XG5cbiAgICAgIGlmIChvcHRpb25zLnNob3VsZEJsb2NrTmV4dENsaWNrKSB7XG4gICAgICAgIHZhciB1bmJpbmQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3tcbiAgICAgICAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgICAgICAgZm46IHByZXZlbnREZWZhdWx0LFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1dKTtcbiAgICAgICAgc2V0VGltZW91dCh1bmJpbmQpO1xuICAgICAgfVxuXG4gICAgICBjb21wbGV0ZWQoKTtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGRyb3Aoe1xuICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBpc0FjdGl2ZTogZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBfaXNBY3RpdmUoe1xuICAgICAgICAgIGV4cGVjdGVkOiAnRFJBR0dJTkcnLFxuICAgICAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgICAgICBpc0xvY2tBY3RpdmU6IGlzTG9ja0FjdGl2ZSxcbiAgICAgICAgICBzaG91bGRXYXJuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaCgnRFJPUCcsIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaCgnQ0FOQ0VMJywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSwgYXJncy5hY3Rpb25zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdWlkTGlmdChjbGllbnRTZWxlY3Rpb24pIHtcbiAgICB2YXIgbW92ZSQxID0gcmFmU2NoZChmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICB0cnlEaXNwYXRjaFdoZW5EcmFnZ2luZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBtb3ZlKHtcbiAgICAgICAgICBjbGllbnQ6IGNsaWVudFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBhcGkgPSBsaWZ0JDEoe1xuICAgICAgbGlmdEFjdGlvbkFyZ3M6IHtcbiAgICAgICAgaWQ6IGRyYWdnYWJsZUlkLFxuICAgICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgbW92ZW1lbnRNb2RlOiAnRkxVSUQnXG4gICAgICB9LFxuICAgICAgY2xlYW51cDogZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgcmV0dXJuIG1vdmUkMS5jYW5jZWwoKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIG1vdmU6IG1vdmUkMVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXBpLCB7XG4gICAgICBtb3ZlOiBtb3ZlJDFcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNuYXBMaWZ0KCkge1xuICAgIHZhciBhY3Rpb25zID0ge1xuICAgICAgbW92ZVVwOiBmdW5jdGlvbiBtb3ZlVXAkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKG1vdmVVcCk7XG4gICAgICB9LFxuICAgICAgbW92ZVJpZ2h0OiBmdW5jdGlvbiBtb3ZlUmlnaHQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKG1vdmVSaWdodCk7XG4gICAgICB9LFxuICAgICAgbW92ZURvd246IGZ1bmN0aW9uIG1vdmVEb3duJDEoKSB7XG4gICAgICAgIHJldHVybiB0cnlEaXNwYXRjaFdoZW5EcmFnZ2luZyhtb3ZlRG93bik7XG4gICAgICB9LFxuICAgICAgbW92ZUxlZnQ6IGZ1bmN0aW9uIG1vdmVMZWZ0JDEoKSB7XG4gICAgICAgIHJldHVybiB0cnlEaXNwYXRjaFdoZW5EcmFnZ2luZyhtb3ZlTGVmdCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbGlmdCQxKHtcbiAgICAgIGxpZnRBY3Rpb25BcmdzOiB7XG4gICAgICAgIGlkOiBkcmFnZ2FibGVJZCxcbiAgICAgICAgY2xpZW50U2VsZWN0aW9uOiBnZXRCb3JkZXJCb3hDZW50ZXJQb3NpdGlvbihlbCksXG4gICAgICAgIG1vdmVtZW50TW9kZTogJ1NOQVAnXG4gICAgICB9LFxuICAgICAgY2xlYW51cDogbm9vcCxcbiAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0UHJlRHJhZygpIHtcbiAgICB2YXIgc2hvdWxkUmVsZWFzZSA9IF9pc0FjdGl2ZSh7XG4gICAgICBleHBlY3RlZDogJ1BSRV9EUkFHJyxcbiAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgIGlzTG9ja0FjdGl2ZTogaXNMb2NrQWN0aXZlLFxuICAgICAgc2hvdWxkV2FybjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHNob3VsZFJlbGVhc2UpIHtcbiAgICAgIGxvY2tBUEkucmVsZWFzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcmVEcmFnID0ge1xuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICAgIHJldHVybiBfaXNBY3RpdmUoe1xuICAgICAgICBleHBlY3RlZDogJ1BSRV9EUkFHJyxcbiAgICAgICAgcGhhc2U6IHBoYXNlLFxuICAgICAgICBpc0xvY2tBY3RpdmU6IGlzTG9ja0FjdGl2ZSxcbiAgICAgICAgc2hvdWxkV2FybjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgIGZsdWlkTGlmdDogZmx1aWRMaWZ0LFxuICAgIHNuYXBMaWZ0OiBzbmFwTGlmdCxcbiAgICBhYm9ydDogYWJvcnRQcmVEcmFnXG4gIH07XG4gIHJldHVybiBwcmVEcmFnO1xufVxuXG52YXIgZGVmYXVsdFNlbnNvcnMgPSBbdXNlTW91c2VTZW5zb3IsIHVzZUtleWJvYXJkU2Vuc29yLCB1c2VNb3VzZVNlbnNvciQxXTtcbmZ1bmN0aW9uIHVzZVNlbnNvck1hcnNoYWwoX3JlZjQpIHtcbiAgdmFyIGNvbnRleHRJZCA9IF9yZWY0LmNvbnRleHRJZCxcbiAgICAgIHN0b3JlID0gX3JlZjQuc3RvcmUsXG4gICAgICByZWdpc3RyeSA9IF9yZWY0LnJlZ2lzdHJ5LFxuICAgICAgY3VzdG9tU2Vuc29ycyA9IF9yZWY0LmN1c3RvbVNlbnNvcnMsXG4gICAgICBlbmFibGVEZWZhdWx0U2Vuc29ycyA9IF9yZWY0LmVuYWJsZURlZmF1bHRTZW5zb3JzO1xuICB2YXIgdXNlU2Vuc29ycyA9IFtdLmNvbmNhdChlbmFibGVEZWZhdWx0U2Vuc29ycyA/IGRlZmF1bHRTZW5zb3JzIDogW10sIGN1c3RvbVNlbnNvcnMgfHwgW10pO1xuICB2YXIgbG9ja0FQSSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlKCk7XG4gIH0pWzBdO1xuICB2YXIgdHJ5QWJhbmRvbkxvY2sgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeUFiYW5kb25Mb2NrKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgaWYgKHByZXZpb3VzLmlzRHJhZ2dpbmcgJiYgIWN1cnJlbnQuaXNEcmFnZ2luZykge1xuICAgICAgbG9ja0FQSS50cnlBYmFuZG9uKCk7XG4gICAgfVxuICB9LCBbbG9ja0FQSV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIGxpc3RlblRvU3RvcmUoKSB7XG4gICAgdmFyIHByZXZpb3VzID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgdW5zdWJzY3JpYmUgPSBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgdHJ5QWJhbmRvbkxvY2socHJldmlvdXMsIGN1cnJlbnQpO1xuICAgICAgcHJldmlvdXMgPSBjdXJyZW50O1xuICAgIH0pO1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSwgW2xvY2tBUEksIHN0b3JlLCB0cnlBYmFuZG9uTG9ja10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbG9ja0FQSS50cnlBYmFuZG9uO1xuICB9LCBbbG9ja0FQSS50cnlBYmFuZG9uXSk7XG4gIHZhciBjYW5HZXRMb2NrID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoZHJhZ2dhYmxlSWQpIHtcbiAgICByZXR1cm4gY2FuU3RhcnQoe1xuICAgICAgbG9ja0FQSTogbG9ja0FQSSxcbiAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGVJZFxuICAgIH0pO1xuICB9LCBbbG9ja0FQSSwgcmVnaXN0cnksIHN0b3JlXSk7XG4gIHZhciB0cnlHZXRMb2NrID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoZHJhZ2dhYmxlSWQsIGZvcmNlU3RvcCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0cnlTdGFydCh7XG4gICAgICBsb2NrQVBJOiBsb2NrQVBJLFxuICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlSWQsXG4gICAgICBmb3JjZVNlbnNvclN0b3A6IGZvcmNlU3RvcCxcbiAgICAgIHNvdXJjZUV2ZW50OiBvcHRpb25zICYmIG9wdGlvbnMuc291cmNlRXZlbnQgPyBvcHRpb25zLnNvdXJjZUV2ZW50IDogbnVsbFxuICAgIH0pO1xuICB9LCBbY29udGV4dElkLCBsb2NrQVBJLCByZWdpc3RyeSwgc3RvcmVdKTtcbiAgdmFyIGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiB0cnlHZXRDbG9zZXN0RHJhZ2dhYmxlSWRGcm9tRXZlbnQoY29udGV4dElkLCBldmVudCk7XG4gIH0sIFtjb250ZXh0SWRdKTtcbiAgdmFyIGZpbmRPcHRpb25zRm9yRHJhZ2dhYmxlID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcmFnZ2FibGUuZmluZEJ5SWQoaWQpO1xuICAgIHJldHVybiBlbnRyeSA/IGVudHJ5Lm9wdGlvbnMgOiBudWxsO1xuICB9LCBbcmVnaXN0cnkuZHJhZ2dhYmxlXSk7XG4gIHZhciB0cnlSZWxlYXNlTG9jayA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5UmVsZWFzZUxvY2soKSB7XG4gICAgaWYgKCFsb2NrQVBJLmlzQ2xhaW1lZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9ja0FQSS50cnlBYmFuZG9uKCk7XG5cbiAgICBpZiAoc3RvcmUuZ2V0U3RhdGUoKS5waGFzZSAhPT0gJ0lETEUnKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChmbHVzaCgpKTtcbiAgICB9XG4gIH0sIFtsb2NrQVBJLCBzdG9yZV0pO1xuICB2YXIgaXNMb2NrQ2xhaW1lZCA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2sobG9ja0FQSS5pc0NsYWltZWQsIFtsb2NrQVBJXSk7XG4gIHZhciBhcGkgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjYW5HZXRMb2NrOiBjYW5HZXRMb2NrLFxuICAgICAgdHJ5R2V0TG9jazogdHJ5R2V0TG9jayxcbiAgICAgIGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQ6IGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQsXG4gICAgICBmaW5kT3B0aW9uc0ZvckRyYWdnYWJsZTogZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUsXG4gICAgICB0cnlSZWxlYXNlTG9jazogdHJ5UmVsZWFzZUxvY2ssXG4gICAgICBpc0xvY2tDbGFpbWVkOiBpc0xvY2tDbGFpbWVkXG4gICAgfTtcbiAgfSwgW2NhbkdldExvY2ssIHRyeUdldExvY2ssIGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQsIGZpbmRPcHRpb25zRm9yRHJhZ2dhYmxlLCB0cnlSZWxlYXNlTG9jaywgaXNMb2NrQ2xhaW1lZF0pO1xuICB1c2VWYWxpZGF0ZVNlbnNvckhvb2tzKHVzZVNlbnNvcnMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdXNlU2Vuc29ycy5sZW5ndGg7IGkrKykge1xuICAgIHVzZVNlbnNvcnNbaV0oYXBpKTtcbiAgfVxufVxuXG52YXIgY3JlYXRlUmVzcG9uZGVycyA9IGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbmRlcnMocHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkJlZm9yZUNhcHR1cmU6IHByb3BzLm9uQmVmb3JlQ2FwdHVyZSxcbiAgICBvbkJlZm9yZURyYWdTdGFydDogcHJvcHMub25CZWZvcmVEcmFnU3RhcnQsXG4gICAgb25EcmFnU3RhcnQ6IHByb3BzLm9uRHJhZ1N0YXJ0LFxuICAgIG9uRHJhZ0VuZDogcHJvcHMub25EcmFnRW5kLFxuICAgIG9uRHJhZ1VwZGF0ZTogcHJvcHMub25EcmFnVXBkYXRlXG4gIH07XG59O1xuXG5mdW5jdGlvbiBnZXRTdG9yZShsYXp5UmVmKSB7XG4gICFsYXp5UmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCBzdG9yZSBmcm9tIGxhenkgcmVmJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gbGF6eVJlZi5jdXJyZW50O1xufVxuXG5mdW5jdGlvbiBBcHAocHJvcHMpIHtcbiAgdmFyIGNvbnRleHRJZCA9IHByb3BzLmNvbnRleHRJZCxcbiAgICAgIHNldENhbGxiYWNrcyA9IHByb3BzLnNldENhbGxiYWNrcyxcbiAgICAgIHNlbnNvcnMgPSBwcm9wcy5zZW5zb3JzLFxuICAgICAgbm9uY2UgPSBwcm9wcy5ub25jZSxcbiAgICAgIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyA9IHByb3BzLmRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucztcbiAgdmFyIGxhenlTdG9yZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlU3RhcnR1cFZhbGlkYXRpb24oKTtcbiAgdmFyIGxhc3RQcm9wc1JlZiA9IHVzZVByZXZpb3VzKHByb3BzKTtcbiAgdmFyIGdldFJlc3BvbmRlcnMgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVzcG9uZGVycyhsYXN0UHJvcHNSZWYuY3VycmVudCk7XG4gIH0sIFtsYXN0UHJvcHNSZWZdKTtcbiAgdmFyIGFubm91bmNlID0gdXNlQW5ub3VuY2VyKGNvbnRleHRJZCk7XG4gIHZhciBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCA9IHVzZUhpZGRlblRleHRFbGVtZW50KHtcbiAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICB0ZXh0OiBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNcbiAgfSk7XG4gIHZhciBzdHlsZU1hcnNoYWwgPSB1c2VTdHlsZU1hcnNoYWwoY29udGV4dElkLCBub25jZSk7XG4gIHZhciBsYXp5RGlzcGF0Y2ggPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBnZXRTdG9yZShsYXp5U3RvcmVSZWYpLmRpc3BhdGNoKGFjdGlvbik7XG4gIH0sIFtdKTtcbiAgdmFyIG1hcnNoYWxDYWxsYmFja3MgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWR1eC5iaW5kQWN0aW9uQ3JlYXRvcnMoe1xuICAgICAgcHVibGlzaFdoaWxlRHJhZ2dpbmc6IHB1Ymxpc2hXaGlsZURyYWdnaW5nLFxuICAgICAgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsOiB1cGRhdGVEcm9wcGFibGVTY3JvbGwsXG4gICAgICB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCxcbiAgICAgIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBjb2xsZWN0aW9uU3RhcnRpbmc6IGNvbGxlY3Rpb25TdGFydGluZ1xuICAgIH0sIGxhenlEaXNwYXRjaCk7XG4gIH0sIFtsYXp5RGlzcGF0Y2hdKTtcbiAgdmFyIHJlZ2lzdHJ5ID0gdXNlUmVnaXN0cnkoKTtcbiAgdmFyIGRpbWVuc2lvbk1hcnNoYWwgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVEaW1lbnNpb25NYXJzaGFsKHJlZ2lzdHJ5LCBtYXJzaGFsQ2FsbGJhY2tzKTtcbiAgfSwgW3JlZ2lzdHJ5LCBtYXJzaGFsQ2FsbGJhY2tzXSk7XG4gIHZhciBhdXRvU2Nyb2xsZXIgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVBdXRvU2Nyb2xsZXIoX2V4dGVuZHMoe1xuICAgICAgc2Nyb2xsV2luZG93OiBzY3JvbGxXaW5kb3csXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IGRpbWVuc2lvbk1hcnNoYWwuc2Nyb2xsRHJvcHBhYmxlXG4gICAgfSwgcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKHtcbiAgICAgIG1vdmU6IG1vdmVcbiAgICB9LCBsYXp5RGlzcGF0Y2gpKSk7XG4gIH0sIFtkaW1lbnNpb25NYXJzaGFsLnNjcm9sbERyb3BwYWJsZSwgbGF6eURpc3BhdGNoXSk7XG4gIHZhciBmb2N1c01hcnNoYWwgPSB1c2VGb2N1c01hcnNoYWwoY29udGV4dElkKTtcbiAgdmFyIHN0b3JlID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlU3RvcmUoe1xuICAgICAgYW5ub3VuY2U6IGFubm91bmNlLFxuICAgICAgYXV0b1Njcm9sbGVyOiBhdXRvU2Nyb2xsZXIsXG4gICAgICBkaW1lbnNpb25NYXJzaGFsOiBkaW1lbnNpb25NYXJzaGFsLFxuICAgICAgZm9jdXNNYXJzaGFsOiBmb2N1c01hcnNoYWwsXG4gICAgICBnZXRSZXNwb25kZXJzOiBnZXRSZXNwb25kZXJzLFxuICAgICAgc3R5bGVNYXJzaGFsOiBzdHlsZU1hcnNoYWxcbiAgICB9KTtcbiAgfSwgW2Fubm91bmNlLCBhdXRvU2Nyb2xsZXIsIGRpbWVuc2lvbk1hcnNoYWwsIGZvY3VzTWFyc2hhbCwgZ2V0UmVzcG9uZGVycywgc3R5bGVNYXJzaGFsXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAobGF6eVN0b3JlUmVmLmN1cnJlbnQgJiYgbGF6eVN0b3JlUmVmLmN1cnJlbnQgIT09IHN0b3JlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCd1bmV4cGVjdGVkIHN0b3JlIGNoYW5nZScpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIGxhenlTdG9yZVJlZi5jdXJyZW50ID0gc3RvcmU7XG4gIHZhciB0cnlSZXNldFN0b3JlID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBnZXRTdG9yZShsYXp5U3RvcmVSZWYpO1xuICAgIHZhciBzdGF0ZSA9IGN1cnJlbnQuZ2V0U3RhdGUoKTtcblxuICAgIGlmIChzdGF0ZS5waGFzZSAhPT0gJ0lETEUnKSB7XG4gICAgICBjdXJyZW50LmRpc3BhdGNoKGZsdXNoKCkpO1xuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgaXNEcmFnZ2luZyA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IGdldFN0b3JlKGxhenlTdG9yZVJlZikuZ2V0U3RhdGUoKTtcbiAgICByZXR1cm4gc3RhdGUuaXNEcmFnZ2luZyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJztcbiAgfSwgW10pO1xuICB2YXIgYXBwQ2FsbGJhY2tzID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNEcmFnZ2luZzogaXNEcmFnZ2luZyxcbiAgICAgIHRyeUFib3J0OiB0cnlSZXNldFN0b3JlXG4gICAgfTtcbiAgfSwgW2lzRHJhZ2dpbmcsIHRyeVJlc2V0U3RvcmVdKTtcbiAgc2V0Q2FsbGJhY2tzKGFwcENhbGxiYWNrcyk7XG4gIHZhciBnZXRDYW5MaWZ0ID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gY2FuU3RhcnREcmFnKGdldFN0b3JlKGxhenlTdG9yZVJlZikuZ2V0U3RhdGUoKSwgaWQpO1xuICB9LCBbXSk7XG4gIHZhciBnZXRJc01vdmVtZW50QWxsb3dlZCA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc01vdmVtZW50QWxsb3dlZChnZXRTdG9yZShsYXp5U3RvcmVSZWYpLmdldFN0YXRlKCkpO1xuICB9LCBbXSk7XG4gIHZhciBhcHBDb250ZXh0ID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFyc2hhbDogZGltZW5zaW9uTWFyc2hhbCxcbiAgICAgIGZvY3VzOiBmb2N1c01hcnNoYWwsXG4gICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICAgIGNhbkxpZnQ6IGdldENhbkxpZnQsXG4gICAgICBpc01vdmVtZW50QWxsb3dlZDogZ2V0SXNNb3ZlbWVudEFsbG93ZWQsXG4gICAgICBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZDogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQsXG4gICAgICByZWdpc3RyeTogcmVnaXN0cnlcbiAgICB9O1xuICB9LCBbY29udGV4dElkLCBkaW1lbnNpb25NYXJzaGFsLCBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCwgZm9jdXNNYXJzaGFsLCBnZXRDYW5MaWZ0LCBnZXRJc01vdmVtZW50QWxsb3dlZCwgcmVnaXN0cnldKTtcbiAgdXNlU2Vuc29yTWFyc2hhbCh7XG4gICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgc3RvcmU6IHN0b3JlLFxuICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICBjdXN0b21TZW5zb3JzOiBzZW5zb3JzLFxuICAgIGVuYWJsZURlZmF1bHRTZW5zb3JzOiBwcm9wcy5lbmFibGVEZWZhdWx0U2Vuc29ycyAhPT0gZmFsc2VcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRyeVJlc2V0U3RvcmU7XG4gIH0sIFt0cnlSZXNldFN0b3JlXSk7XG4gIHJldHVybiBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEFwcENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogYXBwQ29udGV4dFxuICB9LCBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KHJlYWN0UmVkdXguUHJvdmlkZXIsIHtcbiAgICBjb250ZXh0OiBTdG9yZUNvbnRleHQsXG4gICAgc3RvcmU6IHN0b3JlXG4gIH0sIHByb3BzLmNoaWxkcmVuKSk7XG59XG5cbnZhciBjb3VudCQxID0gMDtcbmZ1bmN0aW9uIHJlc2V0JDEoKSB7XG4gIGNvdW50JDEgPSAwO1xufVxuZnVuY3Rpb24gdXNlSW5zdGFuY2VDb3VudCgpIHtcbiAgcmV0dXJuIHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiXCIgKyBjb3VudCQxKys7XG4gIH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTZXJ2ZXJDb250ZXh0KCkge1xuICByZXNldCQxKCk7XG4gIHJlc2V0KCk7XG59XG5mdW5jdGlvbiBEcmFnRHJvcENvbnRleHQocHJvcHMpIHtcbiAgdmFyIGNvbnRleHRJZCA9IHVzZUluc3RhbmNlQ291bnQoKTtcbiAgdmFyIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyA9IHByb3BzLmRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyB8fCBwcmVzZXQuZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zO1xuICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChFcnJvckJvdW5kYXJ5LCBudWxsLCBmdW5jdGlvbiAoc2V0Q2FsbGJhY2tzKSB7XG4gICAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQXBwLCB7XG4gICAgICBub25jZTogcHJvcHMubm9uY2UsXG4gICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICAgIHNldENhbGxiYWNrczogc2V0Q2FsbGJhY2tzLFxuICAgICAgZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zOiBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnMsXG4gICAgICBlbmFibGVEZWZhdWx0U2Vuc29yczogcHJvcHMuZW5hYmxlRGVmYXVsdFNlbnNvcnMsXG4gICAgICBzZW5zb3JzOiBwcm9wcy5zZW5zb3JzLFxuICAgICAgb25CZWZvcmVDYXB0dXJlOiBwcm9wcy5vbkJlZm9yZUNhcHR1cmUsXG4gICAgICBvbkJlZm9yZURyYWdTdGFydDogcHJvcHMub25CZWZvcmVEcmFnU3RhcnQsXG4gICAgICBvbkRyYWdTdGFydDogcHJvcHMub25EcmFnU3RhcnQsXG4gICAgICBvbkRyYWdVcGRhdGU6IHByb3BzLm9uRHJhZ1VwZGF0ZSxcbiAgICAgIG9uRHJhZ0VuZDogcHJvcHMub25EcmFnRW5kXG4gICAgfSwgcHJvcHMuY2hpbGRyZW4pO1xuICB9KTtcbn1cblxudmFyIGlzRXF1YWwkMSA9IGZ1bmN0aW9uIGlzRXF1YWwoYmFzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGJhc2UgPT09IHZhbHVlO1xuICB9O1xufTtcblxudmFyIGlzU2Nyb2xsID0gaXNFcXVhbCQxKCdzY3JvbGwnKTtcbnZhciBpc0F1dG8gPSBpc0VxdWFsJDEoJ2F1dG8nKTtcbnZhciBpc1Zpc2libGUkMSA9IGlzRXF1YWwkMSgndmlzaWJsZScpO1xuXG52YXIgaXNFaXRoZXIgPSBmdW5jdGlvbiBpc0VpdGhlcihvdmVyZmxvdywgZm4pIHtcbiAgcmV0dXJuIGZuKG92ZXJmbG93Lm92ZXJmbG93WCkgfHwgZm4ob3ZlcmZsb3cub3ZlcmZsb3dZKTtcbn07XG5cbnZhciBpc0JvdGggPSBmdW5jdGlvbiBpc0JvdGgob3ZlcmZsb3csIGZuKSB7XG4gIHJldHVybiBmbihvdmVyZmxvdy5vdmVyZmxvd1gpICYmIGZuKG92ZXJmbG93Lm92ZXJmbG93WSk7XG59O1xuXG52YXIgaXNFbGVtZW50U2Nyb2xsYWJsZSA9IGZ1bmN0aW9uIGlzRWxlbWVudFNjcm9sbGFibGUoZWwpIHtcbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgb3ZlcmZsb3cgPSB7XG4gICAgb3ZlcmZsb3dYOiBzdHlsZS5vdmVyZmxvd1gsXG4gICAgb3ZlcmZsb3dZOiBzdHlsZS5vdmVyZmxvd1lcbiAgfTtcbiAgcmV0dXJuIGlzRWl0aGVyKG92ZXJmbG93LCBpc1Njcm9sbCkgfHwgaXNFaXRoZXIob3ZlcmZsb3csIGlzQXV0byk7XG59O1xuXG52YXIgaXNCb2R5U2Nyb2xsYWJsZSA9IGZ1bmN0aW9uIGlzQm9keVNjcm9sbGFibGUoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJvZHkgPSBnZXRCb2R5RWxlbWVudCgpO1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgIWh0bWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICBpZiAoIWlzRWxlbWVudFNjcm9sbGFibGUoYm9keSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaHRtbFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG4gIHZhciBodG1sT3ZlcmZsb3cgPSB7XG4gICAgb3ZlcmZsb3dYOiBodG1sU3R5bGUub3ZlcmZsb3dYLFxuICAgIG92ZXJmbG93WTogaHRtbFN0eWxlLm92ZXJmbG93WVxuICB9O1xuXG4gIGlmIChpc0JvdGgoaHRtbE92ZXJmbG93LCBpc1Zpc2libGUkMSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgIFdlIGhhdmUgZGV0ZWN0ZWQgdGhhdCB5b3VyIDxib2R5PiBlbGVtZW50IG1pZ2h0IGJlIGEgc2Nyb2xsIGNvbnRhaW5lci5cXG4gICAgV2UgaGF2ZSBmb3VuZCBubyByZWxpYWJsZSB3YXkgb2YgZGV0ZWN0aW5nIHdoZXRoZXIgdGhlIDxib2R5PiBlbGVtZW50IGlzIGEgc2Nyb2xsIGNvbnRhaW5lci5cXG4gICAgVW5kZXIgbW9zdCBjaXJjdW1zdGFuY2VzIGEgPGJvZHk+IHNjcm9sbCBiYXIgd2lsbCBiZSBvbiB0aGUgPGh0bWw+IGVsZW1lbnQgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudClcXG5cXG4gICAgQmVjYXVzZSB3ZSBjYW5ub3QgZGV0ZXJtaW5lIGlmIHRoZSA8Ym9keT4gaXMgYSBzY3JvbGwgY29udGFpbmVyLCBhbmQgZ2VuZXJhbGx5IGl0IGlzIG5vdCBvbmUsXFxuICAgIHdlIHdpbGwgYmUgdHJlYXRpbmcgdGhlIDxib2R5PiBhcyAqbm90KiBhIHNjcm9sbCBjb250YWluZXJcXG5cXG4gICAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL2hvdy13ZS1kZXRlY3Qtc2Nyb2xsLWNvbnRhaW5lcnMubWRcXG4gIFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGdldENsb3Nlc3RTY3JvbGxhYmxlID0gZnVuY3Rpb24gZ2V0Q2xvc2VzdFNjcm9sbGFibGUoZWwpIHtcbiAgaWYgKGVsID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgIHJldHVybiBpc0JvZHlTY3JvbGxhYmxlKCkgPyBlbCA6IG51bGw7XG4gIH1cblxuICBpZiAoZWwgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFpc0VsZW1lbnRTY3JvbGxhYmxlKGVsKSkge1xuICAgIHJldHVybiBnZXRDbG9zZXN0U2Nyb2xsYWJsZShlbC5wYXJlbnRFbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBjaGVja0Zvck5lc3RlZFNjcm9sbENvbnRhaW5lcnMgPSAoZnVuY3Rpb24gKHNjcm9sbGFibGUpIHtcbiAgaWYgKCFzY3JvbGxhYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGFub3RoZXJTY3JvbGxQYXJlbnQgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZShzY3JvbGxhYmxlLnBhcmVudEVsZW1lbnQpO1xuXG4gIGlmICghYW5vdGhlclNjcm9sbFBhcmVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgRHJvcHBhYmxlOiB1bnN1cHBvcnRlZCBuZXN0ZWQgc2Nyb2xsIGNvbnRhaW5lciBkZXRlY3RlZC5cXG4gICAgQSBEcm9wcGFibGUgY2FuIG9ubHkgaGF2ZSBvbmUgc2Nyb2xsIHBhcmVudCAod2hpY2ggY2FuIGJlIGl0c2VsZilcXG4gICAgTmVzdGVkIHNjcm9sbCBjb250YWluZXJzIGFyZSBjdXJyZW50bHkgbm90IHN1cHBvcnRlZC5cXG5cXG4gICAgV2UgaG9wZSB0byBzdXBwb3J0IG5lc3RlZCBzY3JvbGwgY29udGFpbmVycyBzb29uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvaXNzdWVzLzEzMVxcbiAgXCIpIDogdm9pZCAwO1xufSk7XG5cbnZhciBnZXRTY3JvbGwkMSA9IChmdW5jdGlvbiAoZWwpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBlbC5zY3JvbGxMZWZ0LFxuICAgIHk6IGVsLnNjcm9sbFRvcFxuICB9O1xufSk7XG5cbnZhciBnZXRJc0ZpeGVkID0gZnVuY3Rpb24gZ2V0SXNGaXhlZChlbCkge1xuICBpZiAoIWVsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuXG4gIGlmIChzdHlsZS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGdldElzRml4ZWQoZWwucGFyZW50RWxlbWVudCk7XG59O1xuXG52YXIgZ2V0RW52ID0gKGZ1bmN0aW9uIChzdGFydCkge1xuICB2YXIgY2xvc2VzdFNjcm9sbGFibGUgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZShzdGFydCk7XG4gIHZhciBpc0ZpeGVkT25QYWdlID0gZ2V0SXNGaXhlZChzdGFydCk7XG4gIHJldHVybiB7XG4gICAgY2xvc2VzdFNjcm9sbGFibGU6IGNsb3Nlc3RTY3JvbGxhYmxlLFxuICAgIGlzRml4ZWRPblBhZ2U6IGlzRml4ZWRPblBhZ2VcbiAgfTtcbn0pO1xuXG52YXIgZ2V0RHJvcHBhYmxlRGltZW5zaW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gX3JlZi5kZXNjcmlwdG9yLFxuICAgICAgaXNFbmFibGVkID0gX3JlZi5pc0VuYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkID0gX3JlZi5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgaXNGaXhlZE9uUGFnZSA9IF9yZWYuaXNGaXhlZE9uUGFnZSxcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uLFxuICAgICAgY2xpZW50ID0gX3JlZi5jbGllbnQsXG4gICAgICBwYWdlID0gX3JlZi5wYWdlLFxuICAgICAgY2xvc2VzdCA9IF9yZWYuY2xvc2VzdDtcblxuICB2YXIgZnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjbG9zZXN0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9IGNsb3Nlc3Quc2Nyb2xsU2l6ZSxcbiAgICAgICAgZnJhbWVDbGllbnQgPSBjbG9zZXN0LmNsaWVudDtcbiAgICB2YXIgbWF4U2Nyb2xsID0gZ2V0TWF4U2Nyb2xsKHtcbiAgICAgIHNjcm9sbEhlaWdodDogc2Nyb2xsU2l6ZS5zY3JvbGxIZWlnaHQsXG4gICAgICBzY3JvbGxXaWR0aDogc2Nyb2xsU2l6ZS5zY3JvbGxXaWR0aCxcbiAgICAgIGhlaWdodDogZnJhbWVDbGllbnQucGFkZGluZ0JveC5oZWlnaHQsXG4gICAgICB3aWR0aDogZnJhbWVDbGllbnQucGFkZGluZ0JveC53aWR0aFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBwYWdlTWFyZ2luQm94OiBjbG9zZXN0LnBhZ2UubWFyZ2luQm94LFxuICAgICAgZnJhbWVDbGllbnQ6IGZyYW1lQ2xpZW50LFxuICAgICAgc2Nyb2xsU2l6ZTogc2Nyb2xsU2l6ZSxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0OiBjbG9zZXN0LnNob3VsZENsaXBTdWJqZWN0LFxuICAgICAgc2Nyb2xsOiB7XG4gICAgICAgIGluaXRpYWw6IGNsb3Nlc3Quc2Nyb2xsLFxuICAgICAgICBjdXJyZW50OiBjbG9zZXN0LnNjcm9sbCxcbiAgICAgICAgbWF4OiBtYXhTY3JvbGwsXG4gICAgICAgIGRpZmY6IHtcbiAgICAgICAgICB2YWx1ZTogb3JpZ2luLFxuICAgICAgICAgIGRpc3BsYWNlbWVudDogb3JpZ2luXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGF4aXMgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgPyB2ZXJ0aWNhbCA6IGhvcml6b250YWw7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogcGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IG51bGwsXG4gICAgYXhpczogYXhpcyxcbiAgICBmcmFtZTogZnJhbWVcbiAgfSk7XG4gIHZhciBkaW1lbnNpb24gPSB7XG4gICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkLFxuICAgIGlzRml4ZWRPblBhZ2U6IGlzRml4ZWRPblBhZ2UsXG4gICAgYXhpczogYXhpcyxcbiAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICBjbGllbnQ6IGNsaWVudCxcbiAgICBwYWdlOiBwYWdlLFxuICAgIGZyYW1lOiBmcmFtZSxcbiAgICBzdWJqZWN0OiBzdWJqZWN0XG4gIH07XG4gIHJldHVybiBkaW1lbnNpb247XG59KTtcblxudmFyIGdldENsaWVudCA9IGZ1bmN0aW9uIGdldENsaWVudCh0YXJnZXRSZWYsIGNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gIHZhciBiYXNlID0gY3NzQm94TW9kZWwuZ2V0Qm94KHRhcmdldFJlZik7XG5cbiAgaWYgKCFjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgaWYgKHRhcmdldFJlZiAhPT0gY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIHZhciB0b3AgPSBiYXNlLnBhZGRpbmdCb3gudG9wIC0gY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsVG9wO1xuICB2YXIgbGVmdCA9IGJhc2UucGFkZGluZ0JveC5sZWZ0IC0gY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsTGVmdDtcbiAgdmFyIGJvdHRvbSA9IHRvcCArIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbEhlaWdodDtcbiAgdmFyIHJpZ2h0ID0gbGVmdCArIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFdpZHRoO1xuICB2YXIgcGFkZGluZ0JveCA9IHtcbiAgICB0b3A6IHRvcCxcbiAgICByaWdodDogcmlnaHQsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgbGVmdDogbGVmdFxuICB9O1xuICB2YXIgYm9yZGVyQm94ID0gY3NzQm94TW9kZWwuZXhwYW5kKHBhZGRpbmdCb3gsIGJhc2UuYm9yZGVyKTtcbiAgdmFyIGNsaWVudCA9IGNzc0JveE1vZGVsLmNyZWF0ZUJveCh7XG4gICAgYm9yZGVyQm94OiBib3JkZXJCb3gsXG4gICAgbWFyZ2luOiBiYXNlLm1hcmdpbixcbiAgICBib3JkZXI6IGJhc2UuYm9yZGVyLFxuICAgIHBhZGRpbmc6IGJhc2UucGFkZGluZ1xuICB9KTtcbiAgcmV0dXJuIGNsaWVudDtcbn07XG5cbnZhciBnZXREaW1lbnNpb24gPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHJlZiA9IF9yZWYucmVmLFxuICAgICAgZGVzY3JpcHRvciA9IF9yZWYuZGVzY3JpcHRvcixcbiAgICAgIGVudiA9IF9yZWYuZW52LFxuICAgICAgd2luZG93U2Nyb2xsID0gX3JlZi53aW5kb3dTY3JvbGwsXG4gICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbixcbiAgICAgIGlzRHJvcERpc2FibGVkID0gX3JlZi5pc0Ryb3BEaXNhYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQgPSBfcmVmLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdCA9IF9yZWYuc2hvdWxkQ2xpcFN1YmplY3Q7XG4gIHZhciBjbG9zZXN0U2Nyb2xsYWJsZSA9IGVudi5jbG9zZXN0U2Nyb2xsYWJsZTtcbiAgdmFyIGNsaWVudCA9IGdldENsaWVudChyZWYsIGNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgdmFyIHBhZ2UgPSBjc3NCb3hNb2RlbC53aXRoU2Nyb2xsKGNsaWVudCwgd2luZG93U2Nyb2xsKTtcblxuICB2YXIgY2xvc2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZnJhbWVDbGllbnQgPSBjc3NCb3hNb2RlbC5nZXRCb3goY2xvc2VzdFNjcm9sbGFibGUpO1xuICAgIHZhciBzY3JvbGxTaXplID0ge1xuICAgICAgc2Nyb2xsSGVpZ2h0OiBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxIZWlnaHQsXG4gICAgICBzY3JvbGxXaWR0aDogY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsV2lkdGhcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnQ6IGZyYW1lQ2xpZW50LFxuICAgICAgcGFnZTogY3NzQm94TW9kZWwud2l0aFNjcm9sbChmcmFtZUNsaWVudCwgd2luZG93U2Nyb2xsKSxcbiAgICAgIHNjcm9sbDogZ2V0U2Nyb2xsJDEoY2xvc2VzdFNjcm9sbGFibGUpLFxuICAgICAgc2Nyb2xsU2l6ZTogc2Nyb2xsU2l6ZSxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0OiBzaG91bGRDbGlwU3ViamVjdFxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgZGltZW5zaW9uID0gZ2V0RHJvcHBhYmxlRGltZW5zaW9uKHtcbiAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgIGlzRW5hYmxlZDogIWlzRHJvcERpc2FibGVkLFxuICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWQsXG4gICAgaXNGaXhlZE9uUGFnZTogZW52LmlzRml4ZWRPblBhZ2UsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZSxcbiAgICBjbG9zZXN0OiBjbG9zZXN0XG4gIH0pO1xuICByZXR1cm4gZGltZW5zaW9uO1xufSk7XG5cbnZhciBpbW1lZGlhdGUgPSB7XG4gIHBhc3NpdmU6IGZhbHNlXG59O1xudmFyIGRlbGF5ZWQgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG52YXIgZ2V0TGlzdGVuZXJPcHRpb25zID0gKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseSA/IGltbWVkaWF0ZSA6IGRlbGF5ZWQ7XG59KTtcblxuZnVuY3Rpb24gdXNlUmVxdWlyZWRDb250ZXh0KENvbnRleHQpIHtcbiAgdmFyIHJlc3VsdCA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dCk7XG4gICFyZXN1bHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCByZXF1aXJlZCBjb250ZXh0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyA9IGZ1bmN0aW9uIGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcoZHJhZ2dpbmcpIHtcbiAgcmV0dXJuIGRyYWdnaW5nICYmIGRyYWdnaW5nLmVudi5jbG9zZXN0U2Nyb2xsYWJsZSB8fCBudWxsO1xufTtcblxuZnVuY3Rpb24gdXNlRHJvcHBhYmxlUHVibGlzaGVyKGFyZ3MpIHtcbiAgdmFyIHdoaWxlRHJhZ2dpbmdSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBhcHBDb250ZXh0ID0gdXNlUmVxdWlyZWRDb250ZXh0KEFwcENvbnRleHQpO1xuICB2YXIgdW5pcXVlSWQgPSB1c2VVbmlxdWVJZCgnZHJvcHBhYmxlJyk7XG4gIHZhciByZWdpc3RyeSA9IGFwcENvbnRleHQucmVnaXN0cnksXG4gICAgICBtYXJzaGFsID0gYXBwQ29udGV4dC5tYXJzaGFsO1xuICB2YXIgcHJldmlvdXNSZWYgPSB1c2VQcmV2aW91cyhhcmdzKTtcbiAgdmFyIGRlc2NyaXB0b3IgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogYXJncy5kcm9wcGFibGVJZCxcbiAgICAgIHR5cGU6IGFyZ3MudHlwZSxcbiAgICAgIG1vZGU6IGFyZ3MubW9kZVxuICAgIH07XG4gIH0sIFthcmdzLmRyb3BwYWJsZUlkLCBhcmdzLm1vZGUsIGFyZ3MudHlwZV0pO1xuICB2YXIgcHVibGlzaGVkRGVzY3JpcHRvclJlZiA9IFJlYWN0LnVzZVJlZihkZXNjcmlwdG9yKTtcbiAgdmFyIG1lbW9pemVkVXBkYXRlU2Nyb2xsID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWVtb2l6ZU9uZShmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgIXdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IHVwZGF0ZSBzY3JvbGwgd2hlbiBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBzY3JvbGwgPSB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH07XG4gICAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZVNjcm9sbChkZXNjcmlwdG9yLmlkLCBzY3JvbGwpO1xuICAgIH0pO1xuICB9LCBbZGVzY3JpcHRvci5pZCwgbWFyc2hhbF0pO1xuICB2YXIgZ2V0Q2xvc2VzdFNjcm9sbCA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcblxuICAgIGlmICghZHJhZ2dpbmcgfHwgIWRyYWdnaW5nLmVudi5jbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0U2Nyb2xsJDEoZHJhZ2dpbmcuZW52LmNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgfSwgW10pO1xuICB2YXIgdXBkYXRlU2Nyb2xsID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbCA9IGdldENsb3Nlc3RTY3JvbGwoKTtcbiAgICBtZW1vaXplZFVwZGF0ZVNjcm9sbChzY3JvbGwueCwgc2Nyb2xsLnkpO1xuICB9LCBbZ2V0Q2xvc2VzdFNjcm9sbCwgbWVtb2l6ZWRVcGRhdGVTY3JvbGxdKTtcbiAgdmFyIHNjaGVkdWxlU2Nyb2xsVXBkYXRlID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmFmU2NoZCh1cGRhdGVTY3JvbGwpO1xuICB9LCBbdXBkYXRlU2Nyb2xsXSk7XG4gIHZhciBvbkNsb3Nlc3RTY3JvbGwgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKTtcbiAgICAhKGRyYWdnaW5nICYmIGNsb3Nlc3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgc2Nyb2xsIG9wdGlvbnMgd2hpbGUgc2Nyb2xsaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBvcHRpb25zID0gZHJhZ2dpbmcuc2Nyb2xsT3B0aW9ucztcblxuICAgIGlmIChvcHRpb25zLnNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseSkge1xuICAgICAgdXBkYXRlU2Nyb2xsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVTY3JvbGxVcGRhdGUoKTtcbiAgfSwgW3NjaGVkdWxlU2Nyb2xsVXBkYXRlLCB1cGRhdGVTY3JvbGxdKTtcbiAgdmFyIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAod2luZG93U2Nyb2xsLCBvcHRpb25zKSB7XG4gICAgISF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29sbGVjdCBhIGRyb3BwYWJsZSB3aGlsZSBhIGRyYWcgaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBwcmV2aW91cyA9IHByZXZpb3VzUmVmLmN1cnJlbnQ7XG4gICAgdmFyIHJlZiA9IHByZXZpb3VzLmdldERyb3BwYWJsZVJlZigpO1xuICAgICFyZWYgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29sbGVjdCB3aXRob3V0IGEgZHJvcHBhYmxlIHJlZicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZW52ID0gZ2V0RW52KHJlZik7XG4gICAgdmFyIGRyYWdnaW5nID0ge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgZW52OiBlbnYsXG4gICAgICBzY3JvbGxPcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbiAgICB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPSBkcmFnZ2luZztcbiAgICB2YXIgZGltZW5zaW9uID0gZ2V0RGltZW5zaW9uKHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGVudjogZW52LFxuICAgICAgd2luZG93U2Nyb2xsOiB3aW5kb3dTY3JvbGwsXG4gICAgICBkaXJlY3Rpb246IHByZXZpb3VzLmRpcmVjdGlvbixcbiAgICAgIGlzRHJvcERpc2FibGVkOiBwcmV2aW91cy5pc0Ryb3BEaXNhYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IHByZXZpb3VzLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogIXByZXZpb3VzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nXG4gICAgfSk7XG4gICAgdmFyIHNjcm9sbGFibGUgPSBlbnYuY2xvc2VzdFNjcm9sbGFibGU7XG5cbiAgICBpZiAoc2Nyb2xsYWJsZSkge1xuICAgICAgc2Nyb2xsYWJsZS5zZXRBdHRyaWJ1dGUoc2Nyb2xsQ29udGFpbmVyLmNvbnRleHRJZCwgYXBwQ29udGV4dC5jb250ZXh0SWQpO1xuICAgICAgc2Nyb2xsYWJsZS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvbkNsb3Nlc3RTY3JvbGwsIGdldExpc3RlbmVyT3B0aW9ucyhkcmFnZ2luZy5zY3JvbGxPcHRpb25zKSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRm9yTmVzdGVkU2Nyb2xsQ29udGFpbmVycyhzY3JvbGxhYmxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGltZW5zaW9uO1xuICB9LCBbYXBwQ29udGV4dC5jb250ZXh0SWQsIGRlc2NyaXB0b3IsIG9uQ2xvc2VzdFNjcm9sbCwgcHJldmlvdXNSZWZdKTtcbiAgdmFyIGdldFNjcm9sbFdoaWxlRHJhZ2dpbmcgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKTtcbiAgICAhKGRyYWdnaW5nICYmIGNsb3Nlc3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgcmVjb2xsZWN0IERyb3BwYWJsZSBjbGllbnQgZm9yIERyb3BwYWJsZXMgdGhhdCBoYXZlIGEgc2Nyb2xsIGNvbnRhaW5lcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0U2Nyb2xsJDEoY2xvc2VzdCk7XG4gIH0sIFtdKTtcbiAgdmFyIGRyYWdTdG9wcGVkID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdG9wIGRyYWcgd2hlbiBubyBhY3RpdmUgZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY2xvc2VzdCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcoZHJhZ2dpbmcpO1xuICAgIHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCA9IG51bGw7XG5cbiAgICBpZiAoIWNsb3Nlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZVNjcm9sbFVwZGF0ZS5jYW5jZWwoKTtcbiAgICBjbG9zZXN0LnJlbW92ZUF0dHJpYnV0ZShzY3JvbGxDb250YWluZXIuY29udGV4dElkKTtcbiAgICBjbG9zZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uQ2xvc2VzdFNjcm9sbCwgZ2V0TGlzdGVuZXJPcHRpb25zKGRyYWdnaW5nLnNjcm9sbE9wdGlvbnMpKTtcbiAgfSwgW29uQ2xvc2VzdFNjcm9sbCwgc2NoZWR1bGVTY3JvbGxVcGRhdGVdKTtcbiAgdmFyIHNjcm9sbCA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2Nyb2xsIHdoZW4gdGhlcmUgaXMgbm8gZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY2xvc2VzdCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcoZHJhZ2dpbmcpO1xuICAgICFjbG9zZXN0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHNjcm9sbCBhIGRyb3BwYWJsZSB3aXRoIG5vIGNsb3Nlc3Qgc2Nyb2xsYWJsZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjbG9zZXN0LnNjcm9sbFRvcCArPSBjaGFuZ2UueTtcbiAgICBjbG9zZXN0LnNjcm9sbExlZnQgKz0gY2hhbmdlLng7XG4gIH0sIFtdKTtcbiAgdmFyIGNhbGxiYWNrcyA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsOiBnZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCxcbiAgICAgIGdldFNjcm9sbFdoaWxlRHJhZ2dpbmc6IGdldFNjcm9sbFdoaWxlRHJhZ2dpbmcsXG4gICAgICBkcmFnU3RvcHBlZDogZHJhZ1N0b3BwZWQsXG4gICAgICBzY3JvbGw6IHNjcm9sbFxuICAgIH07XG4gIH0sIFtkcmFnU3RvcHBlZCwgZ2V0RGltZW5zaW9uQW5kV2F0Y2hTY3JvbGwsIGdldFNjcm9sbFdoaWxlRHJhZ2dpbmcsIHNjcm9sbF0pO1xuICB2YXIgZW50cnkgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1bmlxdWVJZDogdW5pcXVlSWQsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgY2FsbGJhY2tzOiBjYWxsYmFja3NcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tzLCBkZXNjcmlwdG9yLCB1bmlxdWVJZF0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQgPSBlbnRyeS5kZXNjcmlwdG9yO1xuICAgIHJlZ2lzdHJ5LmRyb3BwYWJsZS5yZWdpc3RlcihlbnRyeSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnVW5zdXBwb3J0ZWQ6IGNoYW5naW5nIHRoZSBkcm9wcGFibGVJZCBvciB0eXBlIG9mIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWcnKSA6IHZvaWQgMDtcbiAgICAgICAgZHJhZ1N0b3BwZWQoKTtcbiAgICAgIH1cblxuICAgICAgcmVnaXN0cnkuZHJvcHBhYmxlLnVucmVnaXN0ZXIoZW50cnkpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFja3MsIGRlc2NyaXB0b3IsIGRyYWdTdG9wcGVkLCBlbnRyeSwgbWFyc2hhbCwgcmVnaXN0cnkuZHJvcHBhYmxlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWFyc2hhbC51cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQocHVibGlzaGVkRGVzY3JpcHRvclJlZi5jdXJyZW50LmlkLCAhYXJncy5pc0Ryb3BEaXNhYmxlZCk7XG4gIH0sIFthcmdzLmlzRHJvcERpc2FibGVkLCBtYXJzaGFsXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWFyc2hhbC51cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudC5pZCwgYXJncy5pc0NvbWJpbmVFbmFibGVkKTtcbiAgfSwgW2FyZ3MuaXNDb21iaW5lRW5hYmxlZCwgbWFyc2hhbF0pO1xufVxuXG5mdW5jdGlvbiBub29wJDIoKSB7fVxuXG52YXIgZW1wdHkgPSB7XG4gIHdpZHRoOiAwLFxuICBoZWlnaHQ6IDAsXG4gIG1hcmdpbjogbm9TcGFjaW5nXG59O1xuXG52YXIgZ2V0U2l6ZSA9IGZ1bmN0aW9uIGdldFNpemUoX3JlZikge1xuICB2YXIgaXNBbmltYXRpbmdPcGVuT25Nb3VudCA9IF9yZWYuaXNBbmltYXRpbmdPcGVuT25Nb3VudCxcbiAgICAgIHBsYWNlaG9sZGVyID0gX3JlZi5wbGFjZWhvbGRlcixcbiAgICAgIGFuaW1hdGUgPSBfcmVmLmFuaW1hdGU7XG5cbiAgaWYgKGlzQW5pbWF0aW5nT3Blbk9uTW91bnQpIHtcbiAgICByZXR1cm4gZW1wdHk7XG4gIH1cblxuICBpZiAoYW5pbWF0ZSA9PT0gJ2Nsb3NlJykge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBwbGFjZWhvbGRlci5jbGllbnQuYm9yZGVyQm94LmhlaWdodCxcbiAgICB3aWR0aDogcGxhY2Vob2xkZXIuY2xpZW50LmJvcmRlckJveC53aWR0aCxcbiAgICBtYXJnaW46IHBsYWNlaG9sZGVyLmNsaWVudC5tYXJnaW5cbiAgfTtcbn07XG5cbnZhciBnZXRTdHlsZSA9IGZ1bmN0aW9uIGdldFN0eWxlKF9yZWYyKSB7XG4gIHZhciBpc0FuaW1hdGluZ09wZW5Pbk1vdW50ID0gX3JlZjIuaXNBbmltYXRpbmdPcGVuT25Nb3VudCxcbiAgICAgIHBsYWNlaG9sZGVyID0gX3JlZjIucGxhY2Vob2xkZXIsXG4gICAgICBhbmltYXRlID0gX3JlZjIuYW5pbWF0ZTtcbiAgdmFyIHNpemUgPSBnZXRTaXplKHtcbiAgICBpc0FuaW1hdGluZ09wZW5Pbk1vdW50OiBpc0FuaW1hdGluZ09wZW5Pbk1vdW50LFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBhbmltYXRlOiBhbmltYXRlXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6IHBsYWNlaG9sZGVyLmRpc3BsYXksXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICBtYXJnaW5Ub3A6IHNpemUubWFyZ2luLnRvcCxcbiAgICBtYXJnaW5SaWdodDogc2l6ZS5tYXJnaW4ucmlnaHQsXG4gICAgbWFyZ2luQm90dG9tOiBzaXplLm1hcmdpbi5ib3R0b20sXG4gICAgbWFyZ2luTGVmdDogc2l6ZS5tYXJnaW4ubGVmdCxcbiAgICBmbGV4U2hyaW5rOiAnMCcsXG4gICAgZmxleEdyb3c6ICcwJyxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgdHJhbnNpdGlvbjogYW5pbWF0ZSAhPT0gJ25vbmUnID8gdHJhbnNpdGlvbnMucGxhY2Vob2xkZXIgOiBudWxsXG4gIH07XG59O1xuXG5mdW5jdGlvbiBQbGFjZWhvbGRlcihwcm9wcykge1xuICB2YXIgYW5pbWF0ZU9wZW5UaW1lclJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lciA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGFuaW1hdGVPcGVuVGltZXJSZWYuY3VycmVudCk7XG4gICAgYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgfSwgW10pO1xuICB2YXIgYW5pbWF0ZSA9IHByb3BzLmFuaW1hdGUsXG4gICAgICBvblRyYW5zaXRpb25FbmQgPSBwcm9wcy5vblRyYW5zaXRpb25FbmQsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIGNvbnRleHRJZCA9IHByb3BzLmNvbnRleHRJZDtcblxuICB2YXIgX3VzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUocHJvcHMuYW5pbWF0ZSA9PT0gJ29wZW4nKSxcbiAgICAgIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50ID0gX3VzZVN0YXRlWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0FuaW1hdGluZ09wZW5Pbk1vdW50KSB7XG4gICAgICByZXR1cm4gbm9vcCQyO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlICE9PSAnb3BlbicpIHtcbiAgICAgIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcigpO1xuICAgICAgc2V0SXNBbmltYXRpbmdPcGVuT25Nb3VudChmYWxzZSk7XG4gICAgICByZXR1cm4gbm9vcCQyO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybiBub29wJDI7XG4gICAgfVxuXG4gICAgYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgc2V0SXNBbmltYXRpbmdPcGVuT25Nb3VudChmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcjtcbiAgfSwgW2FuaW1hdGUsIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQsIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcl0pO1xuICB2YXIgb25TaXplQ2hhbmdlRW5kID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQucHJvcGVydHlOYW1lICE9PSAnaGVpZ2h0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uVHJhbnNpdGlvbkVuZCgpO1xuXG4gICAgaWYgKGFuaW1hdGUgPT09ICdjbG9zZScpIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFthbmltYXRlLCBvbkNsb3NlLCBvblRyYW5zaXRpb25FbmRdKTtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoe1xuICAgIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQ6IGlzQW5pbWF0aW5nT3Blbk9uTW91bnQsXG4gICAgYW5pbWF0ZTogcHJvcHMuYW5pbWF0ZSxcbiAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXJcbiAgfSk7XG4gIHJldHVybiBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KHByb3BzLnBsYWNlaG9sZGVyLnRhZ05hbWUsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgJ2RhdGEtcmJkLXBsYWNlaG9sZGVyLWNvbnRleHQtaWQnOiBjb250ZXh0SWQsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblNpemVDaGFuZ2VFbmQsXG4gICAgcmVmOiBwcm9wcy5pbm5lclJlZlxuICB9KTtcbn1cblxudmFyIFBsYWNlaG9sZGVyJDEgPSBSZWFjdF9fZGVmYXVsdC5tZW1vKFBsYWNlaG9sZGVyKTtcblxudmFyIERyb3BwYWJsZUNvbnRleHQgPSBSZWFjdF9fZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5mdW5jdGlvbiBjaGVja0lzVmFsaWRJbm5lclJlZihlbCkge1xuICAhKGVsICYmIGlzSHRtbEVsZW1lbnQoZWwpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJcXG4gICAgcHJvdmlkZWQuaW5uZXJSZWYgaGFzIG5vdCBiZWVuIHByb3ZpZGVkIHdpdGggYSBIVE1MRWxlbWVudC5cXG5cXG4gICAgWW91IGNhbiBmaW5kIGEgZ3VpZGUgb24gdXNpbmcgdGhlIGlubmVyUmVmIGNhbGxiYWNrIGZ1bmN0aW9ucyBhdDpcXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL3VzaW5nLWlubmVyLXJlZi5tZFxcbiAgXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuZnVuY3Rpb24gcnVuQ2hlY2tzKGFyZ3MsIGNoZWNrcykge1xuICBjaGVja3MuZm9yRWFjaChmdW5jdGlvbiAoY2hlY2spIHtcbiAgICByZXR1cm4gY2hlY2soYXJncyk7XG4gIH0pO1xufVxuXG52YXIgc2hhcmVkID0gW2Z1bmN0aW9uIHJlcXVpcmVkKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcztcbiAgIXByb3BzLmRyb3BwYWJsZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBEcm9wcGFibGUgcmVxdWlyZXMgYSBkcm9wcGFibGVJZCBwcm9wJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHR5cGVvZiBwcm9wcy5kcm9wcGFibGVJZCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgRHJvcHBhYmxlIHJlcXVpcmVzIGEgW3N0cmluZ10gZHJvcHBhYmxlSWQuIFByb3ZpZGVkOiBbXCIgKyB0eXBlb2YgcHJvcHMuZHJvcHBhYmxlSWQgKyBcIl1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufSwgZnVuY3Rpb24gX2Jvb2xlYW4oX3JlZjIpIHtcbiAgdmFyIHByb3BzID0gX3JlZjIucHJvcHM7XG4gICFpc0Jvb2xlYW4ocHJvcHMuaXNEcm9wRGlzYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaXNEcm9wRGlzYWJsZWQgbXVzdCBiZSBhIGJvb2xlYW4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICFpc0Jvb2xlYW4ocHJvcHMuaXNDb21iaW5lRW5hYmxlZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0NvbWJpbmVFbmFibGVkIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhaXNCb29sZWFuKHByb3BzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2lnbm9yZUNvbnRhaW5lckNsaXBwaW5nIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufSwgZnVuY3Rpb24gcmVmKF9yZWYzKSB7XG4gIHZhciBnZXREcm9wcGFibGVSZWYgPSBfcmVmMy5nZXREcm9wcGFibGVSZWY7XG4gIGNoZWNrSXNWYWxpZElubmVyUmVmKGdldERyb3BwYWJsZVJlZigpKTtcbn1dO1xudmFyIHN0YW5kYXJkID0gW2Z1bmN0aW9uIHBsYWNlaG9sZGVyKF9yZWY0KSB7XG4gIHZhciBwcm9wcyA9IF9yZWY0LnByb3BzLFxuICAgICAgZ2V0UGxhY2Vob2xkZXJSZWYgPSBfcmVmNC5nZXRQbGFjZWhvbGRlclJlZjtcblxuICBpZiAoIXByb3BzLnBsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlZiA9IGdldFBsYWNlaG9sZGVyUmVmKCk7XG5cbiAgaWYgKHJlZikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBEcm9wcGFibGUgc2V0dXAgaXNzdWUgW2Ryb3BwYWJsZUlkOiBcXFwiXCIgKyBwcm9wcy5kcm9wcGFibGVJZCArIFwiXFxcIl06XFxuICAgICAgRHJvcHBhYmxlUHJvdmlkZWQgPiBwbGFjZWhvbGRlciBjb3VsZCBub3QgYmUgZm91bmQuXFxuXFxuICAgICAgUGxlYXNlIGJlIHN1cmUgdG8gYWRkIHRoZSB7cHJvdmlkZWQucGxhY2Vob2xkZXJ9IFJlYWN0IE5vZGUgYXMgYSBjaGlsZCBvZiB5b3VyIERyb3BwYWJsZS5cXG4gICAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9hcGkvZHJvcHBhYmxlLm1kXFxuICAgIFwiKSA6IHZvaWQgMDtcbn1dO1xudmFyIHZpcnR1YWwgPSBbZnVuY3Rpb24gaGFzQ2xvbmUoX3JlZjUpIHtcbiAgdmFyIHByb3BzID0gX3JlZjUucHJvcHM7XG4gICFwcm9wcy5yZW5kZXJDbG9uZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011c3QgcHJvdmlkZSBhIGNsb25lIHJlbmRlciBmdW5jdGlvbiAocmVuZGVyQ2xvbmUpIGZvciB2aXJ0dWFsIGxpc3RzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufSwgZnVuY3Rpb24gaGFzTm9QbGFjZWhvbGRlcihfcmVmNikge1xuICB2YXIgZ2V0UGxhY2Vob2xkZXJSZWYgPSBfcmVmNi5nZXRQbGFjZWhvbGRlclJlZjtcbiAgISFnZXRQbGFjZWhvbGRlclJlZigpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdmlydHVhbCBsaXN0IHRvIG5vdCBoYXZlIGEgcGxhY2Vob2xkZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XTtcbmZ1bmN0aW9uIHVzZVZhbGlkYXRpb24oYXJncykge1xuICB1c2VEZXZTZXR1cFdhcm5pbmcoZnVuY3Rpb24gKCkge1xuICAgIHJ1bkNoZWNrcyhhcmdzLCBzaGFyZWQpO1xuXG4gICAgaWYgKGFyZ3MucHJvcHMubW9kZSA9PT0gJ3N0YW5kYXJkJykge1xuICAgICAgcnVuQ2hlY2tzKGFyZ3MsIHN0YW5kYXJkKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5wcm9wcy5tb2RlID09PSAndmlydHVhbCcpIHtcbiAgICAgIHJ1bkNoZWNrcyhhcmdzLCB2aXJ0dWFsKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgQW5pbWF0ZUluT3V0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEFuaW1hdGVJbk91dCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFuaW1hdGVJbk91dCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkUHVyZUNvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRQdXJlQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKF90aGlzLnByb3BzLm9uKSxcbiAgICAgIGRhdGE6IF90aGlzLnByb3BzLm9uLFxuICAgICAgYW5pbWF0ZTogX3RoaXMucHJvcHMuc2hvdWxkQW5pbWF0ZSAmJiBfdGhpcy5wcm9wcy5vbiA/ICdvcGVuJyA6ICdub25lJ1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmFuaW1hdGUgIT09ICdjbG9zZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzVmlzaWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBBbmltYXRlSW5PdXQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIGlmICghcHJvcHMuc2hvdWxkQW5pbWF0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKHByb3BzLm9uKSxcbiAgICAgICAgZGF0YTogcHJvcHMub24sXG4gICAgICAgIGFuaW1hdGU6ICdub25lJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMub24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgZGF0YTogcHJvcHMub24sXG4gICAgICAgIGFuaW1hdGU6ICdvcGVuJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIGRhdGE6IHN0YXRlLmRhdGEsXG4gICAgICAgIGFuaW1hdGU6ICdjbG9zZSdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgICBhbmltYXRlOiAnY2xvc2UnLFxuICAgICAgZGF0YTogbnVsbFxuICAgIH07XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGVJbk91dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvdmlkZWQgPSB7XG4gICAgICBvbkNsb3NlOiB0aGlzLm9uQ2xvc2UsXG4gICAgICBkYXRhOiB0aGlzLnN0YXRlLmRhdGEsXG4gICAgICBhbmltYXRlOiB0aGlzLnN0YXRlLmFuaW1hdGVcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHByb3ZpZGVkKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0ZUluT3V0O1xufShSZWFjdF9fZGVmYXVsdC5QdXJlQ29tcG9uZW50KTtcblxudmFyIHpJbmRleE9wdGlvbnMgPSB7XG4gIGRyYWdnaW5nOiA1MDAwLFxuICBkcm9wQW5pbWF0aW5nOiA0NTAwXG59O1xuXG52YXIgZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uKHNob3VsZEFuaW1hdGVEcmFnTW92ZW1lbnQsIGRyb3BwaW5nKSB7XG4gIGlmIChkcm9wcGluZykge1xuICAgIHJldHVybiB0cmFuc2l0aW9ucy5kcm9wKGRyb3BwaW5nLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGlmIChzaG91bGRBbmltYXRlRHJhZ01vdmVtZW50KSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25zLnNuYXA7XG4gIH1cblxuICByZXR1cm4gdHJhbnNpdGlvbnMuZmx1aWQ7XG59O1xuXG52YXIgZ2V0RHJhZ2dpbmdPcGFjaXR5ID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdPcGFjaXR5KGlzQ29tYmluaW5nLCBpc0Ryb3BBbmltYXRpbmcpIHtcbiAgaWYgKCFpc0NvbWJpbmluZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGlzRHJvcEFuaW1hdGluZyA/IGNvbWJpbmUub3BhY2l0eS5kcm9wIDogY29tYmluZS5vcGFjaXR5LmNvbWJpbmluZztcbn07XG5cbnZhciBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUgPSBmdW5jdGlvbiBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUoZHJhZ2dpbmcpIHtcbiAgaWYgKGRyYWdnaW5nLmZvcmNlU2hvdWxkQW5pbWF0ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nLmZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgfVxuXG4gIHJldHVybiBkcmFnZ2luZy5tb2RlID09PSAnU05BUCc7XG59O1xuXG5mdW5jdGlvbiBnZXREcmFnZ2luZ1N0eWxlKGRyYWdnaW5nKSB7XG4gIHZhciBkaW1lbnNpb24gPSBkcmFnZ2luZy5kaW1lbnNpb247XG4gIHZhciBib3ggPSBkaW1lbnNpb24uY2xpZW50O1xuICB2YXIgb2Zmc2V0ID0gZHJhZ2dpbmcub2Zmc2V0LFxuICAgICAgY29tYmluZVdpdGggPSBkcmFnZ2luZy5jb21iaW5lV2l0aCxcbiAgICAgIGRyb3BwaW5nID0gZHJhZ2dpbmcuZHJvcHBpbmc7XG4gIHZhciBpc0NvbWJpbmluZyA9IEJvb2xlYW4oY29tYmluZVdpdGgpO1xuICB2YXIgc2hvdWxkQW5pbWF0ZSA9IGdldFNob3VsZERyYWdnaW5nQW5pbWF0ZShkcmFnZ2luZyk7XG4gIHZhciBpc0Ryb3BBbmltYXRpbmcgPSBCb29sZWFuKGRyb3BwaW5nKTtcbiAgdmFyIHRyYW5zZm9ybSA9IGlzRHJvcEFuaW1hdGluZyA/IHRyYW5zZm9ybXMuZHJvcChvZmZzZXQsIGlzQ29tYmluaW5nKSA6IHRyYW5zZm9ybXMubW92ZVRvKG9mZnNldCk7XG4gIHZhciBzdHlsZSA9IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB0b3A6IGJveC5tYXJnaW5Cb3gudG9wLFxuICAgIGxlZnQ6IGJveC5tYXJnaW5Cb3gubGVmdCxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICB3aWR0aDogYm94LmJvcmRlckJveC53aWR0aCxcbiAgICBoZWlnaHQ6IGJveC5ib3JkZXJCb3guaGVpZ2h0LFxuICAgIHRyYW5zaXRpb246IGdldERyYWdnaW5nVHJhbnNpdGlvbihzaG91bGRBbmltYXRlLCBkcm9wcGluZyksXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgb3BhY2l0eTogZ2V0RHJhZ2dpbmdPcGFjaXR5KGlzQ29tYmluaW5nLCBpc0Ryb3BBbmltYXRpbmcpLFxuICAgIHpJbmRleDogaXNEcm9wQW5pbWF0aW5nID8gekluZGV4T3B0aW9ucy5kcm9wQW5pbWF0aW5nIDogekluZGV4T3B0aW9ucy5kcmFnZ2luZyxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgfTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBnZXRTZWNvbmRhcnlTdHlsZShzZWNvbmRhcnkpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybXMubW92ZVRvKHNlY29uZGFyeS5vZmZzZXQpLFxuICAgIHRyYW5zaXRpb246IHNlY29uZGFyeS5zaG91bGRBbmltYXRlRGlzcGxhY2VtZW50ID8gbnVsbCA6ICdub25lJ1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZSQxKG1hcHBlZCkge1xuICByZXR1cm4gbWFwcGVkLnR5cGUgPT09ICdEUkFHR0lORycgPyBnZXREcmFnZ2luZ1N0eWxlKG1hcHBlZCkgOiBnZXRTZWNvbmRhcnlTdHlsZShtYXBwZWQpO1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb24kMShkZXNjcmlwdG9yLCBlbCwgd2luZG93U2Nyb2xsKSB7XG4gIGlmICh3aW5kb3dTY3JvbGwgPT09IHZvaWQgMCkge1xuICAgIHdpbmRvd1Njcm9sbCA9IG9yaWdpbjtcbiAgfVxuXG4gIHZhciBjb21wdXRlZFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIGJvcmRlckJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgY2xpZW50ID0gY3NzQm94TW9kZWwuY2FsY3VsYXRlQm94KGJvcmRlckJveCwgY29tcHV0ZWRTdHlsZXMpO1xuICB2YXIgcGFnZSA9IGNzc0JveE1vZGVsLndpdGhTY3JvbGwoY2xpZW50LCB3aW5kb3dTY3JvbGwpO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgdGFnTmFtZTogZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgIGRpc3BsYXk6IGNvbXB1dGVkU3R5bGVzLmRpc3BsYXlcbiAgfTtcbiAgdmFyIGRpc3BsYWNlQnkgPSB7XG4gICAgeDogY2xpZW50Lm1hcmdpbkJveC53aWR0aCxcbiAgICB5OiBjbGllbnQubWFyZ2luQm94LmhlaWdodFxuICB9O1xuICB2YXIgZGltZW5zaW9uID0ge1xuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGRpc3BsYWNlQnk6IGRpc3BsYWNlQnksXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZVxuICB9O1xuICByZXR1cm4gZGltZW5zaW9uO1xufVxuXG5mdW5jdGlvbiB1c2VEcmFnZ2FibGVQdWJsaXNoZXIoYXJncykge1xuICB2YXIgdW5pcXVlSWQgPSB1c2VVbmlxdWVJZCgnZHJhZ2dhYmxlJyk7XG4gIHZhciBkZXNjcmlwdG9yID0gYXJncy5kZXNjcmlwdG9yLFxuICAgICAgcmVnaXN0cnkgPSBhcmdzLnJlZ2lzdHJ5LFxuICAgICAgZ2V0RHJhZ2dhYmxlUmVmID0gYXJncy5nZXREcmFnZ2FibGVSZWYsXG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyA9IGFyZ3MuY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyA9IGFyZ3Muc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICBpc0VuYWJsZWQgPSBhcmdzLmlzRW5hYmxlZDtcbiAgdmFyIG9wdGlvbnMgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZFxuICAgIH07XG4gIH0sIFtjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cywgaXNFbmFibGVkLCBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzc10pO1xuICB2YXIgZ2V0RGltZW5zaW9uID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAod2luZG93U2Nyb2xsKSB7XG4gICAgdmFyIGVsID0gZ2V0RHJhZ2dhYmxlUmVmKCk7XG4gICAgIWVsID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBkaW1lbnNpb24gd2hlbiBubyByZWYgaXMgc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXREaW1lbnNpb24kMShkZXNjcmlwdG9yLCBlbCwgd2luZG93U2Nyb2xsKTtcbiAgfSwgW2Rlc2NyaXB0b3IsIGdldERyYWdnYWJsZVJlZl0pO1xuICB2YXIgZW50cnkgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1bmlxdWVJZDogdW5pcXVlSWQsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIGdldERpbWVuc2lvbjogZ2V0RGltZW5zaW9uXG4gICAgfTtcbiAgfSwgW2Rlc2NyaXB0b3IsIGdldERpbWVuc2lvbiwgb3B0aW9ucywgdW5pcXVlSWRdKTtcbiAgdmFyIHB1Ymxpc2hlZFJlZiA9IFJlYWN0LnVzZVJlZihlbnRyeSk7XG4gIHZhciBpc0ZpcnN0UHVibGlzaFJlZiA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVnaXN0cnkuZHJhZ2dhYmxlLnJlZ2lzdGVyKHB1Ymxpc2hlZFJlZi5jdXJyZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlZ2lzdHJ5LmRyYWdnYWJsZS51bnJlZ2lzdGVyKHB1Ymxpc2hlZFJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbcmVnaXN0cnkuZHJhZ2dhYmxlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0ZpcnN0UHVibGlzaFJlZi5jdXJyZW50KSB7XG4gICAgICBpc0ZpcnN0UHVibGlzaFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhc3QgPSBwdWJsaXNoZWRSZWYuY3VycmVudDtcbiAgICBwdWJsaXNoZWRSZWYuY3VycmVudCA9IGVudHJ5O1xuICAgIHJlZ2lzdHJ5LmRyYWdnYWJsZS51cGRhdGUoZW50cnksIGxhc3QpO1xuICB9LCBbZW50cnksIHJlZ2lzdHJ5LmRyYWdnYWJsZV0pO1xufVxuXG5mdW5jdGlvbiB1c2VWYWxpZGF0aW9uJDEocHJvcHMsIGNvbnRleHRJZCwgZ2V0UmVmKSB7XG4gIHVzZURldlNldHVwV2FybmluZyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gcHJlZml4KGlkKSB7XG4gICAgICByZXR1cm4gXCJEcmFnZ2FibGVbaWQ6IFwiICsgaWQgKyBcIl06IFwiO1xuICAgIH1cblxuICAgIHZhciBpZCA9IHByb3BzLmRyYWdnYWJsZUlkO1xuICAgICFpZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RyYWdnYWJsZSByZXF1aXJlcyBhIGRyYWdnYWJsZUlkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIGlkID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiRHJhZ2dhYmxlIHJlcXVpcmVzIGEgW3N0cmluZ10gZHJhZ2dhYmxlSWQuXFxuICAgICAgUHJvdmlkZWQ6IFt0eXBlOiBcIiArIHR5cGVvZiBpZCArIFwiXSAodmFsdWU6IFwiICsgaWQgKyBcIilcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFpc0ludGVnZXIocHJvcHMuaW5kZXgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBwcmVmaXgoaWQpICsgXCIgcmVxdWlyZXMgYW4gaW50ZWdlciBpbmRleCBwcm9wXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9wcy5tYXBwZWQudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNoZWNrSXNWYWxpZElubmVyUmVmKGdldFJlZigpKTtcblxuICAgIGlmIChwcm9wcy5pc0VuYWJsZWQpIHtcbiAgICAgICFmaW5kRHJhZ0hhbmRsZShjb250ZXh0SWQsIGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgcHJlZml4KGlkKSArIFwiIFVuYWJsZSB0byBmaW5kIGRyYWcgaGFuZGxlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gdXNlQ2xvbmVQcm9wVmFsaWRhdGlvbihpc0Nsb25lKSB7XG4gIHVzZURldihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluaXRpYWxSZWYgPSBSZWFjdC51c2VSZWYoaXNDbG9uZSk7XG4gICAgdXNlRGV2U2V0dXBXYXJuaW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICEoaXNDbG9uZSA9PT0gaW5pdGlhbFJlZi5jdXJyZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RyYWdnYWJsZSBpc0Nsb25lIHByb3AgdmFsdWUgY2hhbmdlZCBkdXJpbmcgY29tcG9uZW50IGxpZmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfSwgW2lzQ2xvbmVdKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnRIdG1sNURuZChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBEcmFnZ2FibGUocHJvcHMpIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHNldFJlZiA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGVsKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBlbDtcbiAgfSwgW10pO1xuICB2YXIgZ2V0UmVmID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG5cbiAgdmFyIF91c2VSZXF1aXJlZENvbnRleHQgPSB1c2VSZXF1aXJlZENvbnRleHQoQXBwQ29udGV4dCksXG4gICAgICBjb250ZXh0SWQgPSBfdXNlUmVxdWlyZWRDb250ZXh0LmNvbnRleHRJZCxcbiAgICAgIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkID0gX3VzZVJlcXVpcmVkQ29udGV4dC5kcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCxcbiAgICAgIHJlZ2lzdHJ5ID0gX3VzZVJlcXVpcmVkQ29udGV4dC5yZWdpc3RyeTtcblxuICB2YXIgX3VzZVJlcXVpcmVkQ29udGV4dDIgPSB1c2VSZXF1aXJlZENvbnRleHQoRHJvcHBhYmxlQ29udGV4dCksXG4gICAgICB0eXBlID0gX3VzZVJlcXVpcmVkQ29udGV4dDIudHlwZSxcbiAgICAgIGRyb3BwYWJsZUlkID0gX3VzZVJlcXVpcmVkQ29udGV4dDIuZHJvcHBhYmxlSWQ7XG5cbiAgdmFyIGRlc2NyaXB0b3IgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogcHJvcHMuZHJhZ2dhYmxlSWQsXG4gICAgICBpbmRleDogcHJvcHMuaW5kZXgsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkXG4gICAgfTtcbiAgfSwgW3Byb3BzLmRyYWdnYWJsZUlkLCBwcm9wcy5pbmRleCwgdHlwZSwgZHJvcHBhYmxlSWRdKTtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBkcmFnZ2FibGVJZCA9IHByb3BzLmRyYWdnYWJsZUlkLFxuICAgICAgaXNFbmFibGVkID0gcHJvcHMuaXNFbmFibGVkLFxuICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MgPSBwcm9wcy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzID0gcHJvcHMuY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICBpc0Nsb25lID0gcHJvcHMuaXNDbG9uZSxcbiAgICAgIG1hcHBlZCA9IHByb3BzLm1hcHBlZCxcbiAgICAgIGRyb3BBbmltYXRpb25GaW5pc2hlZEFjdGlvbiA9IHByb3BzLmRyb3BBbmltYXRpb25GaW5pc2hlZDtcbiAgdXNlVmFsaWRhdGlvbiQxKHByb3BzLCBjb250ZXh0SWQsIGdldFJlZik7XG4gIHVzZUNsb25lUHJvcFZhbGlkYXRpb24oaXNDbG9uZSk7XG5cbiAgaWYgKCFpc0Nsb25lKSB7XG4gICAgdmFyIGZvclB1Ymxpc2hlciA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgICByZWdpc3RyeTogcmVnaXN0cnksXG4gICAgICAgIGdldERyYWdnYWJsZVJlZjogZ2V0UmVmLFxuICAgICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICAgIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzOiBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgICAgaXNFbmFibGVkOiBpc0VuYWJsZWRcbiAgICAgIH07XG4gICAgfSwgW2Rlc2NyaXB0b3IsIHJlZ2lzdHJ5LCBnZXRSZWYsIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLCBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcywgaXNFbmFibGVkXSk7XG4gICAgdXNlRHJhZ2dhYmxlUHVibGlzaGVyKGZvclB1Ymxpc2hlcik7XG4gIH1cblxuICB2YXIgZHJhZ0hhbmRsZVByb3BzID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNFbmFibGVkID8ge1xuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICByb2xlOiAnYnV0dG9uJyxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQsXG4gICAgICAnZGF0YS1yYmQtZHJhZy1oYW5kbGUtZHJhZ2dhYmxlLWlkJzogZHJhZ2dhYmxlSWQsXG4gICAgICAnZGF0YS1yYmQtZHJhZy1oYW5kbGUtY29udGV4dC1pZCc6IGNvbnRleHRJZCxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBvbkRyYWdTdGFydDogcHJldmVudEh0bWw1RG5kXG4gICAgfSA6IG51bGw7XG4gIH0sIFtjb250ZXh0SWQsIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkLCBkcmFnZ2FibGVJZCwgaXNFbmFibGVkXSk7XG4gIHZhciBvbk1vdmVFbmQgPSB1c2VNZW1vT25lLnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChtYXBwZWQudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghbWFwcGVkLmRyb3BwaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkcm9wQW5pbWF0aW9uRmluaXNoZWRBY3Rpb24oKTtcbiAgfSwgW2Ryb3BBbmltYXRpb25GaW5pc2hlZEFjdGlvbiwgbWFwcGVkXSk7XG4gIHZhciBwcm92aWRlZCA9IHVzZU1lbW9PbmUudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUkMShtYXBwZWQpO1xuICAgIHZhciBvblRyYW5zaXRpb25FbmQgPSBtYXBwZWQudHlwZSA9PT0gJ0RSQUdHSU5HJyAmJiBtYXBwZWQuZHJvcHBpbmcgPyBvbk1vdmVFbmQgOiBudWxsO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBpbm5lclJlZjogc2V0UmVmLFxuICAgICAgZHJhZ2dhYmxlUHJvcHM6IHtcbiAgICAgICAgJ2RhdGEtcmJkLWRyYWdnYWJsZS1jb250ZXh0LWlkJzogY29udGV4dElkLFxuICAgICAgICAnZGF0YS1yYmQtZHJhZ2dhYmxlLWlkJzogZHJhZ2dhYmxlSWQsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgICAgIH0sXG4gICAgICBkcmFnSGFuZGxlUHJvcHM6IGRyYWdIYW5kbGVQcm9wc1xuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgW2NvbnRleHRJZCwgZHJhZ0hhbmRsZVByb3BzLCBkcmFnZ2FibGVJZCwgbWFwcGVkLCBvbk1vdmVFbmQsIHNldFJlZl0pO1xuICB2YXIgcnVicmljID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJhZ2dhYmxlSWQ6IGRlc2NyaXB0b3IuaWQsXG4gICAgICB0eXBlOiBkZXNjcmlwdG9yLnR5cGUsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgaW5kZXg6IGRlc2NyaXB0b3IuaW5kZXgsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2Rlc2NyaXB0b3IuZHJvcHBhYmxlSWQsIGRlc2NyaXB0b3IuaWQsIGRlc2NyaXB0b3IuaW5kZXgsIGRlc2NyaXB0b3IudHlwZV0pO1xuICByZXR1cm4gY2hpbGRyZW4ocHJvdmlkZWQsIG1hcHBlZC5zbmFwc2hvdCwgcnVicmljKTtcbn1cblxudmFyIGlzU3RyaWN0RXF1YWwgPSAoZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59KTtcblxudmFyIHdoYXRJc0RyYWdnZWRPdmVyRnJvbVJlc3VsdCA9IChmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHZhciBjb21iaW5lID0gcmVzdWx0LmNvbWJpbmUsXG4gICAgICBkZXN0aW5hdGlvbiA9IHJlc3VsdC5kZXN0aW5hdGlvbjtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gZGVzdGluYXRpb24uZHJvcHBhYmxlSWQ7XG4gIH1cblxuICBpZiAoY29tYmluZSkge1xuICAgIHJldHVybiBjb21iaW5lLmRyb3BwYWJsZUlkO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KTtcblxudmFyIGdldENvbWJpbmVXaXRoRnJvbVJlc3VsdCA9IGZ1bmN0aW9uIGdldENvbWJpbmVXaXRoRnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC5jb21iaW5lID8gcmVzdWx0LmNvbWJpbmUuZHJhZ2dhYmxlSWQgOiBudWxsO1xufTtcblxudmFyIGdldENvbWJpbmVXaXRoRnJvbUltcGFjdCA9IGZ1bmN0aW9uIGdldENvbWJpbmVXaXRoRnJvbUltcGFjdChpbXBhY3QpIHtcbiAgcmV0dXJuIGltcGFjdC5hdCAmJiBpbXBhY3QuYXQudHlwZSA9PT0gJ0NPTUJJTkUnID8gaW1wYWN0LmF0LmNvbWJpbmUuZHJhZ2dhYmxlSWQgOiBudWxsO1xufTtcblxuZnVuY3Rpb24gZ2V0RHJhZ2dhYmxlU2VsZWN0b3IoKSB7XG4gIHZhciBtZW1vaXplZE9mZnNldCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldE1lbW9pemVkU25hcHNob3QgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChtb2RlLCBpc0Nsb25lLCBkcmFnZ2luZ092ZXIsIGNvbWJpbmVXaXRoLCBkcm9wcGluZykge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nOiB0cnVlLFxuICAgICAgaXNDbG9uZTogaXNDbG9uZSxcbiAgICAgIGlzRHJvcEFuaW1hdGluZzogQm9vbGVhbihkcm9wcGluZyksXG4gICAgICBkcm9wQW5pbWF0aW9uOiBkcm9wcGluZyxcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBkcmFnZ2luZ092ZXI6IGRyYWdnaW5nT3ZlcixcbiAgICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3I6IG51bGxcbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldE1lbW9pemVkUHJvcHMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvZmZzZXQsIG1vZGUsIGRpbWVuc2lvbiwgaXNDbG9uZSwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgZm9yY2VTaG91bGRBbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcHBlZDoge1xuICAgICAgICB0eXBlOiAnRFJBR0dJTkcnLFxuICAgICAgICBkcm9wcGluZzogbnVsbCxcbiAgICAgICAgZHJhZ2dpbmdPdmVyOiBkcmFnZ2luZ092ZXIsXG4gICAgICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICAgICAgbW9kZTogbW9kZSxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIGRpbWVuc2lvbjogZGltZW5zaW9uLFxuICAgICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZvcmNlU2hvdWxkQW5pbWF0ZSxcbiAgICAgICAgc25hcHNob3Q6IGdldE1lbW9pemVkU25hcHNob3QobW9kZSwgaXNDbG9uZSwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgbnVsbClcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgaWYgKHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSBzdGF0ZS5jdXJyZW50LmNsaWVudC5vZmZzZXQ7XG4gICAgICB2YXIgZGltZW5zaW9uID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXTtcbiAgICAgIHZhciBkcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpO1xuICAgICAgdmFyIGNvbWJpbmVXaXRoID0gZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0KHN0YXRlLmltcGFjdCk7XG4gICAgICB2YXIgZm9yY2VTaG91bGRBbmltYXRlID0gc3RhdGUuZm9yY2VTaG91bGRBbmltYXRlO1xuICAgICAgcmV0dXJuIGdldE1lbW9pemVkUHJvcHMobWVtb2l6ZWRPZmZzZXQob2Zmc2V0LngsIG9mZnNldC55KSwgc3RhdGUubW92ZW1lbnRNb2RlLCBkaW1lbnNpb24sIG93blByb3BzLmlzQ2xvbmUsIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIGZvcmNlU2hvdWxkQW5pbWF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0Nsb25lID0gb3duUHJvcHMuaXNDbG9uZTtcbiAgICAgIHZhciBfZGltZW5zaW9uID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXTtcbiAgICAgIHZhciByZXN1bHQgPSBjb21wbGV0ZWQucmVzdWx0O1xuICAgICAgdmFyIG1vZGUgPSByZXN1bHQubW9kZTtcblxuICAgICAgdmFyIF9kcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlckZyb21SZXN1bHQocmVzdWx0KTtcblxuICAgICAgdmFyIF9jb21iaW5lV2l0aCA9IGdldENvbWJpbmVXaXRoRnJvbVJlc3VsdChyZXN1bHQpO1xuXG4gICAgICB2YXIgZHVyYXRpb24gPSBzdGF0ZS5kcm9wRHVyYXRpb247XG4gICAgICB2YXIgZHJvcHBpbmcgPSB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgY3VydmU6IGN1cnZlcy5kcm9wLFxuICAgICAgICBtb3ZlVG86IHN0YXRlLm5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgIG9wYWNpdHk6IF9jb21iaW5lV2l0aCA/IGNvbWJpbmUub3BhY2l0eS5kcm9wIDogbnVsbCxcbiAgICAgICAgc2NhbGU6IF9jb21iaW5lV2l0aCA/IGNvbWJpbmUuc2NhbGUuZHJvcCA6IG51bGxcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXBwZWQ6IHtcbiAgICAgICAgICB0eXBlOiAnRFJBR0dJTkcnLFxuICAgICAgICAgIG9mZnNldDogc3RhdGUubmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgICAgICBkaW1lbnNpb246IF9kaW1lbnNpb24sXG4gICAgICAgICAgZHJvcHBpbmc6IGRyb3BwaW5nLFxuICAgICAgICAgIGRyYWdnaW5nT3ZlcjogX2RyYWdnaW5nT3ZlcixcbiAgICAgICAgICBjb21iaW5lV2l0aDogX2NvbWJpbmVXaXRoLFxuICAgICAgICAgIG1vZGU6IG1vZGUsXG4gICAgICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBudWxsLFxuICAgICAgICAgIHNuYXBzaG90OiBnZXRNZW1vaXplZFNuYXBzaG90KG1vZGUsIGlzQ2xvbmUsIF9kcmFnZ2luZ092ZXIsIF9jb21iaW5lV2l0aCwgZHJvcHBpbmcpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBnZXRTZWNvbmRhcnlTbmFwc2hvdChjb21iaW5lVGFyZ2V0Rm9yKSB7XG4gIHJldHVybiB7XG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgaXNEcm9wQW5pbWF0aW5nOiBmYWxzZSxcbiAgICBpc0Nsb25lOiBmYWxzZSxcbiAgICBkcm9wQW5pbWF0aW9uOiBudWxsLFxuICAgIG1vZGU6IG51bGwsXG4gICAgZHJhZ2dpbmdPdmVyOiBudWxsLFxuICAgIGNvbWJpbmVUYXJnZXRGb3I6IGNvbWJpbmVUYXJnZXRGb3IsXG4gICAgY29tYmluZVdpdGg6IG51bGxcbiAgfTtcbn1cblxudmFyIGF0UmVzdCA9IHtcbiAgbWFwcGVkOiB7XG4gICAgdHlwZTogJ1NFQ09OREFSWScsXG4gICAgb2Zmc2V0OiBvcmlnaW4sXG4gICAgY29tYmluZVRhcmdldEZvcjogbnVsbCxcbiAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiB0cnVlLFxuICAgIHNuYXBzaG90OiBnZXRTZWNvbmRhcnlTbmFwc2hvdChudWxsKVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTZWNvbmRhcnlTZWxlY3RvcigpIHtcbiAgdmFyIG1lbW9pemVkT2Zmc2V0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gIH0pO1xuICB2YXIgZ2V0TWVtb2l6ZWRTbmFwc2hvdCA9IG1lbW9pemVPbmUoZ2V0U2Vjb25kYXJ5U25hcHNob3QpO1xuICB2YXIgZ2V0TWVtb2l6ZWRQcm9wcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKG9mZnNldCwgY29tYmluZVRhcmdldEZvciwgc2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCkge1xuICAgIGlmIChjb21iaW5lVGFyZ2V0Rm9yID09PSB2b2lkIDApIHtcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3IgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYXBwZWQ6IHtcbiAgICAgICAgdHlwZTogJ1NFQ09OREFSWScsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBjb21iaW5lVGFyZ2V0Rm9yOiBjb21iaW5lVGFyZ2V0Rm9yLFxuICAgICAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50LFxuICAgICAgICBzbmFwc2hvdDogZ2V0TWVtb2l6ZWRTbmFwc2hvdChjb21iaW5lVGFyZ2V0Rm9yKVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG4gIHZhciBnZXRGYWxsYmFjayA9IGZ1bmN0aW9uIGdldEZhbGxiYWNrKGNvbWJpbmVUYXJnZXRGb3IpIHtcbiAgICByZXR1cm4gY29tYmluZVRhcmdldEZvciA/IGdldE1lbW9pemVkUHJvcHMob3JpZ2luLCBjb21iaW5lVGFyZ2V0Rm9yLCB0cnVlKSA6IG51bGw7XG4gIH07XG5cbiAgdmFyIGdldFByb3BzID0gZnVuY3Rpb24gZ2V0UHJvcHMob3duSWQsIGRyYWdnaW5nSWQsIGltcGFjdCwgYWZ0ZXJDcml0aWNhbCkge1xuICAgIHZhciB2aXN1YWxEaXNwbGFjZW1lbnQgPSBpbXBhY3QuZGlzcGxhY2VkLnZpc2libGVbb3duSWRdO1xuICAgIHZhciBpc0FmdGVyQ3JpdGljYWxJblZpcnR1YWxMaXN0ID0gQm9vbGVhbihhZnRlckNyaXRpY2FsLmluVmlydHVhbExpc3QgJiYgYWZ0ZXJDcml0aWNhbC5lZmZlY3RlZFtvd25JZF0pO1xuICAgIHZhciBjb21iaW5lID0gdHJ5R2V0Q29tYmluZShpbXBhY3QpO1xuICAgIHZhciBjb21iaW5lVGFyZ2V0Rm9yID0gY29tYmluZSAmJiBjb21iaW5lLmRyYWdnYWJsZUlkID09PSBvd25JZCA/IGRyYWdnaW5nSWQgOiBudWxsO1xuXG4gICAgaWYgKCF2aXN1YWxEaXNwbGFjZW1lbnQpIHtcbiAgICAgIGlmICghaXNBZnRlckNyaXRpY2FsSW5WaXJ0dWFsTGlzdCkge1xuICAgICAgICByZXR1cm4gZ2V0RmFsbGJhY2soY29tYmluZVRhcmdldEZvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbXBhY3QuZGlzcGxhY2VkLmludmlzaWJsZVtvd25JZF0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2UgPSBuZWdhdGUoYWZ0ZXJDcml0aWNhbC5kaXNwbGFjZWRCeS5wb2ludCk7XG5cbiAgICAgIHZhciBfb2Zmc2V0ID0gbWVtb2l6ZWRPZmZzZXQoY2hhbmdlLngsIGNoYW5nZS55KTtcblxuICAgICAgcmV0dXJuIGdldE1lbW9pemVkUHJvcHMoX29mZnNldCwgY29tYmluZVRhcmdldEZvciwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQWZ0ZXJDcml0aWNhbEluVmlydHVhbExpc3QpIHtcbiAgICAgIHJldHVybiBnZXRGYWxsYmFjayhjb21iaW5lVGFyZ2V0Rm9yKTtcbiAgICB9XG5cbiAgICB2YXIgZGlzcGxhY2VCeSA9IGltcGFjdC5kaXNwbGFjZWRCeS5wb2ludDtcbiAgICB2YXIgb2Zmc2V0ID0gbWVtb2l6ZWRPZmZzZXQoZGlzcGxhY2VCeS54LCBkaXNwbGFjZUJ5LnkpO1xuICAgIHJldHVybiBnZXRNZW1vaXplZFByb3BzKG9mZnNldCwgY29tYmluZVRhcmdldEZvciwgdmlzdWFsRGlzcGxhY2VtZW50LnNob3VsZEFuaW1hdGUpO1xuICB9O1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICBpZiAoc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkID09PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFByb3BzKG93blByb3BzLmRyYWdnYWJsZUlkLCBzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWQsIHN0YXRlLmltcGFjdCwgc3RhdGUuYWZ0ZXJDcml0aWNhbCk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCA9PT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRQcm9wcyhvd25Qcm9wcy5kcmFnZ2FibGVJZCwgY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCwgY29tcGxldGVkLmltcGFjdCwgY29tcGxldGVkLmFmdGVyQ3JpdGljYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxudmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkge1xuICB2YXIgZHJhZ2dpbmdTZWxlY3RvciA9IGdldERyYWdnYWJsZVNlbGVjdG9yKCk7XG4gIHZhciBzZWNvbmRhcnlTZWxlY3RvciA9IGdldFNlY29uZGFyeVNlbGVjdG9yKCk7XG5cbiAgdmFyIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB8fCBzZWNvbmRhcnlTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHx8IGF0UmVzdDtcbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59O1xudmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgZHJvcEFuaW1hdGlvbkZpbmlzaGVkOiBkcm9wQW5pbWF0aW9uRmluaXNoZWRcbn07XG52YXIgQ29ubmVjdGVkRHJhZ2dhYmxlID0gcmVhY3RSZWR1eC5jb25uZWN0KG1ha2VNYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbnVsbCwge1xuICBjb250ZXh0OiBTdG9yZUNvbnRleHQsXG4gIHB1cmU6IHRydWUsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbDogaXNTdHJpY3RFcXVhbFxufSkoRHJhZ2dhYmxlKTtcblxuZnVuY3Rpb24gUHJpdmF0ZURyYWdnYWJsZShwcm9wcykge1xuICB2YXIgZHJvcHBhYmxlQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChEcm9wcGFibGVDb250ZXh0KTtcbiAgdmFyIGlzVXNpbmdDbG9uZUZvciA9IGRyb3BwYWJsZUNvbnRleHQuaXNVc2luZ0Nsb25lRm9yO1xuXG4gIGlmIChpc1VzaW5nQ2xvbmVGb3IgPT09IHByb3BzLmRyYWdnYWJsZUlkICYmICFwcm9wcy5pc0Nsb25lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChDb25uZWN0ZWREcmFnZ2FibGUsIHByb3BzKTtcbn1cbmZ1bmN0aW9uIFB1YmxpY0RyYWdnYWJsZShwcm9wcykge1xuICB2YXIgaXNFbmFibGVkID0gdHlwZW9mIHByb3BzLmlzRHJhZ0Rpc2FibGVkID09PSAnYm9vbGVhbicgPyAhcHJvcHMuaXNEcmFnRGlzYWJsZWQgOiB0cnVlO1xuICB2YXIgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMgPSBCb29sZWFuKHByb3BzLmRpc2FibGVJbnRlcmFjdGl2ZUVsZW1lbnRCbG9ja2luZyk7XG4gIHZhciBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyA9IEJvb2xlYW4ocHJvcHMuc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MpO1xuICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChQcml2YXRlRHJhZ2dhYmxlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBpc0Nsb25lOiBmYWxzZSxcbiAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IHNob3VsZFJlc3BlY3RGb3JjZVByZXNzXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gRHJvcHBhYmxlKHByb3BzKSB7XG4gIHZhciBhcHBDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChBcHBDb250ZXh0KTtcbiAgIWFwcENvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCBhcHAgY29udGV4dCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGNvbnRleHRJZCA9IGFwcENvbnRleHQuY29udGV4dElkLFxuICAgICAgaXNNb3ZlbWVudEFsbG93ZWQgPSBhcHBDb250ZXh0LmlzTW92ZW1lbnRBbGxvd2VkO1xuICB2YXIgZHJvcHBhYmxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgcGxhY2Vob2xkZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgZHJvcHBhYmxlSWQgPSBwcm9wcy5kcm9wcGFibGVJZCxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgbW9kZSA9IHByb3BzLm1vZGUsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBpZ25vcmVDb250YWluZXJDbGlwcGluZyA9IHByb3BzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nLFxuICAgICAgaXNEcm9wRGlzYWJsZWQgPSBwcm9wcy5pc0Ryb3BEaXNhYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQgPSBwcm9wcy5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgc25hcHNob3QgPSBwcm9wcy5zbmFwc2hvdCxcbiAgICAgIHVzZUNsb25lID0gcHJvcHMudXNlQ2xvbmUsXG4gICAgICB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCA9IHByb3BzLnVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsLFxuICAgICAgZ2V0Q29udGFpbmVyRm9yQ2xvbmUgPSBwcm9wcy5nZXRDb250YWluZXJGb3JDbG9uZTtcbiAgdmFyIGdldERyb3BwYWJsZVJlZiA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkcm9wcGFibGVSZWYuY3VycmVudDtcbiAgfSwgW10pO1xuICB2YXIgc2V0RHJvcHBhYmxlUmVmID0gdXNlTWVtb09uZS51c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBkcm9wcGFibGVSZWYuY3VycmVudCA9IHZhbHVlO1xuICB9LCBbXSk7XG4gIHZhciBnZXRQbGFjZWhvbGRlclJlZiA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwbGFjZWhvbGRlclJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG4gIHZhciBzZXRQbGFjZWhvbGRlclJlZiA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcGxhY2Vob2xkZXJSZWYuY3VycmVudCA9IHZhbHVlO1xuICB9LCBbXSk7XG4gIHVzZVZhbGlkYXRpb24oe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBnZXREcm9wcGFibGVSZWY6IGdldERyb3BwYWJsZVJlZixcbiAgICBnZXRQbGFjZWhvbGRlclJlZjogZ2V0UGxhY2Vob2xkZXJSZWZcbiAgfSk7XG4gIHZhciBvblBsYWNlaG9sZGVyVHJhbnNpdGlvbkVuZCA9IHVzZU1lbW9PbmUudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc01vdmVtZW50QWxsb3dlZCgpKSB7XG4gICAgICB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCh7XG4gICAgICAgIG1heFNjcm9sbDogZ2V0TWF4V2luZG93U2Nyb2xsKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2lzTW92ZW1lbnRBbGxvd2VkLCB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbF0pO1xuICB1c2VEcm9wcGFibGVQdWJsaXNoZXIoe1xuICAgIGRyb3BwYWJsZUlkOiBkcm9wcGFibGVJZCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIG1vZGU6IG1vZGUsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgaXNEcm9wRGlzYWJsZWQ6IGlzRHJvcERpc2FibGVkLFxuICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWQsXG4gICAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmc6IGlnbm9yZUNvbnRhaW5lckNsaXBwaW5nLFxuICAgIGdldERyb3BwYWJsZVJlZjogZ2V0RHJvcHBhYmxlUmVmXG4gIH0pO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEFuaW1hdGVJbk91dCwge1xuICAgIG9uOiBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICBzaG91bGRBbmltYXRlOiBwcm9wcy5zaG91bGRBbmltYXRlUGxhY2Vob2xkZXJcbiAgfSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgb25DbG9zZSA9IF9yZWYub25DbG9zZSxcbiAgICAgICAgZGF0YSA9IF9yZWYuZGF0YSxcbiAgICAgICAgYW5pbWF0ZSA9IF9yZWYuYW5pbWF0ZTtcbiAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChQbGFjZWhvbGRlciQxLCB7XG4gICAgICBwbGFjZWhvbGRlcjogZGF0YSxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICBpbm5lclJlZjogc2V0UGxhY2Vob2xkZXJSZWYsXG4gICAgICBhbmltYXRlOiBhbmltYXRlLFxuICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgICBvblRyYW5zaXRpb25FbmQ6IG9uUGxhY2Vob2xkZXJUcmFuc2l0aW9uRW5kXG4gICAgfSk7XG4gIH0pO1xuICB2YXIgcHJvdmlkZWQgPSB1c2VNZW1vT25lLnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbm5lclJlZjogc2V0RHJvcHBhYmxlUmVmLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgZHJvcHBhYmxlUHJvcHM6IHtcbiAgICAgICAgJ2RhdGEtcmJkLWRyb3BwYWJsZS1pZCc6IGRyb3BwYWJsZUlkLFxuICAgICAgICAnZGF0YS1yYmQtZHJvcHBhYmxlLWNvbnRleHQtaWQnOiBjb250ZXh0SWRcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY29udGV4dElkLCBkcm9wcGFibGVJZCwgcGxhY2Vob2xkZXIsIHNldERyb3BwYWJsZVJlZl0pO1xuICB2YXIgaXNVc2luZ0Nsb25lRm9yID0gdXNlQ2xvbmUgPyB1c2VDbG9uZS5kcmFnZ2luZy5kcmFnZ2FibGVJZCA6IG51bGw7XG4gIHZhciBkcm9wcGFibGVDb250ZXh0ID0gdXNlTWVtb09uZS51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGlzVXNpbmdDbG9uZUZvcjogaXNVc2luZ0Nsb25lRm9yXG4gICAgfTtcbiAgfSwgW2Ryb3BwYWJsZUlkLCBpc1VzaW5nQ2xvbmVGb3IsIHR5cGVdKTtcblxuICBmdW5jdGlvbiBnZXRDbG9uZSgpIHtcbiAgICBpZiAoIXVzZUNsb25lKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZHJhZ2dpbmcgPSB1c2VDbG9uZS5kcmFnZ2luZyxcbiAgICAgICAgcmVuZGVyID0gdXNlQ2xvbmUucmVuZGVyO1xuICAgIHZhciBub2RlID0gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChQcml2YXRlRHJhZ2dhYmxlLCB7XG4gICAgICBkcmFnZ2FibGVJZDogZHJhZ2dpbmcuZHJhZ2dhYmxlSWQsXG4gICAgICBpbmRleDogZHJhZ2dpbmcuc291cmNlLmluZGV4LFxuICAgICAgaXNDbG9uZTogdHJ1ZSxcbiAgICAgIGlzRW5hYmxlZDogdHJ1ZSxcbiAgICAgIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzOiBmYWxzZSxcbiAgICAgIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzOiB0cnVlXG4gICAgfSwgZnVuY3Rpb24gKGRyYWdnYWJsZVByb3ZpZGVkLCBkcmFnZ2FibGVTbmFwc2hvdCkge1xuICAgICAgcmV0dXJuIHJlbmRlcihkcmFnZ2FibGVQcm92aWRlZCwgZHJhZ2dhYmxlU25hcHNob3QsIGRyYWdnaW5nKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKG5vZGUsIGdldENvbnRhaW5lckZvckNsb25lKCkpO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRHJvcHBhYmxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkcm9wcGFibGVDb250ZXh0XG4gIH0sIGNoaWxkcmVuKHByb3ZpZGVkLCBzbmFwc2hvdCksIGdldENsb25lKCkpO1xufVxuXG52YXIgaXNNYXRjaGluZ1R5cGUgPSBmdW5jdGlvbiBpc01hdGNoaW5nVHlwZSh0eXBlLCBjcml0aWNhbCkge1xuICByZXR1cm4gdHlwZSA9PT0gY3JpdGljYWwuZHJvcHBhYmxlLnR5cGU7XG59O1xuXG52YXIgZ2V0RHJhZ2dhYmxlID0gZnVuY3Rpb24gZ2V0RHJhZ2dhYmxlKGNyaXRpY2FsLCBkaW1lbnNpb25zKSB7XG4gIHJldHVybiBkaW1lbnNpb25zLmRyYWdnYWJsZXNbY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbn07XG5cbnZhciBtYWtlTWFwU3RhdGVUb1Byb3BzJDEgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkge1xuICB2YXIgaWRsZVdpdGhBbmltYXRpb24gPSB7XG4gICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgc2hvdWxkQW5pbWF0ZVBsYWNlaG9sZGVyOiB0cnVlLFxuICAgIHNuYXBzaG90OiB7XG4gICAgICBpc0RyYWdnaW5nT3ZlcjogZmFsc2UsXG4gICAgICBkcmFnZ2luZ092ZXJXaXRoOiBudWxsLFxuICAgICAgZHJhZ2dpbmdGcm9tVGhpc1dpdGg6IG51bGwsXG4gICAgICBpc1VzaW5nUGxhY2Vob2xkZXI6IGZhbHNlXG4gICAgfSxcbiAgICB1c2VDbG9uZTogbnVsbFxuICB9O1xuXG4gIHZhciBpZGxlV2l0aG91dEFuaW1hdGlvbiA9IF9leHRlbmRzKHt9LCBpZGxlV2l0aEFuaW1hdGlvbiwge1xuICAgIHNob3VsZEFuaW1hdGVQbGFjZWhvbGRlcjogZmFsc2VcbiAgfSk7XG5cbiAgdmFyIGdldERyYWdnYWJsZVJ1YnJpYyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJhZ2dhYmxlSWQ6IGRlc2NyaXB0b3IuaWQsXG4gICAgICB0eXBlOiBkZXNjcmlwdG9yLnR5cGUsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgaW5kZXg6IGRlc2NyaXB0b3IuaW5kZXgsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBnZXRNYXBQcm9wcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGlkLCBpc0VuYWJsZWQsIGlzRHJhZ2dpbmdPdmVyRm9yQ29uc3VtZXIsIGlzRHJhZ2dpbmdPdmVyRm9ySW1wYWN0LCBkcmFnZ2luZywgcmVuZGVyQ2xvbmUpIHtcbiAgICB2YXIgZHJhZ2dhYmxlSWQgPSBkcmFnZ2luZy5kZXNjcmlwdG9yLmlkO1xuICAgIHZhciBpc0hvbWUgPSBkcmFnZ2luZy5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkID09PSBpZDtcblxuICAgIGlmIChpc0hvbWUpIHtcbiAgICAgIHZhciB1c2VDbG9uZSA9IHJlbmRlckNsb25lID8ge1xuICAgICAgICByZW5kZXI6IHJlbmRlckNsb25lLFxuICAgICAgICBkcmFnZ2luZzogZ2V0RHJhZ2dhYmxlUnVicmljKGRyYWdnaW5nLmRlc2NyaXB0b3IpXG4gICAgICB9IDogbnVsbDtcbiAgICAgIHZhciBfc25hcHNob3QgPSB7XG4gICAgICAgIGlzRHJhZ2dpbmdPdmVyOiBpc0RyYWdnaW5nT3ZlckZvckNvbnN1bWVyLFxuICAgICAgICBkcmFnZ2luZ092ZXJXaXRoOiBpc0RyYWdnaW5nT3ZlckZvckNvbnN1bWVyID8gZHJhZ2dhYmxlSWQgOiBudWxsLFxuICAgICAgICBkcmFnZ2luZ0Zyb21UaGlzV2l0aDogZHJhZ2dhYmxlSWQsXG4gICAgICAgIGlzVXNpbmdQbGFjZWhvbGRlcjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBsYWNlaG9sZGVyOiBkcmFnZ2luZy5wbGFjZWhvbGRlcixcbiAgICAgICAgc2hvdWxkQW5pbWF0ZVBsYWNlaG9sZGVyOiBmYWxzZSxcbiAgICAgICAgc25hcHNob3Q6IF9zbmFwc2hvdCxcbiAgICAgICAgdXNlQ2xvbmU6IHVzZUNsb25lXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm4gaWRsZVdpdGhvdXRBbmltYXRpb247XG4gICAgfVxuXG4gICAgaWYgKCFpc0RyYWdnaW5nT3ZlckZvckltcGFjdCkge1xuICAgICAgcmV0dXJuIGlkbGVXaXRoQW5pbWF0aW9uO1xuICAgIH1cblxuICAgIHZhciBzbmFwc2hvdCA9IHtcbiAgICAgIGlzRHJhZ2dpbmdPdmVyOiBpc0RyYWdnaW5nT3ZlckZvckNvbnN1bWVyLFxuICAgICAgZHJhZ2dpbmdPdmVyV2l0aDogZHJhZ2dhYmxlSWQsXG4gICAgICBkcmFnZ2luZ0Zyb21UaGlzV2l0aDogbnVsbCxcbiAgICAgIGlzVXNpbmdQbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHBsYWNlaG9sZGVyOiBkcmFnZ2luZy5wbGFjZWhvbGRlcixcbiAgICAgIHNob3VsZEFuaW1hdGVQbGFjZWhvbGRlcjogdHJ1ZSxcbiAgICAgIHNuYXBzaG90OiBzbmFwc2hvdCxcbiAgICAgIHVzZUNsb25lOiBudWxsXG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgdmFyIGlkID0gb3duUHJvcHMuZHJvcHBhYmxlSWQ7XG4gICAgdmFyIHR5cGUgPSBvd25Qcm9wcy50eXBlO1xuICAgIHZhciBpc0VuYWJsZWQgPSAhb3duUHJvcHMuaXNEcm9wRGlzYWJsZWQ7XG4gICAgdmFyIHJlbmRlckNsb25lID0gb3duUHJvcHMucmVuZGVyQ2xvbmU7XG5cbiAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgdmFyIGNyaXRpY2FsID0gc3RhdGUuY3JpdGljYWw7XG5cbiAgICAgIGlmICghaXNNYXRjaGluZ1R5cGUodHlwZSwgY3JpdGljYWwpKSB7XG4gICAgICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRyYWdnaW5nID0gZ2V0RHJhZ2dhYmxlKGNyaXRpY2FsLCBzdGF0ZS5kaW1lbnNpb25zKTtcbiAgICAgIHZhciBpc0RyYWdnaW5nT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCkgPT09IGlkO1xuICAgICAgcmV0dXJuIGdldE1hcFByb3BzKGlkLCBpc0VuYWJsZWQsIGlzRHJhZ2dpbmdPdmVyLCBpc0RyYWdnaW5nT3ZlciwgZHJhZ2dpbmcsIHJlbmRlckNsb25lKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmICghaXNNYXRjaGluZ1R5cGUodHlwZSwgY29tcGxldGVkLmNyaXRpY2FsKSkge1xuICAgICAgICByZXR1cm4gaWRsZVdpdGhvdXRBbmltYXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBfZHJhZ2dpbmcgPSBnZXREcmFnZ2FibGUoY29tcGxldGVkLmNyaXRpY2FsLCBzdGF0ZS5kaW1lbnNpb25zKTtcblxuICAgICAgcmV0dXJuIGdldE1hcFByb3BzKGlkLCBpc0VuYWJsZWQsIHdoYXRJc0RyYWdnZWRPdmVyRnJvbVJlc3VsdChjb21wbGV0ZWQucmVzdWx0KSA9PT0gaWQsIHdoYXRJc0RyYWdnZWRPdmVyKGNvbXBsZXRlZC5pbXBhY3QpID09PSBpZCwgX2RyYWdnaW5nLCByZW5kZXJDbG9uZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnSURMRScgJiYgc3RhdGUuY29tcGxldGVkICYmICFzdGF0ZS5zaG91bGRGbHVzaCkge1xuICAgICAgdmFyIF9jb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmICghaXNNYXRjaGluZ1R5cGUodHlwZSwgX2NvbXBsZXRlZC5jcml0aWNhbCkpIHtcbiAgICAgICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2FzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKF9jb21wbGV0ZWQuaW1wYWN0KSA9PT0gaWQ7XG4gICAgICB2YXIgd2FzQ29tYmluaW5nID0gQm9vbGVhbihfY29tcGxldGVkLmltcGFjdC5hdCAmJiBfY29tcGxldGVkLmltcGFjdC5hdC50eXBlID09PSAnQ09NQklORScpO1xuICAgICAgdmFyIGlzSG9tZSA9IF9jb21wbGV0ZWQuY3JpdGljYWwuZHJvcHBhYmxlLmlkID09PSBpZDtcblxuICAgICAgaWYgKHdhc092ZXIpIHtcbiAgICAgICAgcmV0dXJuIHdhc0NvbWJpbmluZyA/IGlkbGVXaXRoQW5pbWF0aW9uIDogaWRsZVdpdGhvdXRBbmltYXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0hvbWUpIHtcbiAgICAgICAgcmV0dXJuIGlkbGVXaXRoQW5pbWF0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaWRsZVdpdGhvdXRBbmltYXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn07XG52YXIgbWFwRGlzcGF0Y2hUb1Byb3BzJDEgPSB7XG4gIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsOiB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbFxufTtcblxuZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgIWRvY3VtZW50LmJvZHkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdkb2N1bWVudC5ib2R5IGlzIG5vdCByZWFkeScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG59XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIG1vZGU6ICdzdGFuZGFyZCcsXG4gIHR5cGU6ICdERUZBVUxUJyxcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBpc0Ryb3BEaXNhYmxlZDogZmFsc2UsXG4gIGlzQ29tYmluZUVuYWJsZWQ6IGZhbHNlLFxuICBpZ25vcmVDb250YWluZXJDbGlwcGluZzogZmFsc2UsXG4gIHJlbmRlckNsb25lOiBudWxsLFxuICBnZXRDb250YWluZXJGb3JDbG9uZTogZ2V0Qm9keVxufTtcbnZhciBDb25uZWN0ZWREcm9wcGFibGUgPSByZWFjdFJlZHV4LmNvbm5lY3QobWFrZU1hcFN0YXRlVG9Qcm9wcyQxLCBtYXBEaXNwYXRjaFRvUHJvcHMkMSwgbnVsbCwge1xuICBjb250ZXh0OiBTdG9yZUNvbnRleHQsXG4gIHB1cmU6IHRydWUsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbDogaXNTdHJpY3RFcXVhbFxufSkoRHJvcHBhYmxlKTtcbkNvbm5lY3RlZERyb3BwYWJsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydHMuRHJhZ0Ryb3BDb250ZXh0ID0gRHJhZ0Ryb3BDb250ZXh0O1xuZXhwb3J0cy5EcmFnZ2FibGUgPSBQdWJsaWNEcmFnZ2FibGU7XG5leHBvcnRzLkRyb3BwYWJsZSA9IENvbm5lY3RlZERyb3BwYWJsZTtcbmV4cG9ydHMucmVzZXRTZXJ2ZXJDb250ZXh0ID0gcmVzZXRTZXJ2ZXJDb250ZXh0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MnXG5pbXBvcnQgeyBSZXNvdXJjZUpTT04sIFByb3BlcnR5SlNPTiB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5cbnR5cGUgQWRkTmV3SXRlbUJ1dHRvblByb3BzID0ge1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xufVxuXG5jb25zdCBBZGROZXdJdGVtQnV0dG9uOiBSZWFjdC5GQzxBZGROZXdJdGVtQnV0dG9uUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2UsIHByb3BlcnR5IH0gPSBwcm9wc1xuICBjb25zdCB7IHRyYW5zbGF0ZVByb3BlcnR5LCB0cmFuc2xhdGVCdXR0b24gfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgbGFiZWwgPSB0cmFuc2xhdGVQcm9wZXJ0eShcbiAgICBgJHtwcm9wZXJ0eS5wYXRofS5hZGROZXdJdGVtYCxcbiAgICByZXNvdXJjZS5pZCwge1xuICAgICAgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVCdXR0b24oJ2FkZE5ld0l0ZW0nLCByZXNvdXJjZS5pZCksXG4gICAgfSxcbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxJY29uIGljb249XCJBZGRcIiAvPlxuICAgICAge2xhYmVsfVxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkZE5ld0l0ZW1CdXR0b25cbiIsImltcG9ydCB7IEJveCwgSWNvbiwgVG9vbHRpcCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBQcm9wZXJ0eUpTT04gfSBmcm9tICcuLi8uLi8uLi8uLi9pbnRlcmZhY2VzJ1xuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eURlc2NyaXB0aW9uUHJvcHMgPSB7XG4gIHByb3BlcnR5OiBQcm9wZXJ0eUpTT047XG59XG5cbmNvbnN0IFByb3BlcnR5RGVzY3JpcHRpb246IFJlYWN0LkZDPFByb3BlcnR5RGVzY3JpcHRpb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gcHJvcHNcblxuICBpZiAoIXByb3BlcnR5LmRlc2NyaXB0aW9uKSB7IHJldHVybiBudWxsIH1cblxuICByZXR1cm4gKFxuICAgIDxCb3ggbXg9XCJzbVwiIGRpc3BsYXk9XCJpbmxpbmUtZmxleFwiPlxuICAgICAgPFRvb2x0aXAgZGlyZWN0aW9uPVwidG9wXCIgdGl0bGU9e3Byb3BlcnR5LmRlc2NyaXB0aW9ufSBzaXplPVwibGdcIj5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8SWNvbiBpY29uPVwiSGVscFwiIGNvbG9yPVwiaW5mb1wiIC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Ub29sdGlwPlxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCB7XG4gIFByb3BlcnR5RGVzY3JpcHRpb24gYXMgZGVmYXVsdCxcbiAgUHJvcGVydHlEZXNjcmlwdGlvbixcbn1cbiIsImltcG9ydCB7IExhYmVsLCBMYWJlbFByb3BzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFByb3BlcnR5SlNPTiB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBQcm9wZXJ0eURlc2NyaXB0aW9uIH0gZnJvbSAnLi4vcHJvcGVydHktZGVzY3JpcHRpb24nXG5cbmV4cG9ydCB0eXBlIFByb3BlcnR5TGFiZWxQcm9wcyA9IHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcHJvcHM/OiBMYWJlbFByb3BzO1xufVxuXG5jb25zdCBQcm9wZXJ0eUxhYmVsOiBSZWFjdC5GQzxQcm9wZXJ0eUxhYmVsUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHByb3BzOiBsYWJlbFByb3BzIH0gPSBwcm9wc1xuXG4gIGlmIChwcm9wZXJ0eS5oaWRlTGFiZWwpIHsgcmV0dXJuIG51bGwgfVxuXG4gIHJldHVybiAoXG4gICAgPExhYmVsXG4gICAgICBodG1sRm9yPXtwcm9wZXJ0eS5wYXRofVxuICAgICAgcmVxdWlyZWQ9e3Byb3BlcnR5LmlzUmVxdWlyZWR9XG4gICAgICB7Li4ubGFiZWxQcm9wc31cbiAgICA+XG4gICAgICB7cHJvcGVydHkubGFiZWx9XG4gICAgICB7cHJvcGVydHkuZGVzY3JpcHRpb24gJiYgPFByb3BlcnR5RGVzY3JpcHRpb24gcHJvcGVydHk9e3Byb3BlcnR5fSAvPn1cbiAgICA8L0xhYmVsPlxuICApXG59XG5cbmV4cG9ydCB7XG4gIFByb3BlcnR5TGFiZWwgYXMgZGVmYXVsdCxcbiAgUHJvcGVydHlMYWJlbCxcbn1cbiIsImltcG9ydCB7IERFTElNSVRFUiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2ZsYXQvY29uc3RhbnRzJ1xuaW1wb3J0IHsgUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcblxuLyoqXG4gKiBDb252ZXJ0cyBwcm9wZXJ0eTogUHJvcGVydHlKU09OIGZyb20gYW4gYXJyYXkgdG8gYSBzdWItcHJvcGVydHkgZm9yIGFuIGFjdHVhbCBpdGVtIGluIHRoZSBhcnJheVxuICogSXQgY2hhbmdlIHBhdGggdGhhdCBpdCBoYXMgaW5kZXggaW5zaWRlIGFsb25nIHdpdGggdGhlIGxhYmVsLiBGdXRoZXJtb3JlIGZsYXQgaXNBcnJheSBpcyByZW1vdmVkXG4gKiAsYmVjYXVzZSBpdCB3YXMgYWxyZWFkeSBoYW5kbGVkLCBzbyB0aGF0IGl0ZW1SZW5kZXJlciBjYW4gcmVuZGVyIHByb3BlcnR5IGFzIGEgcmVndWxhciBvbmVcbiAqXG4gKiBAcGFyYW0ge1Byb3BlcnR5SlNPTn0gIGFycmF5UHJvcGVydHkgcHJvcGVydHkgd2l0aCBwYXRoIHNldCB0byBhbiByb290IEFycmF5IHR5cGUgcHJvcGVydHksXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgIGluZGV4ICAgICAgICAgaW5kZXggdW5kZXIgd2hpY2ggc3ViLXByb3BlcnR5IHNob3VsZCBiZSBwbGFjZWRcbiAqIEBwcml2YXRlXG4gKiBAaGlkZVxuICovXG5leHBvcnQgY29uc3QgY29udmVydFRvU3ViUHJvcGVydHkgPSAoYXJyYXlQcm9wZXJ0eTogUHJvcGVydHlKU09OLCBpbmRleDogbnVtYmVyKTogUHJvcGVydHlKU09OID0+IChcbiAge1xuICAgIC4uLmFycmF5UHJvcGVydHksXG4gICAgcGF0aDogW2FycmF5UHJvcGVydHkucGF0aCwgaW5kZXhdLmpvaW4oREVMSU1JVEVSKSxcbiAgICBsYWJlbDogYFske2luZGV4ICsgMX1dYCxcbiAgICBpc0FycmF5OiBmYWxzZSxcbiAgICBpc0RyYWdnYWJsZTogZmFsc2UsXG4gIH1cbilcbiIsImltcG9ydCB7IGZsYXQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscydcbmltcG9ydCB7IFJlY29yZEpTT04gfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzJ1xuXG4vKipcbiAqIFJlbW92ZXMgc2VsZWN0ZWQgYXJyYXkgaXRlbSBmcm9tIGdpdmVuIHJlY29yZC4gSXQgcGVyZm9ybXMgZm9sbG93aW5nIHRhc2tzOlxuICogMS4gcmVtb3ZlcyBhcnJheSBpdGVtIGZyb20gdGhlIGFycmF5XG4gKiAyLiByZW9yZGVycyBrZXlzIGluIG5ldyBhcnJheSBpdGVtXG4gKiAzLiBpZiBwcm9wZXJ0eSBoYXMgcG9wdWxhdGVkIGZpZWxkcyBpdCBhbHNvIHJlb3JkZXJzIHRoZW1cbiAqIGl0IHVzZXMge0BsaW5rIGZsYXQgfSBtb2R1bGUgYW5kIGl0cyByZW1vdmVQYXRoIG1ldGhvZFxuICpcbiAqIEBwYXJhbSB7UmVjb3JkSlNPTn0gcmVjb3JkXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgIHN1YlByb3BlcnR5UGF0aCAgICAgICAgICAgIHdoaWNoIGhhcyB0byBiZSByZW1vdmVkLiBJdCBoYXMgdG8gYmUgZmxhdHRlbmVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIG5vdGF0aW9uLCBhbmQgZW5kaW5nIHdpdGggYXJyYXkgaW5kZXhcbiAqIEBwcml2YXRlXG4gKiBAaGlkZVxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlU3ViUHJvcGVydHkgPSAocmVjb3JkOiBSZWNvcmRKU09OLCBzdWJQcm9wZXJ0eVBhdGg6IHN0cmluZyk6IFJlY29yZEpTT04gPT4ge1xuICAvLyBieSBkZWZhdWx0IHBvcHVsYXRlZCBpcyBmbGF0dGVuIGp1c3QgdG8gdGhlIHBhdGggbGV2ZWwgLSBvYmplY3QgaXRzZWxmIGlzIG5vdCBmbGF0dGVuLiBUaGF0IGlzXG4gIC8vIHdoeSB3ZSBoYXZlIHRvIHJldHJpZXZlIHRoZSBvcmlnaW5hbCBzdGF0ZS4gVGhhdCBpcyB3aHkgd2UgaGF2ZSB0byByZXBsYWNlIHJlY29yZC5wb3B1bGF0ZWQgdG9cbiAgLy8gZnJvbSB7ICdzb21lLm5lc3RlZC4xLmtleSc6IFJlY29yZEpTT04gfSB0byB7ICdzb21lLm5lc3RlZC4xLmtleSc6ICdzb21lLm5lc3RlZC4xLmtleScgfSxcbiAgLy8gdGhlbiByZW1vdmUga2V5cywgYW5kIHJlZmlsbCBiYWNrIHNvbWUubmVzdGVkLjEua2V5IHRvIHRoZSB2YWx1ZSBmcm9tIHRoZSBvcmlnaW5hbCBwb3B1bGF0ZWRcbiAgLy8gb2JqZWN0LlxuICBjb25zdCBwb3B1bGF0ZWRLZXlNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSBPYmplY3Qua2V5cyhyZWNvcmQucG9wdWxhdGVkKS5yZWR1Y2UoXG4gICAgKG1lbW8sIHByb3BlcnR5S2V5KSA9PiAoe1xuICAgICAgLi4ubWVtbyxcbiAgICAgIFtwcm9wZXJ0eUtleV06IHByb3BlcnR5S2V5LFxuICAgIH0pLFxuICAgIHt9LFxuICApXG5cbiAgY29uc3QgbmV3UG9wdWxhdGVkS2V5TWFwID0gZmxhdC5yZW1vdmVQYXRoKHBvcHVsYXRlZEtleU1hcCwgc3ViUHJvcGVydHlQYXRoKVxuICBjb25zdCBuZXdQb3B1bGF0ZWQgPSBPYmplY3QuZW50cmllcyhuZXdQb3B1bGF0ZWRLZXlNYXApLnJlZHVjZShcbiAgICAobWVtbywgW25ld1Byb3BlcnR5S2V5LCBvbGRQcm9wZXJ0eUtleV0pID0+ICh7XG4gICAgICAuLi5tZW1vLFxuICAgICAgW25ld1Byb3BlcnR5S2V5XTogb2xkUHJvcGVydHlLZXkgJiYgcmVjb3JkLnBvcHVsYXRlZFtvbGRQcm9wZXJ0eUtleT8udG9TdHJpbmcoKV0sXG4gICAgfSksIHt9LFxuICApXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5yZWNvcmQsXG4gICAgcGFyYW1zOiBmbGF0LnJlbW92ZVBhdGgocmVjb3JkLnBhcmFtcywgc3ViUHJvcGVydHlQYXRoKSxcbiAgICBwb3B1bGF0ZWQ6IG5ld1BvcHVsYXRlZCxcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IE1vdXNlRXZlbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBCdXR0b24sIFNlY3Rpb24sIEZvcm1Hcm91cCwgRm9ybU1lc3NhZ2UsIEljb24sIEJveCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgeyBEcmFnRHJvcENvbnRleHQsIERyb3BwYWJsZSwgRHJhZ2dhYmxlLCBEcm9wUmVzdWx0IH0gZnJvbSAncmVhY3QtYmVhdXRpZnVsLWRuZCdcblxuaW1wb3J0IEFkZE5ld0l0ZW1CdXR0b24gZnJvbSAnLi9hZGQtbmV3LWl0ZW0tdHJhbnNsYXRpb24nXG5pbXBvcnQgeyBmbGF0IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wc0luQXJyYXkgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgUHJvcGVydHlMYWJlbCB9IGZyb20gJy4uL3V0aWxzL3Byb3BlcnR5LWxhYmVsJ1xuaW1wb3J0IHsgY29udmVydFRvU3ViUHJvcGVydHkgfSBmcm9tICcuL2NvbnZlcnQtdG8tc3ViLXByb3BlcnR5J1xuaW1wb3J0IHsgUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IHJlbW92ZVN1YlByb3BlcnR5IH0gZnJvbSAnLi9yZW1vdmUtc3ViLXByb3BlcnR5J1xuXG50eXBlIEVkaXRQcm9wcyA9IFJlcXVpcmVkPEVkaXRQcm9wZXJ0eVByb3BzSW5BcnJheT5cblxudHlwZSBJdGVtUmVuZGVyZXJQcm9wcyA9IHtcbiAgb25EZWxldGU6IChldmVudDogTW91c2VFdmVudCwgcHJvcGVydHk6IFByb3BlcnR5SlNPTikgPT4gYm9vbGVhbjtcbiAgaW5kZXg6IG51bWJlcjtcbiAgaXNEcmFnZ2FibGU6IGJvb2xlYW47XG59XG5cbmNvbnN0IEl0ZW1SZW5kZXJlcjogUmVhY3QuRkM8RWRpdFByb3BzICYgSXRlbVJlbmRlcmVyUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgSXRlbUNvbXBvbmVudCwgcHJvcGVydHksIG9uRGVsZXRlLCBpbmRleCwgcmVjb3JkLCBpc0RyYWdnYWJsZSB9ID0gcHJvcHNcbiAgY29uc3QgdW5pcXVlRHJhZ2dhYmxlSWQgPSB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYCR7SlNPTi5zdHJpbmdpZnkoZmxhdC5nZXQocmVjb3JkLnBhcmFtcywgcHJvcGVydHkucGF0aCkpfS0ke3Byb3BlcnR5LnBhdGh9YCkpKVxuXG4gIHJldHVybiAoXG4gICAgPERyYWdnYWJsZVxuICAgICAgZHJhZ2dhYmxlSWQ9e3VuaXF1ZURyYWdnYWJsZUlkfVxuICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAga2V5PXt1bmlxdWVEcmFnZ2FibGVJZH1cbiAgICAgIGlzRHJhZ0Rpc2FibGVkPXshaXNEcmFnZ2FibGV9XG4gICAgPlxuICAgICAgeyhwcm92aWRlZCk6IEpTWC5FbGVtZW50ID0+IChcbiAgICAgICAgPEJveFxuICAgICAgICAgIHJlZj17cHJvdmlkZWQuaW5uZXJSZWZ9XG4gICAgICAgICAgey4uLnByb3ZpZGVkLmRyYWdnYWJsZVByb3BzfVxuICAgICAgICAgIHsuLi5wcm92aWRlZC5kcmFnSGFuZGxlUHJvcHN9XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPVwid2hpdGVcIlxuICAgICAgICAgIGZsZXhcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uPVwicm93XCJcbiAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17cHJvcGVydHkucGF0aH1cbiAgICAgICAgPlxuICAgICAgICAgIDxCb3ggZmxleEdyb3c9ezF9PlxuICAgICAgICAgICAgPEl0ZW1Db21wb25lbnQgey4uLnByb3BzfSAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDxCb3ggZmxleFNocmluaz17MH0gbWw9XCJsZ1wiPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICByb3VuZGVkXG4gICAgICAgICAgICAgIG1sPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZGVsZXRlLWl0ZW1cIlxuICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgc2l6ZT1cImljb25cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQpOiBib29sZWFuID0+IG9uRGVsZXRlKGV2ZW50LCBwcm9wZXJ0eSl9XG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJkYW5nZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8SWNvbiBpY29uPVwiVHJhc2hDYW5cIiAvPlxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQm94PlxuICAgICAgKX1cbiAgICA8L0RyYWdnYWJsZT5cbiAgKVxufVxuXG5jb25zdCBJbnB1dHNJblNlY3Rpb246IFJlYWN0LkZDPEVkaXRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkLCByZXNvdXJjZSwgb25DaGFuZ2UgfSA9IHByb3BzXG4gIGNvbnN0IGl0ZW1zID0gZmxhdC5nZXQocmVjb3JkLnBhcmFtcywgcHJvcGVydHkucGF0aCkgfHwgW11cblxuICBjb25zdCBhZGROZXcgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IE1vdXNlRXZlbnQpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCBuZXdJdGVtcyA9IFtcbiAgICAgIC4uLml0ZW1zLFxuICAgICAgcHJvcGVydHkuc3ViUHJvcGVydGllcy5sZW5ndGggPyB7fSA6ICcnLFxuICAgIF1cbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5wYXRoLCBuZXdJdGVtcylcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0sIFtyZWNvcmQsIG9uQ2hhbmdlLCBwcm9wZXJ0eV0pXG5cbiAgY29uc3QgcmVtb3ZlSXRlbSA9IHVzZUNhbGxiYWNrKChldmVudDogTW91c2VFdmVudCwgc3ViUHJvcGVydHk6IFByb3BlcnR5SlNPTik6IGJvb2xlYW4gPT4ge1xuICAgIGNvbnN0IG5ld1JlY29yZCA9IHJlbW92ZVN1YlByb3BlcnR5KHJlY29yZCwgc3ViUHJvcGVydHkucGF0aClcbiAgICBvbkNoYW5nZShuZXdSZWNvcmQpXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIHJldHVybiBmYWxzZVxuICB9LCBbcmVjb3JkLCBvbkNoYW5nZSwgcHJvcGVydHldKVxuXG4gIGNvbnN0IGhhbmRsZU9uRHJhZ0VuZCA9IHVzZUNhbGxiYWNrKChyZXN1bHQ6IERyb3BSZXN1bHQpOiB2b2lkID0+IHtcbiAgICBjb25zdCB7IHNvdXJjZSwgZGVzdGluYXRpb24gfSA9IHJlc3VsdFxuICAgIGlmICghc291cmNlIHx8ICFkZXN0aW5hdGlvbiB8fCBkZXN0aW5hdGlvbi5pbmRleCA9PT0gc291cmNlLmluZGV4KSByZXR1cm5cblxuICAgIGNvbnN0IGl0ZW1zQ29weSA9IEFycmF5LmZyb20oaXRlbXMpXG4gICAgY29uc3QgW3NvdXJjZUl0ZW1dID0gaXRlbXNDb3B5LnNwbGljZShzb3VyY2UuaW5kZXgsIDEpXG4gICAgaXRlbXNDb3B5LnNwbGljZShkZXN0aW5hdGlvbi5pbmRleCwgMCwgc291cmNlSXRlbSlcblxuICAgIG9uQ2hhbmdlKHByb3BlcnR5LnBhdGgsIGl0ZW1zQ29weSlcbiAgfSwgW3JlY29yZCwgb25DaGFuZ2UsIHByb3BlcnR5XSlcblxuICByZXR1cm4gKFxuICAgIDxEcmFnRHJvcENvbnRleHQgb25EcmFnRW5kPXtoYW5kbGVPbkRyYWdFbmR9PlxuICAgICAgPERyb3BwYWJsZSBkcm9wcGFibGVJZD17cHJvcGVydHkucGF0aH0+XG4gICAgICAgIHsocHJvdmlkZWQpOiBKU1guRWxlbWVudCA9PiAoXG4gICAgICAgICAgPFNlY3Rpb25cbiAgICAgICAgICAgIHJlZj17cHJvdmlkZWQuaW5uZXJSZWZ9XG4gICAgICAgICAgICB7Li4ucHJvdmlkZWQuZHJvcHBhYmxlUHJvcHN9XG4gICAgICAgICAgICBtdD1cInhsXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17cHJvcGVydHkucGF0aH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aXRlbXMubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGl0ZW1Qcm9wZXJ0eSA9IGNvbnZlcnRUb1N1YlByb3BlcnR5KHByb3BzLnByb3BlcnR5LCBpKVxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJdGVtUmVuZGVyZXJcbiAgICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICAgIHByb3BlcnR5PXtpdGVtUHJvcGVydHl9XG4gICAgICAgICAgICAgICAgICBpc0RyYWdnYWJsZT17cHJvcGVydHkuaXNEcmFnZ2FibGV9XG4gICAgICAgICAgICAgICAgICBrZXk9e2l0ZW1Qcm9wZXJ0eS5wYXRofVxuICAgICAgICAgICAgICAgICAgb25EZWxldGU9e3JlbW92ZUl0ZW19XG4gICAgICAgICAgICAgICAgICBpbmRleD17aX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIHtwcm92aWRlZC5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17YWRkTmV3fSB0eXBlPVwiYnV0dG9uXCIgcm91bmRlZD5cbiAgICAgICAgICAgICAgPEFkZE5ld0l0ZW1CdXR0b24gcmVzb3VyY2U9e3Jlc291cmNlfSBwcm9wZXJ0eT17cHJvcGVydHl9IC8+XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgICl9XG4gICAgICA8L0Ryb3BwYWJsZT5cbiAgICA8L0RyYWdEcm9wQ29udGV4dD5cbiAgKVxufVxuXG5jb25zdCBFZGl0OiBSZWFjdC5GQzxFZGl0UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgdGVzdElkIH0gPSBwcm9wc1xuICBjb25zdCBlcnJvciA9IHJlY29yZC5lcnJvcnMgJiYgcmVjb3JkLmVycm9yc1twcm9wZXJ0eS5wcm9wZXJ0eVBhdGhdXG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybUdyb3VwIGVycm9yPXshIWVycm9yfSBkYXRhLXRlc3RpZD17dGVzdElkfT5cbiAgICAgIDxQcm9wZXJ0eUxhYmVsIHByb3BlcnR5PXtwcm9wZXJ0eX0gLz5cbiAgICAgIDxJbnB1dHNJblNlY3Rpb24gey4uLnByb3BzfSAvPlxuICAgICAgPEZvcm1NZXNzYWdlPntlcnJvciAmJiBlcnJvci5tZXNzYWdlfTwvRm9ybU1lc3NhZ2U+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuZXhwb3J0IHtcbiAgRWRpdCBhcyBkZWZhdWx0LFxuICBFZGl0LFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS10cmFuc2xhdGlvbidcbmltcG9ydCB7IGZsYXQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscydcbmltcG9ydCB7IFJlY29yZEpTT04sIFJlc291cmNlSlNPTiwgUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IFNob3dQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xufVxuXG5jb25zdCBMaXN0OiBSZWFjdC5GQzxTaG93UHJvcGVydHlQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSBwcm9wc1xuICBjb25zdCB2YWx1ZXMgPSBmbGF0LmdldChyZWNvcmQucGFyYW1zLCBwcm9wZXJ0eS5wYXRoKSB8fCBbXVxuICBjb25zdCB7IHRyYW5zbGF0ZVByb3BlcnR5IH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgcmV0dXJuIChcbiAgICA8c3Bhbj57YCR7dHJhbnNsYXRlUHJvcGVydHkoJ2xlbmd0aCcpfTogJHt2YWx1ZXMubGVuZ3RofWB9PC9zcGFuPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFNlY3Rpb24sIFZhbHVlR3JvdXAgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBSZWNvcmRKU09OLCBQcm9wZXJ0eUpTT04gfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgZmxhdCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzJ1xuaW1wb3J0IHsgY29udmVydFRvU3ViUHJvcGVydHkgfSBmcm9tICcuL2NvbnZlcnQtdG8tc3ViLXByb3BlcnR5J1xuXG50eXBlIFByb3BzID0ge1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICByZWNvcmQ6IFJlY29yZEpTT047XG4gIEl0ZW1Db21wb25lbnQ6IHR5cGVvZiBSZWFjdC5Db21wb25lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgSXRlbUNvbXBvbmVudCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgaXRlbXMgPSBmbGF0LmdldChyZWNvcmQucGFyYW1zLCBwcm9wZXJ0eS5wYXRoKSB8fCBbXVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWYWx1ZUdyb3VwIGxhYmVsPXtwcm9wZXJ0eS5sYWJlbH0+XG4gICAgICAgIDxTZWN0aW9uPlxuICAgICAgICAgIHsoaXRlbXMgfHwgW10pLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbVByb3BlcnR5ID0gY29udmVydFRvU3ViUHJvcGVydHkocHJvcGVydHksIGkpXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgIGtleT17aXRlbVByb3BlcnR5LnBhdGh9XG4gICAgICAgICAgICAgICAgcHJvcGVydHk9e2l0ZW1Qcm9wZXJ0eX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgPC9WYWx1ZUdyb3VwPlxuICAgIClcbiAgfVxufVxuIiwiLy8gaW1wb3J0IFNob3cgZnJvbSAnLi9zaG93J1xuaW1wb3J0IEVkaXQgZnJvbSAnLi9lZGl0J1xuaW1wb3J0IExpc3QgZnJvbSAnLi9saXN0J1xuaW1wb3J0IFNob3cgZnJvbSAnLi9zaG93J1xuXG5leHBvcnQge1xuICBTaG93IGFzIHNob3csXG4gIEVkaXQgYXMgZWRpdCxcbiAgTGlzdCBhcyBsaXN0LFxufVxuIiwiaW1wb3J0IHsgREVMSU1JVEVSIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZmxhdC9jb25zdGFudHMnXG5pbXBvcnQgeyBQcm9wZXJ0eUpTT04sIEJhc2VQcm9wZXJ0eUpTT04gfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvU3ViUHJvcGVydHkoXG4gIHByb3BlcnR5OiBQcm9wZXJ0eUpTT04sXG4gIHN1YlByb3BlcnR5OiBCYXNlUHJvcGVydHlKU09OLFxuKTogUHJvcGVydHlKU09OIHtcbiAgY29uc3QgW3N1YlByb3BlcnR5UGF0aF0gPSBzdWJQcm9wZXJ0eS5uYW1lLnNwbGl0KERFTElNSVRFUikuc2xpY2UoLTEpXG4gIHJldHVybiB7XG4gICAgLi4uc3ViUHJvcGVydHksXG4gICAgcGF0aDogW3Byb3BlcnR5LnBhdGgsIHN1YlByb3BlcnR5UGF0aF0uam9pbihERUxJTUlURVIpLFxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBTZWN0aW9uLCBGb3JtR3JvdXAsIEZvcm1NZXNzYWdlIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgUHJvcGVydHlMYWJlbCB9IGZyb20gJy4uL3V0aWxzL3Byb3BlcnR5LWxhYmVsJ1xuaW1wb3J0IHsgY29udmVydFRvU3ViUHJvcGVydHkgfSBmcm9tICcuL2NvbnZlcnQtdG8tc3ViLXByb3BlcnR5J1xuXG50eXBlIFByb3BzID0ge1xuICBJdGVtQ29tcG9uZW50OiB0eXBlb2YgUmVhY3QuQ29tcG9uZW50O1xufVxuXG5jb25zdCBFZGl0OiBSZWFjdC5GQzxQcm9wcyAmIEVkaXRQcm9wZXJ0eVByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQsIEl0ZW1Db21wb25lbnQgfSA9IHByb3BzXG4gIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5LnBhdGhdXG4gIHJldHVybiAoXG4gICAgPEZvcm1Hcm91cCBlcnJvcj17ISFlcnJvcn0+XG4gICAgICA8UHJvcGVydHlMYWJlbCBwcm9wZXJ0eT17cHJvcGVydHl9IC8+XG4gICAgICA8U2VjdGlvbiB7Li4ucHJvcGVydHkucHJvcHN9PlxuICAgICAgICB7cHJvcGVydHkuc3ViUHJvcGVydGllcy5maWx0ZXIoc3ViUHJvcGVydHkgPT4gIXN1YlByb3BlcnR5LmlzSWQpLm1hcCgoc3ViUHJvcGVydHkpID0+IHtcbiAgICAgICAgICBjb25zdCBzdWJQcm9wZXJ0eVdpdGhQYXRoID0gY29udmVydFRvU3ViUHJvcGVydHkocHJvcGVydHksIHN1YlByb3BlcnR5KVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIGtleT17c3ViUHJvcGVydHlXaXRoUGF0aC5wYXRofVxuICAgICAgICAgICAgICBwcm9wZXJ0eT17c3ViUHJvcGVydHlXaXRoUGF0aH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvU2VjdGlvbj5cbiAgICAgIDxGb3JtTWVzc2FnZT57ZXJyb3IgJiYgZXJyb3IubWVzc2FnZX08L0Zvcm1NZXNzYWdlPlxuICAgIDwvRm9ybUdyb3VwPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFNlY3Rpb24sIFZhbHVlR3JvdXAgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBCYXNlUHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgeyBjb252ZXJ0VG9TdWJQcm9wZXJ0eSB9IGZyb20gJy4vY29udmVydC10by1zdWItcHJvcGVydHknXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIEl0ZW1Db21wb25lbnQ6IHR5cGVvZiBSZWFjdC5Db21wb25lbnQ7XG59XG5cbmNvbnN0IFNob3c6IFJlYWN0LkZDPFByb3BzICYgQmFzZVByb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIEl0ZW1Db21wb25lbnQgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFZhbHVlR3JvdXAgbGFiZWw9e3Byb3BlcnR5LmxhYmVsfT5cbiAgICAgIDxTZWN0aW9uPlxuICAgICAgICB7cHJvcGVydHkuc3ViUHJvcGVydGllcy5maWx0ZXIoc3ViUHJvcGVydHkgPT4gIXN1YlByb3BlcnR5LmlzSWQpLm1hcCgoc3ViUHJvcGVydHkpID0+IHtcbiAgICAgICAgICBjb25zdCBzdWJQcm9wZXJ0eVdpdGhQYXRoID0gY29udmVydFRvU3ViUHJvcGVydHkocHJvcGVydHksIHN1YlByb3BlcnR5KVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIGtleT17c3ViUHJvcGVydHlXaXRoUGF0aC5wYXRofVxuICAgICAgICAgICAgICBwcm9wZXJ0eT17c3ViUHJvcGVydHlXaXRoUGF0aH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvU2VjdGlvbj5cbiAgICA8L1ZhbHVlR3JvdXA+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2hvd1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgeyBjb252ZXJ0VG9TdWJQcm9wZXJ0eSB9IGZyb20gJy4vY29udmVydC10by1zdWItcHJvcGVydHknXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIEl0ZW1Db21wb25lbnQ6IHR5cGVvZiBSZWFjdC5Db21wb25lbnQ7XG59XG5cbi8vIFRPRE86IGRlZmluZSBJdGVtQ29tcG9uZW50IGludGVyZmFjZVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8UHJvcHMgJiBFZGl0UHJvcGVydHlQcm9wcz4ge1xuICByZW5kZXJJdGVtcygpOiBSZWFjdC5SZWFjdENoaWxkIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCBJdGVtQ29tcG9uZW50IH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge3Byb3BlcnR5LnN1YlByb3BlcnRpZXMuZmlsdGVyKHN1YlByb3BlcnR5ID0+ICFzdWJQcm9wZXJ0eS5pc0lkKS5tYXAoKHN1YlByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3ViUHJvcGVydHlXaXRoUGF0aCA9IGNvbnZlcnRUb1N1YlByb3BlcnR5KHByb3BlcnR5LCBzdWJQcm9wZXJ0eSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBrZXk9e3N1YlByb3BlcnR5V2l0aFBhdGgucGF0aH0+XG4gICAgICAgICAgICAgIDxMYWJlbCBpbmxpbmU+e2Ake3N1YlByb3BlcnR5LmxhYmVsfTogYH08L0xhYmVsPlxuICAgICAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgIHByb3BlcnR5PXtzdWJQcm9wZXJ0eVdpdGhQYXRofVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Q2hpbGQge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgcmVzb3VyY2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBzaG93QWN0aW9uID0gcmVjb3JkLnJlY29yZEFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gJ3Nob3cnKVxuXG4gICAgaWYgKHJlc291cmNlLnRpdGxlUHJvcGVydHkucHJvcGVydHlQYXRoID09PSBwcm9wZXJ0eS5wcm9wZXJ0eVBhdGggJiYgc2hvd0FjdGlvbikge1xuICAgICAgY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG4gICAgICBjb25zdCBocmVmID0gaC5yZWNvcmRBY3Rpb25Vcmwoe1xuICAgICAgICByZXNvdXJjZUlkOiByZXNvdXJjZS5pZCwgcmVjb3JkSWQ6IHJlY29yZC5pZCwgYWN0aW9uTmFtZTogJ3Nob3cnLFxuICAgICAgfSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rIHRvPXtocmVmfT57dGhpcy5yZW5kZXJJdGVtcygpfTwvTGluaz5cbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVuZGVySXRlbXMoKVxuICB9XG59XG4iLCIvLyBpbXBvcnQgU2hvdyBmcm9tICcuL3Nob3cnXG5pbXBvcnQgRWRpdCBmcm9tICcuL2VkaXQnXG5pbXBvcnQgU2hvdyBmcm9tICcuL3Nob3cnXG5pbXBvcnQgTGlzdCBmcm9tICcuL2xpc3QnXG5cbmV4cG9ydCB7XG4gIFNob3cgYXMgc2hvdyxcbiAgRWRpdCBhcyBlZGl0LFxuICBMaXN0IGFzIGxpc3QsXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBCYWRnZSB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgeyBTaG93UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmNvbnN0IERlZmF1bHRQcm9wZXJ0eVZhbHVlOiBSZWFjdC5GQzxTaG93UHJvcGVydHlQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHJhd1ZhbHVlID0gcmVjb3JkPy5wYXJhbXNbcHJvcGVydHkucGF0aF1cblxuICBpZiAodHlwZW9mIHJhd1ZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBpZiAocHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gcHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzLmZpbmQob3B0ID0+IG9wdC52YWx1ZSA9PT0gcmF3VmFsdWUpXG5cbiAgICBpZiAoIW9wdGlvbikge1xuICAgICAgcmV0dXJuIHJhd1ZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCYWRnZT57b3B0aW9uPy5sYWJlbCB8fCByYXdWYWx1ZX08L0JhZGdlPlxuICAgIClcbiAgfVxuXG4gIHJldHVybiByYXdWYWx1ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0UHJvcGVydHlWYWx1ZVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVmFsdWVHcm91cCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IFNob3dQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcbmltcG9ydCBEZWZhdWx0UHJvcGVydHlWYWx1ZSBmcm9tICcuL2RlZmF1bHQtcHJvcGVydHktdmFsdWUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFNob3dQcm9wZXJ0eVByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPFZhbHVlR3JvdXAgbGFiZWw9e3Byb3BlcnR5LmxhYmVsfT5cbiAgICAgICAgPERlZmF1bHRQcm9wZXJ0eVZhbHVlIHsuLi50aGlzLnByb3BzfSAvPlxuICAgICAgPC9WYWx1ZUdyb3VwPlxuICAgIClcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMsIFNob3dQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgaW4gUmVhY3QgbWVtbyB0byBjb21wYXJlIGlmIHByZXZpb3VzIHByb3BlcnR5IHZhbHVlIGFuZCBuZXh0XG4gKiBwcm9wZXJ0eSB2YWx1ZSBhcmUgdGhlIHNhbWUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IHJlY29yZFByb3BlcnR5SXNFcXVhbCA9IChcbiAgcHJldlByb3BzOiBFZGl0UHJvcGVydHlQcm9wcyB8IFNob3dQcm9wZXJ0eVByb3BzLFxuICBuZXh0UHJvcHM6IEVkaXRQcm9wZXJ0eVByb3BzIHwgU2hvd1Byb3BlcnR5UHJvcHMsXG4pOiBib29sZWFuID0+IHtcbiAgY29uc3QgcHJldlZhbHVlID0gcHJldlByb3BzLnJlY29yZC5wYXJhbXNbcHJldlByb3BzLnByb3BlcnR5LnBhdGhdXG4gIGNvbnN0IG5leHRWYWx1ZSA9IG5leHRQcm9wcy5yZWNvcmQucGFyYW1zW25leHRQcm9wcy5wcm9wZXJ0eS5wYXRoXVxuXG4gIGNvbnN0IHByZXZFcnJvciA9IHByZXZQcm9wcy5yZWNvcmQuZXJyb3JzW3ByZXZQcm9wcy5wcm9wZXJ0eS5wYXRoXVxuICBjb25zdCBuZXh0RXJyb3IgPSBuZXh0UHJvcHMucmVjb3JkLmVycm9yc1tuZXh0UHJvcHMucHJvcGVydHkucGF0aF1cblxuICByZXR1cm4gcHJldlZhbHVlID09PSBuZXh0VmFsdWUgJiYgcHJldkVycm9yID09PSBuZXh0RXJyb3Jcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZSAqL1xuaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VTdGF0ZSwgbWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgU2VsZWN0IGZyb20gJ3JlYWN0LXNlbGVjdCdcbmltcG9ydCB7IHdpdGhUaGVtZSwgRGVmYXVsdFRoZW1lIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBJbnB1dCwgRm9ybU1lc3NhZ2UsIEZvcm1Hcm91cCwgc2VsZWN0U3R5bGVzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgcmVjb3JkUHJvcGVydHlJc0VxdWFsIH0gZnJvbSAnLi4vcmVjb3JkLXByb3BlcnR5LWlzLWVxdWFsJ1xuaW1wb3J0IHsgUHJvcGVydHlMYWJlbCB9IGZyb20gJy4uL3V0aWxzL3Byb3BlcnR5LWxhYmVsJ1xuXG50eXBlIENvbWJpbmVkUHJvcHMgPSBFZGl0UHJvcGVydHlQcm9wcyAmIHt0aGVtZTogRGVmYXVsdFRoZW1lfVxuXG5jb25zdCBFZGl0OiBGQzxDb21iaW5lZFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHByb3BzXG4gIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycz8uW3Byb3BlcnR5LnBhdGhdXG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybUdyb3VwIGVycm9yPXtCb29sZWFuKGVycm9yKX0+XG4gICAgICA8UHJvcGVydHlMYWJlbCBwcm9wZXJ0eT17cHJvcGVydHl9IC8+XG4gICAgICB7cHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzID8gPFNlbGVjdEVkaXQgey4uLnByb3BzfSAvPiA6IDxUZXh0RWRpdCB7Li4ucHJvcHN9IC8+fVxuICAgICAgPEZvcm1NZXNzYWdlPntlcnJvciAmJiBlcnJvci5tZXNzYWdlfTwvRm9ybU1lc3NhZ2U+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuY29uc3QgU2VsZWN0RWRpdDogRkM8Q29tYmluZWRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZSwgcmVjb3JkLCBwcm9wZXJ0eSwgb25DaGFuZ2UgfSA9IHByb3BzXG4gIGlmICghcHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBwcm9wVmFsdWUgPSByZWNvcmQucGFyYW1zPy5bcHJvcGVydHkucGF0aF0gPz8gJydcbiAgY29uc3Qgc3R5bGVzID0gc2VsZWN0U3R5bGVzKHRoZW1lKVxuICBjb25zdCBzZWxlY3RlZCA9IHByb3BlcnR5LmF2YWlsYWJsZVZhbHVlcy5maW5kKGF2ID0+IGF2LnZhbHVlID09PSBwcm9wVmFsdWUpXG5cbiAgcmV0dXJuIChcbiAgICA8U2VsZWN0XG4gICAgICBpc0NsZWFyYWJsZVxuICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICB2YWx1ZT17c2VsZWN0ZWR9XG4gICAgICByZXF1aXJlZD17cHJvcGVydHkuaXNSZXF1aXJlZH1cbiAgICAgIG9wdGlvbnM9e3Byb3BlcnR5LmF2YWlsYWJsZVZhbHVlc31cbiAgICAgIG9uQ2hhbmdlPXtzID0+IG9uQ2hhbmdlKHByb3BlcnR5LnBhdGgsIHM/LnZhbHVlID8/ICcnKX1cbiAgICAgIGlzRGlzYWJsZWQ9e3Byb3BlcnR5LmlzRGlzYWJsZWR9XG4gICAgICB7Li4ucHJvcGVydHkucHJvcHN9XG4gICAgLz5cbiAgKVxufVxuXG5jb25zdCBUZXh0RWRpdDogRkM8Q29tYmluZWRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkLCBvbkNoYW5nZSB9ID0gcHJvcHNcbiAgY29uc3QgcHJvcFZhbHVlID0gcmVjb3JkLnBhcmFtcz8uW3Byb3BlcnR5LnBhdGhdID8/ICcnXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUocHJvcFZhbHVlKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHZhbHVlICE9PSBwcm9wVmFsdWUpIHtcbiAgICAgIHNldFZhbHVlKHByb3BWYWx1ZSlcbiAgICB9XG4gIH0sIFtwcm9wVmFsdWVdKVxuXG4gIHJldHVybiAoXG4gICAgPElucHV0XG4gICAgICBpZD17cHJvcGVydHkucGF0aH1cbiAgICAgIG5hbWU9e3Byb3BlcnR5LnBhdGh9XG4gICAgICByZXF1aXJlZD17cHJvcGVydHkuaXNSZXF1aXJlZH1cbiAgICAgIG9uQ2hhbmdlPXtlID0+IHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgIG9uQmx1cj17KCkgPT4gb25DaGFuZ2UocHJvcGVydHkucGF0aCwgdmFsdWUpfVxuICAgICAgLy8gaGFuZGxlIGNsaWNraW5nIEVOVEVSXG4gICAgICBvbktleURvd249e2UgPT4gZS5rZXlDb2RlID09PSAxMyAmJiBvbkNoYW5nZShwcm9wZXJ0eS5wYXRoLCB2YWx1ZSl9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICBkaXNhYmxlZD17cHJvcGVydHkuaXNEaXNhYmxlZH1cbiAgICAgIHsuLi5wcm9wZXJ0eS5wcm9wc31cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShtZW1vKEVkaXQsIHJlY29yZFByb3BlcnR5SXNFcXVhbCkpXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgU2VsZWN0IGZyb20gJ3JlYWN0LXNlbGVjdCdcbmltcG9ydCB7IHdpdGhUaGVtZSwgVGhlbWVQcm9wcywgRGVmYXVsdFRoZW1lIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBGb3JtR3JvdXAsIExhYmVsLCBJbnB1dCwgZmlsdGVyU3R5bGVzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgRmlsdGVyUHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmNsYXNzIEZpbHRlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RmlsdGVyUHJvcGVydHlQcm9wcyAmIFRoZW1lUHJvcHM8RGVmYXVsdFRoZW1lPj4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgPSB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZVNlbGVjdENoYW5nZSA9IHRoaXMuaGFuZGxlU2VsZWN0Q2hhbmdlLmJpbmQodGhpcylcbiAgfVxuXG4gIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5wYXRoLCBldmVudC50YXJnZXQudmFsdWUpXG4gIH1cblxuICBoYW5kbGVTZWxlY3RDaGFuZ2Uoc2VsZWN0ZWQpOiB2b2lkIHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHZhbHVlID0gc2VsZWN0ZWQgPyBzZWxlY3RlZC52YWx1ZSA6ICcnXG4gICAgb25DaGFuZ2UocHJvcGVydHkucGF0aCwgdmFsdWUpXG4gIH1cblxuICByZW5kZXJJbnB1dCgpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIGZpbHRlciwgdGhlbWUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBmaWx0ZXJLZXkgPSBgZmlsdGVyLSR7cHJvcGVydHkucGF0aH1gXG4gICAgY29uc3QgdmFsdWUgPSBmaWx0ZXJbcHJvcGVydHkucGF0aF0gfHwgJydcbiAgICBpZiAocHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZCA9IHByb3BlcnR5LmF2YWlsYWJsZVZhbHVlcy5maW5kKGF2ID0+IGF2LnZhbHVlID09PSB2YWx1ZSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICB2YWx1ZT17dHlwZW9mIHNlbGVjdGVkID09PSAndW5kZWZpbmVkJyA/ICcnIDogc2VsZWN0ZWR9XG4gICAgICAgICAgaXNDbGVhcmFibGVcbiAgICAgICAgICBvcHRpb25zPXtwcm9wZXJ0eS5hdmFpbGFibGVWYWx1ZXN9XG4gICAgICAgICAgc3R5bGVzPXtmaWx0ZXJTdHlsZXModGhlbWUpfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVNlbGVjdENoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxJbnB1dFxuICAgICAgICBuYW1lPXtmaWx0ZXJLZXl9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAvPlxuICAgIClcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPEZvcm1Hcm91cCB2YXJpYW50PVwiZmlsdGVyXCI+XG4gICAgICAgIDxMYWJlbD57cHJvcGVydHkubGFiZWx9PC9MYWJlbD5cbiAgICAgICAge3RoaXMucmVuZGVySW5wdXQoKX1cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgIClcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEZpbHRlcilcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgUmVjb3JkSlNPTiwgUmVzb3VyY2VKU09OLCBQcm9wZXJ0eUpTT04gfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IERlZmF1bHRQcm9wZXJ0eVZhbHVlIGZyb20gJy4vZGVmYXVsdC1wcm9wZXJ0eS12YWx1ZSdcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3QuUmVhY3RDaGlsZCB7XG4gICAgcmV0dXJuICg8RGVmYXVsdFByb3BlcnR5VmFsdWUgey4uLnRoaXMucHJvcHN9IC8+KVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ2hlY2tCb3gsIEZvcm1Hcm91cCwgRm9ybU1lc3NhZ2UgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgeyByZWNvcmRQcm9wZXJ0eUlzRXF1YWwgfSBmcm9tICcuLi9yZWNvcmQtcHJvcGVydHktaXMtZXF1YWwnXG5pbXBvcnQgeyBQcm9wZXJ0eUxhYmVsIH0gZnJvbSAnLi4vdXRpbHMvcHJvcGVydHktbGFiZWwnXG5cbmNvbnN0IHBhcnNlVmFsdWUgPSAodmFsdWUpOiBib29sZWFuID0+ICEoIXZhbHVlIHx8IHZhbHVlID09PSAnZmFsc2UnKVxuXG5jb25zdCBFZGl0OiBSZWFjdC5GQzxFZGl0UHJvcGVydHlQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgb25DaGFuZ2UsIHJlY29yZCB9ID0gcHJvcHNcbiAgY29uc3QgdmFsdWUgPSBwYXJzZVZhbHVlKHJlY29yZC5wYXJhbXMgJiYgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wYXRoXSlcbiAgY29uc3QgZXJyb3IgPSByZWNvcmQuZXJyb3JzICYmIHJlY29yZC5lcnJvcnNbcHJvcGVydHkucGF0aF1cblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoKTogdm9pZCA9PiB7XG4gICAgaWYgKCFwcm9wZXJ0eS5pc0Rpc2FibGVkKSB7XG4gICAgICBvbkNoYW5nZShwcm9wZXJ0eS5wYXRoLCAhdmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybUdyb3VwIGVycm9yPXshIWVycm9yfT5cbiAgICAgIDxDaGVja0JveFxuICAgICAgICBpZD17cHJvcGVydHkucGF0aH1cbiAgICAgICAgbmFtZT17cHJvcGVydHkucGF0aH1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgY2hlY2tlZD17dmFsdWV9XG4gICAgICAgIGRpc2FibGVkPXtwcm9wZXJ0eS5pc0Rpc2FibGVkfVxuICAgICAgICB7Li4ucHJvcGVydHkucHJvcHN9XG4gICAgICAvPlxuICAgICAgPFByb3BlcnR5TGFiZWwgcHJvcGVydHk9e3Byb3BlcnR5fSBwcm9wcz17eyBpbmxpbmU6IHRydWUgfX0gLz5cbiAgICAgIDxGb3JtTWVzc2FnZT57ZXJyb3IgJiYgZXJyb3IubWVzc2FnZX08L0Zvcm1NZXNzYWdlPlxuICAgIDwvRm9ybUdyb3VwPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oRWRpdCwgcmVjb3JkUHJvcGVydHlJc0VxdWFsKVxuIiwiZXhwb3J0IGRlZmF1bHQgKHZhbHVlKTogJ1llcycgfCAnTm8nIHwgJycgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAnJ1xuICB9XG4gIHJldHVybiB2YWx1ZSA/ICdZZXMnIDogJ05vJ1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQmFkZ2UgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBTaG93UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uL2hvb2tzJ1xuaW1wb3J0IG1hcFZhbHVlIGZyb20gJy4vbWFwLXZhbHVlJ1xuXG5jb25zdCBCb29sZWFuUHJvcGVydHlWYWx1ZTogUmVhY3QuRkM8U2hvd1Byb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVjb3JkLCBwcm9wZXJ0eSwgcmVzb3VyY2UgfSA9IHByb3BzXG5cbiAgY29uc3QgeyB0cmFuc2xhdGVQcm9wZXJ0eSB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIGNvbnN0IHJhd1ZhbHVlID0gcmVjb3JkPy5wYXJhbXNbcHJvcGVydHkucGF0aF1cblxuICBpZiAodHlwZW9mIHJhd1ZhbHVlID09PSAndW5kZWZpbmVkJyB8fCByYXdWYWx1ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGNvbnN0IGJhc2UgPSBtYXBWYWx1ZShyYXdWYWx1ZSlcbiAgY29uc3QgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGVQcm9wZXJ0eShgJHtwcm9wZXJ0eS5wYXRofS4ke3Jhd1ZhbHVlfWAsIHJlc291cmNlLmlkLCB7XG4gICAgZGVmYXVsdFZhbHVlOiBiYXNlLFxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPEJhZGdlIG91dGxpbmUgc2l6ZT1cInNtXCI+e3RyYW5zbGF0aW9ufTwvQmFkZ2U+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQm9vbGVhblByb3BlcnR5VmFsdWVcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFZhbHVlR3JvdXAgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5VmFsdWUgZnJvbSAnLi9ib29sZWFuLXByb3BlcnR5LXZhbHVlJ1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG93IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxFZGl0UHJvcGVydHlQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFZhbHVlR3JvdXAgbGFiZWw9e3Byb3BlcnR5LmxhYmVsfT5cbiAgICAgICAgPEJvb2xlYW5Qcm9wZXJ0eVZhbHVlIHsuLi50aGlzLnByb3BzfSAvPlxuICAgICAgPC9WYWx1ZUdyb3VwPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBSZWNvcmRKU09OLCBQcm9wZXJ0eUpTT04sIFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5VmFsdWUgZnJvbSAnLi9ib29sZWFuLXByb3BlcnR5LXZhbHVlJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICByZWNvcmQ6IFJlY29yZEpTT047XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3QgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdC5SZWFjdENoaWxkIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJvb2xlYW5Qcm9wZXJ0eVZhbHVlIHsuLi50aGlzLnByb3BzfSAvPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QnXG5pbXBvcnQgeyB3aXRoVGhlbWUsIERlZmF1bHRUaGVtZSwgVGhlbWVQcm9wcyB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBMYWJlbCwgZmlsdGVyU3R5bGVzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IG1hcFZhbHVlIGZyb20gJy4vbWFwLXZhbHVlJ1xuaW1wb3J0IHsgRmlsdGVyUHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmNsYXNzIEZpbHRlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RmlsdGVyUHJvcGVydHlQcm9wcyAmIFRoZW1lUHJvcHM8RGVmYXVsdFRoZW1lPj4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKVxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKHNlbGVjdGVkKTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IHNlbGVjdGVkID8gc2VsZWN0ZWQudmFsdWUgOiAnJ1xuICAgIG9uQ2hhbmdlKHByb3BlcnR5LnBhdGgsIHZhbHVlKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgZmlsdGVyID0ge30sIHRoZW1lIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgZmlsdGVyW3Byb3BlcnR5LnBhdGhdID09PSAndW5kZWZpbmVkJyA/ICcnIDogZmlsdGVyW3Byb3BlcnR5LnBhdGhdXG4gICAgY29uc3Qgb3B0aW9ucyA9IFtcbiAgICAgIHsgdmFsdWU6IHRydWUsIGxhYmVsOiBtYXBWYWx1ZSh0cnVlKSB9LFxuICAgICAgeyB2YWx1ZTogZmFsc2UsIGxhYmVsOiBtYXBWYWx1ZShmYWxzZSkgfSxcbiAgICBdXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBvcHRpb25zLmZpbmQobyA9PiBvLnZhbHVlID09PSB2YWx1ZSlcbiAgICByZXR1cm4gKFxuICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgPExhYmVsPntwcm9wZXJ0eS5sYWJlbH08L0xhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgdmFsdWU9e3R5cGVvZiBzZWxlY3RlZCA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IHNlbGVjdGVkfVxuICAgICAgICAgIGlzQ2xlYXJhYmxlXG4gICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICBzdHlsZXM9e2ZpbHRlclN0eWxlcyh0aGVtZSl9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShGaWx0ZXIgYXMgbmV2ZXIpXG4iLCJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRGF0ZVBpY2tlciwgRm9ybUdyb3VwLCBGb3JtTWVzc2FnZSB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcbmltcG9ydCB7IHJlY29yZFByb3BlcnR5SXNFcXVhbCB9IGZyb20gJy4uL3JlY29yZC1wcm9wZXJ0eS1pcy1lcXVhbCdcbmltcG9ydCB7IFByb3BlcnR5TGFiZWwgfSBmcm9tICcuLi91dGlscy9wcm9wZXJ0eS1sYWJlbCdcblxuY29uc3QgRWRpdDogUmVhY3QuRkM8RWRpdFByb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIG9uQ2hhbmdlLCByZWNvcmQgfSA9IHByb3BzXG4gIGNvbnN0IHZhbHVlID0gKHJlY29yZC5wYXJhbXMgJiYgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wYXRoXSkgfHwgJydcbiAgY29uc3QgZXJyb3IgPSByZWNvcmQuZXJyb3JzICYmIHJlY29yZC5lcnJvcnNbcHJvcGVydHkucGF0aF1cblxuICByZXR1cm4gKFxuICAgIDxGb3JtR3JvdXAgZXJyb3I9eyEhZXJyb3J9PlxuICAgICAgPFByb3BlcnR5TGFiZWwgcHJvcGVydHk9e3Byb3BlcnR5fSAvPlxuICAgICAgPERhdGVQaWNrZXJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBkaXNhYmxlZD17cHJvcGVydHkuaXNEaXNhYmxlZH1cbiAgICAgICAgb25DaGFuZ2U9eyhkYXRlOiBEYXRlKTogdm9pZCA9PiBvbkNoYW5nZShwcm9wZXJ0eS5wYXRoLCBkYXRlKX1cbiAgICAgICAgcHJvcGVydHlUeXBlPXtwcm9wZXJ0eS50eXBlfVxuICAgICAgICB7Li4ucHJvcGVydHkucHJvcHN9XG4gICAgICAvPlxuICAgICAgPEZvcm1NZXNzYWdlPntlcnJvciAmJiBlcnJvci5tZXNzYWdlfTwvRm9ybU1lc3NhZ2U+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtbyhFZGl0LCByZWNvcmRQcm9wZXJ0eUlzRXF1YWwpXG4iLCJpbXBvcnQgeyBmb3JtYXREYXRlUHJvcGVydHkgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuaW1wb3J0IHsgUHJvcGVydHlUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9hZGFwdGVycy9wcm9wZXJ0eS9iYXNlLXByb3BlcnR5J1xuXG5leHBvcnQgZGVmYXVsdCAodmFsdWU6IERhdGUsIHByb3BlcnR5VHlwZTogUHJvcGVydHlUeXBlKTogc3RyaW5nID0+IHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiAnJ1xuICB9XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSlcbiAgaWYgKGRhdGUpIHtcbiAgICByZXR1cm4gZm9ybWF0RGF0ZVByb3BlcnR5KGRhdGUsIHByb3BlcnR5VHlwZSlcbiAgfVxuICByZXR1cm4gJydcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFZhbHVlR3JvdXAgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgbWFwVmFsdWUgZnJvbSAnLi9tYXAtdmFsdWUnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEVkaXRQcm9wZXJ0eVByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHZhbHVlID0gbWFwVmFsdWUocmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wYXRoXSwgcHJvcGVydHkudHlwZSlcblxuICAgIHJldHVybiAoXG4gICAgICA8VmFsdWVHcm91cCBsYWJlbD17cHJvcGVydHkubGFiZWx9PlxuICAgICAgICB7dmFsdWV9XG4gICAgICA8L1ZhbHVlR3JvdXA+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBtYXBWYWx1ZSBmcm9tICcuL21hcC12YWx1ZSdcbmltcG9ydCB7IFJlc291cmNlSlNPTiwgUmVjb3JkSlNPTiwgUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3QuUmVhY3RDaGlsZCB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSBtYXBWYWx1ZShyZWNvcmQucGFyYW1zW3Byb3BlcnR5LnBhdGhdLCBwcm9wZXJ0eS50eXBlKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBmbGF0IGZyb20gJ2ZsYXQnXG5pbXBvcnQgQmFzZVByb3BlcnR5IGZyb20gJy4uLy4uL2FkYXB0ZXJzL3Byb3BlcnR5L2Jhc2UtcHJvcGVydHknXG5pbXBvcnQgQmFzZVJlc291cmNlIGZyb20gJy4uLy4uL2FkYXB0ZXJzL3Jlc291cmNlL2Jhc2UtcmVzb3VyY2UnXG5pbXBvcnQgQmFzZVJlY29yZCBmcm9tICcuLi8uLi9hZGFwdGVycy9yZWNvcmQvYmFzZS1yZWNvcmQnXG5cbmV4cG9ydCBjb25zdCBQQVJBTV9TRVBBUkFUT1IgPSAnfn4nXG5cbmV4cG9ydCB0eXBlIEZpbHRlckVsZW1lbnQgPSB7XG4gIHBhdGg6IHN0cmluZztcbiAgcHJvcGVydHk6IEJhc2VQcm9wZXJ0eTtcbiAgdmFsdWU6IHN0cmluZyB8IHtcbiAgICBmcm9tOiBzdHJpbmc7XG4gICAgdG86IHN0cmluZztcbiAgfTtcbiAgcG9wdWxhdGVkPzogQmFzZVJlY29yZCB8IG51bGw7XG59XG5cbmludGVyZmFjZSBSZWR1Y2VDYWxsYmFjazxUPiB7XG4gIChtZW1vOiBULCBlbGVtZW50OiBGaWx0ZXJFbGVtZW50KTogVDtcbn1cblxuLyoqXG4gKiBGaWx0ZXIgb2JqZWN0IHdyYXBwaW5nIHVwIHNlbGVjdGVkIGZpbHRlcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgRmlsdGVyIHtcbiAgcHVibGljIGZpbHRlcnM6IHtba2V5OiBzdHJpbmddOiBGaWx0ZXJFbGVtZW50fVxuXG4gIHByaXZhdGUgcmVzb3VyY2U6IEJhc2VSZXNvdXJjZVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHJhdyBuZXN0ZWQgZmlsdGVycyB0byBmb3JtIE9iamVjdDxwYXRoLCB2YWx1ZT4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAqICBuZXN0ZWQ6IHtmaWVsZDogJ2FsYSd9LFxuICAgKiAgJ2RhdGFGaWVsZH5+ZnJvbSc6ICcyMDE5LTA4LTE0J1xuICAgKiB9XG4gICAqXG4gICAqIGNvbnN0IG5vcm1hbGl6ZWQgPSBGaWx0ZXIubm9ybWFsaXplRmlsdGVycyhmaWx0ZXJzKVxuICAgKiAvLyB7XG4gICAqIC8vICAgJ25lc3RlZC5maWx0ZXInOiAnYWxhJyxcbiAgICogLy8gICAnZGF0YUZpZWxkJzoge2Zyb206ICcyMDE5LTA4LTE0J31cbiAgICogLy8gfVxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSAgZmlsdGVyc1xuICAgKlxuICAgKiBAcmV0dXJuICB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIG5vcm1hbGl6ZUtleXMoZmlsdGVycyk6IE1hcDxzdHJpbmcsIGFueT4ge1xuICAgIHJldHVybiBmbGF0LnVuZmxhdHRlbihmbGF0LmZsYXR0ZW4oZmlsdGVycyksIHsgZGVsaW1pdGVyOiBQQVJBTV9TRVBBUkFUT1IgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0PFN0cmluZyxPYmplY3QgfCBTdHJpbmc+fSAgZmlsdGVycyAgIHNlbGVjdGVkIGZpbHRlcnNcbiAgICogQHBhcmFtICAge0Jhc2VSZXNvdXJjZX0gICAgICAgICAgICAgICAgICAgIHJlc291cmNlICAgIHJlc291cmNlIHdoaWNoIGlzIGZpbHRlcmVkXG4gICAqL1xuICBjb25zdHJ1Y3RvcihmaWx0ZXJzID0ge30sIHJlc291cmNlKSB7XG4gICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IEZpbHRlci5ub3JtYWxpemVLZXlzKGZpbHRlcnMpXG4gICAgdGhpcy5maWx0ZXJzID0gT2JqZWN0LmtleXMobm9ybWFsaXplZCkucmVkdWNlKChtZW1vLCBwYXRoKSA9PiB7XG4gICAgICBtZW1vW3BhdGhdID0ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBwcm9wZXJ0eTogdGhpcy5yZXNvdXJjZS5wcm9wZXJ0eShwYXRoKSxcbiAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZWRbcGF0aF0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZW1vXG4gICAgfSwge30pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgZm9yIGEgZ2l2ZW4gcHJvcGVydHkga2V5XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgICAgICBwcm9wZXJ0eSBrZXlcbiAgICogQHJldHVybnMge0ZpbHRlci5Qcm9wZXJ0eSB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGdldChrZXk6IHN0cmluZyk6IEZpbHRlckVsZW1lbnQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJzW2tleV1cbiAgfVxuXG4gIC8qKlxuICAgKiBQb3B1bGF0ZXMgYWxsIGZpbHRlcmVkIHByb3BlcnRpZXMgd2hpY2ggcmVmZXJzIHRvIG90aGVyIHJlc291cmNlc1xuICAgKi9cbiAgYXN5bmMgcG9wdWxhdGUoKTogUHJvbWlzZTxGaWx0ZXI+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBrZXlzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpbmRleF1cbiAgICAgIGNvbnN0IHJlZmVyZW5jZVJlc291cmNlID0gdGhpcy5yZXNvdXJjZS5kZWNvcmF0ZSgpLmdldFByb3BlcnR5QnlLZXkoa2V5KT8ucmVmZXJlbmNlKClcbiAgICAgIGlmIChyZWZlcmVuY2VSZXNvdXJjZSkge1xuICAgICAgICB0aGlzLmZpbHRlcnNba2V5XS5wb3B1bGF0ZWQgPSBhd2FpdCByZWZlcmVuY2VSZXNvdXJjZS5maW5kT25lKFxuICAgICAgICAgIHRoaXMuZmlsdGVyc1trZXldLnZhbHVlIGFzIHN0cmluZyxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVkdWNlPFQ+KGNhbGxiYWNrOiBSZWR1Y2VDYWxsYmFjazxUPiwgaW5pdGlhbDogVCk6IFQge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZmlsdGVycykucmVkdWNlKGNhbGxiYWNrLCBpbml0aWFsIHx8IHt9IGFzIFQpXG4gIH1cblxuICBpc1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKS5sZW5ndGhcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEZvcm1Hcm91cCwgTGFiZWwsIERhdGVQaWNrZXIgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgKiBhcyBCYWNrZW5kRmlsdGVyIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvZmlsdGVyL2ZpbHRlcidcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLXRyYW5zbGF0aW9uJ1xuaW1wb3J0IHsgRmlsdGVyUHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmNvbnN0IHsgUEFSQU1fU0VQQVJBVE9SIH0gPSBCYWNrZW5kRmlsdGVyXG5cblxuY29uc3QgRmlsdGVyOiBSZWFjdC5GQzxGaWx0ZXJQcm9wZXJ0eVByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHByb3BlcnR5LCBmaWx0ZXIsIG9uQ2hhbmdlIH0gPSBwcm9wc1xuICBjb25zdCB7IHRyYW5zbGF0ZVByb3BlcnR5IH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgY29uc3QgZnJvbUtleSA9IGAke3Byb3BlcnR5LnBhdGh9JHtQQVJBTV9TRVBBUkFUT1J9ZnJvbWBcbiAgY29uc3QgdG9LZXkgPSBgJHtwcm9wZXJ0eS5wYXRofSR7UEFSQU1fU0VQQVJBVE9SfXRvYFxuICBjb25zdCBmcm9tVmFsdWUgPSBmaWx0ZXJbZnJvbUtleV1cbiAgY29uc3QgdG9WYWx1ZSA9IGZpbHRlclt0b0tleV1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxGb3JtR3JvdXAgdmFyaWFudD1cImZpbHRlclwiPlxuICAgICAgICA8TGFiZWw+e3Byb3BlcnR5LmxhYmVsfTwvTGFiZWw+XG4gICAgICAgIDxMYWJlbD57YC0gJHt0cmFuc2xhdGVQcm9wZXJ0eSgnZnJvbScpfTogYH08L0xhYmVsPlxuICAgICAgICA8RGF0ZVBpY2tlclxuICAgICAgICAgIHZhbHVlPXtmcm9tVmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9eyhkYXRlOiBEYXRlKTogdm9pZCA9PiBvbkNoYW5nZShmcm9tS2V5LCBkYXRlKX1cbiAgICAgICAgICBwcm9wZXJ0eVR5cGU9e3Byb3BlcnR5LnR5cGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxMYWJlbCBtdD1cImRlZmF1bHRcIj57YC0gJHt0cmFuc2xhdGVQcm9wZXJ0eSgndG8nKX06IGB9PC9MYWJlbD5cbiAgICAgICAgPERhdGVQaWNrZXJcbiAgICAgICAgICB2YWx1ZT17dG9WYWx1ZX1cbiAgICAgICAgICBvbkNoYW5nZT17KGRhdGE6IERhdGUpOiB2b2lkID0+IG9uQ2hhbmdlKHRvS2V5LCBkYXRhKX1cbiAgICAgICAgICBwcm9wZXJ0eVR5cGU9e3Byb3BlcnR5LnR5cGV9XG4gICAgICAgIC8+XG4gICAgICA8L0Zvcm1Hcm91cD5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlclxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuaW1wb3J0IFJlYWN0LCB7IEZDLCBtZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQge1xuICBGb3JtR3JvdXAsXG4gIEZvcm1NZXNzYWdlLFxuICBSaWNoVGV4dCxcbiAgUXVpbGxPcHRpb25zLFxuICBEZWZhdWx0UXVpbGxUb29sYmFyT3B0aW9ucyxcbn0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgcmVjb3JkUHJvcGVydHlJc0VxdWFsIH0gZnJvbSAnLi4vcmVjb3JkLXByb3BlcnR5LWlzLWVxdWFsJ1xuaW1wb3J0IHsgUHJvcGVydHlMYWJlbCB9IGZyb20gJy4uL3V0aWxzL3Byb3BlcnR5LWxhYmVsJ1xuXG50eXBlIEN1c3RvbVR5cGUgPSB7XG4gIGJvcmRlcmxlc3M/OiBib29sZWFuO1xuICBxdWlsbD86IFF1aWxsT3B0aW9ucztcbn1cblxuY29uc3QgRWRpdDogRkM8RWRpdFByb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgb25DaGFuZ2UgfSA9IHByb3BzXG4gIGNvbnN0IHZhbHVlID0gcmVjb3JkLnBhcmFtcz8uW3Byb3BlcnR5LnBhdGhdID8/ICcnXG4gIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5LnBhdGhdXG5cbiAgY29uc3QgeyBwcm9wczogcHJvcGVydHlQcm9wcyB9ID0gcHJvcGVydHlcblxuICBjb25zdCB7IHF1aWxsID0ge30sIC4uLmN1c3RvbVByb3BzIH0gPSBwcm9wZXJ0eVByb3BzIGFzIEN1c3RvbVR5cGUgfHwge31cbiAgcXVpbGwudGhlbWUgPSBxdWlsbC50aGVtZSB8fCAnc25vdydcbiAgcXVpbGwubW9kdWxlcyA9IHtcbiAgICB0b29sYmFyOiBEZWZhdWx0UXVpbGxUb29sYmFyT3B0aW9ucyxcbiAgICAuLi4ocXVpbGwubW9kdWxlcyB8fCB7fSksXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGb3JtR3JvdXAgZXJyb3I9e0Jvb2xlYW4oZXJyb3IpfT5cbiAgICAgIDxQcm9wZXJ0eUxhYmVsIHByb3BlcnR5PXtwcm9wZXJ0eX0gLz5cbiAgICAgIDxSaWNoVGV4dFxuICAgICAgICB7Li4uY3VzdG9tUHJvcHN9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9e2NvbnRlbnQgPT4gb25DaGFuZ2UocHJvcGVydHkucGF0aCwgY29udGVudCl9XG4gICAgICAgIHF1aWxsPXtxdWlsbH1cbiAgICAgIC8+XG4gICAgICA8Rm9ybU1lc3NhZ2U+e2Vycm9yPy5tZXNzYWdlfTwvRm9ybU1lc3NhZ2U+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtbyhFZGl0LCByZWNvcmRQcm9wZXJ0eUlzRXF1YWwpXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBWYWx1ZUdyb3VwLCBUZXh0LCBCb3ggfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEVkaXRQcm9wZXJ0eVByb3BzPiB7XG4gIHByaXZhdGUgY29udGVudFJlZjogUmVhY3QuUmVmT2JqZWN0PGFueT5cblxuICBjb25zdHJ1Y3Rvcihwcm9wczogRWRpdFByb3BlcnR5UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLmNvbnRlbnRSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnBhdGhdXG4gICAgdGhpcy5jb250ZW50UmVmLmN1cnJlbnQuaW5uZXJIVE1MID0gdmFsdWVcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcblxuICAgIHJldHVybiAoXG4gICAgICA8VmFsdWVHcm91cCBsYWJlbD17cHJvcGVydHkubGFiZWx9PlxuICAgICAgICA8Qm94IHZhcmlhbnQ9XCJncmV5XCIgYm9yZGVyPVwiZGVmYXVsdFwiPlxuICAgICAgICAgIDxUZXh0IHJlZj17dGhpcy5jb250ZW50UmVmfSAvPlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvVmFsdWVHcm91cD5cbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFNob3dQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuY29uc3QgTGlzdDogUmVhY3QuRkM8U2hvd1Byb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCB9ID0gcHJvcHNcbiAgY29uc3Qgb3JpZ2luYWwgPSByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnBhdGhdIHx8ICcnXG4gIGNvbnN0IHZhbHVlID0gb3JpZ2luYWwuc3Vic3RyaW5nKDAsIDE1KSArIChvcmlnaW5hbC5sZW5ndGggPiAxNSA/ICcuLi4nIDogJycpXG5cbiAgcmV0dXJuIChcbiAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QvYXN5bmMnXG5pbXBvcnQgeyB3aXRoVGhlbWUsIERlZmF1bHRUaGVtZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtTWVzc2FnZSwgc2VsZWN0U3R5bGVzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IEFwaUNsaWVudCBmcm9tICcuLi8uLi8uLi91dGlscy9hcGktY2xpZW50J1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMsIFNlbGVjdFJlY29yZCB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IFByb3BlcnR5TGFiZWwgfSBmcm9tICcuLi91dGlscy9wcm9wZXJ0eS1sYWJlbCdcblxudHlwZSBDb21iaW5lZFByb3BzID0gRWRpdFByb3BlcnR5UHJvcHMgJiB7dGhlbWU6IERlZmF1bHRUaGVtZX1cbnR5cGUgU2VsZWN0UmVjb3JkRW5oYW5jZWQgPSBTZWxlY3RSZWNvcmQgJiB7XG4gIHJlY29yZDogUmVjb3JkSlNPTjtcbn1cblxuY29uc3QgRWRpdDogRkM8Q29tYmluZWRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHksIHJlY29yZCwgdGhlbWUgfSA9IHByb3BzXG4gIGNvbnN0IHsgcmVmZXJlbmNlOiByZXNvdXJjZUlkIH0gPSBwcm9wZXJ0eVxuXG4gIGlmICghcmVzb3VyY2VJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlZmVyZW5jZSByZXNvdXJjZSBpbiBwcm9wZXJ0eSAnJHtwcm9wZXJ0eS5wYXRofSdgKVxuICB9XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKHNlbGVjdGVkOiBTZWxlY3RSZWNvcmRFbmhhbmNlZCk6IHZvaWQgPT4ge1xuICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgb25DaGFuZ2UocHJvcGVydHkucGF0aCwgc2VsZWN0ZWQudmFsdWUsIHNlbGVjdGVkLnJlY29yZClcbiAgICB9IGVsc2Uge1xuICAgICAgb25DaGFuZ2UocHJvcGVydHkucGF0aCwgbnVsbClcbiAgICB9XG4gIH1cblxuICBjb25zdCBsb2FkT3B0aW9ucyA9IGFzeW5jIChpbnB1dFZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPFNlbGVjdFJlY29yZEVuaGFuY2VkW10+ID0+IHtcbiAgICBjb25zdCBhcGkgPSBuZXcgQXBpQ2xpZW50KClcblxuICAgIGNvbnN0IG9wdGlvblJlY29yZHMgPSBhd2FpdCBhcGkuc2VhcmNoUmVjb3Jkcyh7XG4gICAgICByZXNvdXJjZUlkLFxuICAgICAgcXVlcnk6IGlucHV0VmFsdWUsXG4gICAgfSlcbiAgICByZXR1cm4gb3B0aW9uUmVjb3Jkcy5tYXAoKG9wdGlvblJlY29yZDogUmVjb3JkSlNPTikgPT4gKHtcbiAgICAgIHZhbHVlOiBvcHRpb25SZWNvcmQuaWQsXG4gICAgICBsYWJlbDogb3B0aW9uUmVjb3JkLnRpdGxlLFxuICAgICAgcmVjb3JkOiBvcHRpb25SZWNvcmQsXG4gICAgfSkpXG4gIH1cbiAgY29uc3QgZXJyb3IgPSByZWNvcmQ/LmVycm9yc1twcm9wZXJ0eS5wYXRoXVxuXG4gIGNvbnN0IHNlbGVjdGVkSWQgPSByZWNvcmQ/LnBhcmFtc1twcm9wZXJ0eS5wYXRoXSBhcyBzdHJpbmcgfCB1bmRlZmluZWRcbiAgY29uc3QgW2xvYWRlZFJlY29yZCwgc2V0TG9hZGVkUmVjb3JkXSA9IHVzZVN0YXRlPFJlY29yZEpTT04gfCB1bmRlZmluZWQ+KClcbiAgY29uc3QgW2xvYWRpbmdSZWNvcmQsIHNldExvYWRpbmdSZWNvcmRdID0gdXNlU3RhdGUoMClcbiAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IHJlY29yZD8ucG9wdWxhdGVkW3Byb3BlcnR5LnBhdGhdID8/IGxvYWRlZFJlY29yZFxuICBjb25zdCBzZWxlY3RlZE9wdGlvbiA9IChzZWxlY3RlZElkICYmIHNlbGVjdGVkVmFsdWUpID8ge1xuICAgIHZhbHVlOiBzZWxlY3RlZFZhbHVlLmlkLFxuICAgIGxhYmVsOiBzZWxlY3RlZFZhbHVlLnRpdGxlLFxuICB9IDoge1xuICAgIHZhbHVlOiAnJyxcbiAgICBsYWJlbDogJycsXG4gIH1cbiAgY29uc3Qgc3R5bGVzID0gc2VsZWN0U3R5bGVzKHRoZW1lKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZFZhbHVlICYmIHNlbGVjdGVkSWQpIHtcbiAgICAgIHNldExvYWRpbmdSZWNvcmQoYyA9PiBjICsgMSlcbiAgICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuICAgICAgYXBpLnJlY29yZEFjdGlvbih7XG4gICAgICAgIGFjdGlvbk5hbWU6ICdzaG93JyxcbiAgICAgICAgcmVzb3VyY2VJZCxcbiAgICAgICAgcmVjb3JkSWQ6IHNlbGVjdGVkSWQsXG4gICAgICB9KS50aGVuKCh7IGRhdGEgfTogYW55KSA9PiB7XG4gICAgICAgIHNldExvYWRlZFJlY29yZChkYXRhLnJlY29yZClcbiAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBzZXRMb2FkaW5nUmVjb3JkKGMgPT4gYyAtIDEpXG4gICAgICB9KVxuICAgIH1cbiAgfSwgW3NlbGVjdGVkVmFsdWUsIHNlbGVjdGVkSWQsIHJlc291cmNlSWRdKVxuXG4gIHJldHVybiAoXG4gICAgPEZvcm1Hcm91cCBlcnJvcj17Qm9vbGVhbihlcnJvcil9PlxuICAgICAgPFByb3BlcnR5TGFiZWwgcHJvcGVydHk9e3Byb3BlcnR5fSAvPlxuICAgICAgPFNlbGVjdFxuICAgICAgICBjYWNoZU9wdGlvbnNcbiAgICAgICAgdmFsdWU9e3NlbGVjdGVkT3B0aW9ufVxuICAgICAgICBzdHlsZXM9e3N0eWxlc31cbiAgICAgICAgZGVmYXVsdE9wdGlvbnNcbiAgICAgICAgbG9hZE9wdGlvbnM9e2xvYWRPcHRpb25zfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICBpc0Rpc2FibGVkPXtwcm9wZXJ0eS5pc0Rpc2FibGVkfVxuICAgICAgICBpc0xvYWRpbmc9e2xvYWRpbmdSZWNvcmR9XG4gICAgICAgIHsuLi5wcm9wZXJ0eS5wcm9wc31cbiAgICAgIC8+XG4gICAgICA8Rm9ybU1lc3NhZ2U+e2Vycm9yPy5tZXNzYWdlfTwvRm9ybU1lc3NhZ2U+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEVkaXQpXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyBCdXR0b25DU1MgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IHsgUmVjb3JkSlNPTiwgUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xufVxuXG5jb25zdCBTdHlsZWRMaW5rID0gc3R5bGVkPGFueT4oTGluaylgXG4gICR7QnV0dG9uQ1NTfTtcbiAgcGFkZGluZy1sZWZ0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc3BhY2UueHN9O1xuICBwYWRkaW5nLXJpZ2h0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc3BhY2UueHN9O1xuYFxuXG5jb25zdCBSZWZlcmVuY2VWYWx1ZTogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCB9ID0gcHJvcHNcblxuICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcbiAgY29uc3QgcmVmSWQgPSByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnBhdGhdXG4gIGNvbnN0IHBvcHVsYXRlZCA9IHJlY29yZC5wb3B1bGF0ZWRbcHJvcGVydHkucGF0aF1cbiAgY29uc3QgdmFsdWUgPSAocG9wdWxhdGVkICYmIHBvcHVsYXRlZC50aXRsZSkgfHwgcmVmSWRcblxuICBpZiAoIXByb3BlcnR5LnJlZmVyZW5jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgcHJvcGVydHk6IFwiJHtwcm9wZXJ0eS5wYXRofVwiIGRvZXMgbm90IGhhdmUgYSByZWZlcmVuY2VgKVxuICB9XG5cbiAgaWYgKHBvcHVsYXRlZCAmJiBwb3B1bGF0ZWQucmVjb3JkQWN0aW9ucy5maW5kKGEgPT4gYS5uYW1lID09PSAnc2hvdycpKSB7XG4gICAgY29uc3QgaHJlZiA9IGgucmVjb3JkQWN0aW9uVXJsKHtcbiAgICAgIHJlc291cmNlSWQ6IHByb3BlcnR5LnJlZmVyZW5jZSwgcmVjb3JkSWQ6IHJlZklkLCBhY3Rpb25OYW1lOiAnc2hvdycsXG4gICAgfSlcbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZExpbmsgdmFyaWFudD1cInRleHRcIiB0bz17aHJlZn0+e3ZhbHVlfTwvU3R5bGVkTGluaz5cbiAgICApXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZVZhbHVlXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBWYWx1ZUdyb3VwIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IFJlZmVyZW5jZVZhbHVlIGZyb20gJy4vcmVmZXJlbmNlLXZhbHVlJ1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG93IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxFZGl0UHJvcGVydHlQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcblxuICAgIHJldHVybiAoXG4gICAgICA8VmFsdWVHcm91cCBsYWJlbD17cHJvcGVydHkubGFiZWx9PlxuICAgICAgICA8UmVmZXJlbmNlVmFsdWVcbiAgICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgIC8+XG4gICAgICA8L1ZhbHVlR3JvdXA+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBSZWZlcmVuY2VWYWx1ZSBmcm9tICcuL3JlZmVyZW5jZS12YWx1ZSdcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWZlcmVuY2VWYWx1ZVxuICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgLz5cbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0L2FzeW5jJ1xuaW1wb3J0IHsgVGhlbWVQcm9wcywgRGVmYXVsdFRoZW1lLCB3aXRoVGhlbWUgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IEZvcm1Hcm91cCwgTGFiZWwsIGZpbHRlclN0eWxlcyB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBBcGlDbGllbnQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvYXBpLWNsaWVudCdcbmltcG9ydCB7IEZpbHRlclByb3BlcnR5UHJvcHMsIFNlbGVjdFJlY29yZCB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbnR5cGUgQ29tYmluZWRQcm9wcyA9IEZpbHRlclByb3BlcnR5UHJvcHMgJiBUaGVtZVByb3BzPERlZmF1bHRUaGVtZT5cblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxDb21iaW5lZFByb3BzPiB7XG4gIHByaXZhdGUgYXBpOiBBcGlDbGllbnRcblxuICBwcml2YXRlIG9wdGlvbnM6IEFycmF5PFNlbGVjdFJlY29yZD5cblxuICBjb25zdHJ1Y3Rvcihwcm9wczogQ29tYmluZWRQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuYXBpID0gbmV3IEFwaUNsaWVudCgpXG4gICAgdGhpcy5vcHRpb25zID0gW11cbiAgICB0aGlzLmxvYWRPcHRpb25zID0gdGhpcy5sb2FkT3B0aW9ucy5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gIH1cblxuICBoYW5kbGVDaGFuZ2Uoc2VsZWN0ZWQ6IFNlbGVjdFJlY29yZCk6IHZvaWQge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgb25DaGFuZ2UocHJvcGVydHkucGF0aCwgc2VsZWN0ZWQgPyBzZWxlY3RlZC52YWx1ZSA6ICcnKVxuICB9XG5cbiAgYXN5bmMgbG9hZE9wdGlvbnMoaW5wdXRWYWx1ZTogc3RyaW5nKTogUHJvbWlzZTxBcnJheTx7dmFsdWU6IHN0cmluZzsgbGFiZWw6IHN0cmluZyB9Pj4ge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgdGhpcy5hcGkuc2VhcmNoUmVjb3Jkcyh7XG4gICAgICByZXNvdXJjZUlkOiBwcm9wZXJ0eS5yZWZlcmVuY2UgYXMgc3RyaW5nLFxuICAgICAgcXVlcnk6IGlucHV0VmFsdWUsXG4gICAgfSlcbiAgICB0aGlzLm9wdGlvbnMgPSByZWNvcmRzLm1hcChyID0+ICh7IHZhbHVlOiByLmlkLCBsYWJlbDogci50aXRsZSB9KSlcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCBmaWx0ZXIsIHRoZW1lIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgZmlsdGVyW3Byb3BlcnR5LnBhdGhdID09PSAndW5kZWZpbmVkJyA/ICcnIDogZmlsdGVyW3Byb3BlcnR5LnBhdGhdXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSAodGhpcy5vcHRpb25zIHx8IFtdKS5maW5kKG8gPT4gby52YWx1ZSA9PT0gdmFsdWUpXG4gICAgcmV0dXJuIChcbiAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgIDxMYWJlbD57cHJvcGVydHkubGFiZWx9PC9MYWJlbD5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIHZhbHVlPXt0eXBlb2Ygc2VsZWN0ZWQgPT09ICd1bmRlZmluZWQnID8gJycgOiBzZWxlY3RlZH1cbiAgICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICAgIGNhY2hlT3B0aW9uc1xuICAgICAgICAgIHN0eWxlcz17ZmlsdGVyU3R5bGVzKHRoZW1lKX1cbiAgICAgICAgICBsb2FkT3B0aW9ucz17dGhpcy5sb2FkT3B0aW9uc31cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgZGVmYXVsdE9wdGlvbnNcbiAgICAgICAgLz5cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRmlsdGVyKVxuIiwiXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBWYWx1ZUdyb3VwIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG93IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxFZGl0UHJvcGVydHlQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IHZhbHVlID0gcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wYXRoXSB8fCAnJ1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWYWx1ZUdyb3VwIGxhYmVsPXtwcm9wZXJ0eS5sYWJlbH0+XG4gICAgICAgIHt2YWx1ZS5zcGxpdCgvKD86XFxyXFxufFxccnxcXG4pL2cpLm1hcCgobGluZSwgaSkgPT4gKFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtpfT5cbiAgICAgICAgICAgIHtsaW5lfVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKSl9XG4gICAgICA8L1ZhbHVlR3JvdXA+XG4gICAgKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbmltcG9ydCBSZWFjdCwgeyBtZW1vLCB1c2VTdGF0ZSwgRkMsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgSW5wdXQsIEZvcm1Hcm91cCwgRm9ybU1lc3NhZ2UgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgeyByZWNvcmRQcm9wZXJ0eUlzRXF1YWwgfSBmcm9tICcuLi9yZWNvcmQtcHJvcGVydHktaXMtZXF1YWwnXG5pbXBvcnQgeyBQcm9wZXJ0eUxhYmVsIH0gZnJvbSAnLi4vdXRpbHMvcHJvcGVydHktbGFiZWwnXG5cbmNvbnN0IEVkaXQ6IEZDPEVkaXRQcm9wZXJ0eVByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IG9uQ2hhbmdlLCBwcm9wZXJ0eSwgcmVjb3JkIH0gPSBwcm9wc1xuICBjb25zdCBwcm9wVmFsdWUgPSByZWNvcmQucGFyYW1zPy5bcHJvcGVydHkucGF0aF0gPz8gJydcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShwcm9wVmFsdWUpXG4gIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycz8uW3Byb3BlcnR5LnBhdGhdXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmFsdWUgIT09IHByb3BWYWx1ZSkge1xuICAgICAgc2V0VmFsdWUocHJvcFZhbHVlKVxuICAgIH1cbiAgfSwgW3Byb3BWYWx1ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybUdyb3VwIGVycm9yPXtCb29sZWFuKGVycm9yKX0+XG4gICAgICA8UHJvcGVydHlMYWJlbCBwcm9wZXJ0eT17cHJvcGVydHl9IC8+XG4gICAgICA8SW5wdXRcbiAgICAgICAgYXM9XCJ0ZXh0YXJlYVwiXG4gICAgICAgIHJvd3M9eyh2YWx1ZS5tYXRjaCgvXFxuL2cpIHx8IFtdKS5sZW5ndGggKyAxfVxuICAgICAgICBpZD17cHJvcGVydHkucGF0aH1cbiAgICAgICAgbmFtZT17cHJvcGVydHkucGF0aH1cbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0VmFsdWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICBvbkJsdXI9eygpID0+IG9uQ2hhbmdlKHByb3BlcnR5LnBhdGgsIHZhbHVlKX1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBkaXNhYmxlZD17cHJvcGVydHkuaXNEaXNhYmxlZH1cbiAgICAgICAgey4uLnByb3BlcnR5LnByb3BzfVxuICAgICAgLz5cbiAgICAgIDxGb3JtTWVzc2FnZT57ZXJyb3IgJiYgZXJyb3IubWVzc2FnZX08L0Zvcm1NZXNzYWdlPlxuICAgIDwvRm9ybUdyb3VwPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oRWRpdCwgcmVjb3JkUHJvcGVydHlJc0VxdWFsKVxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIG1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgSW5wdXQsIEZvcm1Hcm91cCwgSW5wdXRHcm91cCwgRm9ybU1lc3NhZ2UsIEJ1dHRvbiwgSWNvbiB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcbmltcG9ydCB7IHJlY29yZFByb3BlcnR5SXNFcXVhbCB9IGZyb20gJy4uL3JlY29yZC1wcm9wZXJ0eS1pcy1lcXVhbCdcbmltcG9ydCB7IFByb3BlcnR5TGFiZWwgfSBmcm9tICcuLi91dGlscy9wcm9wZXJ0eS1sYWJlbCdcblxuY29uc3QgRWRpdDogUmVhY3QuRkM8RWRpdFByb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgb25DaGFuZ2UgfSA9IHByb3BzXG4gIGNvbnN0IHByb3BWYWx1ZSA9IHJlY29yZC5wYXJhbXNbcHJvcGVydHkucGF0aF1cbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShwcm9wVmFsdWUpXG4gIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5LnBhdGhdXG4gIGNvbnN0IFtpc0lucHV0LCBzZXRJc0lucHV0XSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHZhbHVlICE9PSBwcm9wVmFsdWUpIHtcbiAgICAgIHNldFZhbHVlKHByb3BWYWx1ZSlcbiAgICB9XG4gIH0sIFtwcm9wVmFsdWVdKVxuXG4gIHJldHVybiAoXG4gICAgPEZvcm1Hcm91cCBlcnJvcj17ISFlcnJvcn0+XG4gICAgICA8UHJvcGVydHlMYWJlbCBwcm9wZXJ0eT17cHJvcGVydHl9IC8+XG4gICAgICA8SW5wdXRHcm91cD5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgdHlwZT17aXNJbnB1dCA/ICdpbnB1dCcgOiAncGFzc3dvcmQnfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0XCJcbiAgICAgICAgICBpZD17cHJvcGVydHkucGF0aH1cbiAgICAgICAgICBuYW1lPXtwcm9wZXJ0eS5wYXRofVxuICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiBzZXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIG9uQmx1cj17KCkgPT4gb25DaGFuZ2UocHJvcGVydHkucGF0aCwgdmFsdWUpfVxuICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiBlLmtleUNvZGUgPT09IDEzICYmIG9uQ2hhbmdlKHByb3BlcnR5LnBhdGgsIHZhbHVlKX1cbiAgICAgICAgICB2YWx1ZT17dmFsdWUgPz8gJyd9XG4gICAgICAgICAgZGlzYWJsZWQ9e3Byb3BlcnR5LmlzRGlzYWJsZWR9XG4gICAgICAgICAgey4uLnByb3BlcnR5LnByb3BzfVxuICAgICAgICAvPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdmFyaWFudD17aXNJbnB1dCA/ICdwcmltYXJ5JyA6ICd0ZXh0J31cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBzaXplPVwiaWNvblwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNJbnB1dCghaXNJbnB1dCl9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiBpY29uPVwiVmlld1wiIC8+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9JbnB1dEdyb3VwPlxuICAgICAgPEZvcm1NZXNzYWdlPntlcnJvciAmJiBlcnJvci5tZXNzYWdlfTwvRm9ybU1lc3NhZ2U+XG4gICAgPC9Gb3JtR3JvdXA+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtbyhFZGl0LCByZWNvcmRQcm9wZXJ0eUlzRXF1YWwpXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG5pbXBvcnQgRWRpdCBmcm9tICcuL2VkaXQnXG5cbmV4cG9ydCB7XG4gIEVkaXQgYXMgZWRpdCxcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBSZWFjdENvbXBvbmVudExpa2UgfSBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgQm94IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IEVycm9yQm91bmRhcnkgZnJvbSAnLi4vYXBwL2Vycm9yLWJvdW5kYXJ5J1xuXG5pbXBvcnQgKiBhcyBBcnJheVR5cGUgZnJvbSAnLi9hcnJheSdcbmltcG9ydCAqIGFzIE1peGVkVHlwZSBmcm9tICcuL21peGVkJ1xuXG5pbXBvcnQgKiBhcyBkZWZhdWx0VHlwZSBmcm9tICcuL2RlZmF1bHQtdHlwZSdcbmltcG9ydCAqIGFzIGJvb2xlYW4gZnJvbSAnLi9ib29sZWFuJ1xuaW1wb3J0ICogYXMgZGF0ZXRpbWUgZnJvbSAnLi9kYXRldGltZSdcbmltcG9ydCAqIGFzIHJpY2h0ZXh0IGZyb20gJy4vcmljaHRleHQnXG5pbXBvcnQgKiBhcyByZWZlcmVuY2UgZnJvbSAnLi9yZWZlcmVuY2UnXG5pbXBvcnQgKiBhcyB0ZXh0YXJlYSBmcm9tICcuL3RleHRhcmVhJ1xuaW1wb3J0ICogYXMgcGFzc3dvcmQgZnJvbSAnLi9wYXNzd29yZCdcbmltcG9ydCB7IEJhc2VQcm9wZXJ0eUNvbXBvbmVudFByb3BzIH0gZnJvbSAnLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgUHJvcGVydHlUeXBlIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9hZGFwdGVycy9wcm9wZXJ0eS9iYXNlLXByb3BlcnR5J1xuaW1wb3J0IHsgUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcblxubGV0IGdsb2JhbEFueTogYW55ID0ge31cblxudHJ5IHtcbiAgZ2xvYmFsQW55ID0gd2luZG93XG59IGNhdGNoIChlcnJvcikge1xuICBpZiAoZXJyb3IubWVzc2FnZSAhPT0gJ3dpbmRvdyBpcyBub3QgZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmNvbnN0IHR5cGVzOiBSZWNvcmQ8UHJvcGVydHlUeXBlLCBhbnk+ID0ge1xuICB0ZXh0YXJlYSxcbiAgYm9vbGVhbixcbiAgZGF0ZXRpbWUsXG4gIHJlZmVyZW5jZSxcbiAgcGFzc3dvcmQsXG4gIGRhdGU6IGRhdGV0aW1lLFxuICByaWNodGV4dCxcbiAgc3RyaW5nOiBkZWZhdWx0VHlwZSxcbiAgbnVtYmVyOiBkZWZhdWx0VHlwZSxcbiAgZmxvYXQ6IGRlZmF1bHRUeXBlLFxuICBtaXhlZDogbnVsbCxcbn1cblxuLyoqXG4gKiBAbG9hZCAuL2Jhc2UtcHJvcGVydHktY29tcG9uZW50LmRvYy5tZFxuICogQGNvbXBvbmVudFxuICogQG5hbWUgQmFzZVByb3BlcnR5Q29tcG9uZW50XG4gKiBAc3ViY2F0ZWdvcnkgQXBwbGljYXRpb25cbiAqIEBjbGFzc1xuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG5jb25zdCBCYXNlUHJvcGVydHlDb21wb25lbnQ6IFJlYWN0LkZDPEJhc2VQcm9wZXJ0eUNvbXBvbmVudFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHByb3BlcnR5OiBiYXNlUHJvcGVydHksIHJlc291cmNlLCByZWNvcmQsIGZpbHRlciwgd2hlcmUsIG9uQ2hhbmdlIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHByb3BlcnR5OiBQcm9wZXJ0eUpTT04gPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgLi4uYmFzZVByb3BlcnR5LFxuICAgIC8vIHdlIGZpbGwgdGhlIHBhdGggaWYgaXQgaXMgbm90IHRoZXJlLiBUaGF0IGlzIHdoeSBhbGwgdGhlIGFjdHVhbCBDb21wb25lbnQgUmVuZGVyZXJzIGFyZVxuICAgIC8vIGNhbGxlZCB3aXRoIHRoZSBwYXRoIHNldCB0byB0aGlzIHJvb3QgcGF0aC4gTmV4dCBtaXhlZCBhbmQgYXJyYXkgY29tcG9uZW50cyBhZGRzIHRvIHRoaXNcbiAgICAvLyBwYXRoIGVpdGhlciBpbmRleCAoZm9yIGFycmF5KSBvciBzdWJQcm9wZXJ0eSBuYW1lLlxuICAgIHBhdGg6IChiYXNlUHJvcGVydHkgYXMgUHJvcGVydHlKU09OKS5wYXRoIHx8IGJhc2VQcm9wZXJ0eS5wcm9wZXJ0eVBhdGgsXG4gIH0pLCBbYmFzZVByb3BlcnR5XSlcblxuICBjb25zdCB0ZXN0SWQgPSBgcHJvcGVydHktJHt3aGVyZX0tJHtwcm9wZXJ0eS5wYXRofWBcblxuICBsZXQgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudExpa2UgPSAodHlwZXNbcHJvcGVydHkudHlwZV0gJiYgdHlwZXNbcHJvcGVydHkudHlwZV1bd2hlcmVdKVxuICB8fCBkZWZhdWx0VHlwZVt3aGVyZV1cblxuICBpZiAocHJvcGVydHkuY29tcG9uZW50cyAmJiBwcm9wZXJ0eS5jb21wb25lbnRzW3doZXJlXSkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHByb3BlcnR5LmNvbXBvbmVudHNbd2hlcmVdXG4gICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdGhlcmUgaXMgbm8gXCIke3Byb3BlcnR5LnBhdGh9LmNvbXBvbmVudHMuJHt3aGVyZX1cImApXG4gICAgfVxuICAgIENvbXBvbmVudCA9IGdsb2JhbEFueS5BZG1pbkpTLlVzZXJDb21wb25lbnRzW2NvbXBvbmVudF1cbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxCb3ggZGF0YS10ZXN0aWQ9e3Rlc3RJZH0+XG4gICAgICAgICAgPENvbXBvbmVudFxuICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIHdoZXJlPXt3aGVyZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApXG4gIH1cblxuICBjb25zdCBBcnJheSA9IEFycmF5VHlwZVt3aGVyZV1cbiAgY29uc3QgTWl4ZWQgPSBNaXhlZFR5cGVbd2hlcmVdXG5cbiAgaWYgKGJhc2VQcm9wZXJ0eS5pc0FycmF5KSB7XG4gICAgaWYgKCFBcnJheSkgeyByZXR1cm4gKDxkaXYgLz4pIH1cbiAgICByZXR1cm4gKFxuICAgICAgPEFycmF5XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICBJdGVtQ29tcG9uZW50PXtCYXNlUHJvcGVydHlDb21wb25lbnR9XG4gICAgICAgIHRlc3RJZD17dGVzdElkfVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICBpZiAoYmFzZVByb3BlcnR5LnR5cGUgPT09ICdtaXhlZCcpIHtcbiAgICBpZiAoIU1peGVkKSB7IHJldHVybiAoPGRpdiAvPikgfVxuICAgIHJldHVybiAoXG4gICAgICA8TWl4ZWRcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgIEl0ZW1Db21wb25lbnQ9e0Jhc2VQcm9wZXJ0eUNvbXBvbmVudH1cbiAgICAgICAgdGVzdElkPXt0ZXN0SWR9XG4gICAgICAvPlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEVycm9yQm91bmRhcnk+XG4gICAgICA8Qm94IGRhdGEtdGVzdGlkPXt0ZXN0SWR9PlxuICAgICAgICA8Q29tcG9uZW50XG4gICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICByZWNvcmQ9e3JlY29yZH1cbiAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgd2hlcmU9e3doZXJlfVxuICAgICAgICAvPlxuICAgICAgPC9Cb3g+XG4gICAgPC9FcnJvckJvdW5kYXJ5PlxuICApXG59XG5leHBvcnQge1xuICBCYXNlUHJvcGVydHlDb21wb25lbnQgYXMgZGVmYXVsdCxcbiAgQmFzZVByb3BlcnR5Q29tcG9uZW50LFxufVxuIiwiaW1wb3J0IEJhc2VQcm9wZXJ0eUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtcHJvcGVydHktY29tcG9uZW50J1xuaW1wb3J0ICogYXMgZGVmYXVsdFR5cGUgZnJvbSAnLi9kZWZhdWx0LXR5cGUnXG5pbXBvcnQgKiBhcyBib29sZWFuIGZyb20gJy4vYm9vbGVhbidcbmltcG9ydCAqIGFzIGRhdGV0aW1lIGZyb20gJy4vZGF0ZXRpbWUnXG5pbXBvcnQgKiBhcyByaWNodGV4dCBmcm9tICcuL3JpY2h0ZXh0J1xuaW1wb3J0ICogYXMgcmVmZXJlbmNlIGZyb20gJy4vcmVmZXJlbmNlJ1xuaW1wb3J0ICogYXMgdGV4dGFyZWEgZnJvbSAnLi90ZXh0YXJlYSdcbmltcG9ydCAqIGFzIHBhc3N3b3JkIGZyb20gJy4vcGFzc3dvcmQnXG5pbXBvcnQgeyBCYXNlUHJvcGVydHlDb21wb25lbnRQcm9wcyB9IGZyb20gJy4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxudHlwZSBCYXNlUHJvcGVydHlDb21wb25lbnRUeXBlID0gUmVhY3QuRkM8QmFzZVByb3BlcnR5Q29tcG9uZW50UHJvcHM+ICYge1xuICBEZWZhdWx0VHlwZTogYW55O1xuICBCb29sZWFuOiBhbnk7XG4gIERhdGVUaW1lOiBhbnk7XG4gIFJpY2hUZXh0OiBhbnk7XG4gIFJlZmVyZW5jZTogYW55O1xuICBUZXh0QXJlYTogYW55O1xuICBQYXNzd29yZDogYW55O1xufVxuXG5mdW5jdGlvbiBjYW1lbGl6ZVByb3BlcnR5VHlwZTxUPih0eXBlOiB7W2tleTogc3RyaW5nXTogVH0pOiB7W2tleTogc3RyaW5nXTogVH0ge1xuICByZXR1cm4ge1xuICAgIEVkaXQ6IHR5cGUuZWRpdCxcbiAgICBTaG93OiB0eXBlLnNob3csXG4gICAgTGlzdDogdHlwZS5saXN0LFxuICAgIEZpbHRlcjogdHlwZS5maWx0ZXIsXG4gIH1cbn1cblxuY29uc3QgQmFzZVByb3BlcnR5Q29tcG9uZW50RXh0ZW5kZWQ6IEJhc2VQcm9wZXJ0eUNvbXBvbmVudFR5cGUgPSBPYmplY3QuYXNzaWduKFxuICBCYXNlUHJvcGVydHlDb21wb25lbnQsIHtcbiAgICBEZWZhdWx0VHlwZTogY2FtZWxpemVQcm9wZXJ0eVR5cGUoZGVmYXVsdFR5cGUpLFxuICAgIEJvb2xlYW46IGNhbWVsaXplUHJvcGVydHlUeXBlKGJvb2xlYW4pLFxuICAgIERhdGVUaW1lOiBjYW1lbGl6ZVByb3BlcnR5VHlwZShkYXRldGltZSksXG4gICAgUmljaFRleHQ6IGNhbWVsaXplUHJvcGVydHlUeXBlKHJpY2h0ZXh0KSxcbiAgICBSZWZlcmVuY2U6IGNhbWVsaXplUHJvcGVydHlUeXBlKHJlZmVyZW5jZSksXG4gICAgVGV4dEFyZWE6IGNhbWVsaXplUHJvcGVydHlUeXBlKHRleHRhcmVhKSxcbiAgICBQYXNzd29yZDogY2FtZWxpemVQcm9wZXJ0eVR5cGUocGFzc3dvcmQpLFxuICB9LFxuKVxuXG5cbmV4cG9ydCB7XG4gIEJhc2VQcm9wZXJ0eUNvbXBvbmVudEV4dGVuZGVkIGFzIGRlZmF1bHQsXG4gIEJhc2VQcm9wZXJ0eUNvbXBvbmVudEV4dGVuZGVkIGFzIEJhc2VQcm9wZXJ0eUNvbXBvbmVudCxcbn1cblxuZXhwb3J0ICogZnJvbSAnLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuZXhwb3J0ICogZnJvbSAnLi91dGlscydcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IEJveCwgY3NzQ2xhc3MgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBSZWNvcmRKU09OLCBSZXNvdXJjZUpTT04gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzL3ZpZXctaGVscGVycydcblxuZXhwb3J0IGNvbnN0IEJyZWFkY3J1bWJMaW5rID0gc3R5bGVkKExpbmspYFxuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ncmV5NDB9O1xuICBmb250LWZhbWlseTogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmZvbnR9O1xuICBsaW5lLWhlaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmxpbmVIZWlnaHRzLmRlZmF1bHR9O1xuICBmb250LXNpemU6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5mb250U2l6ZXMuZGVmYXVsdH07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAmOmhvdmVyIHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5MTAwfTtcbiAgfVxuXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcvJztcbiAgICBwYWRkaW5nOiAwICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zcGFjZS5kZWZhdWx0fTtcbiAgfVxuXG4gICY6bGFzdC1jaGlsZCB7XG4gICAgJjphZnRlciB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICB9XG4gIH1cbmBcblxuLyoqXG4gKiBAbWVtYmVyb2YgQnJlYWRjcnVtYnNcbiAqL1xuZXhwb3J0IHR5cGUgQnJlYWRjcnVtYlByb3BzID0ge1xuICAvKipcbiAgICogUmVzb3VyY2VcbiAgICovXG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG4gIC8qKlxuICAgKiByZWNvcmRcbiAgICovXG4gIHJlY29yZD86IFJlY29yZEpTT04gfCBudWxsO1xuICAvKipcbiAgICogTmFtZSBvZiBhbiBhY3Rpb25cbiAgICovXG4gIGFjdGlvbk5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAY29tcG9uZW50XG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYnM6IFJlYWN0LkZDPEJyZWFkY3J1bWJQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgcmVjb3JkLCBhY3Rpb25OYW1lIH0gPSBwcm9wc1xuXG4gIGNvbnN0IGFjdGlvbiA9IHJlc291cmNlLmFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gYWN0aW9uTmFtZSlcbiAgY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGZsZXhHcm93PXsxfSBjbGFzc05hbWU9e2Nzc0NsYXNzKCdCcmVhZGNydW1icycpfT5cbiAgICAgIDxCcmVhZGNydW1iTGluayB0bz17aC5kYXNoYm9hcmRVcmwoKX0+RGFzaGJvYXJkPC9CcmVhZGNydW1iTGluaz5cbiAgICAgIDxCcmVhZGNydW1iTGluayB0bz17cmVzb3VyY2UuaHJlZiA/IHJlc291cmNlLmhyZWYgOiAnLyd9IGNsYXNzTmFtZT17cmVjb3JkID8gJ2lzLWFjdGl2ZScgOiAnJ30+XG4gICAgICAgIHtyZXNvdXJjZS5uYW1lfVxuICAgICAgPC9CcmVhZGNydW1iTGluaz5cbiAgICAgIHsgYWN0aW9uICYmIGFjdGlvbi5uYW1lICE9PSAnbGlzdCcgJiYgPEJyZWFkY3J1bWJMaW5rIHRvPVwiI1wiPnthY3Rpb24ubGFiZWx9PC9CcmVhZGNydW1iTGluaz59XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJlYWRjcnVtYnNcbiIsImltcG9ydCB7IEJ1dHRvbkdyb3VwUHJvcHMsIEJ1dHRvbkluR3JvdXBQcm9wcyB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IGFjdGlvbkhyZWYsIEFjdGlvbkpTT04sIGJ1aWxkQWN0aW9uVGVzdElkIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB7IERpZmZlcmVudEFjdGlvblBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2hvb2tzJ1xuXG5leHBvcnQgdHlwZSBhY3Rpb25zVG9CdXR0b25Hcm91cE9wdGlvbnMgPSB7XG4gIGFjdGlvbnM6IEFycmF5PEFjdGlvbkpTT04+O1xuICBwYXJhbXM6IERpZmZlcmVudEFjdGlvblBhcmFtcztcbiAgaGFuZGxlQ2xpY2s6IEJ1dHRvbkluR3JvdXBQcm9wc1snb25DbGljayddO1xufVxuXG5leHBvcnQgY29uc3QgYWN0aW9uc1RvQnV0dG9uR3JvdXAgPSAoXG4gIG9wdGlvbnM6IGFjdGlvbnNUb0J1dHRvbkdyb3VwT3B0aW9ucyxcbik6IEJ1dHRvbkdyb3VwUHJvcHNbJ2J1dHRvbnMnXSA9PiB7XG4gIGNvbnN0IHsgYWN0aW9ucywgcGFyYW1zLCBoYW5kbGVDbGljayB9ID0gb3B0aW9uc1xuICBjb25zdCBidXR0b25zID0gYWN0aW9ucy5tYXAoKGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IGhyZWYgPSBhY3Rpb25IcmVmKGFjdGlvbiwgcGFyYW1zKVxuICAgIHJldHVybiB7XG4gICAgICBpY29uOiBhY3Rpb24uaWNvbixcbiAgICAgIGxhYmVsOiBhY3Rpb24ubGFiZWwsXG4gICAgICB2YXJpYW50OiBhY3Rpb24udmFyaWFudCxcbiAgICAgIHNvdXJjZTogYWN0aW9uLFxuICAgICAgaHJlZjogaHJlZiB8fCB1bmRlZmluZWQsXG4gICAgICAvLyB3aGVuIGhyZWYgaXMgbm90IGRlZmluZWQgLSBoYW5kbGUgY2xpY2sgc2hvdWxkIGFsc28gYmUgbm90IGRlZmluZWRcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgZnJvbSBcImN1cnNvcjogcG9pbnRlcjtcIlxuICAgICAgb25DbGljazogaHJlZiA/IGhhbmRsZUNsaWNrIDogdW5kZWZpbmVkLFxuICAgICAgJ2RhdGEtdGVzdGlkJzogYnVpbGRBY3Rpb25UZXN0SWQoYWN0aW9uKSxcbiAgICAgIGJ1dHRvbnM6IFtdLFxuICAgIH1cbiAgfSlcblxuICAvLyBuZXN0aW5nIGJ1dHRvbnNcbiAgY29uc3QgYnV0dG9uc01hcCA9IGJ1dHRvbnMucmVkdWNlKChtZW1vLCBidXR0b24pID0+IHtcbiAgICBjb25zdCBhY3Rpb24gPSBidXR0b24uc291cmNlXG4gICAgaWYgKGFjdGlvbi5wYXJlbnQpIHtcbiAgICAgIGNvbnN0IHBhcmVudDogQnV0dG9uSW5Hcm91cFByb3BzID0gbWVtb1thY3Rpb24ucGFyZW50XVxuICAgICAgICB8fCBidXR0b25zLmZpbmQoYnRuID0+IGJ0bi5zb3VyY2UubmFtZSA9PT0gYWN0aW9uLnBhcmVudClcbiAgICAgICAgfHwge1xuICAgICAgICAgIGxhYmVsOiBhY3Rpb24ucGFyZW50LFxuICAgICAgICB9XG5cbiAgICAgIHBhcmVudC5idXR0b25zID0gcGFyZW50LmJ1dHRvbnMgfHwgW11cbiAgICAgIHBhcmVudC5idXR0b25zLnB1c2goYnV0dG9uKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ubWVtbyxcbiAgICAgICAgW2FjdGlvbi5wYXJlbnRdOiBwYXJlbnQsXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5tZW1vLFxuICAgICAgW2J1dHRvbi5zb3VyY2UubmFtZV06IGJ1dHRvbixcbiAgICB9XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIEJ1dHRvbkluR3JvdXBQcm9wcz4pXG4gIHJldHVybiBPYmplY3QudmFsdWVzKGJ1dHRvbnNNYXApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgTGluayBhcyBSb3V0ZXJMaW5rLCB1c2VMb2NhdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQge1xuICBCdXR0b25DU1MsXG4gIEJ1dHRvblByb3BzLFxuICBJY29uLFxufSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMvdmlldy1oZWxwZXJzJ1xuXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoKHsgcm91bmRlZCwgLi4ucmVzdCB9KSA9PiA8Um91dGVyTGluayB7Li4ucmVzdH0gLz4pPEJ1dHRvblByb3BzPmAke0J1dHRvbkNTU31gXG5jb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcblxuZXhwb3J0IHR5cGUgU3R5bGVkQmFja0J1dHRvblByb3BzID0ge1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIHNob3dJbkRyYXdlcjogYm9vbGVhbjtcbn1cblxudHlwZSBMb2NhdGlvblN0YXRlID0ge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByZXZpb3VzUGFnZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IFN0eWxlZEJhY2tCdXR0b246IFJlYWN0LkZDPFN0eWxlZEJhY2tCdXR0b25Qcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZUlkLCBzaG93SW5EcmF3ZXIgfSA9IHByb3BzXG4gIGNvbnN0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKVxuICBjb25zdCBjc3NDbG9zZUljb24gPSBzaG93SW5EcmF3ZXIgPyAnQ2hldnJvblJpZ2h0JyA6ICdDaGV2cm9uTGVmdCdcblxuICBjb25zdCB7IHByZXZpb3VzUGFnZSB9ID0gKGxvY2F0aW9uLnN0YXRlIHx8IHt9KSBhcyBMb2NhdGlvblN0YXRlXG4gIGNvbnN0IHByZXZpb3VzUGFnZVVybCA9IHByZXZpb3VzUGFnZSA/IG5ldyBVUkwocHJldmlvdXNQYWdlKSA6IG51bGxcbiAgY29uc3QgYmFja0J1dHRvblVybCA9IHByZXZpb3VzUGFnZVVybFxuICAgID8gcHJldmlvdXNQYWdlVXJsLnBhdGhuYW1lICsgcHJldmlvdXNQYWdlVXJsLnNlYXJjaFxuICAgIDogaC5yZXNvdXJjZVVybCh7IHJlc291cmNlSWQsIHNlYXJjaDogd2luZG93LmxvY2F0aW9uLnNlYXJjaCB9KVxuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZExpbmtcbiAgICAgIHNpemU9XCJpY29uXCJcbiAgICAgIHRvPXtiYWNrQnV0dG9uVXJsfVxuICAgICAgcm91bmRlZFxuICAgICAgbXI9XCJsZ1wiXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICA+XG4gICAgICA8SWNvbiBpY29uPXtjc3NDbG9zZUljb259IC8+XG4gICAgPC9TdHlsZWRMaW5rPlxuICApXG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hbmNob3ItaXMtdmFsaWQgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEJveCwgQmFkZ2UsIEgzLCBIMiwgQnV0dG9uR3JvdXAsIGNzc0NsYXNzIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5cbmltcG9ydCBCcmVhZGNydW1icyBmcm9tICcuLi9icmVhZGNydW1icydcbmltcG9ydCB7IEFjdGlvbkhlYWRlclByb3BzIH0gZnJvbSAnLi9hY3Rpb24taGVhZGVyLXByb3BzJ1xuaW1wb3J0IHsgYWN0aW9uc1RvQnV0dG9uR3JvdXAgfSBmcm9tICcuL2FjdGlvbnMtdG8tYnV0dG9uLWdyb3VwJ1xuaW1wb3J0IHsgU3R5bGVkQmFja0J1dHRvbiB9IGZyb20gJy4vc3R5bGVkLWJhY2stYnV0dG9uJ1xuXG5pbXBvcnQgeyB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXIsIHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MnXG5pbXBvcnQgeyBBY3Rpb25KU09OLCBidWlsZEFjdGlvbkNsaWNrSGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvYWN0aW9uJ1xuXG4vKipcbiAqIEhlYWRlciBvZiBhbiBhY3Rpb24uIEl0IHJlbmRlcnMgQWN0aW9uIG5hbWUgd2l0aCBidXR0b25zIGZvciBhbGwgdGhlIGFjdGlvbnMuXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyBBY3Rpb25IZWFkZXIgfSBmcm9tICdhZG1pbmpzJ1xuICogYGBgXG4gKlxuICogQGNvbXBvbmVudFxuICogQHN1YmNhdGVnb3J5IEFwcGxpY2F0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBBY3Rpb25IZWFkZXI6IFJlYWN0LkZDPEFjdGlvbkhlYWRlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgcmVzb3VyY2UsIHRvZ2dsZUZpbHRlciwgYWN0aW9uUGVyZm9ybWVkLCByZWNvcmQsIGFjdGlvbiwgdGFnLCBvbWl0QWN0aW9ucyxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgeyB0cmFuc2xhdGVCdXR0b24gfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuICBjb25zdCBhY3Rpb25SZXNwb25zZUhhbmRsZXIgPSB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXIoYWN0aW9uUGVyZm9ybWVkKVxuXG4gIGlmIChhY3Rpb24uaGlkZUFjdGlvbkhlYWRlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCByZXNvdXJjZUlkID0gcmVzb3VyY2UuaWRcbiAgY29uc3QgcGFyYW1zID0geyByZXNvdXJjZUlkLCByZWNvcmRJZDogcmVjb3JkPy5pZCB9XG5cbiAgY29uc3QgaGFuZGxlQWN0aW9uQ2xpY2sgPSAoZXZlbnQsIHNvdXJjZUFjdGlvbjogQWN0aW9uSlNPTik6IHZvaWQgPT4gKFxuICAgIGJ1aWxkQWN0aW9uQ2xpY2tIYW5kbGVyKHtcbiAgICAgIGFjdGlvbjogc291cmNlQWN0aW9uLFxuICAgICAgcGFyYW1zLFxuICAgICAgYWN0aW9uUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgcHVzaDogaGlzdG9yeS5wdXNoLFxuICAgIH0pKGV2ZW50KVxuICApXG5cbiAgY29uc3QgYWN0aW9uQnV0dG9ucyA9IGFjdGlvbnNUb0J1dHRvbkdyb3VwKHtcbiAgICBhY3Rpb25zOiByZWNvcmRcbiAgICAgID8gcmVjb3JkLnJlY29yZEFjdGlvbnMuZmlsdGVyKHJhID0+ICFhY3Rpb24gfHwgYWN0aW9uLm5hbWUgIT09IHJhLm5hbWUpXG4gICAgICAvLyBvbmx5IG5ldyBhY3Rpb24gc2hvdWxkIGJlIHNlZW4gaW4gcmVndWxhciBcIkJpZ1wiIGFjdGlvbnMgcGxhY2VcbiAgICAgIDogcmVzb3VyY2UucmVzb3VyY2VBY3Rpb25zLmZpbHRlcihyYSA9PiByYS5uYW1lID09PSAnbmV3JyAmJiAoIWFjdGlvbiB8fCBhY3Rpb24ubmFtZSAhPT0gcmEubmFtZSkpLFxuICAgIHBhcmFtcyxcbiAgICBoYW5kbGVDbGljazogaGFuZGxlQWN0aW9uQ2xpY2ssXG4gIH0pXG5cbiAgaWYgKHRvZ2dsZUZpbHRlcikge1xuICAgIGFjdGlvbkJ1dHRvbnMucHVzaCh7XG4gICAgICBsYWJlbDogdHJhbnNsYXRlQnV0dG9uKCdmaWx0ZXInLCByZXNvdXJjZS5pZCksXG4gICAgICBvbkNsaWNrOiB0b2dnbGVGaWx0ZXIsXG4gICAgICBpY29uOiAnU2V0dGluZ3NBZGp1c3QnLFxuICAgIH0pXG4gIH1cblxuICAvLyBsaXN0IGFuZCBuZXcgYWN0aW9ucyBhcmUgc3BlY2lhbCBhbmQgYXJlIGFyZSBhbHdheXNcbiAgY29uc3QgY3VzdG9tUmVzb3VyY2VCdXR0b25zID0gYWN0aW9uc1RvQnV0dG9uR3JvdXAoe1xuICAgIGFjdGlvbnM6IHJlc291cmNlLnJlc291cmNlQWN0aW9ucy5maWx0ZXIocmEgPT4gIVsnbGlzdCcsICduZXcnXS5pbmNsdWRlcyhyYS5uYW1lKSksXG4gICAgcGFyYW1zOiB7IHJlc291cmNlSWQgfSxcbiAgICBoYW5kbGVDbGljazogaGFuZGxlQWN0aW9uQ2xpY2ssXG4gIH0pXG5cbiAgY29uc3QgdGl0bGUgPSBhY3Rpb24gPyBhY3Rpb24ubGFiZWwgOiByZXNvdXJjZS5uYW1lXG4gIGNvbnN0IGlzTGlzdCA9IGFjdGlvbiAmJiBhY3Rpb24ubmFtZSA9PT0gJ2xpc3QnXG4gIGNvbnN0IGxpc3RBY3Rpb24gPSByZXNvdXJjZS5yZXNvdXJjZUFjdGlvbnMuZmluZChyYSA9PiByYS5uYW1lID09PSAnbGlzdCcpXG5cbiAgLy8gc3R5bGVkIHdoaWNoIGRpZmZlcnMgaWYgYWN0aW9uIGhlYWRlciBpcyBpbiB0aGUgZHJhd2VyIG9yIG5vdFxuICBjb25zdCBjc3NJc1Jvb3RGbGV4ID0gIWFjdGlvbi5zaG93SW5EcmF3ZXJcbiAgY29uc3QgY3NzSGVhZGVyTVQgPSBhY3Rpb24uc2hvd0luRHJhd2VyID8gJycgOiAnbGcnXG4gIGNvbnN0IGNzc0FjdGlvbnNNQiA9IGFjdGlvbi5zaG93SW5EcmF3ZXIgPyAneGwnIDogJ2RlZmF1bHQnXG4gIGNvbnN0IENzc0hDb21wb25lbnQgPSBhY3Rpb24uc2hvd0luRHJhd2VyID8gSDMgOiBIMlxuXG4gIHJldHVybiAoXG4gICAgPEJveCBjbGFzc05hbWU9e2Nzc0NsYXNzKCdBY3Rpb25IZWFkZXInKX0+XG4gICAgICB7YWN0aW9uLnNob3dJbkRyYXdlciA/ICcnIDogKFxuICAgICAgICA8Qm94IGZsZXggZmxleERpcmVjdGlvbj1cInJvd1wiIHB4PXtbJ2RlZmF1bHQnLCAwXX0+XG4gICAgICAgICAgPEJyZWFkY3J1bWJzIHJlc291cmNlPXtyZXNvdXJjZX0gYWN0aW9uTmFtZT17YWN0aW9uLm5hbWV9IHJlY29yZD17cmVjb3JkfSAvPlxuICAgICAgICAgIDxCb3ggZmxleFNocmluaz17MH0+XG4gICAgICAgICAgICA8QnV0dG9uR3JvdXAgc2l6ZT1cInNtXCIgcm91bmRlZCBidXR0b25zPXtjdXN0b21SZXNvdXJjZUJ1dHRvbnN9IC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQm94PlxuICAgICAgKX1cbiAgICAgIDxCb3ggZGlzcGxheT17WydibG9jaycsIGNzc0lzUm9vdEZsZXggPyAnZmxleCcgOiAnYmxvY2snXX0+XG4gICAgICAgIDxCb3ggbXQ9e2Nzc0hlYWRlck1UfSBmbGV4R3Jvdz17MX0gcHg9e1snZGVmYXVsdCcsIDBdfT5cbiAgICAgICAgICA8Q3NzSENvbXBvbmVudCBtYj1cImxnXCI+XG4gICAgICAgICAgICB7IWlzTGlzdCAmJiBsaXN0QWN0aW9uID8gKFxuICAgICAgICAgICAgICA8U3R5bGVkQmFja0J1dHRvbiByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSBzaG93SW5EcmF3ZXI9e2FjdGlvbi5zaG93SW5EcmF3ZXJ9IC8+XG4gICAgICAgICAgICApIDogJyd9XG4gICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICB7dGFnID8gKDxCYWRnZSB2YXJpYW50PVwicHJpbWFyeVwiIG1sPVwiZGVmYXVsdFwiPnt0YWd9PC9CYWRnZT4pIDogJyd9XG4gICAgICAgICAgPC9Dc3NIQ29tcG9uZW50PlxuICAgICAgICA8L0JveD5cbiAgICAgICAge29taXRBY3Rpb25zID8gJycgOiAoXG4gICAgICAgICAgPEJveCBtdD1cInhsXCIgbWI9e2Nzc0FjdGlvbnNNQn0gZmxleFNocmluaz17MH0+XG4gICAgICAgICAgICA8QnV0dG9uR3JvdXAgYnV0dG9ucz17YWN0aW9uQnV0dG9uc30gLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgKX1cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbkhlYWRlclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICogYXMgRGVzaWduU3lzdGVtIGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgeyBBY3Rpb25Qcm9wcyB9IGZyb20gJy4uL2FjdGlvbi5wcm9wcydcbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCB7IFByb3BlcnR5UGxhY2UgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL3Byb3BlcnR5LWpzb24vcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgeyBQYXJzZWRMYXlvdXRFbGVtZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy9sYXlvdXQtZWxlbWVudC1wYXJzZXInXG5pbXBvcnQgeyBCYXNlUHJvcGVydHlQcm9wcyB9IGZyb20gJy4uLy4uL3Byb3BlcnR5LXR5cGUvYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxudHlwZSBQcm9wcyA9IEFjdGlvblByb3BzICYge1xuICBsYXlvdXRFbGVtZW50OiBQYXJzZWRMYXlvdXRFbGVtZW50O1xuICB3aGVyZTogUHJvcGVydHlQbGFjZTtcbiAgb25DaGFuZ2U/OiBCYXNlUHJvcGVydHlQcm9wc1snb25DaGFuZ2UnXTtcbn1cblxuZXhwb3J0IGNvbnN0IExheW91dEVsZW1lbnRSZW5kZXJlcjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgbGF5b3V0RWxlbWVudCwgcmVzb3VyY2UsIHdoZXJlLCByZWNvcmQsIG9uQ2hhbmdlIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHtcbiAgICBwcm9wczogbGF5b3V0UHJvcHMsXG4gICAgcHJvcGVydGllczogcHJvcGVydHlOYW1lcyxcbiAgICBsYXlvdXRFbGVtZW50czogaW5uZXJMYXlvdXRFbGVtZW50cyxcbiAgICBjb21wb25lbnQsXG4gIH0gPSBsYXlvdXRFbGVtZW50XG5cbiAgY29uc3QgeyBjaGlsZHJlbiwgLi4ub3RoZXIgfSA9IGxheW91dFByb3BzXG5cbiAgY29uc3QgcHJvcGVydGllcyA9IHByb3BlcnR5TmFtZXMubWFwKG5hbWUgPT4gcmVzb3VyY2UucHJvcGVydGllc1tuYW1lXSlcblxuICBjb25zdCBDb21wb25lbnQgPSBEZXNpZ25TeXN0ZW1bY29tcG9uZW50XVxuICBpZiAoIUNvbXBvbmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RGVzaWduU3lzdGVtLk1lc3NhZ2VCb3hcbiAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgbWVzc2FnZT1cIkphdmFzY3JpcHQgRXJyb3JcIlxuICAgICAgICB2YXJpYW50PVwiZGFuZ2VyXCJcbiAgICAgICAgcHk9XCJ4bFwiXG4gICAgICA+XG4gICAgICAgIFRoZXJlIGlzIG5vIGNvbXBvbmVudCBieSB0aGUgbmFtZSBvZlxuICAgICAgICA8RGVzaWduU3lzdGVtLkJhZGdlIHNpemU9XCJzbVwiIHZhcmlhbnQ9XCJkYW5nZXJcIiBteD1cImRlZmF1bHRcIj57Y29tcG9uZW50fTwvRGVzaWduU3lzdGVtLkJhZGdlPlxuICAgICAgICBpbiBAYWRtaW5qcy9kZXNpZ24tc3lzdGVtLiBDaGFuZ2VcbiAgICAgICAgPERlc2lnblN5c3RlbS5CYWRnZSBzaXplPVwic21cIiB2YXJpYW50PVwiZGFuZ2VyXCIgbXg9XCJkZWZhdWx0XCI+e2BAJHtjb21wb25lbnR9YH08L0Rlc2lnblN5c3RlbS5CYWRnZT5cbiAgICAgICAgdG8gYXZhaWxhYmxlIGNvbXBvbmVudCBsaWtlIEBIZWFkZXJcbiAgICAgIDwvRGVzaWduU3lzdGVtLk1lc3NhZ2VCb3g+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q29tcG9uZW50IHsuLi5vdGhlciBhcyBhbnl9PlxuICAgICAge3Byb3BlcnRpZXMubWFwKHByb3BlcnR5ID0+IChcbiAgICAgICAgPERlc2lnblN5c3RlbS5Cb3ggZmxleEdyb3c9ezF9IGtleT17cHJvcGVydHkucHJvcGVydHlQYXRofT5cbiAgICAgICAgICA8UHJvcGVydHlUeXBlXG4gICAgICAgICAgICBrZXk9e3Byb3BlcnR5LnByb3BlcnR5UGF0aH1cbiAgICAgICAgICAgIHdoZXJlPXt3aGVyZX1cbiAgICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRGVzaWduU3lzdGVtLkJveD5cbiAgICAgICkpfVxuICAgICAge2lubmVyTGF5b3V0RWxlbWVudHMubWFwKChpbm5lckxheW91dEVsZW1lbnQsIGkpID0+IChcbiAgICAgICAgPExheW91dEVsZW1lbnRSZW5kZXJlclxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAga2V5PXtpfVxuICAgICAgICAgIGxheW91dEVsZW1lbnQ9e2lubmVyTGF5b3V0RWxlbWVudH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ29tcG9uZW50PlxuICApXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0RWxlbWVudFJlbmRlcmVyXG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCB7IERyYXdlckNvbnRlbnQsIEJveCwgRHJhd2VyRm9vdGVyLCBCdXR0b24sIEljb24gfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgUHJvcGVydHlUeXBlIGZyb20gJy4uL3Byb3BlcnR5LXR5cGUnXG5cbmltcG9ydCB7IEFjdGlvblByb3BzIH0gZnJvbSAnLi9hY3Rpb24ucHJvcHMnXG5pbXBvcnQgQWN0aW9uSGVhZGVyIGZyb20gJy4uL2FwcC9hY3Rpb24taGVhZGVyL2FjdGlvbi1oZWFkZXInXG5pbXBvcnQgeyBSZWNvcmRKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCB1c2VSZWNvcmQgZnJvbSAnLi4vLi4vaG9va3MvdXNlLXJlY29yZC91c2UtcmVjb3JkJ1xuaW1wb3J0IHsgYXBwZW5kRm9yY2VSZWZyZXNoIH0gZnJvbSAnLi91dGlscy9hcHBlbmQtZm9yY2UtcmVmcmVzaCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlLXRyYW5zbGF0aW9uJ1xuaW1wb3J0IExheW91dEVsZW1lbnRSZW5kZXJlciBmcm9tICcuL3V0aWxzL2xheW91dC1lbGVtZW50LXJlbmRlcmVyJ1xuXG5jb25zdCBOZXc6IEZDPEFjdGlvblByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlY29yZDogaW5pdGlhbFJlY29yZCwgcmVzb3VyY2UsIGFjdGlvbiB9ID0gcHJvcHNcbiAgY29uc3Qge1xuICAgIHJlY29yZCxcbiAgICBoYW5kbGVDaGFuZ2UsXG4gICAgc3VibWl0OiBoYW5kbGVTdWJtaXQsXG4gICAgbG9hZGluZyxcbiAgICBzZXRSZWNvcmQsXG4gIH0gPSB1c2VSZWNvcmQoaW5pdGlhbFJlY29yZCwgcmVzb3VyY2UuaWQpXG4gIGNvbnN0IHsgdHJhbnNsYXRlQnV0dG9uIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbml0aWFsUmVjb3JkKSB7XG4gICAgICBzZXRSZWNvcmQoaW5pdGlhbFJlY29yZClcbiAgICB9XG4gIH0sIFtpbml0aWFsUmVjb3JkXSlcblxuICBjb25zdCBzdWJtaXQgPSAoZXZlbnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KTogYm9vbGVhbiA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGhhbmRsZVN1Ym1pdCgpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWRpcmVjdFVybCkge1xuICAgICAgICBoaXN0b3J5LnB1c2goXG4gICAgICAgICAgYXBwZW5kRm9yY2VSZWZyZXNoKHJlc3BvbnNlLmRhdGEucmVkaXJlY3RVcmwpLFxuICAgICAgICAgIHsgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9LFxuICAgICAgICApXG4gICAgICB9XG4gICAgICAvLyBpZiByZWNvcmQgaGFzIGlkID09PSBoYXMgYmVlbiBjcmVhdGVkXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWNvcmQuaWQgJiYgIU9iamVjdC5rZXlzKHJlc3BvbnNlLmRhdGEucmVjb3JkLmVycm9ycykubGVuZ3RoKSB7XG4gICAgICAgIGhhbmRsZUNoYW5nZSh7IHBhcmFtczoge30sIHBvcHVsYXRlZDoge30sIGVycm9yczoge30gfSBhcyBSZWNvcmRKU09OKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIGFzPVwiZm9ybVwiXG4gICAgICBvblN1Ym1pdD17c3VibWl0fVxuICAgICAgZmxleFxuICAgICAgZmxleEdyb3c9ezF9XG4gICAgICBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICA+XG4gICAgICA8RHJhd2VyQ29udGVudD5cbiAgICAgICAge2FjdGlvbj8uc2hvd0luRHJhd2VyID8gPEFjdGlvbkhlYWRlciB7Li4ucHJvcHN9IC8+IDogbnVsbH1cbiAgICAgICAge2FjdGlvbi5sYXlvdXQgPyBhY3Rpb24ubGF5b3V0Lm1hcCgobGF5b3V0RWxlbWVudCwgaSkgPT4gKFxuICAgICAgICAgIDxMYXlvdXRFbGVtZW50UmVuZGVyZXJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIGxheW91dEVsZW1lbnQ9e2xheW91dEVsZW1lbnR9XG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICB3aGVyZT1cImVkaXRcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIHJlY29yZD17cmVjb3JkIGFzIFJlY29yZEpTT059XG4gICAgICAgICAgLz5cbiAgICAgICAgKSkgOiByZXNvdXJjZS5lZGl0UHJvcGVydGllcy5tYXAocHJvcGVydHkgPT4gKFxuICAgICAgICAgIDxQcm9wZXJ0eVR5cGVcbiAgICAgICAgICAgIGtleT17cHJvcGVydHkucHJvcGVydHlQYXRofVxuICAgICAgICAgICAgd2hlcmU9XCJlZGl0XCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICByZWNvcmQ9e3JlY29yZCBhcyBSZWNvcmRKU09OfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9EcmF3ZXJDb250ZW50PlxuICAgICAgPERyYXdlckZvb3Rlcj5cbiAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiIHNpemU9XCJsZ1wiIHR5cGU9XCJzdWJtaXRcIiBkYXRhLXRlc3RpZD1cImJ1dHRvbi1zYXZlXCIgZGlzYWJsZWQ9e2xvYWRpbmd9PlxuICAgICAgICAgIHtsb2FkaW5nID8gKDxJY29uIGljb249XCJGYWRlXCIgc3BpbiAvPikgOiBudWxsfVxuICAgICAgICAgIHt0cmFuc2xhdGVCdXR0b24oJ3NhdmUnLCByZXNvdXJjZS5pZCl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9EcmF3ZXJGb290ZXI+XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuZXhwb3J0IHtcbiAgTmV3IGFzIGRlZmF1bHQsXG4gIE5ldyxcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBGQywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IHsgRHJhd2VyQ29udGVudCwgQm94LCBEcmF3ZXJGb290ZXIsIEJ1dHRvbiwgSWNvbiB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCB7IEFjdGlvblByb3BzIH0gZnJvbSAnLi9hY3Rpb24ucHJvcHMnXG5pbXBvcnQgQWN0aW9uSGVhZGVyIGZyb20gJy4uL2FwcC9hY3Rpb24taGVhZGVyL2FjdGlvbi1oZWFkZXInXG5pbXBvcnQgdXNlUmVjb3JkIGZyb20gJy4uLy4uL2hvb2tzL3VzZS1yZWNvcmQvdXNlLXJlY29yZCdcbmltcG9ydCB7IFJlY29yZEpTT04gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgYXBwZW5kRm9yY2VSZWZyZXNoIH0gZnJvbSAnLi91dGlscy9hcHBlbmQtZm9yY2UtcmVmcmVzaCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlLXRyYW5zbGF0aW9uJ1xuaW1wb3J0IExheW91dEVsZW1lbnRSZW5kZXJlciBmcm9tICcuL3V0aWxzL2xheW91dC1lbGVtZW50LXJlbmRlcmVyJ1xuXG5jb25zdCBFZGl0OiBGQzxBY3Rpb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZWNvcmQ6IGluaXRpYWxSZWNvcmQsIHJlc291cmNlLCBhY3Rpb24gfSA9IHByb3BzXG5cbiAgY29uc3Qge1xuICAgIHJlY29yZCxcbiAgICBoYW5kbGVDaGFuZ2UsXG4gICAgc3VibWl0OiBoYW5kbGVTdWJtaXQsXG4gICAgbG9hZGluZyxcbiAgICBzZXRSZWNvcmQsXG4gIH0gPSB1c2VSZWNvcmQoaW5pdGlhbFJlY29yZCwgcmVzb3VyY2UuaWQpXG4gIGNvbnN0IHsgdHJhbnNsYXRlQnV0dG9uIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbml0aWFsUmVjb3JkKSB7XG4gICAgICBzZXRSZWNvcmQoaW5pdGlhbFJlY29yZClcbiAgICB9XG4gIH0sIFtpbml0aWFsUmVjb3JkXSlcblxuICBjb25zdCBzdWJtaXQgPSAoZXZlbnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KTogYm9vbGVhbiA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGhhbmRsZVN1Ym1pdCgpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWRpcmVjdFVybCkge1xuICAgICAgICBoaXN0b3J5LnB1c2goYXBwZW5kRm9yY2VSZWZyZXNoKHJlc3BvbnNlLmRhdGEucmVkaXJlY3RVcmwpLCB7XG4gICAgICAgICAgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94XG4gICAgICBhcz1cImZvcm1cIlxuICAgICAgb25TdWJtaXQ9e3N1Ym1pdH1cbiAgICAgIGZsZXhcbiAgICAgIGZsZXhHcm93PXsxfVxuICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgPlxuICAgICAgPERyYXdlckNvbnRlbnQ+XG4gICAgICAgIHthY3Rpb24/LnNob3dJbkRyYXdlciA/IDxBY3Rpb25IZWFkZXIgey4uLnByb3BzfSAvPiA6IG51bGx9XG4gICAgICAgIHthY3Rpb24ubGF5b3V0ID8gYWN0aW9uLmxheW91dC5tYXAoKGxheW91dEVsZW1lbnQsIGkpID0+IChcbiAgICAgICAgICA8TGF5b3V0RWxlbWVudFJlbmRlcmVyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICBsYXlvdXRFbGVtZW50PXtsYXlvdXRFbGVtZW50fVxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgd2hlcmU9XCJlZGl0XCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICByZWNvcmQ9e3JlY29yZCBhcyBSZWNvcmRKU09OfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpIDogcmVzb3VyY2UuZWRpdFByb3BlcnRpZXMubWFwKHByb3BlcnR5ID0+IChcbiAgICAgICAgICA8UHJvcGVydHlUeXBlXG4gICAgICAgICAgICBrZXk9e3Byb3BlcnR5LnByb3BlcnR5UGF0aH1cbiAgICAgICAgICAgIHdoZXJlPVwiZWRpdFwiXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmQgYXMgUmVjb3JkSlNPTn1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvRHJhd2VyQ29udGVudD5cbiAgICAgIDxEcmF3ZXJGb290ZXI+XG4gICAgICAgIDxCdXR0b24gdmFyaWFudD1cInByaW1hcnlcIiBzaXplPVwibGdcIiB0eXBlPVwic3VibWl0XCIgZGF0YS10ZXN0aWQ9XCJidXR0b24tc2F2ZVwiIGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICB7bG9hZGluZyA/ICg8SWNvbiBpY29uPVwiRmFkZVwiIHNwaW4gLz4pIDogbnVsbH1cbiAgICAgICAgICB7dHJhbnNsYXRlQnV0dG9uKCdzYXZlJywgcmVzb3VyY2UuaWQpfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvRHJhd2VyRm9vdGVyPlxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCB7XG4gIEVkaXQgYXMgZGVmYXVsdCxcbiAgRWRpdCxcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IERyYXdlckNvbnRlbnQgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgUHJvcGVydHlUeXBlIGZyb20gJy4uL3Byb3BlcnR5LXR5cGUnXG5pbXBvcnQgeyBBY3Rpb25Qcm9wcyB9IGZyb20gJy4vYWN0aW9uLnByb3BzJ1xuaW1wb3J0IEFjdGlvbkhlYWRlciBmcm9tICcuLi9hcHAvYWN0aW9uLWhlYWRlci9hY3Rpb24taGVhZGVyJ1xuaW1wb3J0IExheW91dEVsZW1lbnRSZW5kZXJlciBmcm9tICcuL3V0aWxzL2xheW91dC1lbGVtZW50LXJlbmRlcmVyJ1xuXG4vKipcbiAqIEBuYW1lIFNob3dBY3Rpb25cbiAqIEBjYXRlZ29yeSBBY3Rpb25zXG4gKiBAZGVzY3JpcHRpb24gU2hvd3MgYSBnaXZlbiByZWNvcmQuXG4gKiBAY29tcG9uZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBTaG93OiBSZWFjdC5GQzxBY3Rpb25Qcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgcmVjb3JkLCBhY3Rpb24gfSA9IHByb3BzXG4gIGNvbnN0IHByb3BlcnRpZXMgPSByZXNvdXJjZS5zaG93UHJvcGVydGllc1xuXG4gIHJldHVybiAoXG4gICAgPERyYXdlckNvbnRlbnQ+XG4gICAgICB7YWN0aW9uPy5zaG93SW5EcmF3ZXIgPyA8QWN0aW9uSGVhZGVyIHsuLi5wcm9wc30gLz4gOiBudWxsfVxuICAgICAge2FjdGlvbi5sYXlvdXQgPyBhY3Rpb24ubGF5b3V0Lm1hcCgobGF5b3V0RWxlbWVudCwgaSkgPT4gKFxuICAgICAgICA8TGF5b3V0RWxlbWVudFJlbmRlcmVyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICBsYXlvdXRFbGVtZW50PXtsYXlvdXRFbGVtZW50fVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICB3aGVyZT1cInNob3dcIlxuICAgICAgICAvPlxuICAgICAgKSkgOiBwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiAoXG4gICAgICAgIDxQcm9wZXJ0eVR5cGVcbiAgICAgICAgICBrZXk9e3Byb3BlcnR5LnByb3BlcnR5UGF0aH1cbiAgICAgICAgICB3aGVyZT1cInNob3dcIlxuICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgIC8+XG4gICAgICApKX1cblxuICAgIDwvRHJhd2VyQ29udGVudD5cbiAgKVxufVxuXG5leHBvcnQge1xuICBTaG93IGFzIGRlZmF1bHQsXG4gIFNob3csXG59XG4iLCJleHBvcnQgY29uc3QgZGlzcGxheSA9IChpc1RpdGxlOiBib29sZWFuKTogQXJyYXk8c3RyaW5nPiA9PiBbXG4gIGlzVGl0bGUgPyAndGFibGUtY2VsbCcgOiAnbm9uZScsXG4gIGlzVGl0bGUgPyAndGFibGUtY2VsbCcgOiAnbm9uZScsXG4gICd0YWJsZS1jZWxsJyxcbiAgJ3RhYmxlLWNlbGwnLFxuXVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7XG4gIFBsYWNlaG9sZGVyLCBUYWJsZVJvdywgVGFibGVDZWxsLCBDaGVja0JveCwgQnV0dG9uR3JvdXAsXG59IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCB7IEFjdGlvbkpTT04sIGJ1aWxkQWN0aW9uQ2xpY2tIYW5kbGVyLCBSZWNvcmRKU09OLCBSZXNvdXJjZUpTT04gfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgZGlzcGxheSB9IGZyb20gJy4vdXRpbHMvZGlzcGxheSdcbmltcG9ydCB7IEFjdGlvblJlc3BvbnNlLCBSZWNvcmRBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvYWN0aW9ucy9hY3Rpb24uaW50ZXJmYWNlJ1xuaW1wb3J0IG1lcmdlUmVjb3JkUmVzcG9uc2UgZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLXJlY29yZC9tZXJnZS1yZWNvcmQtcmVzcG9uc2UnXG5pbXBvcnQgeyB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi9ob29rcydcbmltcG9ydCB7IGFjdGlvbnNUb0J1dHRvbkdyb3VwIH0gZnJvbSAnLi4vYWN0aW9uLWhlYWRlci9hY3Rpb25zLXRvLWJ1dHRvbi1ncm91cCdcblxuZXhwb3J0IHR5cGUgUmVjb3JkSW5MaXN0UHJvcHMgPSB7XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG4gIHJlY29yZDogUmVjb3JkSlNPTjtcbiAgYWN0aW9uUGVyZm9ybWVkPzogKGFjdGlvbjogQWN0aW9uUmVzcG9uc2UpID0+IGFueTtcbiAgaXNMb2FkaW5nPzogYm9vbGVhbjtcbiAgb25TZWxlY3Q/OiAocmVjb3JkOiBSZWNvcmRKU09OKSA9PiB2b2lkO1xuICBpc1NlbGVjdGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IFJlY29yZEluTGlzdDogUmVhY3QuRkM8UmVjb3JkSW5MaXN0UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICByZXNvdXJjZSwgcmVjb3JkOiByZWNvcmRGcm9tUHJvcHMsIGFjdGlvblBlcmZvcm1lZCxcbiAgICBpc0xvYWRpbmcsIG9uU2VsZWN0LCBpc1NlbGVjdGVkLFxuICB9ID0gcHJvcHNcbiAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IHVzZVN0YXRlPFJlY29yZEpTT04+KHJlY29yZEZyb21Qcm9wcylcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuXG4gIGNvbnN0IGhhbmRsZUFjdGlvbkNhbGxiYWNrID0gdXNlQ2FsbGJhY2soKGFjdGlvblJlc3BvbnNlOiBBY3Rpb25SZXNwb25zZSkgPT4ge1xuICAgIGlmIChhY3Rpb25SZXNwb25zZS5yZWNvcmQgJiYgIWFjdGlvblJlc3BvbnNlLnJlZGlyZWN0VXJsKSB7XG4gICAgICBzZXRSZWNvcmQobWVyZ2VSZWNvcmRSZXNwb25zZShyZWNvcmQsIGFjdGlvblJlc3BvbnNlIGFzIFJlY29yZEFjdGlvblJlc3BvbnNlKSlcbiAgICB9IGVsc2UgaWYgKGFjdGlvblBlcmZvcm1lZCkge1xuICAgICAgYWN0aW9uUGVyZm9ybWVkKGFjdGlvblJlc3BvbnNlKVxuICAgIH1cbiAgfSwgW2FjdGlvblBlcmZvcm1lZCwgcmVjb3JkXSlcblxuICBjb25zdCBhY3Rpb25SZXNwb25zZUhhbmRsZXIgPSB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXIoaGFuZGxlQWN0aW9uQ2FsbGJhY2spXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRSZWNvcmQocmVjb3JkRnJvbVByb3BzKVxuICB9LCBbcmVjb3JkRnJvbVByb3BzXSlcblxuICBjb25zdCB7IHJlY29yZEFjdGlvbnMgfSA9IHJlY29yZFxuXG4gIGNvbnN0IHNob3cgPSByZWNvcmQucmVjb3JkQWN0aW9ucy5maW5kKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gJ3Nob3cnKVxuICBjb25zdCBlZGl0ID0gcmVjb3JkLnJlY29yZEFjdGlvbnMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUgPT09ICdlZGl0JylcbiAgY29uc3QgYWN0aW9uID0gc2hvdyB8fCBlZGl0XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpOiB2b2lkID0+IHtcbiAgICBjb25zdCB0YXJnZXRUYWdOYW1lID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGFjdGlvblxuICAgICAgJiYgdGFyZ2V0VGFnTmFtZSAhPT0gJ2EnXG4gICAgICAmJiB0YXJnZXRUYWdOYW1lICE9PSAnYnV0dG9uJ1xuICAgICAgJiYgdGFyZ2V0VGFnTmFtZSAhPT0gJ3N2ZydcbiAgICApIHtcbiAgICAgIGJ1aWxkQWN0aW9uQ2xpY2tIYW5kbGVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBwYXJhbXM6IHsgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWQsIHJlY29yZElkOiByZWNvcmQuaWQgfSxcbiAgICAgICAgYWN0aW9uUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgICBwdXNoOiBoaXN0b3J5LnB1c2gsXG4gICAgICB9KShldmVudClcbiAgICB9XG4gIH1cblxuICBjb25zdCBhY3Rpb25QYXJhbXMgPSB7IHJlc291cmNlSWQ6IHJlc291cmNlLmlkLCByZWNvcmRJZDogcmVjb3JkLmlkIH1cblxuICBjb25zdCBoYW5kbGVBY3Rpb25DbGljayA9IChldmVudCwgc291cmNlQWN0aW9uOiBBY3Rpb25KU09OKTogdm9pZCA9PiAoXG4gICAgYnVpbGRBY3Rpb25DbGlja0hhbmRsZXIoe1xuICAgICAgYWN0aW9uOiBzb3VyY2VBY3Rpb24sXG4gICAgICBwYXJhbXM6IGFjdGlvblBhcmFtcyxcbiAgICAgIGFjdGlvblJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHB1c2g6IGhpc3RvcnkucHVzaCxcbiAgICB9KShldmVudClcbiAgKVxuXG4gIGNvbnN0IGJ1dHRvbnMgPSBbe1xuICAgIGljb246ICdPdmVyZmxvd01lbnVIb3Jpem9udGFsJyxcbiAgICB2YXJpYW50OiAnbGlnaHQnIGFzIGNvbnN0LFxuICAgIGxhYmVsOiB1bmRlZmluZWQsXG4gICAgJ2RhdGEtdGVzdGlkJzogJ2FjdGlvbnMtZHJvcGRvd24nLFxuICAgIGJ1dHRvbnM6IGFjdGlvbnNUb0J1dHRvbkdyb3VwKHtcbiAgICAgIGFjdGlvbnM6IHJlY29yZEFjdGlvbnMsXG4gICAgICBwYXJhbXM6IGFjdGlvblBhcmFtcyxcbiAgICAgIGhhbmRsZUNsaWNrOiBoYW5kbGVBY3Rpb25DbGljayxcbiAgICB9KSxcbiAgfV1cblxuXG4gIHJldHVybiAoXG4gICAgPFRhYmxlUm93IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSBkYXRhLWlkPXtyZWNvcmQuaWR9PlxuICAgICAgPFRhYmxlQ2VsbCBjbGFzc05hbWU9e2lzU2VsZWN0ZWQgPyAnc2VsZWN0ZWQnIDogJ25vdC1zZWxlY3RlZCd9PlxuICAgICAgICB7b25TZWxlY3QgJiYgcmVjb3JkLmJ1bGtBY3Rpb25zLmxlbmd0aCA/IChcbiAgICAgICAgICA8Q2hlY2tCb3hcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoKTogdm9pZCA9PiBvblNlbGVjdChyZWNvcmQpfVxuICAgICAgICAgICAgY2hlY2tlZD17aXNTZWxlY3RlZH1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvVGFibGVDZWxsPlxuICAgICAge3Jlc291cmNlLmxpc3RQcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiAoXG4gICAgICAgIDxUYWJsZUNlbGxcbiAgICAgICAgICBzdHlsZT17eyBjdXJzb3I6ICdwb2ludGVyJyB9fVxuICAgICAgICAgIGtleT17cHJvcGVydHkucHJvcGVydHlQYXRofVxuICAgICAgICAgIGRhdGEtcHJvcGVydHktbmFtZT17cHJvcGVydHkucHJvcGVydHlQYXRofVxuICAgICAgICAgIGRpc3BsYXk9e2Rpc3BsYXkocHJvcGVydHkuaXNUaXRsZSl9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICAgICAgPFBsYWNlaG9sZGVyIHN0eWxlPXt7IGhlaWdodDogMTQgfX0gLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFByb3BlcnR5VHlwZVxuICAgICAgICAgICAgICBrZXk9e3Byb3BlcnR5LnByb3BlcnR5UGF0aH1cbiAgICAgICAgICAgICAgd2hlcmU9XCJsaXN0XCJcbiAgICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1RhYmxlQ2VsbD5cbiAgICAgICkpfVxuICAgICAgPFRhYmxlQ2VsbCBrZXk9XCJvcHRpb25zXCI+XG4gICAgICAgIHtyZWNvcmRBY3Rpb25zLmxlbmd0aCA/IChcbiAgICAgICAgICA8QnV0dG9uR3JvdXAgYnV0dG9ucz17YnV0dG9uc30gLz5cbiAgICAgICAgKSA6ICcnfVxuICAgICAgPC9UYWJsZUNlbGw+XG4gICAgPC9UYWJsZVJvdz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWNvcmRJbkxpc3RcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IE5hdkxpbmssIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IHsgSWNvbiwgY3NzQ2xhc3MgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgeyBCYXNlUHJvcGVydHlKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcblxuXG5leHBvcnQgdHlwZSBTb3J0TGlua1Byb3BzID0ge1xuICBwcm9wZXJ0eTogQmFzZVByb3BlcnR5SlNPTjtcbiAgZGlyZWN0aW9uPzogJ2FzYycgfCAnZGVzYyc7XG4gIHNvcnRCeT86IHN0cmluZztcbn1cblxuY2xhc3MgU29ydExpbmsgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFNvcnRMaW5rUHJvcHMgJiBSb3V0ZUNvbXBvbmVudFByb3BzPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRoaXMuaXNBY3RpdmUuYmluZCh0aGlzKVxuICB9XG5cbiAgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBzb3J0QnksIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIHNvcnRCeSA9PT0gcHJvcGVydHkucHJvcGVydHlQYXRoXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCBsb2NhdGlvbiwgZGlyZWN0aW9uIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaClcbiAgICBjb25zdCBvcHBvc2l0ZURpcmVjdGlvbiA9ICh0aGlzLmlzQWN0aXZlKCkgJiYgZGlyZWN0aW9uID09PSAnYXNjJykgPyAnZGVzYycgOiAnYXNjJ1xuICAgIGNvbnN0IHNvcnRlZEJ5SWNvbiA9IGBDYXJldCR7ZGlyZWN0aW9uID09PSAnYXNjJyA/ICdVcCcgOiAnRG93bid9YFxuXG4gICAgcXVlcnkuc2V0KCdkaXJlY3Rpb24nLCBvcHBvc2l0ZURpcmVjdGlvbilcbiAgICBxdWVyeS5zZXQoJ3NvcnRCeScsIHByb3BlcnR5LnByb3BlcnR5UGF0aClcblxuICAgIHJldHVybiAoXG4gICAgICA8TmF2TGluayB0bz17eyBzZWFyY2g6IHF1ZXJ5LnRvU3RyaW5nKCkgfX0gY2xhc3NOYW1lPXtjc3NDbGFzcygnU29ydExpbmsnKX0+XG4gICAgICAgIHtwcm9wZXJ0eS5sYWJlbH1cbiAgICAgICAge3RoaXMuaXNBY3RpdmUoKSA/ICg8SWNvbiBpY29uPXtzb3J0ZWRCeUljb259IGNvbG9yPVwicHJpbWFyeTEwMFwiIG1sPVwiZGVmYXVsdFwiIC8+KSA6ICcnfVxuICAgICAgPC9OYXZMaW5rPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFNvcnRMaW5rKVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVGFibGVDZWxsIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgQmFzZVByb3BlcnR5SlNPTiB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgU29ydExpbmsgZnJvbSAnLi4vc29ydC1saW5rJ1xuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eUhlYWRlclByb3BzID0ge1xuICBwcm9wZXJ0eTogQmFzZVByb3BlcnR5SlNPTjtcbiAgLyoqXG4gICAqIFByb3BlcnR5IHdoaWNoIHNob3VsZCBiZSB0cmVhdGVkIGFzIG1haW4gcHJvcGVydHkuXG4gICAqL1xuICB0aXRsZVByb3BlcnR5OiBCYXNlUHJvcGVydHlKU09OO1xuICAvKipcbiAgICogY3VycmVudGx5IHNlbGVjdGVkIGRpcmVjdGlvbi4gRWl0aGVyICdhc2MnIG9yICdkZXNjJy5cbiAgICovXG4gIGRpcmVjdGlvbj86ICdhc2MnIHwgJ2Rlc2MnO1xuICAvKipcbiAgICogY3VycmVudGx5IHNlbGVjdGVkIGZpZWxkIGJ5IHdoaWNoIGxpc3QgaXMgc29ydGVkLlxuICAgKi9cbiAgc29ydEJ5Pzogc3RyaW5nO1xuXG4gIGRpc3BsYXk/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+O1xufVxuXG5leHBvcnQgY29uc3QgUHJvcGVydHlIZWFkZXI6IFJlYWN0LkZDPFByb3BlcnR5SGVhZGVyUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHRpdGxlUHJvcGVydHksIGRpc3BsYXkgfSA9IHByb3BzXG5cbiAgY29uc3QgaXNNYWluID0gcHJvcGVydHkucHJvcGVydHlQYXRoID09PSB0aXRsZVByb3BlcnR5LnByb3BlcnR5UGF0aFxuXG4gIHJldHVybiAoXG4gICAgPFRhYmxlQ2VsbFxuICAgICAgY2xhc3NOYW1lPXtpc01haW4gPyAnbWFpbicgOiB1bmRlZmluZWR9XG4gICAgICBkaXNwbGF5PXtkaXNwbGF5fVxuICAgID5cbiAgICAgIHtwcm9wZXJ0eS5pc1NvcnRhYmxlID8gPFNvcnRMaW5rIHsuLi5wcm9wc30gLz4gOiBwcm9wZXJ0eS5sYWJlbH1cbiAgICA8L1RhYmxlQ2VsbD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eUhlYWRlclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQ2hlY2tCb3gsIFRhYmxlSGVhZCwgVGFibGVSb3csIFRhYmxlQ2VsbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBQcm9wZXJ0eUhlYWRlciBmcm9tICcuL3Byb3BlcnR5LWhlYWRlcidcbmltcG9ydCB7IEJhc2VQcm9wZXJ0eUpTT04gfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgZGlzcGxheSB9IGZyb20gJy4vdXRpbHMvZGlzcGxheSdcblxuLyoqXG4gKiBAbWVtYmVyb2YgUmVjb3Jkc1RhYmxlSGVhZGVyXG4gKiBAYWxpYXMgUmVjb3Jkc1RhYmxlSGVhZGVyUHJvcHNcbiAqL1xuZXhwb3J0IHR5cGUgUmVjb3Jkc1RhYmxlSGVhZGVyUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIFRpdGxlIFByb3BlcnR5XG4gICAqL1xuICB0aXRsZVByb3BlcnR5OiBCYXNlUHJvcGVydHlKU09OO1xuICAvKipcbiAgICogQWxsIHByb3BlcnRpZXMgd2hpY2ggc2hvdWxkIGJlIHByZXNlbnRlZFxuICAgKi9cbiAgcHJvcGVydGllczogQXJyYXk8QmFzZVByb3BlcnR5SlNPTj47XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgbWFya2VkIGFzIGN1cnJlbnRseSBzb3J0ZWQgYnlcbiAgICovXG4gIHNvcnRCeT86IHN0cmluZztcbiAgLyoqXG4gICAqIFNvcnQgZGlyZWN0aW9uXG4gICAqL1xuICBkaXJlY3Rpb24/OiAnYXNjJyB8ICdkZXNjJztcbiAgLyoqXG4gICAqIEhhbmRsZXIgZnVuY3Rpb24gaW52b2tlZCB3aGVuIGNoZWNrYm94IGlzIGNsaWNrZWQuIElmIGdpdmVuIGV4dHJhIGNvbHVtblxuICAgKiB3aXRoIGNoZWNrYm94IHdpbGwgYmUgcmVuZGVyZWRcbiAgICovXG4gIG9uU2VsZWN0QWxsPzogKCkgPT4gYW55O1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIFwiYnVsa1wiIGNoZWNrYm94IHNob3VsZCBiZSBjaGVja2VkXG4gICAqL1xuICBzZWxlY3RlZEFsbD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogUHJpbnRzIGB0aGVhZGAgc2VjdGlvbiBmb3IgdGFibGUgd2l0aCByZWNvcmRzLlxuICpcbiAqIGBgYFxuICogaW1wb3J0IHsgUmVjb3Jkc1RhYmxlSGVhZGVyIH0gZnJvbSAnYWRtaW5qcydcbiAqIGBgYFxuICpcbiAqIEBjb21wb25lbnRcbiAqIEBzdWJjYXRlZ29yeSBBcHBsaWNhdGlvblxuICogQGV4YW1wbGUgPGNhcHRpb24+TGlzdCB3aXRoIDIgcHJvcGVydGllczwvY2FwdGlvbj5cbiAqIGNvbnN0IHByb3BlcnRpZXMgPSBbe1xuICogICBsYWJlbDogJ0ZpcnN0IE5hbWUnLFxuICogICBuYW1lOiAnZmlyc3ROYW1lJyxcbiAqICAgaXNTb3J0YWJsZTogdHJ1ZSxcbiAqIH0sIHtcbiAqICAgbGFiZWw6ICdMYXN0IE5hbWUnLFxuICogICBuYW1lOiAnbGFzdE5hbWUnLFxuICogfV1cbiAqIHJldHVybiAoXG4gKiA8Qm94IHB5PVwieGxcIj5cbiAqICAgPFRhYmxlPlxuICogICAgPFJlY29yZHNUYWJsZUhlYWRlclxuICogICAgICBwcm9wZXJ0aWVzPXtwcm9wZXJ0aWVzfVxuICogICAgICB0aXRsZVByb3BlcnR5PXtwcm9wZXJ0aWVzWzBdfVxuICogICAgICBzb3J0Qnk9eydmaXJzdE5hbWUnfVxuICogICAgICBkaXJlY3Rpb249eydhc2MnfVxuICogICAgLz5cbiAqICAgIDxUYWJsZUJvZHk+XG4gKiAgICAgIDxUYWJsZVJvdz5cbiAqICAgICAgICA8VGFibGVDZWxsPkpvaG48L1RhYmxlQ2VsbD5cbiAqICAgICAgICA8VGFibGVDZWxsPkRvZTwvVGFibGVDZWxsPlxuICogICAgICAgIDxUYWJsZUNlbGw+PC9UYWJsZUNlbGw+XG4gKiAgICAgIDwvVGFibGVSb3c+XG4gKiAgICAgIDxUYWJsZVJvdz5cbiAqICAgICAgICA8VGFibGVDZWxsPk1heDwvVGFibGVDZWxsPlxuICogICAgICAgIDxUYWJsZUNlbGw+S29kYWx5PC9UYWJsZUNlbGw+XG4gKiAgICAgICAgPFRhYmxlQ2VsbD48L1RhYmxlQ2VsbD5cbiAqICAgICAgPC9UYWJsZVJvdz5cbiAqICAgIDwvVGFibGVCb2R5PlxuICogICA8L1RhYmxlPlxuICogPC9Cb3g+XG4gKiApXG4gKi9cbmV4cG9ydCBjb25zdCBSZWNvcmRzVGFibGVIZWFkZXI6IFJlYWN0LkZDPFJlY29yZHNUYWJsZUhlYWRlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgdGl0bGVQcm9wZXJ0eSwgcHJvcGVydGllcyxcbiAgICBzb3J0QnksIGRpcmVjdGlvbixcbiAgICBvblNlbGVjdEFsbCwgc2VsZWN0ZWRBbGwgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFRhYmxlSGVhZD5cbiAgICAgIDxUYWJsZVJvdz5cbiAgICAgICAgPFRhYmxlQ2VsbD5cbiAgICAgICAgICB7b25TZWxlY3RBbGwgPyAoXG4gICAgICAgICAgICA8Q2hlY2tCb3hcbiAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luTGVmdDogNSB9fVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KCk6IHZvaWQgPT4gb25TZWxlY3RBbGwoKX1cbiAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWRBbGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1RhYmxlQ2VsbD5cbiAgICAgICAge3Byb3BlcnRpZXMubWFwKHByb3BlcnR5ID0+IChcbiAgICAgICAgICA8UHJvcGVydHlIZWFkZXJcbiAgICAgICAgICAgIGRpc3BsYXk9e2Rpc3BsYXkocHJvcGVydHkuaXNUaXRsZSl9XG4gICAgICAgICAgICBrZXk9e3Byb3BlcnR5LnByb3BlcnR5UGF0aH1cbiAgICAgICAgICAgIHRpdGxlUHJvcGVydHk9e3RpdGxlUHJvcGVydHl9XG4gICAgICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgICAgICBzb3J0Qnk9e3NvcnRCeX1cbiAgICAgICAgICAgIGRpcmVjdGlvbj17ZGlyZWN0aW9ufVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICA8VGFibGVDZWxsIGtleT1cImFjdGlvbnNcIiBzdHlsZT17eyB3aWR0aDogODAgfX0gLz5cbiAgICAgIDwvVGFibGVSb3c+XG4gICAgPC9UYWJsZUhlYWQ+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjb3Jkc1RhYmxlSGVhZGVyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tYWxlcnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvYWN0aW9ucy9hY3Rpb24uaW50ZXJmYWNlJ1xuXG5pbXBvcnQgeyBBY3Rpb25KU09OLCBidWlsZEFjdGlvblRlc3RJZCB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyB1c2VBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9ob29rcydcblxuXG4vKipcbiAqIEBhbGlhcyBBY3Rpb25CdXR0b25Qcm9wc1xuICogQG1lbWJlcm9mIEFjdGlvbkJ1dHRvblxuICovXG5leHBvcnQgdHlwZSBBY3Rpb25CdXR0b25Qcm9wcyA9IHtcbiAgLyoqIEFjdGlvbiB0byB3aGljaCBidXR0b24gc2hvdWxkIHJlZGlyZWN0ICovXG4gIGFjdGlvbjogQWN0aW9uSlNPTjtcbiAgLyoqIElkIG9mIGEgcmVzb3VyY2Ugb2YgYW4gYWN0aW9uICovXG4gIHJlc291cmNlSWQ6IHN0cmluZztcbiAgLyoqIE9wdGlvbmFsIHJlY29yZElkIGZvciBfcmVjb3JkXyBhY3Rpb24gKi9cbiAgcmVjb3JkSWQ/OiBzdHJpbmc7XG4gIC8qKiBPcHRpb25hbCByZWNvcmRJZHMgZm9yIF9idWxrXyBhY3Rpb24gKi9cbiAgcmVjb3JkSWRzPzogQXJyYXk8c3RyaW5nPjtcbiAgLyoqIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgdHJpZ2dlcmVkIHdoZW4gYWN0aW9uIGlzIHBlcmZvcm1lZCAqL1xuICBhY3Rpb25QZXJmb3JtZWQ/OiAoYWN0aW9uOiBBY3Rpb25SZXNwb25zZSkgPT4gYW55O1xufVxuXG4vKipcbiAqIFJlbmRlcnMgQnV0dG9uIHdoaWNoIHJlZGlyZWN0cyB0byBnaXZlbiBhY3Rpb25cbiAqXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7IEFjdGlvbkJ1dHRvbiB9IGZyb20gJ2FkbWluanMnXG4gKiBgYGBcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAc3ViY2F0ZWdvcnkgQXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IEFjdGlvbkJ1dHRvbjogUmVhY3QuRkM8QWN0aW9uQnV0dG9uUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGFjdGlvbiwgYWN0aW9uUGVyZm9ybWVkLCByZXNvdXJjZUlkLCByZWNvcmRJZCwgcmVjb3JkSWRzIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHsgaHJlZiwgaGFuZGxlQ2xpY2sgfSA9IHVzZUFjdGlvbihhY3Rpb24sIHtcbiAgICByZXNvdXJjZUlkLCByZWNvcmRJZCwgcmVjb3JkSWRzLFxuICB9LCBhY3Rpb25QZXJmb3JtZWQpXG5cbiAgaWYgKCFhY3Rpb24pIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgZmlyc3RDaGlsZCA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pWzBdXG5cbiAgaWYgKCFmaXJzdENoaWxkXG4gICAgfHwgdHlwZW9mIGZpcnN0Q2hpbGQgPT09ICdzdHJpbmcnXG4gICAgfHwgdHlwZW9mIGZpcnN0Q2hpbGQgPT09ICdudW1iZXInXG4gICAgfHwgdHlwZW9mIGZpcnN0Q2hpbGQgPT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9uQnV0dG9uIGhhcyB0byBoYXZlIG9uZSBjaGlsZCcpXG4gIH1cblxuICBjb25zdCBXcmFwcGVkRWxlbWVudCA9IFJlYWN0LmNsb25lRWxlbWVudChmaXJzdENoaWxkIGFzIFJlYWN0RWxlbWVudDxhbnk+LCB7XG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgJ2RhdGEtdGVzdGlkJzogYnVpbGRBY3Rpb25UZXN0SWQoYWN0aW9uKSxcbiAgICBocmVmLFxuICB9KVxuXG5cbiAgcmV0dXJuIFdyYXBwZWRFbGVtZW50XG59XG5cbi8vIFRPRE8gLSByZW1vdmUgdGhpcyBoYWNrXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25CdXR0b25cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFRleHQsIEJ1dHRvbiwgSWNvbiwgSW5mb0JveCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uL2hvb2tzJ1xuaW1wb3J0IGFsbG93T3ZlcnJpZGUgZnJvbSAnLi4vLi4vLi4vaG9jL2FsbG93LW92ZXJyaWRlJ1xuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi9hY3Rpb24tYnV0dG9uL2FjdGlvbi1idXR0b24nXG5cbmV4cG9ydCB0eXBlIE5vUmVjb3Jkc1Byb3BzID0ge1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xufVxuXG5jb25zdCBOb1JlY29yZHNPcmlnaW5hbDogUmVhY3QuRkM8Tm9SZWNvcmRzUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2UgfSA9IHByb3BzXG4gIGNvbnN0IHsgdHJhbnNsYXRlQnV0dG9uLCB0cmFuc2xhdGVNZXNzYWdlIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgY29uc3QgY2FuQ3JlYXRlID0gcmVzb3VyY2UucmVzb3VyY2VBY3Rpb25zLmZpbmQoYSA9PiBhLm5hbWUgPT09ICduZXcnKVxuXG4gIHJldHVybiAoXG4gICAgPEluZm9Cb3ggdGl0bGU9e3RyYW5zbGF0ZU1lc3NhZ2UoJ25vUmVjb3JkcycsIHJlc291cmNlLmlkKX0+XG4gICAgICA8VGV4dCBtYj1cInh4bFwiPlxuICAgICAgICB7dHJhbnNsYXRlTWVzc2FnZSgnbm9SZWNvcmRzSW5SZXNvdXJjZScsIHJlc291cmNlLmlkKX1cbiAgICAgIDwvVGV4dD5cbiAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgIDxBY3Rpb25CdXR0b24gYWN0aW9uPXtjYW5DcmVhdGV9IHJlc291cmNlSWQ9e3Jlc291cmNlLmlkfT5cbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJwcmltYXJ5XCI+XG4gICAgICAgICAgICA8SWNvbiBpY29uPVwiQWRkXCIgLz5cbiAgICAgICAgICAgIHt0cmFuc2xhdGVCdXR0b24oJ2NyZWF0ZUZpcnN0UmVjb3JkJywgcmVzb3VyY2UuaWQpfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICkgOiAnJ31cbiAgICA8L0luZm9Cb3g+XG4gIClcbn1cblxuLy8gVGhpcyBoYWNrIHByZXZlbnRzIHJvbGx1cCBmcm9tIHRocm93aW5nIGFuIGVycm9yXG5jb25zdCBOb1JlY29yZHMgPSBhbGxvd092ZXJyaWRlKE5vUmVjb3Jkc09yaWdpbmFsLCAnTm9SZWNvcmRzJylcblxuZXhwb3J0IHsgTm9SZWNvcmRzIH1cbmV4cG9ydCBkZWZhdWx0IE5vUmVjb3Jkc1xuIiwiaW1wb3J0IHsgQWN0aW9uSlNPTiwgUmVjb3JkSlNPTiB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMnXG5cbmNvbnN0IGdldEJ1bGtBY3Rpb25zRnJvbVJlY29yZHMgPSAocmVjb3JkczogQXJyYXk8UmVjb3JkSlNPTj4pOiBBcnJheTxBY3Rpb25KU09OPiA9PiB7XG4gIGNvbnN0IGFjdGlvbnMgPSBPYmplY3QudmFsdWVzKHJlY29yZHMucmVkdWNlKChtZW1vLCByZWNvcmQpID0+ICh7XG4gICAgLi4ubWVtbyxcbiAgICAuLi5yZWNvcmQuYnVsa0FjdGlvbnMucmVkdWNlKChhY3Rpb25zTWVtbywgYWN0aW9uKSA9PiAoe1xuICAgICAgLi4uYWN0aW9uc01lbW8sXG4gICAgICBbYWN0aW9uLm5hbWVdOiBhY3Rpb24sXG4gICAgfSksIHt9IGFzIFJlY29yZDxzdHJpbmcsIEFjdGlvbkpTT04+KSxcbiAgfSksIHt9IGFzIFJlY29yZDxzdHJpbmcsIEFjdGlvbkpTT04+KSlcbiAgcmV0dXJuIGFjdGlvbnNcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QnVsa0FjdGlvbnNGcm9tUmVjb3Jkc1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVGFibGVDYXB0aW9uLCBUaXRsZSwgQnV0dG9uR3JvdXAsIEJveCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgeyBBY3Rpb25KU09OLCBidWlsZEFjdGlvbkNsaWNrSGFuZGxlciwgUmVjb3JkSlNPTiwgUmVzb3VyY2VKU09OIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCBnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzIGZyb20gJy4vdXRpbHMvZ2V0LWJ1bGstYWN0aW9ucy1mcm9tLXJlY29yZHMnXG5pbXBvcnQgeyB1c2VBY3Rpb25SZXNwb25zZUhhbmRsZXIsIHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MnXG5pbXBvcnQgeyBhY3Rpb25zVG9CdXR0b25Hcm91cCB9IGZyb20gJy4uL2FjdGlvbi1oZWFkZXIvYWN0aW9ucy10by1idXR0b24tZ3JvdXAnXG5cbnR5cGUgU2VsZWN0ZWRSZWNvcmRzUHJvcHMgPSB7XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG4gIHNlbGVjdGVkUmVjb3Jkcz86IEFycmF5PFJlY29yZEpTT04+O1xufVxuXG5leHBvcnQgY29uc3QgU2VsZWN0ZWRSZWNvcmRzOiBSZWFjdC5GQzxTZWxlY3RlZFJlY29yZHNQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgc2VsZWN0ZWRSZWNvcmRzIH0gPSBwcm9wc1xuICBjb25zdCB7IHRyYW5zbGF0ZUxhYmVsIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcbiAgY29uc3QgYWN0aW9uUmVzcG9uc2VIYW5kbGVyID0gdXNlQWN0aW9uUmVzcG9uc2VIYW5kbGVyKClcblxuICBpZiAoIXNlbGVjdGVkUmVjb3JkcyB8fCAhc2VsZWN0ZWRSZWNvcmRzLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSB7IHJlc291cmNlSWQ6IHJlc291cmNlLmlkLCByZWNvcmRJZHM6IHNlbGVjdGVkUmVjb3Jkcy5tYXAocmVjb3JkcyA9PiByZWNvcmRzLmlkKSB9XG5cbiAgY29uc3QgaGFuZGxlQWN0aW9uQ2xpY2sgPSAoZXZlbnQsIHNvdXJjZUFjdGlvbjogQWN0aW9uSlNPTik6IHZvaWQgPT4gKFxuICAgIGJ1aWxkQWN0aW9uQ2xpY2tIYW5kbGVyKHtcbiAgICAgIGFjdGlvbjogc291cmNlQWN0aW9uLFxuICAgICAgcGFyYW1zLFxuICAgICAgYWN0aW9uUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgcHVzaDogaGlzdG9yeS5wdXNoLFxuICAgIH0pKGV2ZW50KVxuICApXG5cbiAgY29uc3QgYnVsa0J1dHRvbnMgPSBhY3Rpb25zVG9CdXR0b25Hcm91cCh7XG4gICAgYWN0aW9uczogZ2V0QnVsa0FjdGlvbnNGcm9tUmVjb3JkcyhzZWxlY3RlZFJlY29yZHMpLFxuICAgIHBhcmFtcyxcbiAgICBoYW5kbGVDbGljazogaGFuZGxlQWN0aW9uQ2xpY2ssXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8VGFibGVDYXB0aW9uPlxuICAgICAgPEJveCBmbGV4IHB5PVwic21cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIDxUaXRsZSBtcj1cImxnXCI+XG4gICAgICAgICAge3RyYW5zbGF0ZUxhYmVsKCdzZWxlY3RlZFJlY29yZHMnLCByZXNvdXJjZS5pZCwgeyBzZWxlY3RlZDogc2VsZWN0ZWRSZWNvcmRzLmxlbmd0aCB9KX1cbiAgICAgICAgPC9UaXRsZT5cbiAgICAgICAgPEJ1dHRvbkdyb3VwIHNpemU9XCJzbVwiIHJvdW5kZWQgYnV0dG9ucz17YnVsa0J1dHRvbnN9IC8+XG4gICAgICA8L0JveD5cbiAgICA8L1RhYmxlQ2FwdGlvbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RlZFJlY29yZHNcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFRhYmxlLCBUYWJsZUJvZHksIExvYWRlciB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBSZWNvcmRJbkxpc3QgZnJvbSAnLi9yZWNvcmQtaW4tbGlzdCdcbmltcG9ydCBSZWNvcmRzVGFibGVIZWFkZXIgZnJvbSAnLi9yZWNvcmRzLXRhYmxlLWhlYWRlcidcbmltcG9ydCBOb1JlY29yZHMgZnJvbSAnLi9uby1yZWNvcmRzJ1xuXG5cbmltcG9ydCB7IFJlY29yZEpTT04sIFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgU2VsZWN0ZWRSZWNvcmRzIGZyb20gJy4vc2VsZWN0ZWQtcmVjb3JkcydcbmltcG9ydCB7IEFjdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9hY3Rpb25zL2FjdGlvbi5pbnRlcmZhY2UnXG5cbi8qKlxuICogQGFsaWFzIFJlY29yZHNUYWJsZVByb3BzXG4gKiBAbWVtYmVyb2YgUmVjb3Jkc1RhYmxlXG4gKi9cbmV4cG9ydCB0eXBlIFJlY29yZHNUYWJsZVByb3BzID0ge1xuICAvKipcbiAgICogUmVzb3VyY2Ugd2hpY2ggdHlwZSByZWNvcmRzIGFyZSByZW5kZXJlZC4gQmFzZSBvbiB0aGF0IHdlIGRlZmluZSB3aGljaCBjb2x1bW5zIHNob3VsZCBiZSBzZWVuLlxuICAgKi9cbiAgcmVzb3VyY2U6IFJlc291cmNlSlNPTjtcbiAgLyoqXG4gICAqIEFycmF5IG9mIHJlY29yZHMgc2VlbiBpbiB0aGUgdGFibGVcbiAgICovXG4gIHJlY29yZHM6IEFycmF5PFJlY29yZEpTT04+O1xuICAvKipcbiAgICogSGFuZGxlciBmdW5jdGlvbiBpbnZva2VkIHdoZW4gc29tZW9uZSBwZXJmb3JtcyBhY3Rpb24gd2l0aG91dCBjb21wb25lbnQgb24gYSBnaXZlbiByZWNvcmQuXG4gICAqIEFjdGlvbiB3aXRob3V0IGNvbXBvbmVudCBpcyBhIGBkZWxldGVgIGFjdGlvbiAtIHlvdSBtaWdodCB3YW50IHRvIHJlZnJlc2ggdGhlIGxpc3QgYWZ0ZXIgdGhhdFxuICAgKi9cbiAgYWN0aW9uUGVyZm9ybWVkPzogKHJlc3BvbnNlOiBBY3Rpb25SZXNwb25zZSkgPT4gYW55O1xuICAvKiogZGVmYXVsdCBzb3J0IGJ5IGNvbHVtbiAqL1xuICBzb3J0Qnk/OiBzdHJpbmc7XG4gIC8qKiBzb3J0IGRpcmVjdGlvbiAqL1xuICBkaXJlY3Rpb24/OiAnYXNjJyB8ICdkZXNjJztcbiAgLyoqIGluZGljYXRlcyBpZiB0aGUgdGFibGUgc2hvdWxkIGJlIGluIGxvYWRpbmcgc3RhdGUgKi9cbiAgaXNMb2FkaW5nPzogYm9vbGVhbjtcbiAgLyoqIGxpc3Qgb2Ygc2VsZWN0ZWQgcmVjb3JkcyAqL1xuICBzZWxlY3RlZFJlY29yZHM/OiBBcnJheTxSZWNvcmRKU09OPjtcbiAgLyoqIGhhbmRsZXIgZnVuY3Rpb24gdHJpZ2dlcmVkIHdoZW4gcmVjb3JkIGlzIHNlbGVjdGVkICovXG4gIG9uU2VsZWN0PzogKHJlY29yZDogUmVjb3JkSlNPTikgPT4gYW55O1xuICAvKiogaGFuZGxlciBmdW5jdGlvbiB0cmlnZ2VyZWQgd2hlbiBhbGwgaXRlbXMgYXJlIHNlbGVjdGVkICovXG4gIG9uU2VsZWN0QWxsPzogKCkgPT4gYW55O1xufVxuXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIFJlbmRlcnMgYW4gZW50aXJlIHJlY29yZHMgdGFibGUuIFRvIGZpbGwgdGhlIGRhdGEgeW91IG1pZ2h0IG5lZWQ6XG4gKlxuICogLSB7QGxpbmsgdXNlUmVjb3Jkc30gYW5kXG4gKiAtIHtAbGluayB1c2VTZWxlY3RlZFJlY29yZHN9IGhvb2tzXG4gKlxuICogc28gbWFrZSBzdXJlIHRvIHNlZSBhdCB0aGUgZG9jdW1lbnRhdGlvbiBwYWdlcyBmb3IgYm90aCBvZiB0aGVtXG4gKlxuICogQGNvbXBvbmVudFxuICogQGNsYXNzXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKiBAc3ViY2F0ZWdvcnkgQXBwbGljYXRpb25cbiAqIEBuZXcgaW4gdmVyc2lvbiAzLjNcbiAqL1xuZXhwb3J0IGNvbnN0IFJlY29yZHNUYWJsZTogUmVhY3QuRkM8UmVjb3Jkc1RhYmxlUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICByZXNvdXJjZSwgcmVjb3JkcyxcbiAgICBhY3Rpb25QZXJmb3JtZWQsIHNvcnRCeSxcbiAgICBkaXJlY3Rpb24sIGlzTG9hZGluZyxcbiAgICBvblNlbGVjdCwgc2VsZWN0ZWRSZWNvcmRzLFxuICAgIG9uU2VsZWN0QWxsLFxuICB9ID0gcHJvcHNcbiAgaWYgKCFyZWNvcmRzLmxlbmd0aCkge1xuICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybiAoPExvYWRlciAvPilcbiAgICB9XG4gICAgcmV0dXJuICg8Tm9SZWNvcmRzIHJlc291cmNlPXtyZXNvdXJjZX0gLz4pXG4gIH1cblxuICBjb25zdCBzZWxlY3RlZEFsbCA9IHNlbGVjdGVkUmVjb3JkcyAmJiAhIXJlY29yZHMuZmluZChyZWNvcmQgPT4gKFxuICAgIHNlbGVjdGVkUmVjb3Jkcy5maW5kKHNlbGVjdGVkID0+IHNlbGVjdGVkLmlkID09PSByZWNvcmQuaWQpXG4gICkpXG5cbiAgY29uc3QgcmVjb3Jkc0hhdmVCdWxrQWN0aW9uID0gISFyZWNvcmRzLmZpbmQocmVjb3JkID0+IHJlY29yZC5idWxrQWN0aW9ucy5sZW5ndGgpXG5cbiAgcmV0dXJuIChcbiAgICA8VGFibGU+XG4gICAgICA8U2VsZWN0ZWRSZWNvcmRzXG4gICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgc2VsZWN0ZWRSZWNvcmRzPXtzZWxlY3RlZFJlY29yZHN9XG4gICAgICAvPlxuICAgICAgPFJlY29yZHNUYWJsZUhlYWRlclxuICAgICAgICBwcm9wZXJ0aWVzPXtyZXNvdXJjZS5saXN0UHJvcGVydGllc31cbiAgICAgICAgdGl0bGVQcm9wZXJ0eT17cmVzb3VyY2UudGl0bGVQcm9wZXJ0eX1cbiAgICAgICAgZGlyZWN0aW9uPXtkaXJlY3Rpb259XG4gICAgICAgIHNvcnRCeT17c29ydEJ5fVxuICAgICAgICBvblNlbGVjdEFsbD17cmVjb3Jkc0hhdmVCdWxrQWN0aW9uID8gb25TZWxlY3RBbGwgOiB1bmRlZmluZWR9XG4gICAgICAgIHNlbGVjdGVkQWxsPXtzZWxlY3RlZEFsbH1cbiAgICAgIC8+XG4gICAgICA8VGFibGVCb2R5PlxuICAgICAgICB7cmVjb3Jkcy5tYXAocmVjb3JkID0+IChcbiAgICAgICAgICA8UmVjb3JkSW5MaXN0XG4gICAgICAgICAgICByZWNvcmQ9e3JlY29yZH1cbiAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgIGtleT17cmVjb3JkLmlkfVxuICAgICAgICAgICAgYWN0aW9uUGVyZm9ybWVkPXthY3Rpb25QZXJmb3JtZWR9XG4gICAgICAgICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgICAgIG9uU2VsZWN0PXtvblNlbGVjdH1cbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e1xuICAgICAgICAgICAgICBzZWxlY3RlZFJlY29yZHMgJiYgISFzZWxlY3RlZFJlY29yZHMuZmluZChzZWxlY3RlZCA9PiBzZWxlY3RlZC5pZCA9PT0gcmVjb3JkLmlkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9UYWJsZUJvZHk+XG4gICAgPC9UYWJsZT5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWNvcmRzVGFibGVcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEJveCwgUGFnaW5hdGlvbiwgVGV4dCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgeyB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlcidcblxuaW1wb3J0IFJlY29yZHNUYWJsZSBmcm9tICcuLi9hcHAvcmVjb3Jkcy10YWJsZS9yZWNvcmRzLXRhYmxlJ1xuaW1wb3J0IHsgQWN0aW9uUHJvcHMgfSBmcm9tICcuL2FjdGlvbi5wcm9wcydcbmltcG9ydCB1c2VSZWNvcmRzIGZyb20gJy4uLy4uL2hvb2tzL3VzZS1yZWNvcmRzL3VzZS1yZWNvcmRzJ1xuaW1wb3J0IHVzZVNlbGVjdGVkUmVjb3JkcyBmcm9tICcuLi8uLi9ob29rcy91c2Utc2VsZWN0ZWQtcmVjb3Jkcy91c2Utc2VsZWN0ZWQtcmVjb3JkcydcbmltcG9ydCB7IFJFRlJFU0hfS0VZIH0gZnJvbSAnLi91dGlscy9hcHBlbmQtZm9yY2UtcmVmcmVzaCdcblxuY29uc3QgTGlzdDogUmVhY3QuRkM8QWN0aW9uUHJvcHM+ID0gKHsgcmVzb3VyY2UsIHNldFRhZyB9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICByZWNvcmRzLFxuICAgIGxvYWRpbmcsXG4gICAgZGlyZWN0aW9uLFxuICAgIHNvcnRCeSxcbiAgICBwYWdlLFxuICAgIHRvdGFsLFxuICAgIGZldGNoRGF0YSxcbiAgICBwZXJQYWdlLFxuICB9ID0gdXNlUmVjb3JkcyhyZXNvdXJjZS5pZClcbiAgY29uc3Qge1xuICAgIHNlbGVjdGVkUmVjb3JkcyxcbiAgICBoYW5kbGVTZWxlY3QsXG4gICAgaGFuZGxlU2VsZWN0QWxsLFxuICAgIHNldFNlbGVjdGVkUmVjb3JkcyxcbiAgfSA9IHVzZVNlbGVjdGVkUmVjb3JkcyhyZWNvcmRzKVxuICBjb25zdCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKClcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNldFRhZykge1xuICAgICAgc2V0VGFnKHRvdGFsLnRvU3RyaW5nKCkpXG4gICAgfVxuICB9LCBbdG90YWxdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRSZWNvcmRzKFtdKVxuICB9LCBbcmVzb3VyY2UuaWRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhsb2NhdGlvbi5zZWFyY2gpXG4gICAgaWYgKHNlYXJjaC5nZXQoUkVGUkVTSF9LRVkpKSB7XG4gICAgICBzZXRTZWxlY3RlZFJlY29yZHMoW10pXG4gICAgfVxuICB9LCBbbG9jYXRpb24uc2VhcmNoXSlcblxuICBjb25zdCBoYW5kbGVBY3Rpb25QZXJmb3JtZWQgPSAoKTogYW55ID0+IGZldGNoRGF0YSgpXG5cbiAgY29uc3QgaGFuZGxlUGFnaW5hdGlvbkNoYW5nZSA9IChwYWdlTnVtYmVyOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICBjb25zdCBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaClcbiAgICBzZWFyY2guc2V0KCdwYWdlJywgcGFnZU51bWJlci50b1N0cmluZygpKVxuICAgIGhpc3RvcnkucHVzaCh7XG4gICAgICBzZWFyY2g6IHNlYXJjaC50b1N0cmluZygpLFxuICAgICAgc3RhdGU6IHsgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9LFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxCb3ggdmFyaWFudD1cIndoaXRlXCI+XG4gICAgICA8UmVjb3Jkc1RhYmxlXG4gICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgcmVjb3Jkcz17cmVjb3Jkc31cbiAgICAgICAgYWN0aW9uUGVyZm9ybWVkPXtoYW5kbGVBY3Rpb25QZXJmb3JtZWR9XG4gICAgICAgIG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9XG4gICAgICAgIG9uU2VsZWN0QWxsPXtoYW5kbGVTZWxlY3RBbGx9XG4gICAgICAgIHNlbGVjdGVkUmVjb3Jkcz17c2VsZWN0ZWRSZWNvcmRzfVxuICAgICAgICBkaXJlY3Rpb249e2RpcmVjdGlvbn1cbiAgICAgICAgc29ydEJ5PXtzb3J0Qnl9XG4gICAgICAgIGlzTG9hZGluZz17bG9hZGluZ31cbiAgICAgIC8+XG4gICAgICA8VGV4dCBtdD1cInhsXCIgdGV4dEFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgIDxQYWdpbmF0aW9uXG4gICAgICAgICAgcGFnZT17cGFnZX1cbiAgICAgICAgICBwZXJQYWdlPXtwZXJQYWdlfVxuICAgICAgICAgIHRvdGFsPXt0b3RhbH1cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlUGFnaW5hdGlvbkNoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgIDwvVGV4dD5cbiAgICA8L0JveD5cbiAgKVxufVxuXG5leHBvcnQge1xuICBMaXN0IGFzIGRlZmF1bHQsXG4gIExpc3QsXG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGFkZE5vdGljZSB9IGZyb20gJy4uL3N0b3JlL2FjdGlvbnMvYWRkLW5vdGljZSdcblxuLyoqXG4gKiBOb3RpY2VNZXNzYWdlIHdoaWNoIGNhbiBiZSBwcmVzZW50ZWQgYXMgYSBcIlRvYXN0XCIgbWVzc2FnZS5cbiAqIEBhbGlhcyBOb3RpY2VNZXNzYWdlXG4gKiBAbWVtYmVyb2Ygd2l0aE5vdGljZVxuICovXG5leHBvcnQgdHlwZSBOb3RpY2VNZXNzYWdlID0ge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHR5cGU/OiAnc3VjY2VzcycgfCAnZXJyb3InO1xufVxuXG5cbi8qKlxuICogQWRkaXRpb25hbCBwcm9wcyB3aGljaCBhcmUgcGFzc2VkIHRvIHlvdXIgY29tcG9uZW50XG4gKiBAYWxpYXMgQWRkTm90aWNlUHJvcHNcbiAqIEBtZW1iZXJvZiB3aXRoTm90aWNlXG4gKi9cbmV4cG9ydCB0eXBlIEFkZE5vdGljZVByb3BzID0ge1xuICAvLyBGdW5jdGlvbiB0cmlnZ2VyaW5nIG5vdGljZSBtZXNzYWdlc1xuICBhZGROb3RpY2U6IChub3RpY2U6IE5vdGljZU1lc3NhZ2UpID0+IHZvaWQ7XG59XG5cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKTogQWRkTm90aWNlUHJvcHMgPT4gKHtcbiAgYWRkTm90aWNlOiAobm90aWNlOiBOb3RpY2VNZXNzYWdlKTogdm9pZCA9PiBkaXNwYXRjaChhZGROb3RpY2Uobm90aWNlKSksXG59KVxuXG4vKipcbiAqIEhpZ2hlciBPcmRlciBDb21wb25lbnQgd2hpY2ggYWxsb3dzIHlvdSB0byBwb3N0IG5vdGljZSBtZXNzYWdlcyBmcm9tIHlvdXIgY29tcG9uZW50c1xuICpcbiAqIEl0IGdpdmVzIHlvdSB0aGUgYWRkaXRpb25hbCBwcm9wOiBgYWRkTm90aWNlKG5vdGljZU1lc3NhZ2UpYCB0YWtpbmcge0BsaW5rIE5vdGljZU1lc3NhZ2V9LlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IHdpdGhOb3RpY2UgfSBmcm9tICdhZG1pbmpzL2NvcmUnXG4gKlxuICogY29uc3QgTVlfTUVTU0FHRSA9IHtcbiAqICAgbWVzc2FnZTogJ0kgYW0gdG9hc3QgbWVzc2FnZScsXG4gKiAgIHR5cGU6ICdzdWNjZXNzJyxcbiAqIH1cbiAqIGNvbnN0IE15Q3VzdG9tQ29tcG9uZW50ID0gKHsgYWRkTm90aWNlIH0pID0+IHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8YSBvbkNsaWNrPXsoKSA9PiBhZGROb3RpY2UoTVlfTUVTU0FHRSl9PkNsaWNrIE1lPC9hPlxuICogICApXG4gKiB9XG4gKiBleHBvcnQgZGVmYXVsdCB3aXRoTm90aWNlKE15Q3VzdG9tQ29tcG9uZW50KVxuICogYGBgXG4gKlxuICogQGNvbXBvbmVudFxuICogQHN1YmNhdGVnb3J5IEhPQ1xuICovXG5jb25zdCB3aXRoTm90aWNlID0gQ29tcG9uZW50ID0+IGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb21wb25lbnQpXG5cbmV4cG9ydCB7XG4gIHdpdGhOb3RpY2UgYXMgZGVmYXVsdCxcbiAgd2l0aE5vdGljZSxcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtcbiAgVGFibGUsIFRhYmxlQm9keSwgVGFibGVSb3csIFRhYmxlQ2VsbCwgVGV4dCxcbiAgRHJhd2VyQ29udGVudCwgRHJhd2VyRm9vdGVyLCBCdXR0b24sIE1lc3NhZ2VCb3gsIEljb24sXG59IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgUHJvcGVydHlUeXBlIGZyb20gJy4uL3Byb3BlcnR5LXR5cGUnXG5pbXBvcnQgeyBBY3Rpb25Qcm9wcyB9IGZyb20gJy4vYWN0aW9uLnByb3BzJ1xuaW1wb3J0IEFwaUNsaWVudCBmcm9tICcuLi8uLi91dGlscy9hcGktY2xpZW50J1xuaW1wb3J0IHdpdGhOb3RpY2UsIHsgQWRkTm90aWNlUHJvcHMgfSBmcm9tICcuLi8uLi9ob2Mvd2l0aC1ub3RpY2UnXG5pbXBvcnQgeyBhcHBlbmRGb3JjZVJlZnJlc2ggfSBmcm9tICcuL3V0aWxzL2FwcGVuZC1mb3JjZS1yZWZyZXNoJ1xuXG5pbXBvcnQgQWN0aW9uSGVhZGVyIGZyb20gJy4uL2FwcC9hY3Rpb24taGVhZGVyL2FjdGlvbi1oZWFkZXInXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuXG4vKipcbiAqIEBuYW1lIFNob3dBY3Rpb25cbiAqIEBjYXRlZ29yeSBBY3Rpb25zXG4gKiBAZGVzY3JpcHRpb24gU2hvd3MgYSBnaXZlbiByZWNvcmQuXG4gKiBAY29tcG9uZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBCdWxrRGVsZXRlOiBSZWFjdC5GQzxBY3Rpb25Qcm9wcyAmIEFkZE5vdGljZVByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgcmVjb3JkcywgYWN0aW9uLCBhZGROb3RpY2UsIGhpc3RvcnkgfSA9IHByb3BzXG5cbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgdHJhbnNsYXRlTWVzc2FnZSwgdHJhbnNsYXRlQnV0dG9uIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgaWYgKCFyZWNvcmRzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUZXh0PlxuICAgICAgICB7dHJhbnNsYXRlTWVzc2FnZSgncGlja1NvbWVGaXJzdFRvUmVtb3ZlJywgcmVzb3VyY2UuaWQpfVxuICAgICAgPC9UZXh0PlxuICAgIClcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuICAgIHNldExvYWRpbmcodHJ1ZSlcbiAgICBjb25zdCByZWNvcmRJZHMgPSByZWNvcmRzLm1hcChyID0+IHIuaWQpXG4gICAgYXBpLmJ1bGtBY3Rpb24oe1xuICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWQsXG4gICAgICBhY3Rpb25OYW1lOiBhY3Rpb24ubmFtZSxcbiAgICAgIHJlY29yZElkcyxcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIH0pLnRoZW4oKChyZXNwb25zZSkgPT4ge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSlcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLm5vdGljZSkge1xuICAgICAgICBhZGROb3RpY2UocmVzcG9uc2UuZGF0YS5ub3RpY2UpXG4gICAgICB9XG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWRpcmVjdFVybCkge1xuICAgICAgICBjb25zdCBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG4gICAgICAgIC8vIGJ1bGsgZnVuY3Rpb24gaGF2ZSByZWNvcmRJZHMgaW4gdGhlIFVSTCBzbyBpdCBoYXMgdG8gYmUgc3RyaXBwZWQgYmVmb3JlIHJlZGlyZWN0XG4gICAgICAgIHNlYXJjaC5kZWxldGUoJ3JlY29yZElkcycpXG4gICAgICAgIGhpc3RvcnkucHVzaChhcHBlbmRGb3JjZVJlZnJlc2gocmVzcG9uc2UuZGF0YS5yZWRpcmVjdFVybCwgc2VhcmNoLnRvU3RyaW5nKCkpLCB7XG4gICAgICAgICAgcHJldmlvdXNQYWdlOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKVxuICAgICAgYWRkTm90aWNlKHtcbiAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRlTWVzc2FnZSgnYnVsa0RlbGV0ZUVycm9yJywgcmVzb3VyY2UuaWQpLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgfSlcbiAgICAgIHRocm93IGVycm9yXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPERyYXdlckNvbnRlbnQ+XG4gICAgICAgIHthY3Rpb24/LnNob3dJbkRyYXdlciA/IDxBY3Rpb25IZWFkZXIgb21pdEFjdGlvbnMgey4uLnByb3BzfSAvPiA6IG51bGx9XG4gICAgICAgIDxNZXNzYWdlQm94XG4gICAgICAgICAgbWI9XCJ4eGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJkYW5nZXJcIlxuICAgICAgICAgIG1lc3NhZ2U9e3RyYW5zbGF0ZU1lc3NhZ2UoJ3RoZXNlUmVjb3Jkc1dpbGxCZVJlbW92ZWQnLCByZXNvdXJjZS5pZCwgeyBjb3VudDogcmVjb3Jkcy5sZW5ndGggfSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxUYWJsZT5cbiAgICAgICAgICA8VGFibGVCb2R5PlxuICAgICAgICAgICAge3JlY29yZHMubWFwKHJlY29yZCA9PiAoXG4gICAgICAgICAgICAgIDxUYWJsZVJvdyBrZXk9e3JlY29yZC5pZH0+XG4gICAgICAgICAgICAgICAgPFRhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICAgIDxQcm9wZXJ0eVR5cGVcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU9XCJsaXN0XCJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk9e3Jlc291cmNlLnRpdGxlUHJvcGVydHl9XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICA8L1RhYmxlUm93PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9UYWJsZUJvZHk+XG4gICAgICAgIDwvVGFibGU+XG4gICAgICA8L0RyYXdlckNvbnRlbnQ+XG4gICAgICA8RHJhd2VyRm9vdGVyPlxuICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJwcmltYXJ5XCIgc2l6ZT1cImxnXCIgb25DbGljaz17aGFuZGxlQ2xpY2t9IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICB7bG9hZGluZyA/ICg8SWNvbiBpY29uPVwiRmFkZVwiIHNwaW4gLz4pIDogbnVsbH1cbiAgICAgICAgICB7dHJhbnNsYXRlQnV0dG9uKCdjb25maXJtUmVtb3ZhbE1hbnknLCByZXNvdXJjZS5pZCwgeyBjb3VudDogcmVjb3Jkcy5sZW5ndGggfSl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9EcmF3ZXJGb290ZXI+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5jb25zdCBGb3JtYXR0ZWRCdWxrRGVsZXRlID0gd2l0aE5vdGljZSh3aXRoUm91dGVyKEJ1bGtEZWxldGUpKVxuXG5leHBvcnQge1xuICBGb3JtYXR0ZWRCdWxrRGVsZXRlIGFzIGRlZmF1bHQsXG4gIEZvcm1hdHRlZEJ1bGtEZWxldGUgYXMgQnVsa0RlbGV0ZSxcbn1cbiIsImltcG9ydCB7IE5ldyB9IGZyb20gJy4vbmV3J1xuaW1wb3J0IHsgRWRpdCB9IGZyb20gJy4vZWRpdCdcbmltcG9ydCB7IFNob3cgfSBmcm9tICcuL3Nob3cnXG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnLi9saXN0J1xuaW1wb3J0IHsgQnVsa0RlbGV0ZSB9IGZyb20gJy4vYnVsay1kZWxldGUnXG5cbmV4cG9ydCAqIGZyb20gJy4vbmV3J1xuZXhwb3J0ICogZnJvbSAnLi9hY3Rpb24ucHJvcHMnXG5leHBvcnQgKiBmcm9tICcuL2VkaXQnXG5leHBvcnQgKiBmcm9tICcuL3Nob3cnXG5leHBvcnQgKiBmcm9tICcuL2xpc3QnXG5leHBvcnQgKiBmcm9tICcuL2J1bGstZGVsZXRlJ1xuZXhwb3J0ICogZnJvbSAnLi91dGlscydcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnMgPSB7XG4gIG5ldzogTmV3LFxuICBlZGl0OiBFZGl0LFxuICBzaG93OiBTaG93LFxuICBsaXN0OiBMaXN0LFxuICBidWxrRGVsZXRlOiBCdWxrRGVsZXRlLFxufVxuIiwiZXhwb3J0IGNvbnN0IERPQ1MgPSAnaHR0cHM6Ly9hZG1pbmpzLmNvJ1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUEFUSFMgPSB7XG4gIHJvb3RQYXRoOiAnL2FkbWluJyxcbiAgbG9nb3V0UGF0aDogJy9hZG1pbi9sb2dvdXQnLFxuICBsb2dpblBhdGg6ICcvYWRtaW4vbG9naW4nLFxufVxuXG4vKiBjc3BlbGw6IGRpc2FibGUtbmV4dC1saW5lICovXG5leHBvcnQgY29uc3QgQURNSU5fSlNfVE1QX0RJUiA9ICcuYWRtaW5qcydcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFRyYW5zIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcbmltcG9ydCB7IE1lc3NhZ2VCb3gsIExpbmsgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuL2Vycm9yLWJvdW5kYXJ5J1xuaW1wb3J0IHsgYWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMnXG5pbXBvcnQgeyBET0NTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgQWN0aW9uUHJvcHMgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbi5wcm9wcydcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5cbmRlY2xhcmUgY29uc3QgQWRtaW5KUzoge1xuICBVc2VyQ29tcG9uZW50czogQXJyYXk8c3RyaW5nPjtcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgd2hpY2ggcmVuZGVycyBhbGwgdGhlIGRlZmF1bHQgYW5kIGN1c3RvbSBhY3Rpb25zIGZvciBib3RoIHRoZSBSZXNvdXJjZSBhbmQgdGhlIFJlY29yZC5cbiAqXG4gKiBJdCBwYXNzZXMgYWxsIHByb3BzIGRvd24gdG8gdGhlIGFjdHVhbCBBY3Rpb24gY29tcG9uZW50LlxuICpcbiAqIEV4YW1wbGUgb2YgY3JlYXRpbmcgeW91ciBvd24gYWN0aW9uczpcbiAqIGBgYFxuICogLy8gQWRtaW5KUyBvcHRpb25zXG4gKiBjb25zdCBBZG1pbkpTT3B0aW9ucyA9IHtcbiAqICAgcmVzb3VyY2VzOiBbXG4gKiAgICAgIHJlc291cmNlLFxuICogICAgICBvcHRpb25zOiB7XG4gKiAgICAgICAgYWN0aW9uczoge1xuICogICAgICAgICAgIG15TmV3QWN0aW9uOiB7XG4gKiAgICAgICAgICAgICBsYWJlbDogJ2FtYXppbmcgYWN0aW9uJyxcbiAqICAgICAgICAgICAgIGljb246ICdBZGQnLFxuICogICAgICAgICAgICAgaW5WaXNpYmxlOiAocmVzb3VyY2UsIHJlY29yZCkgPT4gcmVjb3JkLnBhcmFtKCdlbWFpbCcpICE9PSAnJyxcbiAqICAgICAgICAgICAgIGFjdGlvblR5cGU6ICdyZWNvcmQnLFxuICogICAgICAgICAgICAgY29tcG9uZW50OiBBZG1pbkpTLmJ1bmRsZSgnLi9teS1uZXctYWN0aW9uJyksXG4gKiAgICAgICAgICAgICBoYW5kbGVyOiAocmVxdWVzdCwgcmVzcG9uc2UsIGRhdGEpID0+IHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICAgICAgICAgLi4uXG4gKiAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgIF1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLy8gLi9teS1uZXctYWN0aW9uLmpzeFxuICogaW1wb3J0IHsgQm94IH0gZnJvbSAnYWRtaW5qcydcbiAqXG4gKiBjb25zdCBNeU5ld0FjdGlvbiA9IChwcm9wcykgPT4ge1xuICogICBjb25zdCB7IHJlc291cmNlLCBhY3Rpb24sIHJlY29yZCB9ID0gcHJvcHNcbiAqICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIHByb3BzIGFuZCByZW5kZXIgYWN0aW9uXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEJveD5Tb21lIEFjdGlvbiBDb250ZW50PC9Cb3g+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBjb21wb25lbnRcbiAqIEBuYW1lIEJhc2VBY3Rpb25Db21wb25lbnRcbiAqIEBzdWJjYXRlZ29yeSBBcHBsaWNhdGlvblxuICovXG5leHBvcnQgY29uc3QgQmFzZUFjdGlvbkNvbXBvbmVudDogUmVhY3QuRkM8QWN0aW9uUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2UsIGFjdGlvbiwgcmVjb3JkLCByZWNvcmRzLCBzZXRUYWcgfSA9IHByb3BzXG4gIGNvbnN0IGRvY3VtZW50YXRpb25MaW5rID0gW0RPQ1MsICdCYXNlQWN0aW9uLmh0bWwnXS5qb2luKCcvJylcblxuICBjb25zdCB7IHRyYW5zbGF0ZU1lc3NhZ2UgfSA9IHVzZVRyYW5zbGF0aW9uKClcblxuICBsZXQgQWN0aW9uID0gYWN0aW9uc1thY3Rpb24ubmFtZV1cblxuICBpZiAoYWN0aW9uLmNvbXBvbmVudCkge1xuICAgIEFjdGlvbiA9IEFkbWluSlMuVXNlckNvbXBvbmVudHNbYWN0aW9uLmNvbXBvbmVudF1cbiAgfVxuXG4gIGlmIChBY3Rpb24pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxBY3Rpb25cbiAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgcmVjb3Jkcz17cmVjb3Jkc31cbiAgICAgICAgICBzZXRUYWc9e3NldFRhZ31cbiAgICAgICAgLz5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApXG4gIH1cbiAgcmV0dXJuIEFjdGlvbiB8fCAoXG4gICAgPE1lc3NhZ2VCb3ggdmFyaWFudD1cImRhbmdlclwiPlxuICAgICAge3RyYW5zbGF0ZU1lc3NhZ2UoJ25vQWN0aW9uQ29tcG9uZW50Jyl9XG4gICAgICA8VHJhbnMga2V5PVwibWVzc2FnZXMuYnV0dG9ucy5zZWVUaGVEb2N1bWVudGF0aW9uXCI+XG4gICAgICAgIFNlZTpcbiAgICAgICAgPExpbmsgbWw9XCJkZWZhdWx0XCIgaHJlZj17ZG9jdW1lbnRhdGlvbkxpbmt9PnRoZSBkb2N1bWVudGF0aW9uPC9MaW5rPlxuICAgICAgPC9UcmFucz5cbiAgICA8L01lc3NhZ2VCb3g+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZUFjdGlvbkNvbXBvbmVudFxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTWVzc2FnZUJveCwgVGV4dCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFcnJvck1lc3NhZ2VCb3hcbiAqIEBhbGlhcyBFcnJvck1lc3NhZ2VCb3hQcm9wc1xuICovXG5leHBvcnQgdHlwZSBFcnJvck1lc3NhZ2VCb3hQcm9wcyA9IHtcbiAgdGl0bGU6IHN0cmluZztcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgdGVzdElkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBjbGFzc1xuICogUHJpbnRzIGVycm9yIG1lc3NhZ2VcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAcHJpdmF0ZVxuICogQGV4YW1wbGVcbiAqIHJldHVybiAoXG4gKiA8RXJyb3JNZXNzYWdlQm94IHRpdGxlPXsnU29tZSBlcnJvcid9PlxuICogICA8cD5UZXh0IGJlbG93IHRoZSB0aXRsZTwvcD5cbiAqIDwvRXJyb3JNZXNzYWdlQm94PlxuICogKVxuICovXG5jb25zdCBFcnJvck1lc3NhZ2VCb3g6IFJlYWN0LkZDPEVycm9yTWVzc2FnZUJveFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCB0aXRsZSwgdGVzdElkIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxNZXNzYWdlQm94IGRhdGEtdGVzdGlkPXt0ZXN0SWR9IG1lc3NhZ2U9e3RpdGxlfT5cbiAgICAgIDxUZXh0PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQ+XG4gICAgPC9NZXNzYWdlQm94PlxuICApXG59XG5cbmNvbnN0IE5vUmVzb3VyY2VFcnJvcjogUmVhY3QuRkM8e3Jlc291cmNlSWQ6IHN0cmluZ30+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2VJZCB9ID0gcHJvcHNcbiAgY29uc3QgeyB0cmFuc2xhdGVNZXNzYWdlIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIHJldHVybiAoXG4gICAgPE1lc3NhZ2VCb3hcbiAgICAgIG1lc3NhZ2U9XCI0MDQgLSBQQUdFIE5PVCBGT1VORFwiXG4gICAgICBkYXRhLXRlc3RpZD1cIk5vUmVzb3VyY2VFcnJvclwiXG4gICAgICB2YXJpYW50PVwiaW5mb1wiXG4gICAgICBtPVwieHhsXCJcbiAgICA+XG4gICAgICA8VGV4dD5cbiAgICAgICAge3RyYW5zbGF0ZU1lc3NhZ2UoJ2Vycm9yNDA0UmVzb3VyY2UnLCByZXNvdXJjZUlkLCB7IHJlc291cmNlSWQgfSl9XG4gICAgICA8L1RleHQ+XG4gICAgPC9NZXNzYWdlQm94PlxuICApXG59XG5cbmNvbnN0IE5vQWN0aW9uRXJyb3I6IFJlYWN0LkZDPHtyZXNvdXJjZUlkOiBzdHJpbmc7IGFjdGlvbk5hbWU6IHN0cmluZ30+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZSB9ID0gcHJvcHNcbiAgY29uc3QgeyB0cmFuc2xhdGVNZXNzYWdlIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIHJldHVybiAoXG4gICAgPE1lc3NhZ2VCb3hcbiAgICAgIG1lc3NhZ2U9XCI0MDQgLSBQQUdFIE5PVCBGT1VORFwiXG4gICAgICBkYXRhLXRlc3RpZD1cIk5vQWN0aW9uRXJyb3JcIlxuICAgICAgdmFyaWFudD1cImluZm9cIlxuICAgICAgbT1cInh4bFwiXG4gICAgPlxuICAgICAgPFRleHQ+XG4gICAgICAgIHt0cmFuc2xhdGVNZXNzYWdlKCdlcnJvcjQwNEFjdGlvbicsIHJlc291cmNlSWQsIHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZSB9KX1cbiAgICAgIDwvVGV4dD5cbiAgICA8L01lc3NhZ2VCb3g+XG4gIClcbn1cblxuY29uc3QgTm9SZWNvcmRFcnJvcjogUmVhY3QuRkM8e1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIHJlY29yZElkOiBzdHJpbmc7XG59PiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlc291cmNlSWQsIHJlY29yZElkIH0gPSBwcm9wc1xuICBjb25zdCB7IHRyYW5zbGF0ZU1lc3NhZ2UgfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgcmV0dXJuIChcbiAgICA8TWVzc2FnZUJveFxuICAgICAgbWVzc2FnZT1cIjQwNCAtIFBBR0UgTk9UIEZPVU5EXCJcbiAgICAgIGRhdGEtdGVzdGlkPVwiTm9SZWNvcmRFcnJvclwiXG4gICAgICB2YXJpYW50PVwiaW5mb1wiXG4gICAgICBtPVwieHhsXCJcbiAgICA+XG4gICAgICA8VGV4dD5cbiAgICAgICAge3RyYW5zbGF0ZU1lc3NhZ2UoJ2Vycm9yNDA0UmVjb3JkJywgcmVzb3VyY2VJZCwgeyByZXNvdXJjZUlkLCByZWNvcmRJZCB9KX1cbiAgICAgIDwvVGV4dD5cbiAgICA8L01lc3NhZ2VCb3g+XG4gIClcbn1cblxuZXhwb3J0IHtcbiAgTm9SZXNvdXJjZUVycm9yLFxuICBOb0FjdGlvbkVycm9yLFxuICBOb1JlY29yZEVycm9yLFxuICBFcnJvck1lc3NhZ2VCb3gsXG4gIEVycm9yTWVzc2FnZUJveCBhcyBkZWZhdWx0LFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgQm94LCBCb3hQcm9wcywgRHJhd2VyQ29udGVudCwgRHJhd2VyRm9vdGVyIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuY29uc3QgU3R5bGVkV3JhcHBlciA9IHN0eWxlZChCb3gpYFxuICAmICR7RHJhd2VyQ29udGVudH0ge1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMud2hpdGV9O1xuICAgIHBhZGRpbmc6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zcGFjZS54eGx9O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG4gIFxuICAmICR7RHJhd2VyRm9vdGVyfSB7XG4gICAgYmFja2dyb3VuZDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy53aGl0ZX07XG4gICAgcGFkZGluZzogMCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc3BhY2UueHhsfSAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc3BhY2UueHhsfTtcbiAgfVxuYFxuXG5jb25zdCBXcmFwcGVyOiBSZWFjdC5GQzxCb3hQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBjb25zdCB7IGNoaWxkcmVuLCB2YXJpYW50LCBjb2xvciwgLi4ucmVzdCB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkV3JhcHBlciB7Li4ucmVzdH0gdmFyaWFudD1cImdyZXlcIiBteD1cImF1dG9cIj5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1N0eWxlZFdyYXBwZXI+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgV3JhcHBlclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgUmVhY3ROb2RlLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsLCByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgeyBEcmF3ZXIsIERFRkFVTFRfRFJBV0VSX1dJRFRIIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuLyoqXG4gKiBAYWxpYXMgRHJhd2VyUG9ydGFsUHJvcHNcbiAqIEBtZW1iZXJvZiBEcmF3ZXJQb3J0YWxcbiAqL1xuZXhwb3J0IHR5cGUgRHJhd2VyUG9ydGFsUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgZHJhd2VyIGNvbnRlbnRcbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGRyYXdlciB3aWR0aFxuICAgKi9cbiAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmcgfCBBcnJheTxudW1iZXIgfCBzdHJpbmc+O1xufVxuXG5jb25zdCBEUkFXRVJfUE9SVEFMX0lEID0gJ2RyYXdlclBvcnRhbCdcblxuLyoqXG4gKiBTaG93cyBhbGwgb2YgaXRzIGNoaWxkcmVuIGluIGEgRHJhd2VyIG9uIHRoZSByaWdodC5cbiAqIEluc3RlYWQgb2YgcmVuZGVyaW5nIGl0J3Mgb3duIHtAbGluayBEcmF3ZXJ9IGNvbXBvbmVudCBpdCByZXVzZXNcbiAqIHRoZSBnbG9iYWwgRHJhd2VyIHZpYSBSZWFjdCBQb3J0YWwuXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyBEcmF3ZXJQb3J0YWwgfSBmcm9tICdhZG1pbmpzJ1xuICogYGBgXG4gKlxuICogQGNvbXBvbmVudFxuICogQHN1YmNhdGVnb3J5IEFwcGxpY2F0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBEcmF3ZXJQb3J0YWw6IFJlYWN0LkZDPERyYXdlclBvcnRhbFByb3BzPiA9ICh7IGNoaWxkcmVuLCB3aWR0aCB9KSA9PiB7XG4gIGNvbnN0IFtkcmF3ZXJFbGVtZW50LCBzZXREcmF3ZXJFbGVtZW50XSA9IHVzZVN0YXRlPEhUTUxFbGVtZW50IHwgbnVsbD4oXG4gICAgd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERSQVdFUl9QT1JUQUxfSUQpLFxuICApXG4gIGlmICghZHJhd2VyRWxlbWVudCAmJiB3aW5kb3cpIHtcbiAgICBjb25zdCBpbm5lcldyYXBwZXIgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBjb25zdCBEcmF3ZXJXcmFwcGVyID0gKFxuICAgICAgPFRoZW1lUHJvdmlkZXIgdGhlbWU9eyh3aW5kb3cgYXMgYW55KS5USEVNRX0+XG4gICAgICAgIDxEcmF3ZXIgaWQ9e0RSQVdFUl9QT1JUQUxfSUR9IGNsYXNzTmFtZT1cImhpZGRlblwiIC8+XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKVxuICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlubmVyV3JhcHBlcilcbiAgICByZW5kZXIoRHJhd2VyV3JhcHBlciwgaW5uZXJXcmFwcGVyLCAoKSA9PiB7XG4gICAgICBzZXREcmF3ZXJFbGVtZW50KHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChEUkFXRVJfUE9SVEFMX0lEKSlcbiAgICB9KVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZHJhd2VyRWxlbWVudCkge1xuICAgICAgZHJhd2VyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgIGRyYXdlckVsZW1lbnQuc3R5bGUud2lkdGggPSBBcnJheS5pc0FycmF5KHdpZHRoKSA/IHdpZHRoWzBdLnRvU3RyaW5nKCkgOiB3aWR0aC50b1N0cmluZygpXG4gICAgICB9XG4gICAgICByZXR1cm4gKCk6IHZvaWQgPT4ge1xuICAgICAgICBkcmF3ZXJFbGVtZW50LnN0eWxlLndpZHRoID0gREVGQVVMVF9EUkFXRVJfV0lEVEhcbiAgICAgICAgZHJhd2VyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCk6IHZvaWQgPT4gdW5kZWZpbmVkXG4gIH0sIFtkcmF3ZXJFbGVtZW50XSlcblxuICBpZiAoIWRyYXdlckVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVBvcnRhbChcbiAgICBjaGlsZHJlbixcbiAgICBkcmF3ZXJFbGVtZW50LFxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IERyYXdlclBvcnRhbFxuIiwiaW1wb3J0IFJlYWN0LCB7IE1vdXNlRXZlbnQsIFN5bnRoZXRpY0V2ZW50LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VSb3V0ZU1hdGNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7XG4gIEJveCxcbiAgSDMsXG4gIEJ1dHRvbixcbiAgSWNvbixcbiAgRHJhd2VyLFxuICBEcmF3ZXJDb250ZW50LFxuICBEcmF3ZXJGb290ZXIsXG59IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCB7IFJlY29yZEpTT04sIFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuXG5leHBvcnQgdHlwZSBGaWx0ZXJQcm9wcyA9IHtcbiAgcmVzb3VyY2U6IFJlc291cmNlSlNPTjtcbiAgdG9nZ2xlRmlsdGVyOiAoKSA9PiB2b2lkO1xuICBpc1Zpc2libGU6IGJvb2xlYW47XG59XG5cbnR5cGUgTWF0Y2hQcm9wcyA9IHtcbiAgcmVzb3VyY2VJZDogc3RyaW5nO1xufVxuXG5jb25zdCBwYXJzZVF1ZXJ5ID0gKGxvY2F0aW9uKTogYW55ID0+IHtcbiAgY29uc3QgZmlsdGVyOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cbiAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaClcbiAgZm9yIChjb25zdCBlbnRyeSBvZiBxdWVyeS5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBlbnRyeVxuICAgIGlmIChrZXkubWF0Y2goJ2ZpbHRlcnMuJykpIHtcbiAgICAgIGZpbHRlcltrZXkucmVwbGFjZSgnZmlsdGVycy4nLCAnJyldID0gdmFsdWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpbHRlclxufVxuXG5leHBvcnQgY29uc3QgRmlsdGVyRHJhd2VyOiBSZWFjdC5GQzxGaWx0ZXJQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgaXNWaXNpYmxlLCB0b2dnbGVGaWx0ZXIgfSA9IHByb3BzXG4gIGNvbnN0IHByb3BlcnRpZXMgPSByZXNvdXJjZS5maWx0ZXJQcm9wZXJ0aWVzXG5cbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpXG4gIGNvbnN0IFtmaWx0ZXIsIHNldEZpbHRlcl0gPSB1c2VTdGF0ZShwYXJzZVF1ZXJ5KGxvY2F0aW9uKSlcbiAgY29uc3QgbWF0Y2ggPSB1c2VSb3V0ZU1hdGNoPE1hdGNoUHJvcHM+KClcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuICBjb25zdCB7IHRyYW5zbGF0ZUxhYmVsLCB0cmFuc2xhdGVCdXR0b24gfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgaW5pdGlhbExvYWQgPSB1c2VSZWYodHJ1ZSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbml0aWFsTG9hZC5jdXJyZW50KSB7XG4gICAgICBpbml0aWFsTG9hZC5jdXJyZW50ID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0RmlsdGVyKHt9KVxuICAgIH1cbiAgfSwgW21hdGNoLnBhcmFtcy5yZXNvdXJjZUlkXSlcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50KTogZmFsc2UgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG4gICAgT2JqZWN0LmtleXMoZmlsdGVyKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChmaWx0ZXJba2V5XSAhPT0gJycpIHtcbiAgICAgICAgc2VhcmNoLnNldChgZmlsdGVycy4ke2tleX1gLCBmaWx0ZXJba2V5XSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlYXJjaC5kZWxldGUoYGZpbHRlcnMuJHtrZXl9YClcbiAgICAgIH1cbiAgICB9KVxuICAgIHNlYXJjaC5zZXQoJ3BhZ2UnLCAnMScpXG4gICAgaGlzdG9yeS5wdXNoKGAke2hpc3RvcnkubG9jYXRpb24ucGF0aG5hbWV9PyR7c2VhcmNoLnRvU3RyaW5nKCl9YCwgeyBwcmV2aW91c1BhZ2U6IHdpbmRvdy5sb2NhdGlvbi5ocmVmIH0pXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjb25zdCByZXNldEZpbHRlciA9IChldmVudDogTW91c2VFdmVudCk6IHZvaWQgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBmaWx0ZXJlZFNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuICAgIGNvbnN0IHNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaClcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBzZWFyY2gua2V5cygpKSB7XG4gICAgICBpZiAoIWtleS5tYXRjaCgnZmlsdGVycy4nKSkge1xuICAgICAgICBmaWx0ZXJlZFNlYXJjaC5zZXQoa2V5LCBzZWFyY2guZ2V0KGtleSkgYXMgc3RyaW5nKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBxdWVyeSA9IGZpbHRlcmVkU2VhcmNoLnRvU3RyaW5nKCkgPT09ICcnID8gYD8ke2ZpbHRlcmVkU2VhcmNoLnRvU3RyaW5nKCl9YCA6ICcnXG4gICAgaGlzdG9yeS5wdXNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUgKyBxdWVyeSwgeyBwcmV2aW91c1BhZ2U6IHdpbmRvdy5sb2NhdGlvbi5ocmVmIH0pXG4gICAgc2V0RmlsdGVyKHt9KVxuICB9XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKHByb3BlcnR5TmFtZTogc3RyaW5nIHwgUmVjb3JkSlNPTiwgdmFsdWU6IGFueSk6IHZvaWQgPT4ge1xuICAgIGlmICgocHJvcGVydHlOYW1lIGFzIFJlY29yZEpTT04pLnBhcmFtcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd5b3UgY2FuIG5vdCBwYXNzIFJlY29yZEpTT04gdG8gZmlsdGVycycpXG4gICAgfVxuICAgIHNldEZpbHRlcih7XG4gICAgICAuLi5maWx0ZXIsXG4gICAgICBbcHJvcGVydHlOYW1lIGFzIHN0cmluZ106IHZhbHVlLFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxEcmF3ZXIgdmFyaWFudD1cImZpbHRlclwiIGlzSGlkZGVuPXshaXNWaXNpYmxlfSBhcz1cImZvcm1cIiBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgIDxEcmF3ZXJDb250ZW50PlxuICAgICAgICA8SDM+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBzaXplPVwiaWNvblwiXG4gICAgICAgICAgICByb3VuZGVkXG4gICAgICAgICAgICBtcj1cImxnXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpOiB2b2lkID0+IHRvZ2dsZUZpbHRlcigpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxJY29uIGljb249XCJDaGV2cm9uUmlnaHRcIiBjb2xvcj1cIndoaXRlXCIgLz5cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICB7dHJhbnNsYXRlTGFiZWwoJ2ZpbHRlcnMnLCByZXNvdXJjZS5pZCl9XG4gICAgICAgIDwvSDM+XG4gICAgICAgIDxCb3ggbXk9XCJ4M1wiPlxuICAgICAgICAgIHtwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiAoXG4gICAgICAgICAgICA8UHJvcGVydHlUeXBlXG4gICAgICAgICAgICAgIGtleT17cHJvcGVydHkucHJvcGVydHlQYXRofVxuICAgICAgICAgICAgICB3aGVyZT1cImZpbHRlclwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9EcmF3ZXJDb250ZW50PlxuICAgICAgPERyYXdlckZvb3Rlcj5cbiAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiIHNpemU9XCJsZ1wiPlxuICAgICAgICAgIHt0cmFuc2xhdGVCdXR0b24oJ2FwcGx5Q2hhbmdlcycsIHJlc291cmNlLmlkKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDxCdXR0b24gdmFyaWFudD1cInRleHRcIiBzaXplPVwibGdcIiBvbkNsaWNrPXtyZXNldEZpbHRlcn0gdHlwZT1cImJ1dHRvblwiIGNvbG9yPVwid2hpdGVcIj5cbiAgICAgICAgICB7dHJhbnNsYXRlQnV0dG9uKCdyZXNldEZpbHRlcicsIHJlc291cmNlLmlkKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0RyYXdlckZvb3Rlcj5cbiAgICA8L0RyYXdlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEcmF3ZXJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyB1c2VSb3V0ZU1hdGNoIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IEJhc2VBY3Rpb25Db21wb25lbnQgZnJvbSAnLi4vYXBwL2Jhc2UtYWN0aW9uLWNvbXBvbmVudCdcbmltcG9ydCBBcGlDbGllbnQgZnJvbSAnLi4vLi4vdXRpbHMvYXBpLWNsaWVudCdcbmltcG9ydCB7IFJlY29yZEFjdGlvblBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzL3ZpZXctaGVscGVycydcbmltcG9ydCB7IEFjdGlvbkpTT04sIFJlY29yZEpTT04gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgTm9SZXNvdXJjZUVycm9yLCBOb0FjdGlvbkVycm9yLCBOb1JlY29yZEVycm9yIH0gZnJvbSAnLi4vYXBwL2Vycm9yLW1lc3NhZ2UnXG5pbXBvcnQgV3JhcHBlciBmcm9tICcuL3V0aWxzL3dyYXBwZXInXG5pbXBvcnQgeyBBY3Rpb25IZWFkZXIgfSBmcm9tICcuLi9hcHAnXG5pbXBvcnQgeyB1c2VOb3RpY2UsIHVzZVJlc291cmNlLCB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IERyYXdlclBvcnRhbCBmcm9tICcuLi9hcHAvZHJhd2VyLXBvcnRhbCdcbmltcG9ydCB7IEFjdGlvblJlc3BvbnNlLCBSZWNvcmRBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvYWN0aW9ucy9hY3Rpb24uaW50ZXJmYWNlJ1xuaW1wb3J0IG1lcmdlUmVjb3JkUmVzcG9uc2UgZnJvbSAnLi4vLi4vaG9va3MvdXNlLXJlY29yZC9tZXJnZS1yZWNvcmQtcmVzcG9uc2UnXG5cbmNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuXG5jb25zdCBSZWNvcmRBY3Rpb246IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBbcmVjb3JkLCBzZXRSZWNvcmRdID0gdXNlU3RhdGU8UmVjb3JkSlNPTj4oKVxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBtYXRjaCA9IHVzZVJvdXRlTWF0Y2g8UmVjb3JkQWN0aW9uUGFyYW1zPigpXG4gIGNvbnN0IGFkZE5vdGljZSA9IHVzZU5vdGljZSgpXG4gIGNvbnN0IHsgdHJhbnNsYXRlTWVzc2FnZSB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIGNvbnN0IHsgYWN0aW9uTmFtZSwgcmVjb3JkSWQsIHJlc291cmNlSWQgfSA9IG1hdGNoLnBhcmFtc1xuICBjb25zdCByZXNvdXJjZSA9IHVzZVJlc291cmNlKHJlc291cmNlSWQpXG5cbiAgY29uc3QgYWN0aW9uID0gcmVjb3JkICYmIHJlY29yZC5yZWNvcmRBY3Rpb25zLmZpbmQociA9PiByLm5hbWUgPT09IGFjdGlvbk5hbWUpXG5cbiAgY29uc3QgZmV0Y2hSZWNvcmQgPSAoKTogdm9pZCA9PiB7XG4gICAgc2V0TG9hZGluZyh0cnVlKVxuICAgIGFwaS5yZWNvcmRBY3Rpb24obWF0Y2gucGFyYW1zKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSlcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLm5vdGljZSAmJiByZXNwb25zZS5kYXRhLm5vdGljZS50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgIGFkZE5vdGljZShyZXNwb25zZS5kYXRhLm5vdGljZSlcbiAgICAgIH1cbiAgICAgIHNldFJlY29yZChyZXNwb25zZS5kYXRhLnJlY29yZClcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGFkZE5vdGljZSh7XG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZU1lc3NhZ2UoJ2Vycm9yRmV0Y2hpbmdSZWNvcmQnLCByZXNvdXJjZUlkKSxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgIH0pXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH0pXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZldGNoUmVjb3JkKClcbiAgfSwgW2FjdGlvbk5hbWUsIHJlY29yZElkLCByZXNvdXJjZUlkXSlcblxuICBjb25zdCBoYW5kbGVBY3Rpb25QZXJmb3JtZWQgPSB1c2VDYWxsYmFjaygob2xkUmVjb3JkOiBSZWNvcmRKU09OLCByZXNwb25zZTogQWN0aW9uUmVzcG9uc2UpID0+IHtcbiAgICBpZiAocmVzcG9uc2UucmVjb3JkKSB7XG4gICAgICBzZXRSZWNvcmQobWVyZ2VSZWNvcmRSZXNwb25zZShvbGRSZWNvcmQsIHJlc3BvbnNlIGFzIFJlY29yZEFjdGlvblJlc3BvbnNlKSlcbiAgICB9IGVsc2Uge1xuICAgICAgZmV0Y2hSZWNvcmQoKVxuICAgIH1cbiAgfSwgW2ZldGNoUmVjb3JkXSlcblxuICBpZiAoIXJlc291cmNlKSB7XG4gICAgcmV0dXJuICg8Tm9SZXNvdXJjZUVycm9yIHJlc291cmNlSWQ9e3Jlc291cmNlSWR9IC8+KVxuICB9XG5cbiAgLy8gV2hlbiB0aGUgdXNlciB2aXNpdHMgdGhpcyByb3V0ZSAocmVjb3JkIGFjdGlvbikgZnJvbSBhIGRpZmZlcmVudCwgdGhhbiB0aGUgY3VycmVudCBvbmUsIHJlY29yZC5cbiAgLy8gSXQgcmVuZGVycyBldmVyeXRoaW5nIHdpdGggYSBuZXcgcmVzb3VyY2UuIFRoZSBvbGQgcmVjb3JkIHJlbWFpbnMgdW50aWwgdXNlRWZmZWN0IGZldGNoZXMgZGF0YVxuICAvLyBmcm9tIHRoZSBBUEkuIHRoYXQgaXMgd2h5IHdlIGhhdmUgdG8gY2hlY2sgaWYgdGhlIGN1cnJlbnQgcmVjb3JkIGhhcyBjb3JyZWN0IHJlY29yZC5pZC5cbiAgLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2ggd291bGQgYmUgdG8gc2V0UmVjb3JkKHVuZGVmaW5lZCkgYmVmb3JlIHRoZSBmZXRjaCwgYnV0IGl0IGlzIGFzeW5jIGFuZFxuICAvLyB3ZSBjYW5ub3QgYmUgc3VyZSB0aGF0IHRoZSBjb21wb25lbnQgd29udCBiZSByZW5kZXJlZCAoaXQgd2lsbCBiZSBhdCBsZWFzdCBvbmNlKSB3aXRoIHRoZVxuICAvLyB3cm9uZyBkYXRhLlxuICBjb25zdCBoYXNEaWZmZXJlbnRSZWNvcmQgPSByZWNvcmQgJiYgcmVjb3JkLmlkICYmIHJlY29yZC5pZC50b1N0cmluZygpICE9PSByZWNvcmRJZFxuXG4gIGlmIChsb2FkaW5nIHx8IGhhc0RpZmZlcmVudFJlY29yZCkge1xuICAgIGNvbnN0IGFjdGlvbkZyb21SZXNvdXJjZSA9IHJlc291cmNlLmFjdGlvbnMuZmluZChyID0+IHIubmFtZSA9PT0gYWN0aW9uTmFtZSlcbiAgICByZXR1cm4gYWN0aW9uRnJvbVJlc291cmNlPy5zaG93SW5EcmF3ZXIgPyAoPERyYXdlclBvcnRhbD48TG9hZGVyIC8+PC9EcmF3ZXJQb3J0YWw+KSA6IDxMb2FkZXIgLz5cbiAgfVxuXG4gIGlmICghYWN0aW9uKSB7XG4gICAgcmV0dXJuICg8Tm9BY3Rpb25FcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSBhY3Rpb25OYW1lPXthY3Rpb25OYW1lfSAvPilcbiAgfVxuXG4gIGlmICghcmVjb3JkKSB7XG4gICAgcmV0dXJuICg8Tm9SZWNvcmRFcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSByZWNvcmRJZD17cmVjb3JkSWR9IC8+KVxuICB9XG5cbiAgaWYgKGFjdGlvbi5zaG93SW5EcmF3ZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPERyYXdlclBvcnRhbCB3aWR0aD17YWN0aW9uLmNvbnRhaW5lcldpZHRofT5cbiAgICAgICAgPEJhc2VBY3Rpb25Db21wb25lbnRcbiAgICAgICAgICBhY3Rpb249e2FjdGlvbiBhcyBBY3Rpb25KU09OfVxuICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICByZWNvcmQ9e3JlY29yZH1cbiAgICAgICAgLz5cbiAgICAgIDwvRHJhd2VyUG9ydGFsPlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXIgd2lkdGg9e2FjdGlvbi5jb250YWluZXJXaWR0aH0+XG4gICAgICA8QWN0aW9uSGVhZGVyXG4gICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgYWN0aW9uPXthY3Rpb259XG4gICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICBhY3Rpb25QZXJmb3JtZWQ9eyhyZXNwb25zZTogQWN0aW9uUmVzcG9uc2UpOiB2b2lkID0+IChcbiAgICAgICAgICBoYW5kbGVBY3Rpb25QZXJmb3JtZWQocmVjb3JkLCByZXNwb25zZSlcbiAgICAgICAgKX1cbiAgICAgIC8+XG4gICAgICA8QmFzZUFjdGlvbkNvbXBvbmVudFxuICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICByZWNvcmQ9e3JlY29yZH1cbiAgICAgIC8+XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlY29yZEFjdGlvblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IEJhc2VBY3Rpb25Db21wb25lbnQgZnJvbSAnLi4vYXBwL2Jhc2UtYWN0aW9uLWNvbXBvbmVudCdcbmltcG9ydCB7IFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUvc3RvcmUnXG5pbXBvcnQgeyBOb1Jlc291cmNlRXJyb3IsIE5vQWN0aW9uRXJyb3IgfSBmcm9tICcuLi9hcHAvZXJyb3ItbWVzc2FnZSdcbmltcG9ydCB7IFJlc291cmNlQWN0aW9uUGFyYW1zIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IHsgQWN0aW9uSGVhZGVyIH0gZnJvbSAnLi4vYXBwJ1xuaW1wb3J0IFdyYXBwZXIgZnJvbSAnLi91dGlscy93cmFwcGVyJ1xuaW1wb3J0IERyYXdlclBvcnRhbCBmcm9tICcuLi9hcHAvZHJhd2VyLXBvcnRhbCdcblxudHlwZSBQcm9wc0Zyb21TdGF0ZSA9IHtcbiAgcmVzb3VyY2VzOiBBcnJheTxSZXNvdXJjZUpTT04+O1xufVxuXG50eXBlIFByb3BzID0gUHJvcHNGcm9tU3RhdGUgJiBSb3V0ZUNvbXBvbmVudFByb3BzPFJlc291cmNlQWN0aW9uUGFyYW1zPlxuXG5jb25zdCBSZXNvdXJjZUFjdGlvbjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2VzLCBtYXRjaCB9ID0gcHJvcHNcbiAgY29uc3QgeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lIH0gPSBtYXRjaC5wYXJhbXNcblxuICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlcy5maW5kKHIgPT4gci5pZCA9PT0gcmVzb3VyY2VJZClcbiAgaWYgKCFyZXNvdXJjZSkge1xuICAgIHJldHVybiAoPE5vUmVzb3VyY2VFcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSAvPilcbiAgfVxuICBjb25zdCBhY3Rpb24gPSByZXNvdXJjZS5yZXNvdXJjZUFjdGlvbnMuZmluZChyID0+IHIubmFtZSA9PT0gYWN0aW9uTmFtZSlcbiAgaWYgKCFhY3Rpb24pIHtcbiAgICByZXR1cm4gKDxOb0FjdGlvbkVycm9yIHJlc291cmNlSWQ9e3Jlc291cmNlSWR9IGFjdGlvbk5hbWU9e2FjdGlvbk5hbWV9IC8+KVxuICB9XG5cbiAgaWYgKGFjdGlvbi5zaG93SW5EcmF3ZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPERyYXdlclBvcnRhbCB3aWR0aD17YWN0aW9uLmNvbnRhaW5lcldpZHRofT5cbiAgICAgICAgPEJhc2VBY3Rpb25Db21wb25lbnRcbiAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgIC8+XG4gICAgICA8L0RyYXdlclBvcnRhbD5cbiAgICApXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyIHdpZHRoPXthY3Rpb24uY29udGFpbmVyV2lkdGh9PlxuICAgICAgPEFjdGlvbkhlYWRlclxuICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgIGFjdGlvbj17YWN0aW9ufVxuICAgICAgLz5cbiAgICAgIDxCYXNlQWN0aW9uQ29tcG9uZW50XG4gICAgICAgIGFjdGlvbj17YWN0aW9ufVxuICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAvPlxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJlZHV4U3RhdGUpOiBQcm9wc0Zyb21TdGF0ZSA9PiAoe1xuICByZXNvdXJjZXM6IHN0YXRlLnJlc291cmNlcyxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShSZXNvdXJjZUFjdGlvbilcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJ1xuaW1wb3J0IHsgdXNlUm91dGVNYXRjaCwgdXNlTG9jYXRpb24gfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5cbmltcG9ydCB7IEJ1bGtBY3Rpb25QYXJhbXMgfSBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycy92aWV3LWhlbHBlcnMnXG5cbmltcG9ydCBBcGlDbGllbnQgZnJvbSAnLi4vLi4vdXRpbHMvYXBpLWNsaWVudCdcbmltcG9ydCBnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzIGZyb20gJy4uL2FwcC9yZWNvcmRzLXRhYmxlL3V0aWxzL2dldC1idWxrLWFjdGlvbnMtZnJvbS1yZWNvcmRzJ1xuaW1wb3J0IHsgQWN0aW9uSlNPTiwgUmVjb3JkSlNPTiwgUmVzb3VyY2VKU09OIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCBXcmFwcGVyIGZyb20gJy4vdXRpbHMvd3JhcHBlcidcbmltcG9ydCB7XG4gIEFjdGlvbkhlYWRlcixcbiAgRHJhd2VyUG9ydGFsLFxuICBCYXNlQWN0aW9uQ29tcG9uZW50LFxuICBFcnJvck1lc3NhZ2VCb3gsXG4gIE5vUmVzb3VyY2VFcnJvcixcbiAgTm9BY3Rpb25FcnJvcixcbn0gZnJvbSAnLi4vYXBwJ1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24sIHVzZU5vdGljZSwgdXNlUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9ob29rcydcblxudHlwZSBQcm9wc0Zyb21TdGF0ZSA9IHtcbiAgcmVzb3VyY2VzOiBBcnJheTxSZXNvdXJjZUpTT04+O1xufVxuXG50eXBlIE1hdGNoUGFyYW1zID0gUGljazxCdWxrQWN0aW9uUGFyYW1zLCAnYWN0aW9uTmFtZScgfCAncmVzb3VyY2VJZCc+XG5cbmNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuXG5jb25zdCBCdWxrQWN0aW9uOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgbWF0Y2ggPSB1c2VSb3V0ZU1hdGNoPE1hdGNoUGFyYW1zPigpXG4gIGNvbnN0IFtyZWNvcmRzLCBzZXRSZWNvcmRzXSA9IHVzZVN0YXRlPEFycmF5PFJlY29yZEpTT04+PihbXSlcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgdHJhbnNsYXRlTWVzc2FnZSB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICBjb25zdCBhZGROb3RpY2UgPSB1c2VOb3RpY2UoKVxuICBjb25zdCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKClcblxuICBjb25zdCB7IHJlc291cmNlSWQsIGFjdGlvbk5hbWUgfSA9IG1hdGNoLnBhcmFtc1xuICBjb25zdCByZXNvdXJjZSA9IHVzZVJlc291cmNlKHJlc291cmNlSWQpXG5cbiAgY29uc3QgZmV0Y2hSZWNvcmRzID0gKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHJlY29yZElkc1N0cmluZyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKS5nZXQoJ3JlY29yZElkcycpXG4gICAgY29uc3QgcmVjb3JkSWRzID0gcmVjb3JkSWRzU3RyaW5nID8gcmVjb3JkSWRzU3RyaW5nLnNwbGl0KCcsJykgOiBbXVxuICAgIHNldExvYWRpbmcodHJ1ZSlcblxuICAgIHJldHVybiBhcGkuYnVsa0FjdGlvbih7XG4gICAgICByZXNvdXJjZUlkLCByZWNvcmRJZHMsIGFjdGlvbk5hbWUsXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICBzZXRSZWNvcmRzKHJlc3BvbnNlLmRhdGEucmVjb3JkcylcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICBhZGROb3RpY2Uoe1xuICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGVNZXNzYWdlKCdlcnJvckZldGNoaW5nUmVjb3JkcycsIHJlc291cmNlSWQpLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgfSlcbiAgICAgIHRocm93IGVycm9yXG4gICAgfSlcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZmV0Y2hSZWNvcmRzKClcbiAgfSwgW21hdGNoLnBhcmFtcy5yZXNvdXJjZUlkLCBtYXRjaC5wYXJhbXMuYWN0aW9uTmFtZV0pXG5cbiAgaWYgKCFyZXNvdXJjZSkge1xuICAgIHJldHVybiAoPE5vUmVzb3VyY2VFcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSAvPilcbiAgfVxuXG4gIGlmICghcmVjb3JkcyAmJiAhbG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JNZXNzYWdlQm94IHRpdGxlPVwiTm8gcmVjb3Jkc1wiPlxuICAgICAgICA8cD57dHJhbnNsYXRlTWVzc2FnZSgnbm9SZWNvcmRzU2VsZWN0ZWQnLCByZXNvdXJjZUlkKX08L3A+XG4gICAgICA8L0Vycm9yTWVzc2FnZUJveD5cbiAgICApXG4gIH1cblxuICBjb25zdCBhY3Rpb24gPSBnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzKHJlY29yZHMgfHwgW10pLmZpbmQociA9PiByLm5hbWUgPT09IGFjdGlvbk5hbWUpXG5cbiAgaWYgKGxvYWRpbmcpIHtcbiAgICBjb25zdCBhY3Rpb25Gcm9tUmVzb3VyY2UgPSByZXNvdXJjZS5hY3Rpb25zLmZpbmQociA9PiByLm5hbWUgPT09IGFjdGlvbk5hbWUpXG4gICAgcmV0dXJuIGFjdGlvbkZyb21SZXNvdXJjZT8uc2hvd0luRHJhd2VyID8gKDxEcmF3ZXJQb3J0YWw+PExvYWRlciAvPjwvRHJhd2VyUG9ydGFsPikgOiA8TG9hZGVyIC8+XG4gIH1cblxuICBpZiAoIWFjdGlvbikge1xuICAgIHJldHVybiAoPE5vQWN0aW9uRXJyb3IgcmVzb3VyY2VJZD17cmVzb3VyY2VJZH0gYWN0aW9uTmFtZT17YWN0aW9uTmFtZX0gLz4pXG4gIH1cblxuICBpZiAoYWN0aW9uLnNob3dJbkRyYXdlcikge1xuICAgIHJldHVybiAoXG4gICAgICA8RHJhd2VyUG9ydGFsIHdpZHRoPXthY3Rpb24uY29udGFpbmVyV2lkdGh9PlxuICAgICAgICA8QmFzZUFjdGlvbkNvbXBvbmVudFxuICAgICAgICAgIGFjdGlvbj17YWN0aW9uIGFzIEFjdGlvbkpTT059XG4gICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgIHJlY29yZHM9e3JlY29yZHN9XG4gICAgICAgIC8+XG4gICAgICA8L0RyYXdlclBvcnRhbD5cbiAgICApXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyIHdpZHRoPXthY3Rpb24uY29udGFpbmVyV2lkdGh9PlxuICAgICAgeyFhY3Rpb24/LnNob3dJbkRyYXdlciA/IChcbiAgICAgICAgPEFjdGlvbkhlYWRlclxuICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgLz5cbiAgICAgICkgOiAnJ31cbiAgICAgIDxCYXNlQWN0aW9uQ29tcG9uZW50XG4gICAgICAgIGFjdGlvbj17YWN0aW9uIGFzIEFjdGlvbkpTT059XG4gICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgcmVjb3Jkcz17cmVjb3Jkc31cbiAgICAgIC8+XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1bGtBY3Rpb25cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9hcHAvZXJyb3ItYm91bmRhcnknXG5pbXBvcnQgeyBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUvc3RvcmUnXG5pbXBvcnQgRXJyb3JNZXNzYWdlQm94IGZyb20gJy4uL2FwcC9lcnJvci1tZXNzYWdlJ1xuXG5kZWNsYXJlIGNvbnN0IEFkbWluSlM6IHtcbiAgVXNlckNvbXBvbmVudHM6IFJlY29yZDxzdHJpbmcsIEZ1bmN0aW9uQ29tcG9uZW50Pjtcbn1cblxudHlwZSBTdGF0ZSA9IHtcbiAgaXNDbGllbnQ6IGJvb2xlYW47XG59XG5cbnR5cGUgUHJvcHNGcm9tU3RhdGUgPSB7XG4gIHBhZ2VzOiBSZWR1eFN0YXRlWydwYWdlcyddO1xufVxuXG50eXBlIFByb3BzID0gUHJvcHNGcm9tU3RhdGUgJiBSb3V0ZUNvbXBvbmVudFByb3BzPHtcbiAgcGFnZU5hbWU6IHN0cmluZztcbn0+XG5cbmNsYXNzIFBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NsaWVudDogZmFsc2UsXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ2xpZW50OiB0cnVlIH0pXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHBhZ2VzLCBtYXRjaCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgcGFyYW1zIH0gPSBtYXRjaFxuICAgIGNvbnN0IHsgcGFnZU5hbWUgfSA9IHBhcmFtc1xuICAgIGNvbnN0IHsgaXNDbGllbnQgfSA9IHRoaXMuc3RhdGVcblxuICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gcGFnZXMuZmluZChwYWdlID0+IHBhZ2UubmFtZSA9PT0gcGFnZU5hbWUpXG5cbiAgICBpZiAoIWN1cnJlbnRQYWdlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RXJyb3JNZXNzYWdlQm94IHRpdGxlPVwiVGhlcmUgaXMgbm8gcGFnZSBvZiBnaXZlbiBuYW1lXCI+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICBQYWdlOlxuICAgICAgICAgICAgPGI+e2AgXCIke3BhZ2VOYW1lfVwiIGB9PC9iPlxuICAgICAgICAgICAgZG9lcyBub3QgZXhpc3QuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L0Vycm9yTWVzc2FnZUJveD5cbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBDb21wb25lbnQgPSBBZG1pbkpTLlVzZXJDb21wb25lbnRzW2N1cnJlbnRQYWdlLmNvbXBvbmVudF1cblxuICAgIGlmICghQ29tcG9uZW50IHx8ICFpc0NsaWVudCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEVycm9yTWVzc2FnZUJveCB0aXRsZT1cIk5vIGNvbXBvbmVudCBzcGVjaWZpZWRcIj5cbiAgICAgICAgICA8cD5Zb3UgaGF2ZSB0byBzcGVjaWZ5IGNvbXBvbmVudCB3aGljaCB3aWxsIHJlbmRlciB0aGlzIFBhZ2U8L3A+XG4gICAgICAgIDwvRXJyb3JNZXNzYWdlQm94PlxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgPENvbXBvbmVudCAvPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJlZHV4U3RhdGUpOiBQcm9wc0Zyb21TdGF0ZSA9PiAoe1xuICBwYWdlczogc3RhdGUucGFnZXMsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUGFnZSlcbiIsImV4cG9ydCBkZWZhdWx0IChxdWVyeVN0cmluZzogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyeVN0cmluZylcbiAgZm9yIChjb25zdCBrZXkgb2YgcXVlcnkua2V5cygpKSB7XG4gICAgaWYgKGtleS5tYXRjaCgnZmlsdGVycy4nKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHVzZVJvdXRlTWF0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgQm94IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBCYXNlQWN0aW9uIGZyb20gJy4uL2FwcC9iYXNlLWFjdGlvbi1jb21wb25lbnQnXG5pbXBvcnQgRmlsdGVyRHJhd2VyIGZyb20gJy4uL2FwcC9maWx0ZXItZHJhd2VyJ1xuaW1wb3J0IHF1ZXJ5SGFzRmlsdGVyIGZyb20gJy4vdXRpbHMvcXVlcnktaGFzLWZpbHRlcidcbmltcG9ydCB7IFJlZHV4U3RhdGUgfSBmcm9tICcuLi8uLi9zdG9yZS9zdG9yZSdcbmltcG9ydCB7IE5vUmVzb3VyY2VFcnJvciwgTm9BY3Rpb25FcnJvciB9IGZyb20gJy4uL2FwcC9lcnJvci1tZXNzYWdlJ1xuaW1wb3J0IFZpZXdIZWxwZXJzLCB7XG4gIFJlc291cmNlQWN0aW9uUGFyYW1zLCBSZWNvcmRBY3Rpb25QYXJhbXMsIEJ1bGtBY3Rpb25QYXJhbXMsXG59IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzL3ZpZXctaGVscGVycydcbmltcG9ydCB7IEFjdGlvbkhlYWRlciB9IGZyb20gJy4uL2FwcCdcbmltcG9ydCB7IEFjdGlvbkpTT04sIFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnXG5cbnR5cGUgUHJvcHNGcm9tU3RhdGUgPSB7XG4gIHJlc291cmNlczogQXJyYXk8UmVzb3VyY2VKU09OPjtcbn1cblxudHlwZSBQcm9wcyA9IFByb3BzRnJvbVN0YXRlICYgUm91dGVDb21wb25lbnRQcm9wczxTdHJpbmdpZmllZEJ1bGs8UmVzb3VyY2VBY3Rpb25QYXJhbXM+PlxuXG50eXBlIFN0cmluZ2lmaWVkQnVsazxUPiA9IE9taXQ8VCwgJ3JlY29yZHNJZCc+ICYge1xuICByZWNvcmRzSWRzPzogc3RyaW5nO1xufVxuXG5jb25zdCBnZXRBY3Rpb24gPSAocmVzb3VyY2U6IFJlc291cmNlSlNPTik6IEFjdGlvbkpTT04gfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcblxuICBjb25zdCByZXNvdXJjZUlkID0gJzpyZXNvdXJjZUlkJ1xuICBjb25zdCBhY3Rpb25OYW1lID0gJzphY3Rpb25OYW1lJ1xuICBjb25zdCByZWNvcmRJZCA9ICc6cmVjb3JkSWQnXG5cbiAgY29uc3QgcmVjb3JkQWN0aW9uVXJsID0gaC5yZWNvcmRBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCByZWNvcmRJZCwgYWN0aW9uTmFtZSB9KVxuICBjb25zdCByZXNvdXJjZUFjdGlvblVybCA9IGgucmVzb3VyY2VBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lIH0pXG4gIGNvbnN0IGJ1bGtBY3Rpb25VcmwgPSBoLmJ1bGtBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lIH0pXG5cbiAgY29uc3QgcmVzb3VyY2VBY3Rpb25NYXRjaCA9IHVzZVJvdXRlTWF0Y2g8UmVzb3VyY2VBY3Rpb25QYXJhbXM+KHJlc291cmNlQWN0aW9uVXJsKVxuICBjb25zdCByZWNvcmRBY3Rpb25NYXRjaCA9IHVzZVJvdXRlTWF0Y2g8UmVjb3JkQWN0aW9uUGFyYW1zPihyZWNvcmRBY3Rpb25VcmwpXG4gIGNvbnN0IGJ1bGtBY3Rpb25NYXRjaCA9IHVzZVJvdXRlTWF0Y2g8UGljazxCdWxrQWN0aW9uUGFyYW1zLCAnYWN0aW9uTmFtZScgfCAncmVzb3VyY2VJZCc+PihidWxrQWN0aW9uVXJsKVxuXG4gIGNvbnN0IGFjdGlvbiA9IHJlc291cmNlQWN0aW9uTWF0Y2g/LnBhcmFtcy5hY3Rpb25OYW1lXG4gICAgfHwgcmVjb3JkQWN0aW9uTWF0Y2g/LnBhcmFtcy5hY3Rpb25OYW1lXG4gICAgfHwgYnVsa0FjdGlvbk1hdGNoPy5wYXJhbXMuYWN0aW9uTmFtZVxuXG4gIHJldHVybiBhY3Rpb24gPyByZXNvdXJjZS5hY3Rpb25zLmZpbmQoYSA9PiBhLm5hbWUgPT09IGFjdGlvbikgOiB1bmRlZmluZWRcbn1cblxuY29uc3QgUmVzb3VyY2VBY3Rpb246IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlc291cmNlcywgbWF0Y2gsIGxvY2F0aW9uIH0gPSBwcm9wc1xuICBjb25zdCB7IHJlc291cmNlSWQgfSA9IG1hdGNoLnBhcmFtc1xuXG4gIGNvbnN0IFtmaWx0ZXJWaXNpYmxlLCBzZXRGaWxlclZpc2libGVdID0gdXNlU3RhdGUocXVlcnlIYXNGaWx0ZXIobG9jYXRpb24uc2VhcmNoKSlcbiAgY29uc3QgW3RhZywgc2V0VGFnXSA9IHVzZVN0YXRlKCcnKVxuXG4gIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VzLmZpbmQociA9PiByLmlkID09PSByZXNvdXJjZUlkKVxuICBpZiAoIXJlc291cmNlKSB7XG4gICAgcmV0dXJuICg8Tm9SZXNvdXJjZUVycm9yIHJlc291cmNlSWQ9e3Jlc291cmNlSWR9IC8+KVxuICB9XG5cbiAgY29uc3QgcmVhbEVuZEFjdGlvbiA9IGdldEFjdGlvbihyZXNvdXJjZSlcbiAgaWYgKHJlYWxFbmRBY3Rpb24gJiYgIXJlYWxFbmRBY3Rpb24uc2hvd0luRHJhd2VyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IGxpc3RBY3Rpb25OYW1lID0gJ2xpc3QnXG4gIGNvbnN0IGxpc3RBY3Rpb24gPSByZXNvdXJjZS5yZXNvdXJjZUFjdGlvbnMuZmluZChyID0+IHIubmFtZSA9PT0gbGlzdEFjdGlvbk5hbWUpXG5cbiAgaWYgKCFsaXN0QWN0aW9uKSB7XG4gICAgcmV0dXJuICg8Tm9BY3Rpb25FcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSBhY3Rpb25OYW1lPXtsaXN0QWN0aW9uTmFtZX0gLz4pXG4gIH1cblxuICBjb25zdCB0b2dnbGVGaWx0ZXIgPSBsaXN0QWN0aW9uLnNob3dGaWx0ZXJcbiAgICA/ICgoKTogdm9pZCA9PiBzZXRGaWxlclZpc2libGUoIWZpbHRlclZpc2libGUpKVxuICAgIDogdW5kZWZpbmVkXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IHZhcmlhbnQ9XCJncmV5XCIgd2lkdGg9e2xpc3RBY3Rpb24uY29udGFpbmVyV2lkdGh9IG14PVwiYXV0b1wiPlxuICAgICAgPEFjdGlvbkhlYWRlclxuICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgIGFjdGlvbj17bGlzdEFjdGlvbn1cbiAgICAgICAgdGFnPXt0YWd9XG4gICAgICAgIHRvZ2dsZUZpbHRlcj17dG9nZ2xlRmlsdGVyfVxuICAgICAgLz5cbiAgICAgIDxCYXNlQWN0aW9uIGFjdGlvbj17bGlzdEFjdGlvbn0gcmVzb3VyY2U9e3Jlc291cmNlfSBzZXRUYWc9e3NldFRhZ30gLz5cbiAgICAgIHtsaXN0QWN0aW9uLnNob3dGaWx0ZXIgPyAoXG4gICAgICAgIDxGaWx0ZXJEcmF3ZXJcbiAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgaXNWaXNpYmxlPXtmaWx0ZXJWaXNpYmxlfVxuICAgICAgICAgIHRvZ2dsZUZpbHRlcj17KCk6IHZvaWQgPT4geyBzZXRGaWxlclZpc2libGUoIWZpbHRlclZpc2libGUpIH19XG4gICAgICAgIC8+XG4gICAgICApIDogJyd9XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSZWR1eFN0YXRlKTogUHJvcHNGcm9tU3RhdGUgPT4gKHtcbiAgcmVzb3VyY2VzOiBzdGF0ZS5yZXNvdXJjZXMsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUmVzb3VyY2VBY3Rpb24pXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1jaGlsZHJlbi1wcm9wICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgU3dpdGNoLCBSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyBjcmVhdGVHbG9iYWxTdHlsZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgQm94LCBPdmVybGF5LCBSZXNldCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nXG5cbmltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzL3ZpZXctaGVscGVycydcbmltcG9ydCBTaWRlYmFyIGZyb20gJy4vYXBwL3NpZGViYXIvc2lkZWJhcidcbmltcG9ydCBUb3BCYXIgZnJvbSAnLi9hcHAvdG9wLWJhcidcbmltcG9ydCBOb3RpY2UgZnJvbSAnLi9hcHAvbm90aWNlJ1xuXG5pbXBvcnQge1xuICBEYXNoYm9hcmQsIFJlc291cmNlQWN0aW9uLCBSZWNvcmRBY3Rpb24sIFBhZ2UsIEJ1bGtBY3Rpb24sIFJlc291cmNlLFxufSBmcm9tICcuL3JvdXRlcydcblxuY29uc3QgR2xvYmFsU3R5bGUgPSBjcmVhdGVHbG9iYWxTdHlsZWBcbiAgaHRtbCwgYm9keSwgI2FwcCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmdyZXkxMDB9XG4gIH1cbmBcblxuY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG5cbmNvbnN0IEFwcDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtzaWRlYmFyVmlzaWJsZSwgdG9nZ2xlU2lkZWJhcl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoc2lkZWJhclZpc2libGUpIHsgdG9nZ2xlU2lkZWJhcihmYWxzZSkgfVxuICB9LCBbbG9jYXRpb25dKVxuXG4gIGNvbnN0IHJlc291cmNlSWQgPSAnOnJlc291cmNlSWQnXG4gIGNvbnN0IGFjdGlvbk5hbWUgPSAnOmFjdGlvbk5hbWUnXG4gIGNvbnN0IHJlY29yZElkID0gJzpyZWNvcmRJZCdcbiAgY29uc3QgcGFnZU5hbWUgPSAnOnBhZ2VOYW1lJ1xuXG4gIGNvbnN0IHJlY29yZEFjdGlvblVybCA9IGgucmVjb3JkQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgcmVjb3JkSWQsIGFjdGlvbk5hbWUgfSlcbiAgY29uc3QgcmVzb3VyY2VBY3Rpb25VcmwgPSBoLnJlc291cmNlQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZSB9KVxuICBjb25zdCBidWxrQWN0aW9uVXJsID0gaC5idWxrQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZSB9KVxuICBjb25zdCByZXNvdXJjZVVybCA9IGgucmVzb3VyY2VVcmwoeyByZXNvdXJjZUlkIH0pXG4gIGNvbnN0IHBhZ2VVcmwgPSBoLnBhZ2VVcmwocGFnZU5hbWUpXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8UmVzZXQgLz5cbiAgICAgIDxHbG9iYWxTdHlsZSAvPlxuICAgICAgPEJveCBoZWlnaHQ9XCIxMDAlXCIgZmxleD5cbiAgICAgICAge3NpZGViYXJWaXNpYmxlID8gKFxuICAgICAgICAgIDxPdmVybGF5XG4gICAgICAgICAgICBvbkNsaWNrPXsoKTogdm9pZCA9PiB0b2dnbGVTaWRlYmFyKCFzaWRlYmFyVmlzaWJsZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxTaWRlYmFyIGlzVmlzaWJsZT17c2lkZWJhclZpc2libGV9IC8+XG4gICAgICAgIDxCb3ggZmxleCBmbGV4R3Jvdz17MX0gZmxleERpcmVjdGlvbj1cImNvbHVtblwiIG92ZXJmbG93WT1cImF1dG9cIiBiZz1cImJnXCI+XG4gICAgICAgICAgPFRvcEJhciB0b2dnbGVTaWRlYmFyPXsoKTogdm9pZCA9PiB0b2dnbGVTaWRlYmFyKCFzaWRlYmFyVmlzaWJsZSl9IC8+XG4gICAgICAgICAgPEJveCBwb3NpdGlvbj1cImFic29sdXRlXCIgdG9wPXswfSB6SW5kZXg9ezIwMDB9PlxuICAgICAgICAgICAgPE5vdGljZSAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17aC5kYXNoYm9hcmRVcmwoKX0gZXhhY3QgY29tcG9uZW50PXtEYXNoYm9hcmR9IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17cmVzb3VyY2VVcmx9IGNvbXBvbmVudD17UmVzb3VyY2V9IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17cGFnZVVybH0gZXhhY3QgY29tcG9uZW50PXtQYWdlfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17cmVjb3JkQWN0aW9uVXJsfSBjb21wb25lbnQ9e1JlY29yZEFjdGlvbn0gLz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPXtyZXNvdXJjZUFjdGlvblVybH0gY29tcG9uZW50PXtSZXNvdXJjZUFjdGlvbn0gLz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPXtidWxrQWN0aW9uVXJsfSBjb21wb25lbnQ9e0J1bGtBY3Rpb259IC8+XG4gICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cblxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFxuIiwiaW1wb3J0IHsgQXNzZXRzIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcblxuZXhwb3J0IGNvbnN0IEFTU0VUU19JTklUSUFMSVpFID0gJ0FTU0VUU19JTklUSUFMSVpFJ1xuXG5leHBvcnQgdHlwZSBpbml0aWFsaXplQXNzZXRzUmVzcG9uc2UgPSB7XG4gIHR5cGU6IHN0cmluZztcbiAgZGF0YTogQXNzZXRzO1xufVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUFzc2V0cyA9IChkYXRhOiBBc3NldHMpOiBpbml0aWFsaXplQXNzZXRzUmVzcG9uc2UgPT4gKHtcbiAgdHlwZTogQVNTRVRTX0lOSVRJQUxJWkUsXG4gIGRhdGEsXG59KVxuIiwiaW1wb3J0IHsgQnJhbmRpbmdPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcblxuZXhwb3J0IGNvbnN0IEJSQU5ESU5HX0lOSVRJQUxJWkUgPSAnQlJBTkRJTkdfSU5JVElBTElaRSdcblxuZXhwb3J0IHR5cGUgSW5pdGlhbGl6ZUJyYW5kaW5nUmVzcG9uc2UgPSB7XG4gIHR5cGU6IHR5cGVvZiBCUkFORElOR19JTklUSUFMSVpFO1xuICBkYXRhOiBCcmFuZGluZ09wdGlvbnM7XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplQnJhbmRpbmcgPSAoZGF0YTogQnJhbmRpbmdPcHRpb25zKTogSW5pdGlhbGl6ZUJyYW5kaW5nUmVzcG9uc2UgPT4gKHtcbiAgdHlwZTogQlJBTkRJTkdfSU5JVElBTElaRSxcbiAgZGF0YSxcbn0pXG4iLCJpbXBvcnQgeyBEYXNoYm9hcmRJblN0YXRlIH0gZnJvbSAnLi4vc3RvcmUnXG5cbmV4cG9ydCBjb25zdCBEQVNIQk9BUkRfSU5JVElBTElaRSA9ICdEQVNIQk9BUkRfSU5JVElBTElaRSdcblxuZXhwb3J0IHR5cGUgSW5pdGlhbGl6ZURhc2hib2FyZFJlc3BvbnNlID0ge1xuICB0eXBlOiB0eXBlb2YgREFTSEJPQVJEX0lOSVRJQUxJWkU7XG4gIGRhdGE6IERhc2hib2FyZEluU3RhdGU7XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplRGFzaGJvYXJkID0gKGRhdGE6IERhc2hib2FyZEluU3RhdGUpOiBJbml0aWFsaXplRGFzaGJvYXJkUmVzcG9uc2UgPT4gKHtcbiAgdHlwZTogREFTSEJPQVJEX0lOSVRJQUxJWkUsXG4gIGRhdGEsXG59KVxuIiwiaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnLi4vLi4vLi4vbG9jYWxlL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IExPQ0FMRV9JTklUSUFMSVpFID0gJ0xPQ0FMRV9JTklUSUFMSVpFJ1xuXG5leHBvcnQgdHlwZSBJbml0aWFsaXplTG9jYWxlUmVzcG9uc2UgPSB7XG4gIHR5cGU6IHR5cGVvZiBMT0NBTEVfSU5JVElBTElaRTtcbiAgZGF0YTogTG9jYWxlO1xufVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUxvY2FsZSA9IChkYXRhOiBMb2NhbGUpOiBJbml0aWFsaXplTG9jYWxlUmVzcG9uc2UgPT4gKHtcbiAgdHlwZTogTE9DQUxFX0lOSVRJQUxJWkUsXG4gIGRhdGEsXG59KVxuIiwiaW1wb3J0IHsgQWRtaW5QYWdlIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcblxuZXhwb3J0IGNvbnN0IFBBR0VTX0lOSVRJQUxJWkUgPSAnUEFHRVNfSU5JVElBTElaRSdcblxuZXhwb3J0IHR5cGUgSW5pdGlhbGl6ZVBhZ2VzUmVzcG9uc2UgPSB7XG4gIHR5cGU6IHR5cGVvZiBQQUdFU19JTklUSUFMSVpFO1xuICBkYXRhOiBBcnJheTxBZG1pblBhZ2U+O1xufVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVBhZ2VzID0gKGRhdGE6IEFycmF5PEFkbWluUGFnZT4pOiBJbml0aWFsaXplUGFnZXNSZXNwb25zZSA9PiAoe1xuICB0eXBlOiBQQUdFU19JTklUSUFMSVpFLFxuICBkYXRhLFxufSlcbiIsImltcG9ydCB7IFBhdGhzIH0gZnJvbSAnLi4vc3RvcmUnXG5cbmV4cG9ydCBjb25zdCBQQVRIU19JTklUSUFMSVpFID0gJ1BBVEhTX0lOSVRJQUxJWkUnXG5cbmV4cG9ydCB0eXBlIEluaXRpYWxpemVQYXRoc1Jlc3BvbnNlID0ge1xuICB0eXBlOiB0eXBlb2YgUEFUSFNfSU5JVElBTElaRTtcbiAgZGF0YTogUGF0aHM7XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplUGF0aHMgPSAoZGF0YTogUGF0aHMpOiBJbml0aWFsaXplUGF0aHNSZXNwb25zZSA9PiAoe1xuICB0eXBlOiBQQVRIU19JTklUSUFMSVpFLFxuICBkYXRhLFxufSlcbiIsImltcG9ydCB7IFJlc291cmNlSlNPTiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnXG5cbmV4cG9ydCBjb25zdCBSRVNPVVJDRVNfSU5JVElBTElaRSA9ICdSRVNPVVJDRVNfSU5JVElBTElaRSdcblxuZXhwb3J0IHR5cGUgSW5pdGlhbGl6ZVJlc291cmNlc1Jlc3BvbnNlID0ge1xuICB0eXBlOiB0eXBlb2YgUkVTT1VSQ0VTX0lOSVRJQUxJWkU7XG4gIGRhdGE6IEFycmF5PFJlc291cmNlSlNPTj47XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplUmVzb3VyY2VzID0gKGRhdGE6IEFycmF5PFJlc291cmNlSlNPTj4pOiBJbml0aWFsaXplUmVzb3VyY2VzUmVzcG9uc2UgPT4gKHtcbiAgdHlwZTogUkVTT1VSQ0VTX0lOSVRJQUxJWkUsXG4gIGRhdGEsXG59KVxuIiwiaW1wb3J0IHsgVmVyc2lvblByb3BzIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcblxuZXhwb3J0IGNvbnN0IFZFUlNJT05TX0lOSVRJQUxJWkUgPSAnVkVSU0lPTlNfSU5JVElBTElaRSdcblxuZXhwb3J0IHR5cGUgSW5pdGlhbGl6ZVZlcnNpb25zUmVzcG9uc2UgPSB7XG4gIHR5cGU6IHR5cGVvZiBWRVJTSU9OU19JTklUSUFMSVpFO1xuICBkYXRhOiBWZXJzaW9uUHJvcHM7XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplVmVyc2lvbnMgPSAoZGF0YTogVmVyc2lvblByb3BzKTogSW5pdGlhbGl6ZVZlcnNpb25zUmVzcG9uc2UgPT4gKHtcbiAgdHlwZTogVkVSU0lPTlNfSU5JVElBTElaRSxcbiAgZGF0YSxcbn0pXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycywgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7XG4gIFZFUlNJT05TX0lOSVRJQUxJWkUsXG4gIFNFU1NJT05fSU5JVElBTElaRSxcbiAgREFTSEJPQVJEX0lOSVRJQUxJWkUsXG4gIFBBVEhTX0lOSVRJQUxJWkUsXG4gIEFTU0VUU19JTklUSUFMSVpFLFxuICBCUkFORElOR19JTklUSUFMSVpFLFxuICBMT0NBTEVfSU5JVElBTElaRSxcbiAgUEFHRVNfSU5JVElBTElaRSxcbiAgUkVTT1VSQ0VTX0lOSVRJQUxJWkUsXG4gIFNFVF9OT1RJQ0VfUFJPR1JFU1MsXG4gIERST1BfTk9USUNFLFxuICBBRERfTk9USUNFIH0gZnJvbSAnLi9hY3Rpb25zJ1xuXG5pbXBvcnQgeyBBc3NldHMsIEJyYW5kaW5nT3B0aW9ucywgVmVyc2lvblByb3BzIH0gZnJvbSAnLi4vLi4vYWRtaW5qcy1vcHRpb25zLmludGVyZmFjZSdcbmltcG9ydCB7IFBhZ2VKU09OLCBSZXNvdXJjZUpTT04gfSBmcm9tICcuLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgREVGQVVMVF9QQVRIUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCB7IEN1cnJlbnRBZG1pbiB9IGZyb20gJy4uLy4uL2N1cnJlbnQtYWRtaW4uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnLi4vLi4vbG9jYWxlL2NvbmZpZydcbmltcG9ydCB7IE5vdGljZU1lc3NhZ2UgfSBmcm9tICcuLi9ob2Mvd2l0aC1ub3RpY2UnXG5cbmV4cG9ydCB0eXBlIERhc2hib2FyZEluU3RhdGUgPSB7XG4gIGNvbXBvbmVudD86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgTm90aWNlTWVzc2FnZUluU3RhdGUgPSBOb3RpY2VNZXNzYWdlICYge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGlkOiBzdHJpbmc7XG4gIHR5cGU6IE5vdGljZU1lc3NhZ2VbJ3R5cGUnXTtcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgUGF0aHMgPSB7XG4gIHJvb3RQYXRoOiBzdHJpbmc7XG4gIGxvZ291dFBhdGg6IHN0cmluZztcbiAgbG9naW5QYXRoOiBzdHJpbmc7XG4gIGFzc2V0c0NETj86IHN0cmluZztcbn1cblxuY29uc3QgcmVzb3VyY2VzUmVkdWNlciA9IChcbiAgc3RhdGU6IEFycmF5PFJlc291cmNlSlNPTj4gPSBbXSxcbiAgYWN0aW9uOiB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGRhdGE6IEFycmF5PFJlc291cmNlSlNPTj47XG4gIH0sXG4pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlIFJFU09VUkNFU19JTklUSUFMSVpFOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBwYWdlc1JlZHVjZXIgPSAoXG4gIHN0YXRlOiBBcnJheTxQYWdlSlNPTj4gPSBbXSxcbiAgYWN0aW9uOiB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGRhdGE6IEFycmF5PFBhZ2VKU09OPjtcbiAgfSxcbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgUEFHRVNfSU5JVElBTElaRTpcbiAgICByZXR1cm4gYWN0aW9uLmRhdGFcbiAgZGVmYXVsdDogcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuY29uc3QgbG9jYWxlc1JlZHVjZXIgPSAoXG4gIHN0YXRlOiBMb2NhbGUgPSB7IGxhbmd1YWdlOiAnZW4nLCB0cmFuc2xhdGlvbnM6IHt9IH0gYXMgTG9jYWxlLFxuICBhY3Rpb246IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgZGF0YTogTG9jYWxlO1xuICB9LFxuKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgY2FzZSBMT0NBTEVfSU5JVElBTElaRTpcbiAgICByZXR1cm4gYWN0aW9uLmRhdGFcbiAgZGVmYXVsdDogcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuY29uc3QgYnJhbmRpbmdSZWR1Y2VyID0gKHN0YXRlID0ge30sIGFjdGlvbjoge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IEJyYW5kaW5nT3B0aW9ucztcbn0pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlIEJSQU5ESU5HX0lOSVRJQUxJWkU6XG4gICAgcmV0dXJuIGFjdGlvbi5kYXRhXG4gIGRlZmF1bHQ6IHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmNvbnN0IGFzc2V0c1JlZHVjZXIgPSAoc3RhdGUgPSB7fSwgYWN0aW9uOiB7XG4gIHR5cGU6IHN0cmluZztcbiAgZGF0YTogQXNzZXRzO1xufSkgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgQVNTRVRTX0lOSVRJQUxJWkU6XG4gICAgcmV0dXJuIGFjdGlvbi5kYXRhXG4gIGRlZmF1bHQ6IHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmNvbnN0IHBhdGhzUmVkdWNlciA9IChcbiAgc3RhdGU6IFBhdGhzID0gREVGQVVMVF9QQVRIUyxcbiAgYWN0aW9uOiB7dHlwZTogc3RyaW5nOyBkYXRhOiBQYXRoc30sXG4pOiBQYXRocyA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgY2FzZSBQQVRIU19JTklUSUFMSVpFOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBkYXNoYm9hcmRSZWR1Y2VyID0gKHN0YXRlID0ge30sIGFjdGlvbjoge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IERhc2hib2FyZEluU3RhdGU7XG59KTogRGFzaGJvYXJkSW5TdGF0ZSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgY2FzZSBEQVNIQk9BUkRfSU5JVElBTElaRTpcbiAgICByZXR1cm4gYWN0aW9uLmRhdGFcbiAgZGVmYXVsdDogcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuY29uc3Qgc2Vzc2lvblJlZHVjZXIgPSAoXG4gIHN0YXRlOiBDdXJyZW50QWRtaW4gfCBudWxsID0gbnVsbCxcbiAgYWN0aW9uOiB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGRhdGE6IEN1cnJlbnRBZG1pbiB8IG51bGw7XG4gIH0sXG4pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlIFNFU1NJT05fSU5JVElBTElaRTpcbiAgICByZXR1cm4gYWN0aW9uLmRhdGFcbiAgZGVmYXVsdDogcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuY29uc3QgdmVyc2lvbnNSZWR1Y2VyID0gKHN0YXRlID0ge30sIGFjdGlvbjoge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IFZlcnNpb25Qcm9wcztcbn0pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlIFZFUlNJT05TX0lOSVRJQUxJWkU6XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkbWluOiBhY3Rpb24uZGF0YS5hZG1pbixcbiAgICAgIGFwcDogYWN0aW9uLmRhdGEuYXBwLFxuICAgIH1cbiAgZGVmYXVsdDogcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxudHlwZSBOb3RpY2VBcmdzID0geyBub3RpY2VJZDogc3RyaW5nOyBwcm9ncmVzczogbnVtYmVyIH1cblxuY29uc3Qgbm90aWNlc1JlZHVjZXIgPSAoc3RhdGU6IEFycmF5PE5vdGljZU1lc3NhZ2VJblN0YXRlPiA9IFtdLCBhY3Rpb246IHtcbiAgdHlwZTogc3RyaW5nO1xuICBkYXRhOiBOb3RpY2VNZXNzYWdlSW5TdGF0ZSB8IE5vdGljZUFyZ3M7XG59KTogQXJyYXk8Tm90aWNlTWVzc2FnZUluU3RhdGU+ID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlIEFERF9OT1RJQ0U6IHtcbiAgICBjb25zdCBub3RpY2VzID0gW2FjdGlvbi5kYXRhIGFzIE5vdGljZU1lc3NhZ2VJblN0YXRlXVxuICAgIHJldHVybiBub3RpY2VzXG4gIH1cbiAgY2FzZSBEUk9QX05PVElDRToge1xuICAgIHJldHVybiBzdGF0ZS5maWx0ZXIobm90aWNlID0+IG5vdGljZS5pZCAhPT0gKGFjdGlvbi5kYXRhIGFzIE5vdGljZUFyZ3MpLm5vdGljZUlkKVxuICB9XG4gIGNhc2UgU0VUX05PVElDRV9QUk9HUkVTUzoge1xuICAgIHJldHVybiBzdGF0ZS5tYXAobm90aWNlID0+ICh7XG4gICAgICAuLi5ub3RpY2UsXG4gICAgICBwcm9ncmVzczogbm90aWNlLmlkID09PSAoYWN0aW9uLmRhdGEgYXMgTm90aWNlQXJncykubm90aWNlSWRcbiAgICAgICAgPyBhY3Rpb24uZGF0YS5wcm9ncmVzc1xuICAgICAgICA6IG5vdGljZS5wcm9ncmVzcyxcbiAgICB9KSlcbiAgfVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZWR1eFN0YXRlID0ge1xuICByZXNvdXJjZXM6IEFycmF5PFJlc291cmNlSlNPTj47XG4gIGJyYW5kaW5nOiBCcmFuZGluZ09wdGlvbnM7XG4gIGFzc2V0czogQXNzZXRzO1xuICBwYXRoczogUGF0aHM7XG4gIHNlc3Npb246IEN1cnJlbnRBZG1pbiB8IG51bGw7XG4gIGRhc2hib2FyZDogRGFzaGJvYXJkSW5TdGF0ZTtcbiAgbm90aWNlczogQXJyYXk8Tm90aWNlTWVzc2FnZUluU3RhdGU+O1xuICB2ZXJzaW9uczogVmVyc2lvblByb3BzO1xuICBwYWdlczogQXJyYXk8UGFnZUpTT04+O1xuICBsb2NhbGU6IExvY2FsZTtcbn1cblxuY29uc3QgcmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VyczxSZWR1eFN0YXRlPih7XG4gIHJlc291cmNlczogcmVzb3VyY2VzUmVkdWNlcixcbiAgYnJhbmRpbmc6IGJyYW5kaW5nUmVkdWNlcixcbiAgYXNzZXRzOiBhc3NldHNSZWR1Y2VyLFxuICBwYXRoczogcGF0aHNSZWR1Y2VyLFxuICBzZXNzaW9uOiBzZXNzaW9uUmVkdWNlcixcbiAgZGFzaGJvYXJkOiBkYXNoYm9hcmRSZWR1Y2VyLFxuICBub3RpY2VzOiBub3RpY2VzUmVkdWNlcixcbiAgdmVyc2lvbnM6IHZlcnNpb25zUmVkdWNlcixcbiAgcGFnZXM6IHBhZ2VzUmVkdWNlcixcbiAgbG9jYWxlOiBsb2NhbGVzUmVkdWNlcixcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IChpbml0aWFsU3RhdGUgPSB7fSkgPT4gY3JlYXRlU3RvcmUocmVkdWNlciwgaW5pdGlhbFN0YXRlKVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgaW5pdFJlYWN0STE4bmV4dCB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5pbXBvcnQgaTE4biBmcm9tICdpMThuZXh0J1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9hcHBsaWNhdGlvbidcbmltcG9ydCBCYXNlUHJvcGVydHlDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUnXG5pbXBvcnQgY3JlYXRlU3RvcmUgZnJvbSAnLi9zdG9yZS9zdG9yZSdcbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgKiBhcyBBcHBDb21wb25lbnRzIGZyb20gJy4vY29tcG9uZW50cy9hcHAnXG5pbXBvcnQgKiBhcyBIb29rcyBmcm9tICcuL2hvb2tzJ1xuaW1wb3J0IEFwaUNsaWVudCBmcm9tICcuL3V0aWxzL2FwaS1jbGllbnQnXG5pbXBvcnQgd2l0aE5vdGljZSBmcm9tICcuL2hvYy93aXRoLW5vdGljZSdcbmltcG9ydCB7IGZsYXQgfSBmcm9tICcuLi91dGlscy9mbGF0J1xuXG5jb25zdCBlbnYgPSB7XG4gIE5PREVfRU5WOiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnLFxufVxuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHdpbmRvdy5SRURVWF9TVEFURSlcbmNvbnN0IHRoZW1lID0gd2luZG93LlRIRU1FXG5jb25zdCB7IGxvY2FsZSB9ID0gd2luZG93LlJFRFVYX1NUQVRFXG5cbmkxOG5cbiAgLnVzZShpbml0UmVhY3RJMThuZXh0KVxuICAuaW5pdCh7XG4gICAgcmVzb3VyY2VzOiB7XG4gICAgICBbbG9jYWxlLmxhbmd1YWdlXToge1xuICAgICAgICB0cmFuc2xhdGlvbjogbG9jYWxlLnRyYW5zbGF0aW9ucyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsbmc6IGxvY2FsZS5sYW5ndWFnZSxcbiAgICBpbnRlcnBvbGF0aW9uOiB7IGVzY2FwZVZhbHVlOiBmYWxzZSB9LFxuICB9KVxuXG5jb25zdCBBcHBsaWNhdGlvbiA9IChcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPFRoZW1lUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT5cbiAgICAgIDxCcm93c2VyUm91dGVyPlxuICAgICAgICA8QXBwIC8+XG4gICAgICA8L0Jyb3dzZXJSb3V0ZXI+XG4gICAgPC9UaGVtZVByb3ZpZGVyPlxuICA8L1Byb3ZpZGVyPlxuKVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbndpbmRvdy5yZWdlbmVyYXRvclJ1bnRpbWUgPSByZWdlbmVyYXRvclJ1bnRpbWVcblxuZXhwb3J0IGRlZmF1bHQge1xuICB3aXRoTm90aWNlLFxuICBBcHBsaWNhdGlvbixcbiAgVmlld0hlbHBlcnMsXG4gIFVzZXJDb21wb25lbnRzOiB7fSxcbiAgQXBpQ2xpZW50LFxuICBCYXNlUHJvcGVydHlDb21wb25lbnQsXG4gIGVudixcbiAgLi4uQXBwQ29tcG9uZW50cyxcbiAgLi4uSG9va3MsXG4gIGZsYXQsXG4gIC8vIFRPRE86IHJlbW92ZSB0aGlzIGZyb20gdGhlIG5leHQgcmVsZWFzZVxuICBmbGF0dGVuOiBmbGF0LmZsYXR0ZW4sXG4gIHVuZmxhdHRlbjogZmxhdC51bmZsYXR0ZW4sXG59XG4iXSwibmFtZXMiOlsidW5kZWZpbmVkIiwicmVxdWlyZSQkMCIsImdsb2JhbEFueSIsIndpbmRvdyIsImVycm9yIiwibWVzc2FnZSIsInJ1bkRhdGUiLCJEYXRlIiwiVmlld0hlbHBlcnMiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJvcHRzIiwiZ2V0UGF0aHMiLCJyb290UGF0aCIsIlJFRFVYX1NUQVRFIiwicGF0aHMiLCJ1cmxCdWlsZGVyIiwic2VhcmNoIiwic2VwYXJhdG9yIiwicmVwbGFjZSIsIlJlZ0V4cCIsInN0YXJ0c1dpdGgiLCJwYXJ0cyIsImpvaW4iLCJsb2dpblVybCIsImxvZ2luUGF0aCIsImxvZ291dFVybCIsImxvZ291dFBhdGgiLCJkYXNoYm9hcmRVcmwiLCJwYWdlVXJsIiwicGFnZU5hbWUiLCJlZGl0VXJsIiwicmVzb3VyY2VJZCIsInJlY29yZElkIiwicmVjb3JkQWN0aW9uVXJsIiwiYWN0aW9uTmFtZSIsInNob3dVcmwiLCJkZWxldGVVcmwiLCJuZXdVcmwiLCJyZXNvdXJjZUFjdGlvblVybCIsImxpc3RVcmwiLCJidWxrRGVsZXRlVXJsIiwicmVjb3JkSWRzIiwiYnVsa0FjdGlvblVybCIsInJlc291cmNlVXJsIiwidXJsIiwibGVuZ3RoIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJzZXQiLCJ0b1N0cmluZyIsImFzc2V0UGF0aCIsImFzc2V0IiwiYXNzZXRzQ0ROIiwiVVJMIiwiaHJlZiIsImdldFRpbWUiLCJhbGxvd092ZXJyaWRlIiwiT3JpZ2luYWxDb21wb25lbnQiLCJuYW1lIiwiV3JhcHBlckNvbXBvbmVudCIsInByb3BzIiwiQ29tcG9uZW50IiwiQWRtaW5KUyIsIlVzZXJDb21wb25lbnRzIiwiUmVhY3QiLCJTdHlsZWRMb2dvIiwic3R5bGVkIiwiTGluayIsInRoZW1lR2V0IiwiaCIsIlNpZGViYXJCcmFuZGluZyIsImJyYW5kaW5nIiwibG9nbyIsImNvbXBhbnlOYW1lIiwiY3NzQ2xhc3MiLCJiYXNlUHJvcGVydHlPZiIsImdsb2JhbCIsImZyZWVHbG9iYWwiLCJTeW1ib2wiLCJyb290Iiwib2JqZWN0UHJvdG8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJpc09iamVjdExpa2UiLCJiYXNlR2V0VGFnIiwiaXNBcnJheSIsImFycmF5TWFwIiwiaXNTeW1ib2wiLCJiYXNlVG9TdHJpbmciLCJkZWJ1cnJMZXR0ZXIiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJlQ29tYm9IYWxmTWFya3NSYW5nZSIsInJzQ29tYm9TeW1ib2xzUmFuZ2UiLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwicnNBcG9zIiwiYXJyYXlSZWR1Y2UiLCJ3b3JkcyIsImRlYnVyciIsImJhc2VTbGljZSIsInJzQXN0cmFsUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNaV0oiLCJyc0ZpdHoiLCJyc01vZGlmaWVyIiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJlT3B0TW9kIiwicnNPcHRWYXIiLCJyc09wdEpvaW4iLCJyc1NlcSIsImhhc1VuaWNvZGUiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInN0cmluZ1RvQXJyYXkiLCJjYXN0U2xpY2UiLCJjcmVhdGVDYXNlRmlyc3QiLCJjcmVhdGVDb21wb3VuZGVyIiwidXBwZXJGaXJzdCIsImZvcm1hdE5hbWUiLCJzcGxpdCIsInRyYW5zbGF0ZSIsImkxOG4iLCJrZXkiLCJyZWFsT3B0aW9ucyIsImZvcm1hdHRlZE5hbWUiLCJrZXlzIiwiZXhpc3RzIiwidCIsImRlZmF1bHRWYWx1ZSIsInN0YXJ0Q2FzZSIsImNyZWF0ZUZ1bmN0aW9ucyIsInRyYW5zbGF0ZUFjdGlvbiIsInRyYW5zbGF0ZUJ1dHRvbiIsImJ1dHRvbkxhYmVsIiwidHJhbnNsYXRlTGFiZWwiLCJsYWJlbCIsInRyYW5zbGF0ZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidHJhbnNsYXRlTWVzc2FnZSIsIm1lc3NhZ2VOYW1lIiwidGEiLCJ0YiIsInRsIiwidHAiLCJ0bSIsInVzZVRyYW5zbGF0aW9uIiwicmVzdCIsIm9yaWdpbmFsVXNlVHJhbnNsYXRpb24iLCJ0cmFuc2xhdGVGdW5jdGlvbnMiLCJTaWRlYmFyUGFnZXMiLCJwYWdlcyIsImxvY2F0aW9uIiwidXNlTG9jYXRpb24iLCJoaXN0b3J5IiwidXNlSGlzdG9yeSIsImlzQWN0aXZlIiwicGFnZSIsInBhdGhuYW1lIiwibWF0Y2giLCJlbGVtZW50cyIsIm1hcCIsImlkIiwiaXNTZWxlY3RlZCIsImljb24iLCJvbkNsaWNrIiwiZXZlbnQiLCJlbGVtZW50IiwicHJldmVudERlZmF1bHQiLCJwdXNoIiwicHJldmlvdXNQYWdlIiwiTmF2aWdhdGlvbiIsIlNpZGViYXJGb290ZXIiLCJCb3giLCJTb2Z0d2FyZUJyb3RoZXJzIiwiaXNPblNlcnZlciIsImNoZWNrUmVzcG9uc2UiLCJyZXNwb25zZSIsIm9yaWdpbiIsInJlcXVlc3QiLCJyZXNwb25zZVVSTCIsImFsZXJ0IiwiYXNzaWduIiwiQXBpQ2xpZW50IiwiYmFzZVVSTCIsImdldEJhc2VVcmwiLCJjbGllbnQiLCJheGlvcyIsImNyZWF0ZSIsInNlYXJjaFJlY29yZHMiLCJyZXNvdXJjZUFjdGlvbiIsImRhdGEiLCJyZWNvcmRzIiwiYXhpb3NQYXJhbXMiLCJxIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWV0aG9kIiwicmVjb3JkQWN0aW9uIiwiYnVsa0FjdGlvbiIsInBhcmFtcyIsImdldERhc2hib2FyZCIsImdldCIsImdldFBhZ2UiLCJGT1JNX1ZBTFVFX05VTEwiLCJGT1JNX1ZBTFVFX0VNUFRZX09CSkVDVCIsIkZPUk1fVkFMVUVfRU1QVFlfQVJSQVkiLCJpc09iamVjdE9yQXJyYXkiLCJ2YWx1ZSIsIkZpbGUiLCJwYXJhbXNUb0Zvcm1EYXRhIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwiQXJyYXkiLCJ0b0lTT1N0cmluZyIsIkFERF9OT1RJQ0UiLCJhZGROb3RpY2UiLCJ0eXBlIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0ciIsInByb2dyZXNzIiwidXNlTm90aWNlIiwiZGlzcGF0Y2giLCJ1c2VEaXNwYXRjaCIsIm5vdGljZSIsIm1lcmdlUmVjb3JkUmVzcG9uc2UiLCJyZWNvcmQiLCJlcnJvcnMiLCJwb3B1bGF0ZWQiLCJERUxJTUlURVIiLCJwcm9wZXJ0eUtleVJlZ2V4IiwicHJvcGVydHlQYXRoIiwiZGVsaW1pdGVyIiwiZXNjYXBlZERlbGltaXRlciIsImVzY2FwZWREZWxpbWl0ZXJPckluZGV4IiwicGF0aCIsImluY2x1ZGVBbGxTaWJsaW5ncyIsInNlbGVjdFBhcmFtcyIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eUFycmF5Iiwic2VsZWN0ZWQiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJnbG9iYWxNZW1vIiwicmVnZXgiLCJmaWx0ZXJlZCIsIm1lbW8iLCJmaWx0ZXJPdXRQYXJhbXMiLCJnbG9iYWxGaWx0ZXJlZCIsInBhdGhUb1BhcnRzIiwiYWxsUGFydHMiLCJza2lwQXJyYXlJbmRleGVzIiwicGFydCIsImlzTmFOIiwiaXNPYmplY3QiLCJwYXJhbXNDb3B5IiwiZmxhdHRlbmVkIiwiZmxhdHRlbiIsInNsaWNlIiwiaW5jbHVkZXMiLCJURU1QX0hPTERJTkdfS0VZIiwidW5mbGF0dGVuIiwiZmluZCIsInNlbGVjdGVkUGFyYW1zIiwibmVzdGVkUHJvcGVydGllcyIsImluZGV4IiwibmV3S2V5IiwibWVyZ2UiLCJtZXJnZVBhcmFtcyIsImZsYXR0ZW5QYXJhbXMiLCJyZXZlcnNlIiwibWVyZ2VQYXJhbSIsInJlbW92ZVBhdGgiLCJwYXJlbnRQYXRocyIsInBhcmVudFBhdGgiLCJwYXJlbnRJbmRleCIsInBhcmVudCIsInByZXZpb3VzUGF0aHMiLCJwcmV2aW91c1BhdGhJbmRleCIsInNwbGljZSIsImZsYXQiLCJ1cGRhdGVSZWNvcmQiLCJwcm9wZXJ0eSIsInNlbGVjdGVkUmVjb3JkIiwicHJldmlvdXNSZWNvcmQiLCJwb3B1bGF0ZWRNb2RpZmllZCIsInBvcHVsYXRlZENvcHkiLCJpc0VudGlyZVJlY29yZEdpdmVuIiwicHJvcGVydHlPclJlY29yZCIsImZpbHRlclJlY29yZFBhcmFtcyIsImluY2x1ZGVQYXJhbXMiLCJpc1Byb3BlcnR5UGVybWl0dGVkIiwic29tZSIsImFwaSIsInVzZVJlY29yZCIsImluaXRpYWxSZWNvcmQiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsInVzZVN0YXRlIiwiaXNTeW5jZWQiLCJzZXRJc1N5bmNlZCIsInNldFByb2dyZXNzIiwiZmlsdGVyZWRSZWNvcmQiLCJzZXRSZWNvcmQiLCJzZXRGaWx0ZXJlZFJlY29yZCIsInVzZUNhbGxiYWNrIiwibmV3UmVjb3JkIiwiRnVuY3Rpb24iLCJvbk5vdGljZSIsImhhbmRsZUNoYW5nZSIsImluY29taW5nUmVjb3JkIiwiY29uc29sZSIsIndhcm4iLCJoYW5kbGVTdWJtaXQiLCJjdXN0b21QYXJhbXMiLCJzdWJtaXRPcHRpb25zIiwibWVyZ2VkUGFyYW1zIiwib25VcGxvYWRQcm9ncmVzcyIsImUiLCJyb3VuZCIsImxvYWRlZCIsInRvdGFsIiwiaGVhZGVycyIsInByb21pc2UiLCJ0aGVuIiwidXBkYXRlT25TYXZlIiwicHJldiIsImNhdGNoIiwic3VibWl0IiwiYWN0aW9uSGFzQ29tcG9uZW50IiwiYWN0aW9uIiwiY29tcG9uZW50IiwiYWN0aW9uSHJlZiIsImhhc0hhbmRsZXIiLCJocmVmTWFwIiwicmVzb3VyY2UiLCJidWxrIiwiYWN0aW9uVHlwZSIsIkVycm9yIiwiY2FsbEFjdGlvbkFwaSIsImJ1aWxkQWN0aW9uQ2FsbEFwaVRyaWdnZXIiLCJhY3Rpb25SZXNwb25zZUhhbmRsZXIiLCJjYWxsQXBpIiwiYnVpbGRBY3Rpb25UZXN0SWQiLCJidWlsZEFjdGlvbkNsaWNrSGFuZGxlciIsImhhbmRsZUFjdGlvbkNsaWNrIiwic3RvcFByb3BhZ2F0aW9uIiwiZ3VhcmQiLCJjb25maXJtIiwiUkVGUkVTSF9LRVkiLCJJR05PUkVfUEFSQU1TX0tFWSIsImFwcGVuZEZvcmNlUmVmcmVzaCIsInNlYXJjaFBhcmFtc0lkeCIsImxhc3RJbmRleE9mIiwidXJsU2VhcmNoUGFyYW1zIiwic3Vic3RyaW5nIiwib2xkUGFyYW1zIiwic2hvdWxkSWdub3JlT2xkUGFyYW1zIiwibmV3UGFyYW1zIiwiaGFzRm9yY2VSZWZyZXNoIiwicmVtb3ZlRm9yY2VSZWZyZXNoIiwiZGVsZXRlIiwidXNlQWN0aW9uUmVzcG9uc2VIYW5kbGVyIiwib25BY3Rpb25DYWxsIiwicmVkaXJlY3RVcmwiLCJhcHBlbmRlZCIsInVzZUFjdGlvbiIsImhhbmRsZUNsaWNrIiwiU0VTU0lPTl9JTklUSUFMSVpFIiwic2V0Q3VycmVudEFkbWluIiwidXNlQ3VycmVudEFkbWluIiwiY3VycmVudEFkbWluIiwidXNlU2VsZWN0b3IiLCJzdGF0ZSIsInNlc3Npb24iLCJhZG1pbiIsInVzZUxvY2FsU3RvcmFnZSIsImluaXRpYWxWYWx1ZSIsInN0b3JlZFZhbHVlIiwic2V0U3RvcmVkVmFsdWUiLCJpdGVtIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImxvZyIsInNldFZhbHVlIiwidmFsdWVUb1N0b3JlIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsInJlZ0V4cCIsInVzZU5hdmlnYXRpb25SZXNvdXJjZXMiLCJyZXNvdXJjZXMiLCJvcGVuRWxlbWVudHMiLCJzZXRPcGVuRWxlbWVudHMiLCJlbnJpY2hSZXNvdXJjZSIsInVzZU1lbW8iLCJyZXMiLCJuYXZpZ2F0aW9uIiwic2hvdyIsImlzT3BlbiIsInZhbHVlcyIsInVzZVJlY29yZHMiLCJzZXRSZWNvcmRzIiwicGVyUGFnZSIsInNldFBlclBhZ2UiLCJzZXRQYWdlIiwic2V0VG90YWwiLCJkaXJlY3Rpb24iLCJzZXREaXJlY3Rpb24iLCJzb3J0QnkiLCJzZXRTb3J0QnkiLCJmZXRjaERhdGEiLCJsaXN0QWN0aW9uUmVzcG9uc2UiLCJtZXRhIiwidXNlRWZmZWN0IiwibG9jYXRpb25TdGF0ZSIsInVzZVNlbGVjdGVkUmVjb3JkcyIsInNlbGVjdGVkUmVjb3JkcyIsInNldFNlbGVjdGVkUmVjb3JkcyIsImhhbmRsZVNlbGVjdCIsInNlbGVjdGVkSW5kZXgiLCJmaW5kSW5kZXgiLCJuZXdTZWxlY3RlZFJlY29yZHMiLCJoYW5kbGVTZWxlY3RBbGwiLCJtaXNzaW5nIiwiYnVsa0FjdGlvbnMiLCJ1c2VSZXNvdXJjZSIsImZvdW5kUmVzb3VyY2UiLCJTaWRlYmFyUmVzb3VyY2VTZWN0aW9uT3JpZ2luYWwiLCJTaWRlYmFyUmVzb3VyY2VTZWN0aW9uIiwiU3R5bGVkU2lkZWJhciIsImRlZmF1bHRQcm9wcyIsInBvc2l0aW9uIiwid2lkdGgiLCJib3JkZXJSaWdodCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiekluZGV4IiwiYmciLCJTaWRlYmFyT3JpZ2luYWwiLCJpc1Zpc2libGUiLCJzb2Z0d2FyZUJyb3RoZXJzIiwiU2lkZWJhciIsIkxvZ2dlZEluIiwiZHJvcEFjdGlvbnMiLCJDdXJyZW50VXNlck5hdiIsImVtYWlsIiwidGl0bGUiLCJhdmF0YXJVcmwiLCJPdmVycmlkYWJsZUxvZ2dlZEluIiwiVmVyc2lvbkl0ZW0iLCJUZXh0IiwiY29sb3IiLCJWZXJzaW9uIiwidmVyc2lvbnMiLCJhcHAiLCJ2ZXJzaW9uIiwiTmF2QmFyIiwidGhlbWUiLCJzaXplcyIsIm5hdmJhckhlaWdodCIsImNvbG9ycyIsIndoaXRlIiwiY2xhc3NOYW1lIiwiVG9wQmFyIiwidG9nZ2xlU2lkZWJhciIsImN1cnNvciIsIkljb24iLCJEUk9QX05PVElDRSIsImRyb3BOb3RpY2UiLCJub3RpY2VJZCIsIlNFVF9OT1RJQ0VfUFJPR1JFU1MiLCJzZXROb3RpY2VQcm9ncmVzcyIsIlRJTUVfVE9fRElTQVBQRUFSIiwiTm90aWNlRWxlbWVudCIsInRpbWVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJkcm9wIiwibm90aWZ5UHJvZ3Jlc3MiLCJzZXRJbnRlcnZhbCIsInNldFN0YXRlIiwic2V0VGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbmRlciIsIk1lc3NhZ2VCb3giLCJtaW5XaWR0aCIsIk5vdGljZUJveCIsIm5vdGljZXMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJDb25uZWN0ZWROb3RpY2VCb3giLCJjb25uZWN0IiwicGFnZUhlYWRlckhlaWdodCIsInBhZ2VIZWFkZXJQYWRkaW5nWSIsInBhZ2VIZWFkZXJQYWRkaW5nWCIsIkRhc2hib2FyZEhlYWRlciIsIklsbHVzdHJhdGlvbiIsIkgyIiwiYm94ZXMiLCJ2YXJpYW50Iiwic3VidGl0bGUiLCJDYXJkIiwiZmxleCIsImdyZXkxMDAiLCJwcmltYXJ5MTAwIiwic2hhZG93cyIsImNhcmRIb3ZlciIsImJveFNoYWRvdyIsIkRhc2hib2FyZCIsImJveCIsIkg1IiwiSDQiLCJCdXR0b24iLCJFcnJvck1lc3NhZ2UiLCJFcnJvckJvdW5kYXJ5IiwiY29tcG9uZW50RGlkQ2F0Y2giLCJjaGlsZHJlbiIsImlzQ2xpZW50IiwiZGFzaGJvYXJkIiwiRGVmYXVsdERhc2hib2FyZCIsInJlYWN0IiwiUmVhY3RfX2RlZmF1bHQiLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwiY3NzQm94TW9kZWwiLCJyZWR1eCIsInVzZU1lbW9PbmUiLCJyZWFjdFJlZHV4IiwiQWRkTmV3SXRlbUJ1dHRvbiIsIlByb3BlcnR5RGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsIlRvb2x0aXAiLCJQcm9wZXJ0eUxhYmVsIiwibGFiZWxQcm9wcyIsImhpZGVMYWJlbCIsIkxhYmVsIiwiaXNSZXF1aXJlZCIsImNvbnZlcnRUb1N1YlByb3BlcnR5IiwiYXJyYXlQcm9wZXJ0eSIsImlzRHJhZ2dhYmxlIiwicmVtb3ZlU3ViUHJvcGVydHkiLCJzdWJQcm9wZXJ0eVBhdGgiLCJwb3B1bGF0ZWRLZXlNYXAiLCJwcm9wZXJ0eUtleSIsIm5ld1BvcHVsYXRlZEtleU1hcCIsIm5ld1BvcHVsYXRlZCIsIm5ld1Byb3BlcnR5S2V5Iiwib2xkUHJvcGVydHlLZXkiLCJJdGVtUmVuZGVyZXIiLCJJdGVtQ29tcG9uZW50Iiwib25EZWxldGUiLCJ1bmlxdWVEcmFnZ2FibGVJZCIsImJ0b2EiLCJ1bmVzY2FwZSIsIkRyYWdnYWJsZSIsInByb3ZpZGVkIiwiaW5uZXJSZWYiLCJkcmFnZ2FibGVQcm9wcyIsImRyYWdIYW5kbGVQcm9wcyIsIklucHV0c0luU2VjdGlvbiIsIm9uQ2hhbmdlIiwiaXRlbXMiLCJhZGROZXciLCJuZXdJdGVtcyIsInN1YlByb3BlcnRpZXMiLCJyZW1vdmVJdGVtIiwic3ViUHJvcGVydHkiLCJoYW5kbGVPbkRyYWdFbmQiLCJyZXN1bHQiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsIml0ZW1zQ29weSIsImZyb20iLCJzb3VyY2VJdGVtIiwiRHJhZ0Ryb3BDb250ZXh0IiwiRHJvcHBhYmxlIiwiU2VjdGlvbiIsImRyb3BwYWJsZVByb3BzIiwiaSIsIml0ZW1Qcm9wZXJ0eSIsInBsYWNlaG9sZGVyIiwiRWRpdCIsInRlc3RJZCIsIkZvcm1Hcm91cCIsIkZvcm1NZXNzYWdlIiwiTGlzdCIsIlNob3ciLCJQdXJlQ29tcG9uZW50IiwiVmFsdWVHcm91cCIsImlzSWQiLCJzdWJQcm9wZXJ0eVdpdGhQYXRoIiwicmVuZGVySXRlbXMiLCJzaG93QWN0aW9uIiwicmVjb3JkQWN0aW9ucyIsImEiLCJ0aXRsZVByb3BlcnR5IiwiRGVmYXVsdFByb3BlcnR5VmFsdWUiLCJyYXdWYWx1ZSIsImF2YWlsYWJsZVZhbHVlcyIsIm9wdGlvbiIsIm9wdCIsIkJhZGdlIiwicmVjb3JkUHJvcGVydHlJc0VxdWFsIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwicHJldlZhbHVlIiwibmV4dFZhbHVlIiwicHJldkVycm9yIiwibmV4dEVycm9yIiwiQm9vbGVhbiIsIlNlbGVjdEVkaXQiLCJwcm9wVmFsdWUiLCJzdHlsZXMiLCJzZWxlY3RTdHlsZXMiLCJhdiIsIlNlbGVjdCIsInMiLCJpc0Rpc2FibGVkIiwiVGV4dEVkaXQiLCJJbnB1dCIsInRhcmdldCIsImtleUNvZGUiLCJ3aXRoVGhlbWUiLCJGaWx0ZXIiLCJoYW5kbGVJbnB1dENoYW5nZSIsImJpbmQiLCJoYW5kbGVTZWxlY3RDaGFuZ2UiLCJyZW5kZXJJbnB1dCIsImZpbHRlcktleSIsImZpbHRlclN0eWxlcyIsInBhcnNlVmFsdWUiLCJDaGVja0JveCIsImlubGluZSIsIkJvb2xlYW5Qcm9wZXJ0eVZhbHVlIiwiYmFzZSIsIm1hcFZhbHVlIiwidHJhbnNsYXRpb24iLCJvIiwiRGF0ZVBpY2tlciIsImRhdGUiLCJwcm9wZXJ0eVR5cGUiLCJmb3JtYXREYXRlUHJvcGVydHkiLCJQQVJBTV9TRVBBUkFUT1IiLCJub3JtYWxpemVLZXlzIiwiZmlsdGVycyIsIm5vcm1hbGl6ZWQiLCJwb3B1bGF0ZSIsInJlZmVyZW5jZVJlc291cmNlIiwiZGVjb3JhdGUiLCJnZXRQcm9wZXJ0eUJ5S2V5IiwicmVmZXJlbmNlIiwiZmluZE9uZSIsImNhbGxiYWNrIiwiaW5pdGlhbCIsIkJhY2tlbmRGaWx0ZXIiLCJmcm9tS2V5IiwidG9LZXkiLCJmcm9tVmFsdWUiLCJ0b1ZhbHVlIiwicHJvcGVydHlQcm9wcyIsInF1aWxsIiwiY3VzdG9tUHJvcHMiLCJtb2R1bGVzIiwidG9vbGJhciIsIkRlZmF1bHRRdWlsbFRvb2xiYXJPcHRpb25zIiwiUmljaFRleHQiLCJjb250ZW50IiwiY29udGVudFJlZiIsImNyZWF0ZVJlZiIsImN1cnJlbnQiLCJpbm5lckhUTUwiLCJvcmlnaW5hbCIsImxvYWRPcHRpb25zIiwiaW5wdXRWYWx1ZSIsIm9wdGlvblJlY29yZHMiLCJvcHRpb25SZWNvcmQiLCJzZWxlY3RlZElkIiwibG9hZGVkUmVjb3JkIiwic2V0TG9hZGVkUmVjb3JkIiwibG9hZGluZ1JlY29yZCIsInNldExvYWRpbmdSZWNvcmQiLCJzZWxlY3RlZFZhbHVlIiwic2VsZWN0ZWRPcHRpb24iLCJjIiwiZmluYWxseSIsIlN0eWxlZExpbmsiLCJCdXR0b25DU1MiLCJzcGFjZSIsInhzIiwiUmVmZXJlbmNlVmFsdWUiLCJyZWZJZCIsInIiLCJsaW5lIiwiaXNJbnB1dCIsInNldElzSW5wdXQiLCJJbnB1dEdyb3VwIiwidHlwZXMiLCJ0ZXh0YXJlYSIsImJvb2xlYW4iLCJkYXRldGltZSIsInBhc3N3b3JkIiwicmljaHRleHQiLCJzdHJpbmciLCJkZWZhdWx0VHlwZSIsIm51bWJlciIsImZsb2F0IiwibWl4ZWQiLCJCYXNlUHJvcGVydHlDb21wb25lbnQiLCJiYXNlUHJvcGVydHkiLCJ3aGVyZSIsImNvbXBvbmVudHMiLCJBcnJheVR5cGUiLCJNaXhlZCIsIk1peGVkVHlwZSIsImNhbWVsaXplUHJvcGVydHlUeXBlIiwiZWRpdCIsImxpc3QiLCJCYXNlUHJvcGVydHlDb21wb25lbnRFeHRlbmRlZCIsIkRlZmF1bHRUeXBlIiwiRGF0ZVRpbWUiLCJSZWZlcmVuY2UiLCJUZXh0QXJlYSIsIlBhc3N3b3JkIiwiQnJlYWRjcnVtYkxpbmsiLCJncmV5NDAiLCJmb250IiwibGluZUhlaWdodHMiLCJkZWZhdWx0IiwiZm9udFNpemVzIiwiQnJlYWRjcnVtYnMiLCJhY3Rpb25zIiwiYWN0aW9uc1RvQnV0dG9uR3JvdXAiLCJidXR0b25zIiwiYnV0dG9uc01hcCIsImJ1dHRvbiIsImJ0biIsInJvdW5kZWQiLCJSb3V0ZXJMaW5rIiwiU3R5bGVkQmFja0J1dHRvbiIsInNob3dJbkRyYXdlciIsImNzc0Nsb3NlSWNvbiIsInByZXZpb3VzUGFnZVVybCIsImJhY2tCdXR0b25VcmwiLCJBY3Rpb25IZWFkZXIiLCJ0b2dnbGVGaWx0ZXIiLCJhY3Rpb25QZXJmb3JtZWQiLCJ0YWciLCJvbWl0QWN0aW9ucyIsImhpZGVBY3Rpb25IZWFkZXIiLCJzb3VyY2VBY3Rpb24iLCJhY3Rpb25CdXR0b25zIiwicmEiLCJyZXNvdXJjZUFjdGlvbnMiLCJjdXN0b21SZXNvdXJjZUJ1dHRvbnMiLCJpc0xpc3QiLCJsaXN0QWN0aW9uIiwiY3NzSXNSb290RmxleCIsImNzc0hlYWRlck1UIiwiY3NzQWN0aW9uc01CIiwiQ3NzSENvbXBvbmVudCIsIkgzIiwiQnV0dG9uR3JvdXAiLCJMYXlvdXRFbGVtZW50UmVuZGVyZXIiLCJsYXlvdXRFbGVtZW50IiwibGF5b3V0UHJvcHMiLCJwcm9wZXJ0eU5hbWVzIiwibGF5b3V0RWxlbWVudHMiLCJpbm5lckxheW91dEVsZW1lbnRzIiwib3RoZXIiLCJEZXNpZ25TeXN0ZW0iLCJEZXNpZ25TeXN0ZW0uTWVzc2FnZUJveCIsIkRlc2lnblN5c3RlbS5CYWRnZSIsIkRlc2lnblN5c3RlbS5Cb3giLCJQcm9wZXJ0eVR5cGUiLCJpbm5lckxheW91dEVsZW1lbnQiLCJOZXciLCJEcmF3ZXJDb250ZW50IiwibGF5b3V0IiwiZWRpdFByb3BlcnRpZXMiLCJEcmF3ZXJGb290ZXIiLCJzaG93UHJvcGVydGllcyIsImlzVGl0bGUiLCJSZWNvcmRJbkxpc3QiLCJyZWNvcmRGcm9tUHJvcHMiLCJpc0xvYWRpbmciLCJvblNlbGVjdCIsImhhbmRsZUFjdGlvbkNhbGxiYWNrIiwiYWN0aW9uUmVzcG9uc2UiLCJ0YXJnZXRUYWdOYW1lIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiYWN0aW9uUGFyYW1zIiwiVGFibGVSb3ciLCJUYWJsZUNlbGwiLCJsaXN0UHJvcGVydGllcyIsIlBsYWNlaG9sZGVyIiwiaGVpZ2h0IiwiU29ydExpbmsiLCJvcHBvc2l0ZURpcmVjdGlvbiIsInNvcnRlZEJ5SWNvbiIsIk5hdkxpbmsiLCJ3aXRoUm91dGVyIiwiUHJvcGVydHlIZWFkZXIiLCJpc01haW4iLCJpc1NvcnRhYmxlIiwiUmVjb3Jkc1RhYmxlSGVhZGVyIiwib25TZWxlY3RBbGwiLCJzZWxlY3RlZEFsbCIsIlRhYmxlSGVhZCIsIm1hcmdpbkxlZnQiLCJBY3Rpb25CdXR0b24iLCJmaXJzdENoaWxkIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiV3JhcHBlZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJOb1JlY29yZHNPcmlnaW5hbCIsImNhbkNyZWF0ZSIsIkluZm9Cb3giLCJOb1JlY29yZHMiLCJnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzIiwiYWN0aW9uc01lbW8iLCJTZWxlY3RlZFJlY29yZHMiLCJidWxrQnV0dG9ucyIsIlRhYmxlQ2FwdGlvbiIsIlRpdGxlIiwiUmVjb3Jkc1RhYmxlIiwiTG9hZGVyIiwicmVjb3Jkc0hhdmVCdWxrQWN0aW9uIiwiVGFibGUiLCJUYWJsZUJvZHkiLCJzZXRUYWciLCJoYW5kbGVBY3Rpb25QZXJmb3JtZWQiLCJoYW5kbGVQYWdpbmF0aW9uQ2hhbmdlIiwicGFnZU51bWJlciIsIlBhZ2luYXRpb24iLCJ3aXRoTm90aWNlIiwiQnVsa0RlbGV0ZSIsImNvdW50IiwiRm9ybWF0dGVkQnVsa0RlbGV0ZSIsIm5ldyIsImJ1bGtEZWxldGUiLCJCYXNlQWN0aW9uQ29tcG9uZW50IiwiZG9jdW1lbnRhdGlvbkxpbmsiLCJET0NTIiwiQWN0aW9uIiwiVHJhbnMiLCJFcnJvck1lc3NhZ2VCb3giLCJOb1Jlc291cmNlRXJyb3IiLCJOb0FjdGlvbkVycm9yIiwiTm9SZWNvcmRFcnJvciIsIlN0eWxlZFdyYXBwZXIiLCJ4eGwiLCJXcmFwcGVyIiwiRFJBV0VSX1BPUlRBTF9JRCIsIkRyYXdlclBvcnRhbCIsImRyYXdlckVsZW1lbnQiLCJzZXREcmF3ZXJFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVyV3JhcHBlciIsImNyZWF0ZUVsZW1lbnQiLCJEcmF3ZXJXcmFwcGVyIiwiVGhlbWVQcm92aWRlciIsIlRIRU1FIiwiRHJhd2VyIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic3R5bGUiLCJERUZBVUxUX0RSQVdFUl9XSURUSCIsImFkZCIsImNyZWF0ZVBvcnRhbCIsInBhcnNlUXVlcnkiLCJlbnRyeSIsIkZpbHRlckRyYXdlciIsImZpbHRlclByb3BlcnRpZXMiLCJzZXRGaWx0ZXIiLCJ1c2VSb3V0ZU1hdGNoIiwiaW5pdGlhbExvYWQiLCJ1c2VSZWYiLCJyZXNldEZpbHRlciIsImZpbHRlcmVkU2VhcmNoIiwiUmVjb3JkQWN0aW9uIiwiZmV0Y2hSZWNvcmQiLCJvbGRSZWNvcmQiLCJoYXNEaWZmZXJlbnRSZWNvcmQiLCJhY3Rpb25Gcm9tUmVzb3VyY2UiLCJjb250YWluZXJXaWR0aCIsIlJlc291cmNlQWN0aW9uIiwiQnVsa0FjdGlvbiIsImZldGNoUmVjb3JkcyIsInJlY29yZElkc1N0cmluZyIsIlBhZ2UiLCJjdXJyZW50UGFnZSIsInF1ZXJ5U3RyaW5nIiwiZ2V0QWN0aW9uIiwicmVzb3VyY2VBY3Rpb25NYXRjaCIsInJlY29yZEFjdGlvbk1hdGNoIiwiYnVsa0FjdGlvbk1hdGNoIiwiZmlsdGVyVmlzaWJsZSIsInNldEZpbGVyVmlzaWJsZSIsInF1ZXJ5SGFzRmlsdGVyIiwicmVhbEVuZEFjdGlvbiIsImxpc3RBY3Rpb25OYW1lIiwic2hvd0ZpbHRlciIsIkJhc2VBY3Rpb24iLCJHbG9iYWxTdHlsZSIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiQXBwIiwic2lkZWJhclZpc2libGUiLCJSZXNldCIsIk92ZXJsYXkiLCJOb3RpY2UiLCJTd2l0Y2giLCJSb3V0ZSIsIlJlc291cmNlIiwiQVNTRVRTX0lOSVRJQUxJWkUiLCJCUkFORElOR19JTklUSUFMSVpFIiwiREFTSEJPQVJEX0lOSVRJQUxJWkUiLCJMT0NBTEVfSU5JVElBTElaRSIsIlBBR0VTX0lOSVRJQUxJWkUiLCJQQVRIU19JTklUSUFMSVpFIiwiUkVTT1VSQ0VTX0lOSVRJQUxJWkUiLCJWRVJTSU9OU19JTklUSUFMSVpFIiwicmVzb3VyY2VzUmVkdWNlciIsInBhZ2VzUmVkdWNlciIsImxvY2FsZXNSZWR1Y2VyIiwibGFuZ3VhZ2UiLCJ0cmFuc2xhdGlvbnMiLCJicmFuZGluZ1JlZHVjZXIiLCJhc3NldHNSZWR1Y2VyIiwicGF0aHNSZWR1Y2VyIiwiREVGQVVMVF9QQVRIUyIsImRhc2hib2FyZFJlZHVjZXIiLCJzZXNzaW9uUmVkdWNlciIsInZlcnNpb25zUmVkdWNlciIsIm5vdGljZXNSZWR1Y2VyIiwicmVkdWNlciIsImNvbWJpbmVSZWR1Y2VycyIsImFzc2V0cyIsImxvY2FsZSIsImluaXRpYWxTdGF0ZSIsImNyZWF0ZVN0b3JlIiwiZW52IiwiTk9ERV9FTlYiLCJzdG9yZSIsInVzZSIsImluaXRSZWFjdEkxOG5leHQiLCJpbml0IiwibG5nIiwiaW50ZXJwb2xhdGlvbiIsImVzY2FwZVZhbHVlIiwiQXBwbGljYXRpb24iLCJQcm92aWRlciIsIkJyb3dzZXJSb3V0ZXIiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJBcHBDb21wb25lbnRzIiwiSG9va3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBQUE7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQSxJQUFJLE9BQU8sSUFBSSxVQUFVLE9BQU8sRUFBRTtBQUVsQztDQUNBLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztDQUM1QixFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUM7Q0FDakMsRUFBRSxJQUFJQSxXQUFTLENBQUM7Q0FDaEIsRUFBRSxJQUFJLE9BQU8sR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQztDQUMzRCxFQUFFLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksWUFBWSxDQUFDO0NBQ3hELEVBQUUsSUFBSSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsYUFBYSxJQUFJLGlCQUFpQixDQUFDO0NBQ3ZFLEVBQUUsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsV0FBVyxJQUFJLGVBQWUsQ0FBQztBQUNqRTtDQUNBLEVBQUUsU0FBUyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7Q0FDbkMsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7Q0FDcEMsTUFBTSxLQUFLLEVBQUUsS0FBSztDQUNsQixNQUFNLFVBQVUsRUFBRSxJQUFJO0NBQ3RCLE1BQU0sWUFBWSxFQUFFLElBQUk7Q0FDeEIsTUFBTSxRQUFRLEVBQUUsSUFBSTtDQUNwQixLQUFLLENBQUMsQ0FBQztDQUNQLElBQUksT0FBTyxHQUFHLENBQUMsR0FB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R0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7Q0FDL0UsRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7Q0FDL0UsRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxHQUFHO0NBQzNCLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRztDQUMzQixFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHO0NBQ3JELEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7Q0FDckQsRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRztDQUNyRCxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHO0NBQ3JELEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRztDQUMzQixFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRztDQUMvRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRztDQUMvRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHO0NBQ3JELEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7Q0FDckQsRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7Q0FDeEMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJO0NBQzVCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSTtDQUM1QixFQUFFLE1BQU0sRUFBRSxJQUFJO0NBQ2Q7Q0FDQSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM5QyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM5QyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzdELEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUc7Q0FDN0QsRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM3RCxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUc7Q0FDNUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzVFLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUc7Q0FDN0QsRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM3RCxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzdELEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM1RSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUc7Q0FDNUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHO0NBQy9CLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzlDLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM1RSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUc7Q0FDNUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM3RCxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzdELEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzlDLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzlDLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzlDLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHO0NBQzlDLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUc7Q0FDN0QsRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM3RCxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM5QyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUM5QyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztDQUMzRixFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFB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
